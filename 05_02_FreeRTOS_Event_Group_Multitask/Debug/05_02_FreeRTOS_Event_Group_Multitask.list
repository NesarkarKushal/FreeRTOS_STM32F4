
05_02_FreeRTOS_Event_Group_Multitask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf8  08003bf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c00  08003c00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd8  20000074  08003c7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000404c  08003c7c  0002404c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b59b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000205d  00000000  00000000  0002b63f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022249  00000000  00000000  0002e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008545  00000000  00000000  00050811  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c80ce  00000000  00000000  00058d56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120e24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  00120ea0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ac4 	.word	0x08003ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003ac4 	.word	0x08003ac4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000090 	.word	0x20000090
 8000500:	200000e4 	.word	0x200000e4

08000504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d013      	beq.n	8000544 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800051c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	e000      	b.n	8000530 <ITM_SendChar+0x2c>
    {
      __NOP();
 800052e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_write>:
#include "semphr.h"
#include "event_groups.h"
#include <stdio.h>

int _write(int file,char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
	int i=0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x2a>
	ITM_SendChar((*ptr++));
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc7 	bl	8000504 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x16>
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <TaskA>:
EventGroupHandle_t Eventhandle;
EventBits_t var1;


void TaskA(void const * argument)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	EventBits_t uxBits;

  for(;;)
  {
		uxBits = xEventGroupSetBits(Eventhandle, BIT_4 | BIT_7);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <TaskA+0x20>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2190      	movs	r1, #144	; 0x90
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fad6 	bl	8001b50 <xEventGroupSetBits>
 80005a4:	60f8      	str	r0, [r7, #12]
		vTaskDelay(5000);
 80005a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80005aa:	f001 fdbf 	bl	800212c <vTaskDelay>
		uxBits = xEventGroupSetBits(Eventhandle, BIT_4 | BIT_7);
 80005ae:	e7f3      	b.n	8000598 <TaskA+0x8>
 80005b0:	20004040 	.word	0x20004040

080005b4 <TaskB>:
  }
}

void TaskB(void const * argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  var1 = xEventGroupWaitBits( Eventhandle,BIT_0 | BIT_4 | BIT_7,pdTRUE,pdTRUE,100 );
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <TaskB+0xb0>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	2191      	movs	r1, #145	; 0x91
 80005ca:	f001 f9f7 	bl	80019bc <xEventGroupWaitBits>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <TaskB+0xb4>)
 80005d2:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
 80005d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d8:	f001 fda8 	bl	800212c <vTaskDelay>

	if( ( var1 & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <TaskB+0xb4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f003 0311 	and.w	r3, r3, #17
 80005e4:	2b11      	cmp	r3, #17
 80005e6:	d11b      	bne.n	8000620 <TaskB+0x6c>
	 {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80005ee:	481f      	ldr	r0, [pc, #124]	; (800066c <TaskB+0xb8>)
 80005f0:	f000 fda8 	bl	8001144 <HAL_GPIO_WritePin>
			  vTaskDelay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f8:	f001 fd98 	bl	800212c <vTaskDelay>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000602:	481a      	ldr	r0, [pc, #104]	; (800066c <TaskB+0xb8>)
 8000604:	f000 fd9e 	bl	8001144 <HAL_GPIO_WritePin>
			  vTaskDelay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f001 fd8e 	bl	800212c <vTaskDelay>

			  printf("Task B : Both Bits were SET\n");
 8000610:	4817      	ldr	r0, [pc, #92]	; (8000670 <TaskB+0xbc>)
 8000612:	f002 fe4b 	bl	80032ac <puts>
			  vTaskDelay(1000);
 8000616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061a:	f001 fd87 	bl	800212c <vTaskDelay>
 800061e:	e7cd      	b.n	80005bc <TaskB+0x8>
	 }
	  else if( ( var1 & BIT_0 ) != 0 )
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <TaskB+0xb4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0c7      	beq.n	80005bc <TaskB+0x8>
	  {

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <TaskB+0xb8>)
 8000634:	f000 fd86 	bl	8001144 <HAL_GPIO_WritePin>
		  vTaskDelay(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f001 fd76 	bl	800212c <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	4809      	ldr	r0, [pc, #36]	; (800066c <TaskB+0xb8>)
 8000648:	f000 fd7c 	bl	8001144 <HAL_GPIO_WritePin>
		  vTaskDelay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f001 fd6c 	bl	800212c <vTaskDelay>
		  printf("Task B :Bit 0 was SET\n");
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <TaskB+0xc0>)
 8000656:	f002 fe29 	bl	80032ac <puts>
		  vTaskDelay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065e:	f001 fd65 	bl	800212c <vTaskDelay>
	  var1 = xEventGroupWaitBits( Eventhandle,BIT_0 | BIT_4 | BIT_7,pdTRUE,pdTRUE,100 );
 8000662:	e7ab      	b.n	80005bc <TaskB+0x8>
 8000664:	20004040 	.word	0x20004040
 8000668:	2000403c 	.word	0x2000403c
 800066c:	40020c00 	.word	0x40020c00
 8000670:	08003adc 	.word	0x08003adc
 8000674:	08003af8 	.word	0x08003af8

08000678 <TaskC>:
//	  }
  }
}

void TaskC(void const * argument)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  var1 = xEventGroupWaitBits( Eventhandle,BIT_0 | BIT_4| BIT_7 ,pdTRUE,pdTRUE,100 );
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <TaskC+0xa8>)
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	2201      	movs	r2, #1
 800068c:	2191      	movs	r1, #145	; 0x91
 800068e:	f001 f995 	bl	80019bc <xEventGroupWaitBits>
 8000692:	4602      	mov	r2, r0
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <TaskC+0xac>)
 8000696:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000);
 8000698:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800069c:	f001 fd46 	bl	800212c <vTaskDelay>
		 if( ( var1 & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <TaskC+0xac>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0311 	and.w	r3, r3, #17
 80006a8:	2b11      	cmp	r3, #17
 80006aa:	d11b      	bne.n	80006e4 <TaskC+0x6c>
		 {
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80006b2:	481d      	ldr	r0, [pc, #116]	; (8000728 <TaskC+0xb0>)
 80006b4:	f000 fd46 	bl	8001144 <HAL_GPIO_WritePin>
			 vTaskDelay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 fd36 	bl	800212c <vTaskDelay>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80006c6:	4818      	ldr	r0, [pc, #96]	; (8000728 <TaskC+0xb0>)
 80006c8:	f000 fd3c 	bl	8001144 <HAL_GPIO_WritePin>
			 vTaskDelay(1000);
 80006cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d0:	f001 fd2c 	bl	800212c <vTaskDelay>
			 printf("Task c: Both Bits were SET\n");
 80006d4:	4815      	ldr	r0, [pc, #84]	; (800072c <TaskC+0xb4>)
 80006d6:	f002 fde9 	bl	80032ac <puts>
			 vTaskDelay(1000);
 80006da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006de:	f001 fd25 	bl	800212c <vTaskDelay>
 80006e2:	e7cd      	b.n	8000680 <TaskC+0x8>

		 }
		 else if( ( var1 & BIT_4 ) != 0 )
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <TaskC+0xac>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0c7      	beq.n	8000680 <TaskC+0x8>
	  {
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <TaskC+0xb0>)
 80006f8:	f000 fd24 	bl	8001144 <HAL_GPIO_WritePin>
			 vTaskDelay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f001 fd14 	bl	800212c <vTaskDelay>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <TaskC+0xb0>)
 800070c:	f000 fd1a 	bl	8001144 <HAL_GPIO_WritePin>
			 vTaskDelay(1000);
 8000710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000714:	f001 fd0a 	bl	800212c <vTaskDelay>
			 printf("Task c: Bit 4 was SET\n");
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <TaskC+0xb8>)
 800071a:	f002 fdc7 	bl	80032ac <puts>
	  var1 = xEventGroupWaitBits( Eventhandle,BIT_0 | BIT_4| BIT_7 ,pdTRUE,pdTRUE,100 );
 800071e:	e7af      	b.n	8000680 <TaskC+0x8>
 8000720:	20004040 	.word	0x20004040
 8000724:	2000403c 	.word	0x2000403c
 8000728:	40020c00 	.word	0x40020c00
 800072c:	08003b10 	.word	0x08003b10
 8000730:	08003b2c 	.word	0x08003b2c

08000734 <main>:
//  }
//}


int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af02      	add	r7, sp, #8

  HAL_Init();
 800073a:	f000 fa11 	bl	8000b60 <HAL_Init>

  SystemClock_Config();
 800073e:	f000 f841 	bl	80007c4 <SystemClock_Config>

  MX_GPIO_Init();
 8000742:	f000 f89d 	bl	8000880 <MX_GPIO_Init>

  Eventhandle=xEventGroupCreate();
 8000746:	f001 f91f 	bl	8001988 <xEventGroupCreate>
 800074a:	4602      	mov	r2, r0
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x70>)
 800074e:	601a      	str	r2, [r3, #0]
  if(Eventhandle==NULL)
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <main+0x70>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d103      	bne.n	8000760 <main+0x2c>
  {
	  printf("Event is not created\n");
 8000758:	4813      	ldr	r0, [pc, #76]	; (80007a8 <main+0x74>)
 800075a:	f002 fda7 	bl	80032ac <puts>
 800075e:	e01d      	b.n	800079c <main+0x68>
  }
  else
  {
	   xTaskCreate(TaskA," Sender",128,NULL,1,NULL);
 8000760:	2300      	movs	r3, #0
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	2301      	movs	r3, #1
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2300      	movs	r3, #0
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	490f      	ldr	r1, [pc, #60]	; (80007ac <main+0x78>)
 800076e:	4810      	ldr	r0, [pc, #64]	; (80007b0 <main+0x7c>)
 8000770:	f001 fba7 	bl	8001ec2 <xTaskCreate>
	   xTaskCreate(TaskB," Receiver1",128,NULL,1,NULL);
 8000774:	2300      	movs	r3, #0
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	2301      	movs	r3, #1
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2300      	movs	r3, #0
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <main+0x80>)
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <main+0x84>)
 8000784:	f001 fb9d 	bl	8001ec2 <xTaskCreate>
	   xTaskCreate(TaskC," Receiver2",128,NULL,1,NULL);
 8000788:	2300      	movs	r3, #0
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	2301      	movs	r3, #1
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2300      	movs	r3, #0
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	4909      	ldr	r1, [pc, #36]	; (80007bc <main+0x88>)
 8000796:	480a      	ldr	r0, [pc, #40]	; (80007c0 <main+0x8c>)
 8000798:	f001 fb93 	bl	8001ec2 <xTaskCreate>
//	   xTaskCreate(TaskD," Receiver3",128,NULL,1,NULL);


  }

  vTaskStartScheduler();
 800079c:	f001 fcfa 	bl	8002194 <vTaskStartScheduler>
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x6c>
 80007a2:	bf00      	nop
 80007a4:	20004040 	.word	0x20004040
 80007a8:	08003b44 	.word	0x08003b44
 80007ac:	08003b5c 	.word	0x08003b5c
 80007b0:	08000591 	.word	0x08000591
 80007b4:	08003b64 	.word	0x08003b64
 80007b8:	080005b5 	.word	0x080005b5
 80007bc:	08003b70 	.word	0x08003b70
 80007c0:	08000679 	.word	0x08000679

080007c4 <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fd06 	bl	80031e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <SystemClock_Config+0xb4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <SystemClock_Config+0xb4>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <SystemClock_Config+0xb4>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <SystemClock_Config+0xb8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <SystemClock_Config+0xb8>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <SystemClock_Config+0xb8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fc9f 	bl	8001178 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000840:	f000 f870 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fefa 	bl	8001658 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800086a:	f000 f85b 	bl	8000924 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	; 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <MX_GPIO_Init+0x9c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a1f      	ldr	r2, [pc, #124]	; (800091c <MX_GPIO_Init+0x9c>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_GPIO_Init+0x9c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_GPIO_Init+0x9c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_GPIO_Init+0x9c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_GPIO_Init+0x9c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_GPIO_Init+0x9c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <MX_GPIO_Init+0x9c>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_GPIO_Init+0x9c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0xa0>)
 80008f2:	f000 fc27 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80008f6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0xa0>)
 8000910:	f000 fa7e 	bl	8000e10 <HAL_GPIO_Init>

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020c00 	.word	0x40020c00

08000924 <Error_Handler>:


void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_MspInit+0x54>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a11      	ldr	r2, [pc, #68]	; (8000988 <HAL_MspInit+0x54>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_MspInit+0x54>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_MspInit+0x54>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_MspInit+0x54>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_MspInit+0x54>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	210f      	movs	r1, #15
 8000976:	f06f 0001 	mvn.w	r0, #1
 800097a:	f000 fa20 	bl	8000dbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f922 	bl	8000c04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009c0:	f001 ff6e 	bl	80028a0 <xTaskGetSchedulerState>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d001      	beq.n	80009ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ca:	f002 f9bd 	bl	8002d48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e00a      	b.n	80009fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009e4:	f3af 8000 	nop.w
 80009e8:	4601      	mov	r1, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	60ba      	str	r2, [r7, #8]
 80009f0:	b2ca      	uxtb	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbf0      	blt.n	80009e4 <_read+0x12>
	}

return len;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	return -1;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a34:	605a      	str	r2, [r3, #4]
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_isatty>:

int _isatty(int file)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	return 1;
 8000a4c:	2301      	movs	r3, #1
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f002 fb74 	bl	8003190 <__errno>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	230c      	movs	r3, #12
 8000aac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20020000 	.word	0x20020000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	200002e4 	.word	0x200002e4
 8000adc:	20004050 	.word	0x20004050

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <SystemInit+0x28>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <SystemInit+0x28>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SystemInit+0x28>)
 8000af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afa:	609a      	str	r2, [r3, #8]
#endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b12:	e003      	b.n	8000b1c <LoopCopyDataInit>

08000b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b1a:	3104      	adds	r1, #4

08000b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b24:	d3f6      	bcc.n	8000b14 <CopyDataInit>
  ldr  r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b28:	e002      	b.n	8000b30 <LoopFillZerobss>

08000b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b2c:	f842 3b04 	str.w	r3, [r2], #4

08000b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b34:	d3f9      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b36:	f7ff ffd3 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f002 fb2f 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fdf9 	bl	8000734 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b48:	08003c08 	.word	0x08003c08
  ldr  r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b50:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b54:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b58:	2000404c 	.word	0x2000404c

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>
	...

08000b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_Init+0x40>)
 8000b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_Init+0x40>)
 8000b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_Init+0x40>)
 8000b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f90d 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fece 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023c00 	.word	0x40023c00

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f917 	bl	8000df6 <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f8ed 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20004044 	.word	0x20004044

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20004044 	.word	0x20004044

08000c44 <__NVIC_SetPriorityGrouping>:
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_SetPriority>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff47 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff5c 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffb0 	bl	8000d64 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e16b      	b.n	8001104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 815a 	bne.w	80010fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d00b      	beq.n	8000e6a <HAL_GPIO_Init+0x5a>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5e:	2b11      	cmp	r3, #17
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d130      	bne.n	8000ecc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	f003 0201 	and.w	r2, r3, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0xfc>
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b12      	cmp	r3, #18
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80b4 	beq.w	80010fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <HAL_GPIO_Init+0x308>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a5e      	ldr	r2, [pc, #376]	; (8001118 <HAL_GPIO_Init+0x308>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b5c      	ldr	r3, [pc, #368]	; (8001118 <HAL_GPIO_Init+0x308>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb2:	4a5a      	ldr	r2, [pc, #360]	; (800111c <HAL_GPIO_Init+0x30c>)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <HAL_GPIO_Init+0x310>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d02b      	beq.n	8001036 <HAL_GPIO_Init+0x226>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a50      	ldr	r2, [pc, #320]	; (8001124 <HAL_GPIO_Init+0x314>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x222>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <HAL_GPIO_Init+0x318>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x21e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4e      	ldr	r2, [pc, #312]	; (800112c <HAL_GPIO_Init+0x31c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x21a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	; (8001130 <HAL_GPIO_Init+0x320>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x216>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4c      	ldr	r2, [pc, #304]	; (8001134 <HAL_GPIO_Init+0x324>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x212>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4b      	ldr	r2, [pc, #300]	; (8001138 <HAL_GPIO_Init+0x328>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x20e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4a      	ldr	r2, [pc, #296]	; (800113c <HAL_GPIO_Init+0x32c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x20a>
 8001016:	2307      	movs	r3, #7
 8001018:	e00e      	b.n	8001038 <HAL_GPIO_Init+0x228>
 800101a:	2308      	movs	r3, #8
 800101c:	e00c      	b.n	8001038 <HAL_GPIO_Init+0x228>
 800101e:	2306      	movs	r3, #6
 8001020:	e00a      	b.n	8001038 <HAL_GPIO_Init+0x228>
 8001022:	2305      	movs	r3, #5
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x228>
 8001026:	2304      	movs	r3, #4
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x228>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x228>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x228>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x228>
 8001036:	2300      	movs	r3, #0
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001048:	4934      	ldr	r1, [pc, #208]	; (800111c <HAL_GPIO_Init+0x30c>)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_GPIO_Init+0x330>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107a:	4a31      	ldr	r2, [pc, #196]	; (8001140 <HAL_GPIO_Init+0x330>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x330>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010a4:	4a26      	ldr	r2, [pc, #152]	; (8001140 <HAL_GPIO_Init+0x330>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_GPIO_Init+0x330>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_GPIO_Init+0x330>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_GPIO_Init+0x330>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f8:	4a11      	ldr	r2, [pc, #68]	; (8001140 <HAL_GPIO_Init+0x330>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	f67f ae90 	bls.w	8000e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800110c:	bf00      	nop
 800110e:	3724      	adds	r7, #36	; 0x24
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40023800 	.word	0x40023800
 800111c:	40013800 	.word	0x40013800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e25b      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d075      	beq.n	8001282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001196:	4ba3      	ldr	r3, [pc, #652]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d00c      	beq.n	80011bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a2:	4ba0      	ldr	r3, [pc, #640]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d112      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4b9d      	ldr	r3, [pc, #628]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ba:	d10b      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	4b99      	ldr	r3, [pc, #612]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d05b      	beq.n	8001280 <HAL_RCC_OscConfig+0x108>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d157      	bne.n	8001280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e236      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d106      	bne.n	80011ec <HAL_RCC_OscConfig+0x74>
 80011de:	4b91      	ldr	r3, [pc, #580]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a90      	ldr	r2, [pc, #576]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e01d      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x98>
 80011f6:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a8a      	ldr	r2, [pc, #552]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a87      	ldr	r2, [pc, #540]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 8001210:	4b84      	ldr	r3, [pc, #528]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a83      	ldr	r2, [pc, #524]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a80      	ldr	r2, [pc, #512]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d013      	beq.n	8001258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fcfc 	bl	8000c2c <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcf8 	bl	8000c2c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1fb      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0xc0>
 8001256:	e014      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fce8 	bl	8000c2c <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fce4 	bl	8000c2c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1e7      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	4b6c      	ldr	r3, [pc, #432]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0xe8>
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d063      	beq.n	8001356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129a:	4b62      	ldr	r3, [pc, #392]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d11c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d116      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d001      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e1bb      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4952      	ldr	r1, [pc, #328]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	e03a      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <HAL_RCC_OscConfig+0x2b0>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fc9d 	bl	8000c2c <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fc99 	bl	8000c2c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e19c      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4940      	ldr	r1, [pc, #256]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
 8001328:	e015      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_RCC_OscConfig+0x2b0>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fc7c 	bl	8000c2c <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fc78 	bl	8000c2c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e17b      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d030      	beq.n	80013c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_RCC_OscConfig+0x2b4>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff fc5c 	bl	8000c2c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff fc58 	bl	8000c2c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e15b      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x200>
 8001396:	e015      	b.n	80013c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x2b4>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fc45 	bl	8000c2c <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc41 	bl	8000c2c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e144      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a0 	beq.w	8001512 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d121      	bne.n	8001452 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff fc07 	bl	8000c2c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	e011      	b.n	8001446 <HAL_RCC_OscConfig+0x2ce>
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	42470000 	.word	0x42470000
 800142c:	42470e80 	.word	0x42470e80
 8001430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001434:	f7ff fbfa 	bl	8000c2c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0fd      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x4d4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x2f0>
 800145a:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	4a7c      	ldr	r2, [pc, #496]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6713      	str	r3, [r2, #112]	; 0x70
 8001466:	e01c      	b.n	80014a2 <HAL_RCC_OscConfig+0x32a>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d10c      	bne.n	800148a <HAL_RCC_OscConfig+0x312>
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a76      	ldr	r2, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	4b74      	ldr	r3, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a73      	ldr	r2, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0x32a>
 800148a:	4b71      	ldr	r3, [pc, #452]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a70      	ldr	r2, [pc, #448]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
 8001496:	4b6e      	ldr	r3, [pc, #440]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149a:	4a6d      	ldr	r2, [pc, #436]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d015      	beq.n	80014d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014aa:	f7ff fbbf 	bl	8000c2c <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fbbb 	bl	8000c2c <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0bc      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	4b61      	ldr	r3, [pc, #388]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ee      	beq.n	80014b2 <HAL_RCC_OscConfig+0x33a>
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fba9 	bl	8000c2c <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fba5 	bl	8000c2c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0a6      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a51      	ldr	r2, [pc, #324]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8092 	beq.w	8001640 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d05c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d141      	bne.n	80015b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b48      	ldr	r3, [pc, #288]	; (8001654 <HAL_RCC_OscConfig+0x4dc>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb79 	bl	8000c2c <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fb75 	bl	8000c2c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e078      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	4933      	ldr	r1, [pc, #204]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x4dc>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb4e 	bl	8000c2c <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb4a 	bl	8000c2c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e04d      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x41c>
 80015b2:	e045      	b.n	8001640 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x4dc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb37 	bl	8000c2c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff fb33 	bl	8000c2c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e036      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x44a>
 80015e0:	e02e      	b.n	8001640 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e029      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d115      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800161c:	4293      	cmp	r3, r2
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000
 8001650:	40023800 	.word	0x40023800
 8001654:	42470060 	.word	0x42470060

08001658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0cc      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d90c      	bls.n	8001694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0b8      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	494d      	ldr	r1, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d044      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d119      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d003      	beq.n	8001716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	2b03      	cmp	r3, #3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e06f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e067      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4934      	ldr	r1, [pc, #208]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff fa70 	bl	8000c2c <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fa6c 	bl	8000c2c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d20c      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e032      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4916      	ldr	r1, [pc, #88]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 f821 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017e2:	4601      	mov	r1, r0
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	fa21 f303 	lsr.w	r3, r1, r3
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f9d0 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00
 8001814:	40023800 	.word	0x40023800
 8001818:	08003b84 	.word	0x08003b84
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183a:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d007      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x32>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d008      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x38>
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 808d 	bne.w	800196a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001852:	60bb      	str	r3, [r7, #8]
       break;
 8001854:	e08c      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001856:	4b4b      	ldr	r3, [pc, #300]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 8001858:	60bb      	str	r3, [r7, #8]
      break;
 800185a:	e089      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d023      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	ea03 0501 	and.w	r5, r3, r1
 8001888:	ea04 0602 	and.w	r6, r4, r2
 800188c:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800188e:	fb02 f106 	mul.w	r1, r2, r6
 8001892:	2200      	movs	r2, #0
 8001894:	fb02 f205 	mul.w	r2, r2, r5
 8001898:	440a      	add	r2, r1
 800189a:	493a      	ldr	r1, [pc, #232]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800189c:	fba5 0101 	umull	r0, r1, r5, r1
 80018a0:	1853      	adds	r3, r2, r1
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f04f 0400 	mov.w	r4, #0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4623      	mov	r3, r4
 80018ae:	f7fe fc8f 	bl	80001d0 <__aeabi_uldivmod>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e049      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	f04f 0400 	mov.w	r4, #0
 80018c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	ea03 0501 	and.w	r5, r3, r1
 80018d0:	ea04 0602 	and.w	r6, r4, r2
 80018d4:	4629      	mov	r1, r5
 80018d6:	4632      	mov	r2, r6
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	0154      	lsls	r4, r2, #5
 80018e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	4619      	mov	r1, r3
 80018ea:	4622      	mov	r2, r4
 80018ec:	1b49      	subs	r1, r1, r5
 80018ee:	eb62 0206 	sbc.w	r2, r2, r6
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	f04f 0400 	mov.w	r4, #0
 80018fa:	0194      	lsls	r4, r2, #6
 80018fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001900:	018b      	lsls	r3, r1, #6
 8001902:	1a5b      	subs	r3, r3, r1
 8001904:	eb64 0402 	sbc.w	r4, r4, r2
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	00e2      	lsls	r2, r4, #3
 8001912:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001916:	00d9      	lsls	r1, r3, #3
 8001918:	460b      	mov	r3, r1
 800191a:	4614      	mov	r4, r2
 800191c:	195b      	adds	r3, r3, r5
 800191e:	eb44 0406 	adc.w	r4, r4, r6
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	02a2      	lsls	r2, r4, #10
 800192c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001930:	0299      	lsls	r1, r3, #10
 8001932:	460b      	mov	r3, r1
 8001934:	4614      	mov	r4, r2
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f04f 0400 	mov.w	r4, #0
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	f7fe fc44 	bl	80001d0 <__aeabi_uldivmod>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	3301      	adds	r3, #1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	60bb      	str	r3, [r7, #8]
      break;
 8001968:	e002      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetSysClockFreq+0x15c>)
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001970:	68bb      	ldr	r3, [r7, #8]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	017d7840 	.word	0x017d7840

08001988 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800198e:	201c      	movs	r0, #28
 8001990:	f001 fa28 	bl	8002de4 <pvPortMalloc>
 8001994:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00a      	beq.n	80019b2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3304      	adds	r3, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f97d 	bl	8001ca6 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80019b2:	687b      	ldr	r3, [r7, #4]
	}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	; 0x40
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	e7fe      	b.n	80019ee <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <xEventGroupWaitBits+0x52>
 80019fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fe:	f383 8811 	msr	BASEPRI, r3
 8001a02:	f3bf 8f6f 	isb	sy
 8001a06:	f3bf 8f4f 	dsb	sy
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	e7fe      	b.n	8001a0c <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <xEventGroupWaitBits+0x6c>
 8001a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a18:	f383 8811 	msr	BASEPRI, r3
 8001a1c:	f3bf 8f6f 	isb	sy
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	e7fe      	b.n	8001a26 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a28:	f000 ff3a 	bl	80028a0 <xTaskGetSchedulerState>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <xEventGroupWaitBits+0x7c>
 8001a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <xEventGroupWaitBits+0x80>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <xEventGroupWaitBits+0x82>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <xEventGroupWaitBits+0x9a>
 8001a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	f3bf 8f6f 	isb	sy
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e7fe      	b.n	8001a54 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8001a56:	f000 fbfb 	bl	8002250 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a66:	f000 f8fc 	bl	8001c62 <prvTestWaitCondition>
 8001a6a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8001a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00e      	beq.n	8001a90 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d028      	beq.n	8001ad2 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	401a      	ands	r2, r3
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e020      	b.n	8001ad2 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8001a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d104      	bne.n	8001aa0 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a9e:	e018      	b.n	8001ad2 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8001ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aba:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	1d18      	adds	r0, r3, #4
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f000 fd7d 	bl	80025c8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8001ad2:	f000 fbcb 	bl	800226c <xTaskResumeAll>
 8001ad6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8001ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d031      	beq.n	8001b42 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <xEventGroupWaitBits+0x190>)
 8001ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8001af4:	f000 fef2 	bl	80028dc <uxTaskResetEventItemValue>
 8001af8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8001afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d11a      	bne.n	8001b3a <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8001b04:	f001 f892 	bl	8002c2c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b14:	f000 f8a5 	bl	8001c62 <prvTestWaitCondition>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b30:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8001b36:	f001 f8a7 	bl	8002c88 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8001b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3740      	adds	r7, #64	; 0x40
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	e000ed04 	.word	0xe000ed04

08001b50 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	; 0x38
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <xEventGroupSetBits+0x30>
 8001b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b70:	f383 8811 	msr	BASEPRI, r3
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	f3bf 8f4f 	dsb	sy
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	e7fe      	b.n	8001b7e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <xEventGroupSetBits+0x4e>
 8001b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8e:	f383 8811 	msr	BASEPRI, r3
 8001b92:	f3bf 8f6f 	isb	sy
 8001b96:	f3bf 8f4f 	dsb	sy
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e7fe      	b.n	8001b9c <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8001baa:	f000 fb51 	bl	8002250 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8001bc0:	e03c      	b.n	8001c3c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bd8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001be0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d108      	bne.n	8001bfe <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00b      	beq.n	8001c10 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfc:	e008      	b.n	8001c10 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d101      	bne.n	8001c10 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8001c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c30:	4619      	mov	r1, r3
 8001c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c34:	f000 fd02 	bl	800263c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8001c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1be      	bne.n	8001bc2 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8001c52:	f000 fb0b 	bl	800226c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	681b      	ldr	r3, [r3, #0]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3738      	adds	r7, #56	; 0x38
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8001c62:	b480      	push	{r7}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d107      	bne.n	8001c88 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e007      	b.n	8001c98 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d101      	bne.n	8001c98 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8001c94:	2301      	movs	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8001c98:	697b      	ldr	r3, [r7, #20]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f103 0208 	add.w	r2, r3, #8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f103 0208 	add.w	r2, r3, #8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f103 0208 	add.w	r2, r3, #8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	601a      	str	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5e:	d103      	bne.n	8001d68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e00c      	b.n	8001d82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e002      	b.n	8001d76 <vListInsert+0x2e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d2f6      	bcs.n	8001d70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6892      	ldr	r2, [r2, #8]
 8001dd0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6852      	ldr	r2, [r2, #4]
 8001dda:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d103      	bne.n	8001dee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08e      	sub	sp, #56	; 0x38
 8001e12:	af04      	add	r7, sp, #16
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <xTaskCreateStatic+0x28>
 8001e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	e7fe      	b.n	8001e34 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <xTaskCreateStatic+0x42>
 8001e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e40:	f383 8811 	msr	BASEPRI, r3
 8001e44:	f3bf 8f6f 	isb	sy
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e7fe      	b.n	8001e4e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e50:	2354      	movs	r3, #84	; 0x54
 8001e52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b54      	cmp	r3, #84	; 0x54
 8001e58:	d009      	beq.n	8001e6e <xTaskCreateStatic+0x60>
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	e7fe      	b.n	8001e6c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001e6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01e      	beq.n	8001eb4 <xTaskCreateStatic+0xa6>
 8001e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9303      	str	r3, [sp, #12]
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f850 	bl	8001f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eae:	f000 f8d3 	bl	8002058 <prvAddNewTaskToReadyList>
 8001eb2:	e001      	b.n	8001eb8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001eb8:	697b      	ldr	r3, [r7, #20]
	}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08c      	sub	sp, #48	; 0x30
 8001ec6:	af04      	add	r7, sp, #16
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 ff84 	bl	8002de4 <pvPortMalloc>
 8001edc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ee4:	2054      	movs	r0, #84	; 0x54
 8001ee6:	f000 ff7d 	bl	8002de4 <pvPortMalloc>
 8001eea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef8:	e005      	b.n	8001f06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f001 f834 	bl	8002f68 <vPortFree>
 8001f00:	e001      	b.n	8001f06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d017      	beq.n	8001f3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	2300      	movs	r3, #0
 8001f18:	9303      	str	r3, [sp, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	9302      	str	r3, [sp, #8]
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f80e 	bl	8001f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f30:	69f8      	ldr	r0, [r7, #28]
 8001f32:	f000 f891 	bl	8002058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	e002      	b.n	8001f42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f42:	69bb      	ldr	r3, [r7, #24]
	}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f64:	3b01      	subs	r3, #1
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f023 0307 	bic.w	r3, r3, #7
 8001f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <prvInitialiseNewTask+0x46>
 8001f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f82:	f383 8811 	msr	BASEPRI, r3
 8001f86:	f3bf 8f6f 	isb	sy
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e7fe      	b.n	8001f90 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01f      	beq.n	8001fd8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	e012      	b.n	8001fc4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	7819      	ldrb	r1, [r3, #0]
 8001fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	3334      	adds	r3, #52	; 0x34
 8001fae:	460a      	mov	r2, r1
 8001fb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	d9e9      	bls.n	8001f9e <prvInitialiseNewTask+0x52>
 8001fca:	e000      	b.n	8001fce <prvInitialiseNewTask+0x82>
			{
				break;
 8001fcc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd6:	e003      	b.n	8001fe0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d901      	bls.n	8001fea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffe:	3304      	adds	r3, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe70 	bl	8001ce6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002008:	3318      	adds	r3, #24
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fe6b 	bl	8001ce6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002014:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	f1c3 0207 	rsb	r2, r3, #7
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	2200      	movs	r2, #0
 800202a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	68f9      	ldr	r1, [r7, #12]
 8002038:	69b8      	ldr	r0, [r7, #24]
 800203a:	f000 fccd 	bl	80029d8 <pxPortInitialiseStack>
 800203e:	4602      	mov	r2, r0
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800204e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002050:	bf00      	nop
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002060:	f000 fde4 	bl	8002c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <prvAddNewTaskToReadyList+0xb8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a29      	ldr	r2, [pc, #164]	; (8002110 <prvAddNewTaskToReadyList+0xb8>)
 800206c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <prvAddNewTaskToReadyList+0xbc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002076:	4a27      	ldr	r2, [pc, #156]	; (8002114 <prvAddNewTaskToReadyList+0xbc>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800207c:	4b24      	ldr	r3, [pc, #144]	; (8002110 <prvAddNewTaskToReadyList+0xb8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d110      	bne.n	80020a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002084:	f000 fb52 	bl	800272c <prvInitialiseTaskLists>
 8002088:	e00d      	b.n	80020a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <prvAddNewTaskToReadyList+0xc0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <prvAddNewTaskToReadyList+0xbc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	429a      	cmp	r2, r3
 800209e:	d802      	bhi.n	80020a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80020a0:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <prvAddNewTaskToReadyList+0xbc>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <prvAddNewTaskToReadyList+0xc4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <prvAddNewTaskToReadyList+0xc4>)
 80020ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	2201      	movs	r2, #1
 80020b6:	409a      	lsls	r2, r3
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <prvAddNewTaskToReadyList+0xc8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4313      	orrs	r3, r2
 80020be:	4a18      	ldr	r2, [pc, #96]	; (8002120 <prvAddNewTaskToReadyList+0xc8>)
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4a15      	ldr	r2, [pc, #84]	; (8002124 <prvAddNewTaskToReadyList+0xcc>)
 80020d0:	441a      	add	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f7ff fe11 	bl	8001d00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80020de:	f000 fdd3 	bl	8002c88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <prvAddNewTaskToReadyList+0xc0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00e      	beq.n	8002108 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <prvAddNewTaskToReadyList+0xbc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <prvAddNewTaskToReadyList+0xd0>)
 80020fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	f3bf 8f4f 	dsb	sy
 8002104:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200003e8 	.word	0x200003e8
 8002114:	200002e8 	.word	0x200002e8
 8002118:	200003f4 	.word	0x200003f4
 800211c:	20000404 	.word	0x20000404
 8002120:	200003f0 	.word	0x200003f0
 8002124:	200002ec 	.word	0x200002ec
 8002128:	e000ed04 	.word	0xe000ed04

0800212c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <vTaskDelay+0x60>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <vTaskDelay+0x2e>
 8002146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214a:	f383 8811 	msr	BASEPRI, r3
 800214e:	f3bf 8f6f 	isb	sy
 8002152:	f3bf 8f4f 	dsb	sy
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	e7fe      	b.n	8002158 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800215a:	f000 f879 	bl	8002250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800215e:	2100      	movs	r1, #0
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fbd3 	bl	800290c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002166:	f000 f881 	bl	800226c <xTaskResumeAll>
 800216a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <vTaskDelay+0x64>)
 8002174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000410 	.word	0x20000410
 8002190:	e000ed04 	.word	0xe000ed04

08002194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80021a2:	463a      	mov	r2, r7
 80021a4:	1d39      	adds	r1, r7, #4
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f990 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	9202      	str	r2, [sp, #8]
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	460a      	mov	r2, r1
 80021c2:	491d      	ldr	r1, [pc, #116]	; (8002238 <vTaskStartScheduler+0xa4>)
 80021c4:	481d      	ldr	r0, [pc, #116]	; (800223c <vTaskStartScheduler+0xa8>)
 80021c6:	f7ff fe22 	bl	8001e0e <xTaskCreateStatic>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <vTaskStartScheduler+0xac>)
 80021ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <vTaskStartScheduler+0xac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80021d8:	2301      	movs	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e001      	b.n	80021e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d115      	bne.n	8002214 <vTaskStartScheduler+0x80>
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	f383 8811 	msr	BASEPRI, r3
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	f3bf 8f4f 	dsb	sy
 80021f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <vTaskStartScheduler+0xb0>)
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <vTaskStartScheduler+0xb4>)
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <vTaskStartScheduler+0xb8>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800220e:	f000 fc6f 	bl	8002af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002212:	e00d      	b.n	8002230 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d109      	bne.n	8002230 <vTaskStartScheduler+0x9c>
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e7fe      	b.n	800222e <vTaskStartScheduler+0x9a>
}
 8002230:	bf00      	nop
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	08003b7c 	.word	0x08003b7c
 800223c:	080026fd 	.word	0x080026fd
 8002240:	2000040c 	.word	0x2000040c
 8002244:	20000408 	.word	0x20000408
 8002248:	200003f4 	.word	0x200003f4
 800224c:	200003ec 	.word	0x200003ec

08002250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <vTaskSuspendAll+0x18>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <vTaskSuspendAll+0x18>)
 800225c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	20000410 	.word	0x20000410

0800226c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <xTaskResumeAll+0x114>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <xTaskResumeAll+0x2a>
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	e7fe      	b.n	8002294 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002296:	f000 fcc9 	bl	8002c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <xTaskResumeAll+0x114>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3b01      	subs	r3, #1
 80022a0:	4a37      	ldr	r2, [pc, #220]	; (8002380 <xTaskResumeAll+0x114>)
 80022a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <xTaskResumeAll+0x114>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d161      	bne.n	8002370 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022ac:	4b35      	ldr	r3, [pc, #212]	; (8002384 <xTaskResumeAll+0x118>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05d      	beq.n	8002370 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022b4:	e02e      	b.n	8002314 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022b6:	4b34      	ldr	r3, [pc, #208]	; (8002388 <xTaskResumeAll+0x11c>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3318      	adds	r3, #24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fd79 	bl	8001dba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fd74 	bl	8001dba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	2201      	movs	r2, #1
 80022d8:	409a      	lsls	r2, r3
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <xTaskResumeAll+0x120>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	4a2a      	ldr	r2, [pc, #168]	; (800238c <xTaskResumeAll+0x120>)
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4a27      	ldr	r2, [pc, #156]	; (8002390 <xTaskResumeAll+0x124>)
 80022f2:	441a      	add	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f7ff fd00 	bl	8001d00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <xTaskResumeAll+0x128>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <xTaskResumeAll+0x12c>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002314:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <xTaskResumeAll+0x11c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1cc      	bne.n	80022b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002322:	f000 fa9d 	bl	8002860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <xTaskResumeAll+0x130>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002332:	f000 f837 	bl	80023a4 <xTaskIncrementTick>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <xTaskResumeAll+0x12c>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3b01      	subs	r3, #1
 8002346:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f1      	bne.n	8002332 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <xTaskResumeAll+0x130>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <xTaskResumeAll+0x12c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800235c:	2301      	movs	r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <xTaskResumeAll+0x134>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002370:	f000 fc8a 	bl	8002c88 <vPortExitCritical>

	return xAlreadyYielded;
 8002374:	68bb      	ldr	r3, [r7, #8]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000410 	.word	0x20000410
 8002384:	200003e8 	.word	0x200003e8
 8002388:	200003a8 	.word	0x200003a8
 800238c:	200003f0 	.word	0x200003f0
 8002390:	200002ec 	.word	0x200002ec
 8002394:	200002e8 	.word	0x200002e8
 8002398:	200003fc 	.word	0x200003fc
 800239c:	200003f8 	.word	0x200003f8
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023ae:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <xTaskIncrementTick+0x144>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8087 	bne.w	80024c6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <xTaskIncrementTick+0x148>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80023c0:	4a4a      	ldr	r2, [pc, #296]	; (80024ec <xTaskIncrementTick+0x148>)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d11f      	bne.n	800240c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80023cc:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <xTaskIncrementTick+0x14c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <xTaskIncrementTick+0x46>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	e7fe      	b.n	80023e8 <xTaskIncrementTick+0x44>
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <xTaskIncrementTick+0x14c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <xTaskIncrementTick+0x150>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <xTaskIncrementTick+0x14c>)
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4a3e      	ldr	r2, [pc, #248]	; (80024f4 <xTaskIncrementTick+0x150>)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <xTaskIncrementTick+0x154>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	4a3c      	ldr	r2, [pc, #240]	; (80024f8 <xTaskIncrementTick+0x154>)
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	f000 fa2a 	bl	8002860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <xTaskIncrementTick+0x158>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d348      	bcc.n	80024a8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <xTaskIncrementTick+0x14c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <xTaskIncrementTick+0x158>)
 8002422:	f04f 32ff 	mov.w	r2, #4294967295
 8002426:	601a      	str	r2, [r3, #0]
					break;
 8002428:	e03e      	b.n	80024a8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <xTaskIncrementTick+0x14c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d203      	bcs.n	800244a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002442:	4a2e      	ldr	r2, [pc, #184]	; (80024fc <xTaskIncrementTick+0x158>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002448:	e02e      	b.n	80024a8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3304      	adds	r3, #4
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fcb3 	bl	8001dba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3318      	adds	r3, #24
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fcaa 	bl	8001dba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	2201      	movs	r2, #1
 800246c:	409a      	lsls	r2, r3
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <xTaskIncrementTick+0x15c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	4a22      	ldr	r2, [pc, #136]	; (8002500 <xTaskIncrementTick+0x15c>)
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <xTaskIncrementTick+0x160>)
 8002486:	441a      	add	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f7ff fc36 	bl	8001d00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <xTaskIncrementTick+0x164>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	429a      	cmp	r2, r3
 80024a0:	d3b9      	bcc.n	8002416 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80024a2:	2301      	movs	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024a6:	e7b6      	b.n	8002416 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <xTaskIncrementTick+0x164>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	4915      	ldr	r1, [pc, #84]	; (8002504 <xTaskIncrementTick+0x160>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d907      	bls.n	80024d0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e004      	b.n	80024d0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <xTaskIncrementTick+0x168>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <xTaskIncrementTick+0x168>)
 80024ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <xTaskIncrementTick+0x16c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80024dc:	697b      	ldr	r3, [r7, #20]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000410 	.word	0x20000410
 80024ec:	200003ec 	.word	0x200003ec
 80024f0:	200003a0 	.word	0x200003a0
 80024f4:	200003a4 	.word	0x200003a4
 80024f8:	20000400 	.word	0x20000400
 80024fc:	20000408 	.word	0x20000408
 8002500:	200003f0 	.word	0x200003f0
 8002504:	200002ec 	.word	0x200002ec
 8002508:	200002e8 	.word	0x200002e8
 800250c:	200003f8 	.word	0x200003f8
 8002510:	200003fc 	.word	0x200003fc

08002514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <vTaskSwitchContext+0xa0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <vTaskSwitchContext+0xa4>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002528:	e03e      	b.n	80025a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <vTaskSwitchContext+0xa4>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <vTaskSwitchContext+0xa8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	f1c3 031f 	rsb	r3, r3, #31
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	491e      	ldr	r1, [pc, #120]	; (80025c0 <vTaskSwitchContext+0xac>)
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <vTaskSwitchContext+0x5a>
	__asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	e7fe      	b.n	800256c <vTaskSwitchContext+0x58>
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a11      	ldr	r2, [pc, #68]	; (80025c0 <vTaskSwitchContext+0xac>)
 800257a:	4413      	add	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3308      	adds	r3, #8
 8002590:	429a      	cmp	r2, r3
 8002592:	d104      	bne.n	800259e <vTaskSwitchContext+0x8a>
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <vTaskSwitchContext+0xb0>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20000410 	.word	0x20000410
 80025b8:	200003fc 	.word	0x200003fc
 80025bc:	200003f0 	.word	0x200003f0
 80025c0:	200002ec 	.word	0x200002ec
 80025c4:	200002e8 	.word	0x200002e8

080025c8 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <vTaskPlaceOnUnorderedEventList+0x26>
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e7fe      	b.n	80025ec <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <vTaskPlaceOnUnorderedEventList+0x6c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <vTaskPlaceOnUnorderedEventList+0x42>
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	e7fe      	b.n	8002608 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <vTaskPlaceOnUnorderedEventList+0x70>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002614:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <vTaskPlaceOnUnorderedEventList+0x70>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3318      	adds	r3, #24
 800261c:	4619      	mov	r1, r3
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fb6e 	bl	8001d00 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002624:	2101      	movs	r1, #1
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f970 	bl	800290c <prvAddCurrentTaskToDelayedList>
}
 800262c:	bf00      	nop
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000410 	.word	0x20000410
 8002638:	200002e8 	.word	0x200002e8

0800263c <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <vTaskRemoveFromUnorderedEventList+0xac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <vTaskRemoveFromUnorderedEventList+0x26>
 800264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002652:	f383 8811 	msr	BASEPRI, r3
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e7fe      	b.n	8002660 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <vTaskRemoveFromUnorderedEventList+0x50>
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e7fe      	b.n	800268a <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fb94 	bl	8001dba <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3304      	adds	r3, #4
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fb8f 	bl	8001dba <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	2201      	movs	r2, #1
 80026a2:	409a      	lsls	r2, r3
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <vTaskRemoveFromUnorderedEventList+0xb0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <vTaskRemoveFromUnorderedEventList+0xb0>)
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80026bc:	441a      	add	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7ff fb1b 	bl	8001d00 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d902      	bls.n	80026de <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
	}
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000410 	.word	0x20000410
 80026ec:	200003f0 	.word	0x200003f0
 80026f0:	200002ec 	.word	0x200002ec
 80026f4:	200002e8 	.word	0x200002e8
 80026f8:	200003fc 	.word	0x200003fc

080026fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002704:	f000 f852 	bl	80027ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <prvIdleTask+0x28>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d9f9      	bls.n	8002704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <prvIdleTask+0x2c>)
 8002712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002720:	e7f0      	b.n	8002704 <prvIdleTask+0x8>
 8002722:	bf00      	nop
 8002724:	200002ec 	.word	0x200002ec
 8002728:	e000ed04 	.word	0xe000ed04

0800272c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	e00c      	b.n	8002752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <prvInitialiseTaskLists+0x60>)
 8002744:	4413      	add	r3, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff faad 	bl	8001ca6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3301      	adds	r3, #1
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b06      	cmp	r3, #6
 8002756:	d9ef      	bls.n	8002738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <prvInitialiseTaskLists+0x64>)
 800275a:	f7ff faa4 	bl	8001ca6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <prvInitialiseTaskLists+0x68>)
 8002760:	f7ff faa1 	bl	8001ca6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <prvInitialiseTaskLists+0x6c>)
 8002766:	f7ff fa9e 	bl	8001ca6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800276a:	480c      	ldr	r0, [pc, #48]	; (800279c <prvInitialiseTaskLists+0x70>)
 800276c:	f7ff fa9b 	bl	8001ca6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002770:	480b      	ldr	r0, [pc, #44]	; (80027a0 <prvInitialiseTaskLists+0x74>)
 8002772:	f7ff fa98 	bl	8001ca6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <prvInitialiseTaskLists+0x78>)
 8002778:	4a05      	ldr	r2, [pc, #20]	; (8002790 <prvInitialiseTaskLists+0x64>)
 800277a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <prvInitialiseTaskLists+0x7c>)
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <prvInitialiseTaskLists+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200002ec 	.word	0x200002ec
 8002790:	20000378 	.word	0x20000378
 8002794:	2000038c 	.word	0x2000038c
 8002798:	200003a8 	.word	0x200003a8
 800279c:	200003bc 	.word	0x200003bc
 80027a0:	200003d4 	.word	0x200003d4
 80027a4:	200003a0 	.word	0x200003a0
 80027a8:	200003a4 	.word	0x200003a4

080027ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027b2:	e019      	b.n	80027e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80027b4:	f000 fa3a 	bl	8002c2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <prvCheckTasksWaitingTermination+0x4c>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff faf8 	bl	8001dba <uxListRemove>
				--uxCurrentNumberOfTasks;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <prvCheckTasksWaitingTermination+0x50>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <prvCheckTasksWaitingTermination+0x50>)
 80027d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <prvCheckTasksWaitingTermination+0x54>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <prvCheckTasksWaitingTermination+0x54>)
 80027dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80027de:	f000 fa53 	bl	8002c88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f80e 	bl	8002804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <prvCheckTasksWaitingTermination+0x54>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e1      	bne.n	80027b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200003bc 	.word	0x200003bc
 80027fc:	200003e8 	.word	0x200003e8
 8002800:	200003d0 	.word	0x200003d0

08002804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fba4 	bl	8002f68 <vPortFree>
				vPortFree( pxTCB );
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fba1 	bl	8002f68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002826:	e017      	b.n	8002858 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800282e:	2b01      	cmp	r3, #1
 8002830:	d103      	bne.n	800283a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fb98 	bl	8002f68 <vPortFree>
	}
 8002838:	e00e      	b.n	8002858 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002840:	2b02      	cmp	r3, #2
 8002842:	d009      	beq.n	8002858 <prvDeleteTCB+0x54>
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e7fe      	b.n	8002856 <prvDeleteTCB+0x52>
	}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <prvResetNextTaskUnblockTime+0x38>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvResetNextTaskUnblockTime+0x3c>)
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002878:	e008      	b.n	800288c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <prvResetNextTaskUnblockTime+0x38>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <prvResetNextTaskUnblockTime+0x3c>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	200003a0 	.word	0x200003a0
 800289c:	20000408 	.word	0x20000408

080028a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <xTaskGetSchedulerState+0x34>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80028ae:	2301      	movs	r3, #1
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	e008      	b.n	80028c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <xTaskGetSchedulerState+0x38>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80028bc:	2302      	movs	r3, #2
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	e001      	b.n	80028c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80028c6:	687b      	ldr	r3, [r7, #4]
	}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	200003f4 	.word	0x200003f4
 80028d8:	20000410 	.word	0x20000410

080028dc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <uxTaskResetEventItemValue+0x2c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <uxTaskResetEventItemValue+0x2c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <uxTaskResetEventItemValue+0x2c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1c2 0207 	rsb	r2, r2, #7
 80028f8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80028fa:	687b      	ldr	r3, [r7, #4]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	200002e8 	.word	0x200002e8

0800290c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002916:	4b29      	ldr	r3, [pc, #164]	; (80029bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800291c:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3304      	adds	r3, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fa49 	bl	8001dba <uxListRemove>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2201      	movs	r2, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4013      	ands	r3, r2
 8002942:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002944:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d10a      	bne.n	8002964 <prvAddCurrentTaskToDelayedList+0x58>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3304      	adds	r3, #4
 800295a:	4619      	mov	r1, r3
 800295c:	481a      	ldr	r0, [pc, #104]	; (80029c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800295e:	f7ff f9cf 	bl	8001d00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002962:	e026      	b.n	80029b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d209      	bcs.n	8002990 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3304      	adds	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f7ff f9dd 	bl	8001d48 <vListInsert>
}
 800298e:	e010      	b.n	80029b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3304      	adds	r3, #4
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f7ff f9d3 	bl	8001d48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d202      	bcs.n	80029b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80029ac:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	6013      	str	r3, [r2, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200003ec 	.word	0x200003ec
 80029c0:	200002e8 	.word	0x200002e8
 80029c4:	200003f0 	.word	0x200003f0
 80029c8:	200003d4 	.word	0x200003d4
 80029cc:	200003a4 	.word	0x200003a4
 80029d0:	200003a0 	.word	0x200003a0
 80029d4:	20000408 	.word	0x20000408

080029d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3b04      	subs	r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b04      	subs	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b04      	subs	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a08:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <pxPortInitialiseStack+0x64>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3b14      	subs	r3, #20
 8002a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3b04      	subs	r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f06f 0202 	mvn.w	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3b20      	subs	r3, #32
 8002a2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	08002a41 	.word	0x08002a41

08002a40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <prvTaskExitError+0x50>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d009      	beq.n	8002a68 <prvTaskExitError+0x28>
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e7fe      	b.n	8002a66 <prvTaskExitError+0x26>
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002a7a:	bf00      	nop
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0fc      	beq.n	8002a7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	2000000c 	.word	0x2000000c
	...

08002aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <pxCurrentTCBConst2>)
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	6808      	ldr	r0, [r1, #0]
 8002aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aaa:	f380 8809 	msr	PSP, r0
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f380 8811 	msr	BASEPRI, r0
 8002aba:	4770      	bx	lr
 8002abc:	f3af 8000 	nop.w

08002ac0 <pxCurrentTCBConst2>:
 8002ac0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop

08002ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ac8:	4808      	ldr	r0, [pc, #32]	; (8002aec <prvPortStartFirstTask+0x24>)
 8002aca:	6800      	ldr	r0, [r0, #0]
 8002acc:	6800      	ldr	r0, [r0, #0]
 8002ace:	f380 8808 	msr	MSP, r0
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f380 8814 	msr	CONTROL, r0
 8002ada:	b662      	cpsie	i
 8002adc:	b661      	cpsie	f
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	df00      	svc	0
 8002ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002aea:	bf00      	nop
 8002aec:	e000ed08 	.word	0xe000ed08

08002af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002af6:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <xPortStartScheduler+0x118>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <xPortStartScheduler+0x11c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d109      	bne.n	8002b14 <xPortStartScheduler+0x24>
 8002b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	e7fe      	b.n	8002b12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b14:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <xPortStartScheduler+0x118>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a3d      	ldr	r2, [pc, #244]	; (8002c10 <xPortStartScheduler+0x120>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d109      	bne.n	8002b32 <xPortStartScheduler+0x42>
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e7fe      	b.n	8002b30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b32:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <xPortStartScheduler+0x124>)
 8002b34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <xPortStartScheduler+0x128>)
 8002b58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b60:	e009      	b.n	8002b76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002b6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d0ef      	beq.n	8002b62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b82:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d009      	beq.n	8002ba2 <xPortStartScheduler+0xb2>
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	e7fe      	b.n	8002ba0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bb4:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	; (8002c20 <xPortStartScheduler+0x130>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <xPortStartScheduler+0x130>)
 8002bc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <xPortStartScheduler+0x130>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <xPortStartScheduler+0x130>)
 8002bd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002bd8:	f000 f8d6 	bl	8002d88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <xPortStartScheduler+0x134>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002be2:	f000 f8f5 	bl	8002dd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <xPortStartScheduler+0x138>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <xPortStartScheduler+0x138>)
 8002bec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bf0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002bf2:	f7ff ff69 	bl	8002ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002bf6:	f7ff fc8d 	bl	8002514 <vTaskSwitchContext>
	prvTaskExitError();
 8002bfa:	f7ff ff21 	bl	8002a40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	e000ed00 	.word	0xe000ed00
 8002c0c:	410fc271 	.word	0x410fc271
 8002c10:	410fc270 	.word	0x410fc270
 8002c14:	e000e400 	.word	0xe000e400
 8002c18:	20000414 	.word	0x20000414
 8002c1c:	20000418 	.word	0x20000418
 8002c20:	e000ed20 	.word	0xe000ed20
 8002c24:	2000000c 	.word	0x2000000c
 8002c28:	e000ef34 	.word	0xe000ef34

08002c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c36:	f383 8811 	msr	BASEPRI, r3
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	f3bf 8f4f 	dsb	sy
 8002c42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <vPortEnterCritical+0x54>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <vPortEnterCritical+0x54>)
 8002c4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <vPortEnterCritical+0x54>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10e      	bne.n	8002c74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <vPortEnterCritical+0x58>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <vPortEnterCritical+0x48>
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	e7fe      	b.n	8002c72 <vPortEnterCritical+0x46>
	}
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	2000000c 	.word	0x2000000c
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <vPortExitCritical+0x4c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <vPortExitCritical+0x22>
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	e7fe      	b.n	8002ca8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <vPortExitCritical+0x4c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <vPortExitCritical+0x4c>)
 8002cb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <vPortExitCritical+0x4c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <vPortExitCritical+0x3e>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000000c 	.word	0x2000000c
	...

08002ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ce0:	f3ef 8009 	mrs	r0, PSP
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <pxCurrentTCBConst>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f01e 0f10 	tst.w	lr, #16
 8002cf0:	bf08      	it	eq
 8002cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d04:	f380 8811 	msr	BASEPRI, r0
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f7ff fc00 	bl	8002514 <vTaskSwitchContext>
 8002d14:	f04f 0000 	mov.w	r0, #0
 8002d18:	f380 8811 	msr	BASEPRI, r0
 8002d1c:	bc09      	pop	{r0, r3}
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	6808      	ldr	r0, [r1, #0]
 8002d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d26:	f01e 0f10 	tst.w	lr, #16
 8002d2a:	bf08      	it	eq
 8002d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d30:	f380 8809 	msr	PSP, r0
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	f3af 8000 	nop.w

08002d40 <pxCurrentTCBConst>:
 8002d40:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop

08002d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d60:	f7ff fb20 	bl	80023a4 <xTaskIncrementTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <xPortSysTickHandler+0x3c>)
 8002d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <vPortSetupTimerInterrupt+0x34>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <vPortSetupTimerInterrupt+0x38>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <vPortSetupTimerInterrupt+0x3c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <vPortSetupTimerInterrupt+0x40>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <vPortSetupTimerInterrupt+0x44>)
 8002da6:	3b01      	subs	r3, #1
 8002da8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <vPortSetupTimerInterrupt+0x34>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010
 8002dc0:	e000e018 	.word	0xe000e018
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	10624dd3 	.word	0x10624dd3
 8002dcc:	e000e014 	.word	0xe000e014

08002dd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002dd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002de0 <vPortEnableVFP+0x10>
 8002dd4:	6801      	ldr	r1, [r0, #0]
 8002dd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dda:	6001      	str	r1, [r0, #0]
 8002ddc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002dde:	bf00      	nop
 8002de0:	e000ed88 	.word	0xe000ed88

08002de4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08a      	sub	sp, #40	; 0x28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002df0:	f7ff fa2e 	bl	8002250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002df4:	4b57      	ldr	r3, [pc, #348]	; (8002f54 <pvPortMalloc+0x170>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002dfc:	f000 f90c 	bl	8003018 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e00:	4b55      	ldr	r3, [pc, #340]	; (8002f58 <pvPortMalloc+0x174>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 808c 	bne.w	8002f26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01c      	beq.n	8002e4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002e14:	2208      	movs	r2, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d013      	beq.n	8002e4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f023 0307 	bic.w	r3, r3, #7
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <pvPortMalloc+0x6a>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e7fe      	b.n	8002e4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d068      	beq.n	8002f26 <pvPortMalloc+0x142>
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <pvPortMalloc+0x178>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d863      	bhi.n	8002f26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e5e:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <pvPortMalloc+0x17c>)
 8002e60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e62:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <pvPortMalloc+0x17c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e68:	e004      	b.n	8002e74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d903      	bls.n	8002e86 <pvPortMalloc+0xa2>
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f1      	bne.n	8002e6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e86:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <pvPortMalloc+0x170>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d04a      	beq.n	8002f26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2208      	movs	r2, #8
 8002e96:	4413      	add	r3, r2
 8002e98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1ad2      	subs	r2, r2, r3
 8002eaa:	2308      	movs	r3, #8
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d91e      	bls.n	8002ef0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <pvPortMalloc+0xf4>
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e7fe      	b.n	8002ed6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	1ad2      	subs	r2, r2, r3
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002eea:	69b8      	ldr	r0, [r7, #24]
 8002eec:	f000 f8f6 	bl	80030dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <pvPortMalloc+0x178>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <pvPortMalloc+0x178>)
 8002efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002efe:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <pvPortMalloc+0x178>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <pvPortMalloc+0x180>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d203      	bcs.n	8002f12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <pvPortMalloc+0x178>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <pvPortMalloc+0x180>)
 8002f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <pvPortMalloc+0x174>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f26:	f7ff f9a1 	bl	800226c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <pvPortMalloc+0x164>
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e7fe      	b.n	8002f46 <pvPortMalloc+0x162>
	return pvReturn;
 8002f48:	69fb      	ldr	r3, [r7, #28]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20004024 	.word	0x20004024
 8002f58:	20004030 	.word	0x20004030
 8002f5c:	20004028 	.word	0x20004028
 8002f60:	2000401c 	.word	0x2000401c
 8002f64:	2000402c 	.word	0x2000402c

08002f68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d046      	beq.n	8003008 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	425b      	negs	r3, r3
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4413      	add	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <vPortFree+0xa8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <vPortFree+0x42>
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e7fe      	b.n	8002fa8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <vPortFree+0x5e>
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	e7fe      	b.n	8002fc4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <vPortFree+0xa8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d019      	beq.n	8003008 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <vPortFree+0xa8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002fec:	f7ff f930 	bl	8002250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <vPortFree+0xac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <vPortFree+0xac>)
 8002ffc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ffe:	6938      	ldr	r0, [r7, #16]
 8003000:	f000 f86c 	bl	80030dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003004:	f7ff f932 	bl	800226c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003008:	bf00      	nop
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20004030 	.word	0x20004030
 8003014:	20004028 	.word	0x20004028

08003018 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800301e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003022:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <prvHeapInit+0xac>)
 8003026:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3307      	adds	r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0307 	bic.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <prvHeapInit+0xac>)
 8003048:	4413      	add	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <prvHeapInit+0xb0>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <prvHeapInit+0xb0>)
 8003058:	2200      	movs	r2, #0
 800305a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003064:	2208      	movs	r2, #8
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0307 	bic.w	r3, r3, #7
 8003072:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <prvHeapInit+0xb4>)
 8003078:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <prvHeapInit+0xb4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <prvHeapInit+0xb4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <prvHeapInit+0xb4>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <prvHeapInit+0xb8>)
 80030a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <prvHeapInit+0xbc>)
 80030ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <prvHeapInit+0xc0>)
 80030b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030b6:	601a      	str	r2, [r3, #0]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	2000041c 	.word	0x2000041c
 80030c8:	2000401c 	.word	0x2000401c
 80030cc:	20004024 	.word	0x20004024
 80030d0:	2000402c 	.word	0x2000402c
 80030d4:	20004028 	.word	0x20004028
 80030d8:	20004030 	.word	0x20004030

080030dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030e4:	4b28      	ldr	r3, [pc, #160]	; (8003188 <prvInsertBlockIntoFreeList+0xac>)
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	e002      	b.n	80030f0 <prvInsertBlockIntoFreeList+0x14>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d8f7      	bhi.n	80030ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	4413      	add	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	d108      	bne.n	800311e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	441a      	add	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	441a      	add	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d118      	bne.n	8003164 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <prvInsertBlockIntoFreeList+0xb0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d00d      	beq.n	800315a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e008      	b.n	800316c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <prvInsertBlockIntoFreeList+0xb0>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e003      	b.n	800316c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d002      	beq.n	800317a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	2000401c 	.word	0x2000401c
 800318c:	20004024 	.word	0x20004024

08003190 <__errno>:
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <__errno+0x8>)
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000010 	.word	0x20000010

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4e0d      	ldr	r6, [pc, #52]	; (80031d4 <__libc_init_array+0x38>)
 80031a0:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a2:	1ba4      	subs	r4, r4, r6
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	2500      	movs	r5, #0
 80031a8:	42a5      	cmp	r5, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	4e0b      	ldr	r6, [pc, #44]	; (80031dc <__libc_init_array+0x40>)
 80031ae:	4c0c      	ldr	r4, [pc, #48]	; (80031e0 <__libc_init_array+0x44>)
 80031b0:	f000 fc88 	bl	8003ac4 <_init>
 80031b4:	1ba4      	subs	r4, r4, r6
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	2500      	movs	r5, #0
 80031ba:	42a5      	cmp	r5, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c4:	4798      	blx	r3
 80031c6:	3501      	adds	r5, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ce:	4798      	blx	r3
 80031d0:	3501      	adds	r5, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	08003c00 	.word	0x08003c00
 80031d8:	08003c00 	.word	0x08003c00
 80031dc:	08003c00 	.word	0x08003c00
 80031e0:	08003c04 	.word	0x08003c04

080031e4 <memset>:
 80031e4:	4402      	add	r2, r0
 80031e6:	4603      	mov	r3, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	f803 1b01 	strb.w	r1, [r3], #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <_puts_r>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	460e      	mov	r6, r1
 80031f8:	4605      	mov	r5, r0
 80031fa:	b118      	cbz	r0, 8003204 <_puts_r+0x10>
 80031fc:	6983      	ldr	r3, [r0, #24]
 80031fe:	b90b      	cbnz	r3, 8003204 <_puts_r+0x10>
 8003200:	f000 fa0c 	bl	800361c <__sinit>
 8003204:	69ab      	ldr	r3, [r5, #24]
 8003206:	68ac      	ldr	r4, [r5, #8]
 8003208:	b913      	cbnz	r3, 8003210 <_puts_r+0x1c>
 800320a:	4628      	mov	r0, r5
 800320c:	f000 fa06 	bl	800361c <__sinit>
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <_puts_r+0xac>)
 8003212:	429c      	cmp	r4, r3
 8003214:	d117      	bne.n	8003246 <_puts_r+0x52>
 8003216:	686c      	ldr	r4, [r5, #4]
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	071b      	lsls	r3, r3, #28
 800321c:	d51d      	bpl.n	800325a <_puts_r+0x66>
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	b1db      	cbz	r3, 800325a <_puts_r+0x66>
 8003222:	3e01      	subs	r6, #1
 8003224:	68a3      	ldr	r3, [r4, #8]
 8003226:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800322a:	3b01      	subs	r3, #1
 800322c:	60a3      	str	r3, [r4, #8]
 800322e:	b9e9      	cbnz	r1, 800326c <_puts_r+0x78>
 8003230:	2b00      	cmp	r3, #0
 8003232:	da2e      	bge.n	8003292 <_puts_r+0x9e>
 8003234:	4622      	mov	r2, r4
 8003236:	210a      	movs	r1, #10
 8003238:	4628      	mov	r0, r5
 800323a:	f000 f83f 	bl	80032bc <__swbuf_r>
 800323e:	3001      	adds	r0, #1
 8003240:	d011      	beq.n	8003266 <_puts_r+0x72>
 8003242:	200a      	movs	r0, #10
 8003244:	e011      	b.n	800326a <_puts_r+0x76>
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <_puts_r+0xb0>)
 8003248:	429c      	cmp	r4, r3
 800324a:	d101      	bne.n	8003250 <_puts_r+0x5c>
 800324c:	68ac      	ldr	r4, [r5, #8]
 800324e:	e7e3      	b.n	8003218 <_puts_r+0x24>
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <_puts_r+0xb4>)
 8003252:	429c      	cmp	r4, r3
 8003254:	bf08      	it	eq
 8003256:	68ec      	ldreq	r4, [r5, #12]
 8003258:	e7de      	b.n	8003218 <_puts_r+0x24>
 800325a:	4621      	mov	r1, r4
 800325c:	4628      	mov	r0, r5
 800325e:	f000 f87f 	bl	8003360 <__swsetup_r>
 8003262:	2800      	cmp	r0, #0
 8003264:	d0dd      	beq.n	8003222 <_puts_r+0x2e>
 8003266:	f04f 30ff 	mov.w	r0, #4294967295
 800326a:	bd70      	pop	{r4, r5, r6, pc}
 800326c:	2b00      	cmp	r3, #0
 800326e:	da04      	bge.n	800327a <_puts_r+0x86>
 8003270:	69a2      	ldr	r2, [r4, #24]
 8003272:	429a      	cmp	r2, r3
 8003274:	dc06      	bgt.n	8003284 <_puts_r+0x90>
 8003276:	290a      	cmp	r1, #10
 8003278:	d004      	beq.n	8003284 <_puts_r+0x90>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	6022      	str	r2, [r4, #0]
 8003280:	7019      	strb	r1, [r3, #0]
 8003282:	e7cf      	b.n	8003224 <_puts_r+0x30>
 8003284:	4622      	mov	r2, r4
 8003286:	4628      	mov	r0, r5
 8003288:	f000 f818 	bl	80032bc <__swbuf_r>
 800328c:	3001      	adds	r0, #1
 800328e:	d1c9      	bne.n	8003224 <_puts_r+0x30>
 8003290:	e7e9      	b.n	8003266 <_puts_r+0x72>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	200a      	movs	r0, #10
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	6022      	str	r2, [r4, #0]
 800329a:	7018      	strb	r0, [r3, #0]
 800329c:	e7e5      	b.n	800326a <_puts_r+0x76>
 800329e:	bf00      	nop
 80032a0:	08003bb8 	.word	0x08003bb8
 80032a4:	08003bd8 	.word	0x08003bd8
 80032a8:	08003b98 	.word	0x08003b98

080032ac <puts>:
 80032ac:	4b02      	ldr	r3, [pc, #8]	; (80032b8 <puts+0xc>)
 80032ae:	4601      	mov	r1, r0
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	f7ff bf9f 	b.w	80031f4 <_puts_r>
 80032b6:	bf00      	nop
 80032b8:	20000010 	.word	0x20000010

080032bc <__swbuf_r>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	460e      	mov	r6, r1
 80032c0:	4614      	mov	r4, r2
 80032c2:	4605      	mov	r5, r0
 80032c4:	b118      	cbz	r0, 80032ce <__swbuf_r+0x12>
 80032c6:	6983      	ldr	r3, [r0, #24]
 80032c8:	b90b      	cbnz	r3, 80032ce <__swbuf_r+0x12>
 80032ca:	f000 f9a7 	bl	800361c <__sinit>
 80032ce:	4b21      	ldr	r3, [pc, #132]	; (8003354 <__swbuf_r+0x98>)
 80032d0:	429c      	cmp	r4, r3
 80032d2:	d12a      	bne.n	800332a <__swbuf_r+0x6e>
 80032d4:	686c      	ldr	r4, [r5, #4]
 80032d6:	69a3      	ldr	r3, [r4, #24]
 80032d8:	60a3      	str	r3, [r4, #8]
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	071a      	lsls	r2, r3, #28
 80032de:	d52e      	bpl.n	800333e <__swbuf_r+0x82>
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	b363      	cbz	r3, 800333e <__swbuf_r+0x82>
 80032e4:	6923      	ldr	r3, [r4, #16]
 80032e6:	6820      	ldr	r0, [r4, #0]
 80032e8:	1ac0      	subs	r0, r0, r3
 80032ea:	6963      	ldr	r3, [r4, #20]
 80032ec:	b2f6      	uxtb	r6, r6
 80032ee:	4283      	cmp	r3, r0
 80032f0:	4637      	mov	r7, r6
 80032f2:	dc04      	bgt.n	80032fe <__swbuf_r+0x42>
 80032f4:	4621      	mov	r1, r4
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 f926 	bl	8003548 <_fflush_r>
 80032fc:	bb28      	cbnz	r0, 800334a <__swbuf_r+0x8e>
 80032fe:	68a3      	ldr	r3, [r4, #8]
 8003300:	3b01      	subs	r3, #1
 8003302:	60a3      	str	r3, [r4, #8]
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	6022      	str	r2, [r4, #0]
 800330a:	701e      	strb	r6, [r3, #0]
 800330c:	6963      	ldr	r3, [r4, #20]
 800330e:	3001      	adds	r0, #1
 8003310:	4283      	cmp	r3, r0
 8003312:	d004      	beq.n	800331e <__swbuf_r+0x62>
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	07db      	lsls	r3, r3, #31
 8003318:	d519      	bpl.n	800334e <__swbuf_r+0x92>
 800331a:	2e0a      	cmp	r6, #10
 800331c:	d117      	bne.n	800334e <__swbuf_r+0x92>
 800331e:	4621      	mov	r1, r4
 8003320:	4628      	mov	r0, r5
 8003322:	f000 f911 	bl	8003548 <_fflush_r>
 8003326:	b190      	cbz	r0, 800334e <__swbuf_r+0x92>
 8003328:	e00f      	b.n	800334a <__swbuf_r+0x8e>
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <__swbuf_r+0x9c>)
 800332c:	429c      	cmp	r4, r3
 800332e:	d101      	bne.n	8003334 <__swbuf_r+0x78>
 8003330:	68ac      	ldr	r4, [r5, #8]
 8003332:	e7d0      	b.n	80032d6 <__swbuf_r+0x1a>
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <__swbuf_r+0xa0>)
 8003336:	429c      	cmp	r4, r3
 8003338:	bf08      	it	eq
 800333a:	68ec      	ldreq	r4, [r5, #12]
 800333c:	e7cb      	b.n	80032d6 <__swbuf_r+0x1a>
 800333e:	4621      	mov	r1, r4
 8003340:	4628      	mov	r0, r5
 8003342:	f000 f80d 	bl	8003360 <__swsetup_r>
 8003346:	2800      	cmp	r0, #0
 8003348:	d0cc      	beq.n	80032e4 <__swbuf_r+0x28>
 800334a:	f04f 37ff 	mov.w	r7, #4294967295
 800334e:	4638      	mov	r0, r7
 8003350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003352:	bf00      	nop
 8003354:	08003bb8 	.word	0x08003bb8
 8003358:	08003bd8 	.word	0x08003bd8
 800335c:	08003b98 	.word	0x08003b98

08003360 <__swsetup_r>:
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <__swsetup_r+0xcc>)
 8003362:	b570      	push	{r4, r5, r6, lr}
 8003364:	681d      	ldr	r5, [r3, #0]
 8003366:	4606      	mov	r6, r0
 8003368:	460c      	mov	r4, r1
 800336a:	b125      	cbz	r5, 8003376 <__swsetup_r+0x16>
 800336c:	69ab      	ldr	r3, [r5, #24]
 800336e:	b913      	cbnz	r3, 8003376 <__swsetup_r+0x16>
 8003370:	4628      	mov	r0, r5
 8003372:	f000 f953 	bl	800361c <__sinit>
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <__swsetup_r+0xd0>)
 8003378:	429c      	cmp	r4, r3
 800337a:	d10f      	bne.n	800339c <__swsetup_r+0x3c>
 800337c:	686c      	ldr	r4, [r5, #4]
 800337e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003382:	b29a      	uxth	r2, r3
 8003384:	0715      	lsls	r5, r2, #28
 8003386:	d42c      	bmi.n	80033e2 <__swsetup_r+0x82>
 8003388:	06d0      	lsls	r0, r2, #27
 800338a:	d411      	bmi.n	80033b0 <__swsetup_r+0x50>
 800338c:	2209      	movs	r2, #9
 800338e:	6032      	str	r2, [r6, #0]
 8003390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003394:	81a3      	strh	r3, [r4, #12]
 8003396:	f04f 30ff 	mov.w	r0, #4294967295
 800339a:	e03e      	b.n	800341a <__swsetup_r+0xba>
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <__swsetup_r+0xd4>)
 800339e:	429c      	cmp	r4, r3
 80033a0:	d101      	bne.n	80033a6 <__swsetup_r+0x46>
 80033a2:	68ac      	ldr	r4, [r5, #8]
 80033a4:	e7eb      	b.n	800337e <__swsetup_r+0x1e>
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <__swsetup_r+0xd8>)
 80033a8:	429c      	cmp	r4, r3
 80033aa:	bf08      	it	eq
 80033ac:	68ec      	ldreq	r4, [r5, #12]
 80033ae:	e7e6      	b.n	800337e <__swsetup_r+0x1e>
 80033b0:	0751      	lsls	r1, r2, #29
 80033b2:	d512      	bpl.n	80033da <__swsetup_r+0x7a>
 80033b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033b6:	b141      	cbz	r1, 80033ca <__swsetup_r+0x6a>
 80033b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033bc:	4299      	cmp	r1, r3
 80033be:	d002      	beq.n	80033c6 <__swsetup_r+0x66>
 80033c0:	4630      	mov	r0, r6
 80033c2:	f000 fa19 	bl	80037f8 <_free_r>
 80033c6:	2300      	movs	r3, #0
 80033c8:	6363      	str	r3, [r4, #52]	; 0x34
 80033ca:	89a3      	ldrh	r3, [r4, #12]
 80033cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033d0:	81a3      	strh	r3, [r4, #12]
 80033d2:	2300      	movs	r3, #0
 80033d4:	6063      	str	r3, [r4, #4]
 80033d6:	6923      	ldr	r3, [r4, #16]
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	f043 0308 	orr.w	r3, r3, #8
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	6923      	ldr	r3, [r4, #16]
 80033e4:	b94b      	cbnz	r3, 80033fa <__swsetup_r+0x9a>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d003      	beq.n	80033fa <__swsetup_r+0x9a>
 80033f2:	4621      	mov	r1, r4
 80033f4:	4630      	mov	r0, r6
 80033f6:	f000 f9bf 	bl	8003778 <__smakebuf_r>
 80033fa:	89a2      	ldrh	r2, [r4, #12]
 80033fc:	f012 0301 	ands.w	r3, r2, #1
 8003400:	d00c      	beq.n	800341c <__swsetup_r+0xbc>
 8003402:	2300      	movs	r3, #0
 8003404:	60a3      	str	r3, [r4, #8]
 8003406:	6963      	ldr	r3, [r4, #20]
 8003408:	425b      	negs	r3, r3
 800340a:	61a3      	str	r3, [r4, #24]
 800340c:	6923      	ldr	r3, [r4, #16]
 800340e:	b953      	cbnz	r3, 8003426 <__swsetup_r+0xc6>
 8003410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003414:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003418:	d1ba      	bne.n	8003390 <__swsetup_r+0x30>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	0792      	lsls	r2, r2, #30
 800341e:	bf58      	it	pl
 8003420:	6963      	ldrpl	r3, [r4, #20]
 8003422:	60a3      	str	r3, [r4, #8]
 8003424:	e7f2      	b.n	800340c <__swsetup_r+0xac>
 8003426:	2000      	movs	r0, #0
 8003428:	e7f7      	b.n	800341a <__swsetup_r+0xba>
 800342a:	bf00      	nop
 800342c:	20000010 	.word	0x20000010
 8003430:	08003bb8 	.word	0x08003bb8
 8003434:	08003bd8 	.word	0x08003bd8
 8003438:	08003b98 	.word	0x08003b98

0800343c <__sflush_r>:
 800343c:	898a      	ldrh	r2, [r1, #12]
 800343e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003442:	4605      	mov	r5, r0
 8003444:	0710      	lsls	r0, r2, #28
 8003446:	460c      	mov	r4, r1
 8003448:	d458      	bmi.n	80034fc <__sflush_r+0xc0>
 800344a:	684b      	ldr	r3, [r1, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	dc05      	bgt.n	800345c <__sflush_r+0x20>
 8003450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	dc02      	bgt.n	800345c <__sflush_r+0x20>
 8003456:	2000      	movs	r0, #0
 8003458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800345c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800345e:	2e00      	cmp	r6, #0
 8003460:	d0f9      	beq.n	8003456 <__sflush_r+0x1a>
 8003462:	2300      	movs	r3, #0
 8003464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003468:	682f      	ldr	r7, [r5, #0]
 800346a:	6a21      	ldr	r1, [r4, #32]
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	d032      	beq.n	80034d6 <__sflush_r+0x9a>
 8003470:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003472:	89a3      	ldrh	r3, [r4, #12]
 8003474:	075a      	lsls	r2, r3, #29
 8003476:	d505      	bpl.n	8003484 <__sflush_r+0x48>
 8003478:	6863      	ldr	r3, [r4, #4]
 800347a:	1ac0      	subs	r0, r0, r3
 800347c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800347e:	b10b      	cbz	r3, 8003484 <__sflush_r+0x48>
 8003480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003482:	1ac0      	subs	r0, r0, r3
 8003484:	2300      	movs	r3, #0
 8003486:	4602      	mov	r2, r0
 8003488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800348a:	6a21      	ldr	r1, [r4, #32]
 800348c:	4628      	mov	r0, r5
 800348e:	47b0      	blx	r6
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	d106      	bne.n	80034a4 <__sflush_r+0x68>
 8003496:	6829      	ldr	r1, [r5, #0]
 8003498:	291d      	cmp	r1, #29
 800349a:	d848      	bhi.n	800352e <__sflush_r+0xf2>
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <__sflush_r+0x108>)
 800349e:	40ca      	lsrs	r2, r1
 80034a0:	07d6      	lsls	r6, r2, #31
 80034a2:	d544      	bpl.n	800352e <__sflush_r+0xf2>
 80034a4:	2200      	movs	r2, #0
 80034a6:	6062      	str	r2, [r4, #4]
 80034a8:	04d9      	lsls	r1, r3, #19
 80034aa:	6922      	ldr	r2, [r4, #16]
 80034ac:	6022      	str	r2, [r4, #0]
 80034ae:	d504      	bpl.n	80034ba <__sflush_r+0x7e>
 80034b0:	1c42      	adds	r2, r0, #1
 80034b2:	d101      	bne.n	80034b8 <__sflush_r+0x7c>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	b903      	cbnz	r3, 80034ba <__sflush_r+0x7e>
 80034b8:	6560      	str	r0, [r4, #84]	; 0x54
 80034ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034bc:	602f      	str	r7, [r5, #0]
 80034be:	2900      	cmp	r1, #0
 80034c0:	d0c9      	beq.n	8003456 <__sflush_r+0x1a>
 80034c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034c6:	4299      	cmp	r1, r3
 80034c8:	d002      	beq.n	80034d0 <__sflush_r+0x94>
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 f994 	bl	80037f8 <_free_r>
 80034d0:	2000      	movs	r0, #0
 80034d2:	6360      	str	r0, [r4, #52]	; 0x34
 80034d4:	e7c0      	b.n	8003458 <__sflush_r+0x1c>
 80034d6:	2301      	movs	r3, #1
 80034d8:	4628      	mov	r0, r5
 80034da:	47b0      	blx	r6
 80034dc:	1c41      	adds	r1, r0, #1
 80034de:	d1c8      	bne.n	8003472 <__sflush_r+0x36>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0c5      	beq.n	8003472 <__sflush_r+0x36>
 80034e6:	2b1d      	cmp	r3, #29
 80034e8:	d001      	beq.n	80034ee <__sflush_r+0xb2>
 80034ea:	2b16      	cmp	r3, #22
 80034ec:	d101      	bne.n	80034f2 <__sflush_r+0xb6>
 80034ee:	602f      	str	r7, [r5, #0]
 80034f0:	e7b1      	b.n	8003456 <__sflush_r+0x1a>
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f8:	81a3      	strh	r3, [r4, #12]
 80034fa:	e7ad      	b.n	8003458 <__sflush_r+0x1c>
 80034fc:	690f      	ldr	r7, [r1, #16]
 80034fe:	2f00      	cmp	r7, #0
 8003500:	d0a9      	beq.n	8003456 <__sflush_r+0x1a>
 8003502:	0793      	lsls	r3, r2, #30
 8003504:	680e      	ldr	r6, [r1, #0]
 8003506:	bf08      	it	eq
 8003508:	694b      	ldreq	r3, [r1, #20]
 800350a:	600f      	str	r7, [r1, #0]
 800350c:	bf18      	it	ne
 800350e:	2300      	movne	r3, #0
 8003510:	eba6 0807 	sub.w	r8, r6, r7
 8003514:	608b      	str	r3, [r1, #8]
 8003516:	f1b8 0f00 	cmp.w	r8, #0
 800351a:	dd9c      	ble.n	8003456 <__sflush_r+0x1a>
 800351c:	4643      	mov	r3, r8
 800351e:	463a      	mov	r2, r7
 8003520:	6a21      	ldr	r1, [r4, #32]
 8003522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003524:	4628      	mov	r0, r5
 8003526:	47b0      	blx	r6
 8003528:	2800      	cmp	r0, #0
 800352a:	dc06      	bgt.n	800353a <__sflush_r+0xfe>
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003532:	81a3      	strh	r3, [r4, #12]
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	e78e      	b.n	8003458 <__sflush_r+0x1c>
 800353a:	4407      	add	r7, r0
 800353c:	eba8 0800 	sub.w	r8, r8, r0
 8003540:	e7e9      	b.n	8003516 <__sflush_r+0xda>
 8003542:	bf00      	nop
 8003544:	20400001 	.word	0x20400001

08003548 <_fflush_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	690b      	ldr	r3, [r1, #16]
 800354c:	4605      	mov	r5, r0
 800354e:	460c      	mov	r4, r1
 8003550:	b1db      	cbz	r3, 800358a <_fflush_r+0x42>
 8003552:	b118      	cbz	r0, 800355c <_fflush_r+0x14>
 8003554:	6983      	ldr	r3, [r0, #24]
 8003556:	b90b      	cbnz	r3, 800355c <_fflush_r+0x14>
 8003558:	f000 f860 	bl	800361c <__sinit>
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <_fflush_r+0x48>)
 800355e:	429c      	cmp	r4, r3
 8003560:	d109      	bne.n	8003576 <_fflush_r+0x2e>
 8003562:	686c      	ldr	r4, [r5, #4]
 8003564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003568:	b17b      	cbz	r3, 800358a <_fflush_r+0x42>
 800356a:	4621      	mov	r1, r4
 800356c:	4628      	mov	r0, r5
 800356e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003572:	f7ff bf63 	b.w	800343c <__sflush_r>
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <_fflush_r+0x4c>)
 8003578:	429c      	cmp	r4, r3
 800357a:	d101      	bne.n	8003580 <_fflush_r+0x38>
 800357c:	68ac      	ldr	r4, [r5, #8]
 800357e:	e7f1      	b.n	8003564 <_fflush_r+0x1c>
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <_fflush_r+0x50>)
 8003582:	429c      	cmp	r4, r3
 8003584:	bf08      	it	eq
 8003586:	68ec      	ldreq	r4, [r5, #12]
 8003588:	e7ec      	b.n	8003564 <_fflush_r+0x1c>
 800358a:	2000      	movs	r0, #0
 800358c:	bd38      	pop	{r3, r4, r5, pc}
 800358e:	bf00      	nop
 8003590:	08003bb8 	.word	0x08003bb8
 8003594:	08003bd8 	.word	0x08003bd8
 8003598:	08003b98 	.word	0x08003b98

0800359c <std>:
 800359c:	2300      	movs	r3, #0
 800359e:	b510      	push	{r4, lr}
 80035a0:	4604      	mov	r4, r0
 80035a2:	e9c0 3300 	strd	r3, r3, [r0]
 80035a6:	6083      	str	r3, [r0, #8]
 80035a8:	8181      	strh	r1, [r0, #12]
 80035aa:	6643      	str	r3, [r0, #100]	; 0x64
 80035ac:	81c2      	strh	r2, [r0, #14]
 80035ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035b2:	6183      	str	r3, [r0, #24]
 80035b4:	4619      	mov	r1, r3
 80035b6:	2208      	movs	r2, #8
 80035b8:	305c      	adds	r0, #92	; 0x5c
 80035ba:	f7ff fe13 	bl	80031e4 <memset>
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <std+0x38>)
 80035c0:	6263      	str	r3, [r4, #36]	; 0x24
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <std+0x3c>)
 80035c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <std+0x40>)
 80035c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <std+0x44>)
 80035cc:	6224      	str	r4, [r4, #32]
 80035ce:	6323      	str	r3, [r4, #48]	; 0x30
 80035d0:	bd10      	pop	{r4, pc}
 80035d2:	bf00      	nop
 80035d4:	08003969 	.word	0x08003969
 80035d8:	0800398b 	.word	0x0800398b
 80035dc:	080039c3 	.word	0x080039c3
 80035e0:	080039e7 	.word	0x080039e7

080035e4 <_cleanup_r>:
 80035e4:	4901      	ldr	r1, [pc, #4]	; (80035ec <_cleanup_r+0x8>)
 80035e6:	f000 b885 	b.w	80036f4 <_fwalk_reent>
 80035ea:	bf00      	nop
 80035ec:	08003549 	.word	0x08003549

080035f0 <__sfmoreglue>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	1e4a      	subs	r2, r1, #1
 80035f4:	2568      	movs	r5, #104	; 0x68
 80035f6:	4355      	muls	r5, r2
 80035f8:	460e      	mov	r6, r1
 80035fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035fe:	f000 f949 	bl	8003894 <_malloc_r>
 8003602:	4604      	mov	r4, r0
 8003604:	b140      	cbz	r0, 8003618 <__sfmoreglue+0x28>
 8003606:	2100      	movs	r1, #0
 8003608:	e9c0 1600 	strd	r1, r6, [r0]
 800360c:	300c      	adds	r0, #12
 800360e:	60a0      	str	r0, [r4, #8]
 8003610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003614:	f7ff fde6 	bl	80031e4 <memset>
 8003618:	4620      	mov	r0, r4
 800361a:	bd70      	pop	{r4, r5, r6, pc}

0800361c <__sinit>:
 800361c:	6983      	ldr	r3, [r0, #24]
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	bb33      	cbnz	r3, 8003672 <__sinit+0x56>
 8003624:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003628:	6503      	str	r3, [r0, #80]	; 0x50
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <__sinit+0x58>)
 800362c:	4a12      	ldr	r2, [pc, #72]	; (8003678 <__sinit+0x5c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6282      	str	r2, [r0, #40]	; 0x28
 8003632:	4298      	cmp	r0, r3
 8003634:	bf04      	itt	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	6183      	streq	r3, [r0, #24]
 800363a:	f000 f81f 	bl	800367c <__sfp>
 800363e:	6060      	str	r0, [r4, #4]
 8003640:	4620      	mov	r0, r4
 8003642:	f000 f81b 	bl	800367c <__sfp>
 8003646:	60a0      	str	r0, [r4, #8]
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f817 	bl	800367c <__sfp>
 800364e:	2200      	movs	r2, #0
 8003650:	60e0      	str	r0, [r4, #12]
 8003652:	2104      	movs	r1, #4
 8003654:	6860      	ldr	r0, [r4, #4]
 8003656:	f7ff ffa1 	bl	800359c <std>
 800365a:	2201      	movs	r2, #1
 800365c:	2109      	movs	r1, #9
 800365e:	68a0      	ldr	r0, [r4, #8]
 8003660:	f7ff ff9c 	bl	800359c <std>
 8003664:	2202      	movs	r2, #2
 8003666:	2112      	movs	r1, #18
 8003668:	68e0      	ldr	r0, [r4, #12]
 800366a:	f7ff ff97 	bl	800359c <std>
 800366e:	2301      	movs	r3, #1
 8003670:	61a3      	str	r3, [r4, #24]
 8003672:	bd10      	pop	{r4, pc}
 8003674:	08003b94 	.word	0x08003b94
 8003678:	080035e5 	.word	0x080035e5

0800367c <__sfp>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <__sfp+0x70>)
 8003680:	681e      	ldr	r6, [r3, #0]
 8003682:	69b3      	ldr	r3, [r6, #24]
 8003684:	4607      	mov	r7, r0
 8003686:	b913      	cbnz	r3, 800368e <__sfp+0x12>
 8003688:	4630      	mov	r0, r6
 800368a:	f7ff ffc7 	bl	800361c <__sinit>
 800368e:	3648      	adds	r6, #72	; 0x48
 8003690:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003694:	3b01      	subs	r3, #1
 8003696:	d503      	bpl.n	80036a0 <__sfp+0x24>
 8003698:	6833      	ldr	r3, [r6, #0]
 800369a:	b133      	cbz	r3, 80036aa <__sfp+0x2e>
 800369c:	6836      	ldr	r6, [r6, #0]
 800369e:	e7f7      	b.n	8003690 <__sfp+0x14>
 80036a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036a4:	b16d      	cbz	r5, 80036c2 <__sfp+0x46>
 80036a6:	3468      	adds	r4, #104	; 0x68
 80036a8:	e7f4      	b.n	8003694 <__sfp+0x18>
 80036aa:	2104      	movs	r1, #4
 80036ac:	4638      	mov	r0, r7
 80036ae:	f7ff ff9f 	bl	80035f0 <__sfmoreglue>
 80036b2:	6030      	str	r0, [r6, #0]
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d1f1      	bne.n	800369c <__sfp+0x20>
 80036b8:	230c      	movs	r3, #12
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4604      	mov	r4, r0
 80036be:	4620      	mov	r0, r4
 80036c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <__sfp+0x74>)
 80036c4:	6665      	str	r5, [r4, #100]	; 0x64
 80036c6:	e9c4 5500 	strd	r5, r5, [r4]
 80036ca:	60a5      	str	r5, [r4, #8]
 80036cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80036d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80036d4:	2208      	movs	r2, #8
 80036d6:	4629      	mov	r1, r5
 80036d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036dc:	f7ff fd82 	bl	80031e4 <memset>
 80036e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036e8:	e7e9      	b.n	80036be <__sfp+0x42>
 80036ea:	bf00      	nop
 80036ec:	08003b94 	.word	0x08003b94
 80036f0:	ffff0001 	.word	0xffff0001

080036f4 <_fwalk_reent>:
 80036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f8:	4680      	mov	r8, r0
 80036fa:	4689      	mov	r9, r1
 80036fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003700:	2600      	movs	r6, #0
 8003702:	b914      	cbnz	r4, 800370a <_fwalk_reent+0x16>
 8003704:	4630      	mov	r0, r6
 8003706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800370a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800370e:	3f01      	subs	r7, #1
 8003710:	d501      	bpl.n	8003716 <_fwalk_reent+0x22>
 8003712:	6824      	ldr	r4, [r4, #0]
 8003714:	e7f5      	b.n	8003702 <_fwalk_reent+0xe>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d907      	bls.n	800372c <_fwalk_reent+0x38>
 800371c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003720:	3301      	adds	r3, #1
 8003722:	d003      	beq.n	800372c <_fwalk_reent+0x38>
 8003724:	4629      	mov	r1, r5
 8003726:	4640      	mov	r0, r8
 8003728:	47c8      	blx	r9
 800372a:	4306      	orrs	r6, r0
 800372c:	3568      	adds	r5, #104	; 0x68
 800372e:	e7ee      	b.n	800370e <_fwalk_reent+0x1a>

08003730 <__swhatbuf_r>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	460e      	mov	r6, r1
 8003734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003738:	2900      	cmp	r1, #0
 800373a:	b096      	sub	sp, #88	; 0x58
 800373c:	4614      	mov	r4, r2
 800373e:	461d      	mov	r5, r3
 8003740:	da07      	bge.n	8003752 <__swhatbuf_r+0x22>
 8003742:	2300      	movs	r3, #0
 8003744:	602b      	str	r3, [r5, #0]
 8003746:	89b3      	ldrh	r3, [r6, #12]
 8003748:	061a      	lsls	r2, r3, #24
 800374a:	d410      	bmi.n	800376e <__swhatbuf_r+0x3e>
 800374c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003750:	e00e      	b.n	8003770 <__swhatbuf_r+0x40>
 8003752:	466a      	mov	r2, sp
 8003754:	f000 f96e 	bl	8003a34 <_fstat_r>
 8003758:	2800      	cmp	r0, #0
 800375a:	dbf2      	blt.n	8003742 <__swhatbuf_r+0x12>
 800375c:	9a01      	ldr	r2, [sp, #4]
 800375e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003762:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003766:	425a      	negs	r2, r3
 8003768:	415a      	adcs	r2, r3
 800376a:	602a      	str	r2, [r5, #0]
 800376c:	e7ee      	b.n	800374c <__swhatbuf_r+0x1c>
 800376e:	2340      	movs	r3, #64	; 0x40
 8003770:	2000      	movs	r0, #0
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	b016      	add	sp, #88	; 0x58
 8003776:	bd70      	pop	{r4, r5, r6, pc}

08003778 <__smakebuf_r>:
 8003778:	898b      	ldrh	r3, [r1, #12]
 800377a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800377c:	079d      	lsls	r5, r3, #30
 800377e:	4606      	mov	r6, r0
 8003780:	460c      	mov	r4, r1
 8003782:	d507      	bpl.n	8003794 <__smakebuf_r+0x1c>
 8003784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	6123      	str	r3, [r4, #16]
 800378c:	2301      	movs	r3, #1
 800378e:	6163      	str	r3, [r4, #20]
 8003790:	b002      	add	sp, #8
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	ab01      	add	r3, sp, #4
 8003796:	466a      	mov	r2, sp
 8003798:	f7ff ffca 	bl	8003730 <__swhatbuf_r>
 800379c:	9900      	ldr	r1, [sp, #0]
 800379e:	4605      	mov	r5, r0
 80037a0:	4630      	mov	r0, r6
 80037a2:	f000 f877 	bl	8003894 <_malloc_r>
 80037a6:	b948      	cbnz	r0, 80037bc <__smakebuf_r+0x44>
 80037a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ac:	059a      	lsls	r2, r3, #22
 80037ae:	d4ef      	bmi.n	8003790 <__smakebuf_r+0x18>
 80037b0:	f023 0303 	bic.w	r3, r3, #3
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	e7e3      	b.n	8003784 <__smakebuf_r+0xc>
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <__smakebuf_r+0x7c>)
 80037be:	62b3      	str	r3, [r6, #40]	; 0x28
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	6020      	str	r0, [r4, #0]
 80037c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	9b00      	ldr	r3, [sp, #0]
 80037cc:	6163      	str	r3, [r4, #20]
 80037ce:	9b01      	ldr	r3, [sp, #4]
 80037d0:	6120      	str	r0, [r4, #16]
 80037d2:	b15b      	cbz	r3, 80037ec <__smakebuf_r+0x74>
 80037d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 f93d 	bl	8003a58 <_isatty_r>
 80037de:	b128      	cbz	r0, 80037ec <__smakebuf_r+0x74>
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	81a3      	strh	r3, [r4, #12]
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	431d      	orrs	r5, r3
 80037f0:	81a5      	strh	r5, [r4, #12]
 80037f2:	e7cd      	b.n	8003790 <__smakebuf_r+0x18>
 80037f4:	080035e5 	.word	0x080035e5

080037f8 <_free_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4605      	mov	r5, r0
 80037fc:	2900      	cmp	r1, #0
 80037fe:	d045      	beq.n	800388c <_free_r+0x94>
 8003800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003804:	1f0c      	subs	r4, r1, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfb8      	it	lt
 800380a:	18e4      	addlt	r4, r4, r3
 800380c:	f000 f946 	bl	8003a9c <__malloc_lock>
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <_free_r+0x98>)
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	4610      	mov	r0, r2
 8003816:	b933      	cbnz	r3, 8003826 <_free_r+0x2e>
 8003818:	6063      	str	r3, [r4, #4]
 800381a:	6014      	str	r4, [r2, #0]
 800381c:	4628      	mov	r0, r5
 800381e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003822:	f000 b93c 	b.w	8003a9e <__malloc_unlock>
 8003826:	42a3      	cmp	r3, r4
 8003828:	d90c      	bls.n	8003844 <_free_r+0x4c>
 800382a:	6821      	ldr	r1, [r4, #0]
 800382c:	1862      	adds	r2, r4, r1
 800382e:	4293      	cmp	r3, r2
 8003830:	bf04      	itt	eq
 8003832:	681a      	ldreq	r2, [r3, #0]
 8003834:	685b      	ldreq	r3, [r3, #4]
 8003836:	6063      	str	r3, [r4, #4]
 8003838:	bf04      	itt	eq
 800383a:	1852      	addeq	r2, r2, r1
 800383c:	6022      	streq	r2, [r4, #0]
 800383e:	6004      	str	r4, [r0, #0]
 8003840:	e7ec      	b.n	800381c <_free_r+0x24>
 8003842:	4613      	mov	r3, r2
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	b10a      	cbz	r2, 800384c <_free_r+0x54>
 8003848:	42a2      	cmp	r2, r4
 800384a:	d9fa      	bls.n	8003842 <_free_r+0x4a>
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	1858      	adds	r0, r3, r1
 8003850:	42a0      	cmp	r0, r4
 8003852:	d10b      	bne.n	800386c <_free_r+0x74>
 8003854:	6820      	ldr	r0, [r4, #0]
 8003856:	4401      	add	r1, r0
 8003858:	1858      	adds	r0, r3, r1
 800385a:	4282      	cmp	r2, r0
 800385c:	6019      	str	r1, [r3, #0]
 800385e:	d1dd      	bne.n	800381c <_free_r+0x24>
 8003860:	6810      	ldr	r0, [r2, #0]
 8003862:	6852      	ldr	r2, [r2, #4]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	4401      	add	r1, r0
 8003868:	6019      	str	r1, [r3, #0]
 800386a:	e7d7      	b.n	800381c <_free_r+0x24>
 800386c:	d902      	bls.n	8003874 <_free_r+0x7c>
 800386e:	230c      	movs	r3, #12
 8003870:	602b      	str	r3, [r5, #0]
 8003872:	e7d3      	b.n	800381c <_free_r+0x24>
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	1821      	adds	r1, r4, r0
 8003878:	428a      	cmp	r2, r1
 800387a:	bf04      	itt	eq
 800387c:	6811      	ldreq	r1, [r2, #0]
 800387e:	6852      	ldreq	r2, [r2, #4]
 8003880:	6062      	str	r2, [r4, #4]
 8003882:	bf04      	itt	eq
 8003884:	1809      	addeq	r1, r1, r0
 8003886:	6021      	streq	r1, [r4, #0]
 8003888:	605c      	str	r4, [r3, #4]
 800388a:	e7c7      	b.n	800381c <_free_r+0x24>
 800388c:	bd38      	pop	{r3, r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	20004034 	.word	0x20004034

08003894 <_malloc_r>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	1ccd      	adds	r5, r1, #3
 8003898:	f025 0503 	bic.w	r5, r5, #3
 800389c:	3508      	adds	r5, #8
 800389e:	2d0c      	cmp	r5, #12
 80038a0:	bf38      	it	cc
 80038a2:	250c      	movcc	r5, #12
 80038a4:	2d00      	cmp	r5, #0
 80038a6:	4606      	mov	r6, r0
 80038a8:	db01      	blt.n	80038ae <_malloc_r+0x1a>
 80038aa:	42a9      	cmp	r1, r5
 80038ac:	d903      	bls.n	80038b6 <_malloc_r+0x22>
 80038ae:	230c      	movs	r3, #12
 80038b0:	6033      	str	r3, [r6, #0]
 80038b2:	2000      	movs	r0, #0
 80038b4:	bd70      	pop	{r4, r5, r6, pc}
 80038b6:	f000 f8f1 	bl	8003a9c <__malloc_lock>
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <_malloc_r+0xac>)
 80038bc:	6814      	ldr	r4, [r2, #0]
 80038be:	4621      	mov	r1, r4
 80038c0:	b991      	cbnz	r1, 80038e8 <_malloc_r+0x54>
 80038c2:	4c20      	ldr	r4, [pc, #128]	; (8003944 <_malloc_r+0xb0>)
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	b91b      	cbnz	r3, 80038d0 <_malloc_r+0x3c>
 80038c8:	4630      	mov	r0, r6
 80038ca:	f000 f83d 	bl	8003948 <_sbrk_r>
 80038ce:	6020      	str	r0, [r4, #0]
 80038d0:	4629      	mov	r1, r5
 80038d2:	4630      	mov	r0, r6
 80038d4:	f000 f838 	bl	8003948 <_sbrk_r>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d124      	bne.n	8003926 <_malloc_r+0x92>
 80038dc:	230c      	movs	r3, #12
 80038de:	6033      	str	r3, [r6, #0]
 80038e0:	4630      	mov	r0, r6
 80038e2:	f000 f8dc 	bl	8003a9e <__malloc_unlock>
 80038e6:	e7e4      	b.n	80038b2 <_malloc_r+0x1e>
 80038e8:	680b      	ldr	r3, [r1, #0]
 80038ea:	1b5b      	subs	r3, r3, r5
 80038ec:	d418      	bmi.n	8003920 <_malloc_r+0x8c>
 80038ee:	2b0b      	cmp	r3, #11
 80038f0:	d90f      	bls.n	8003912 <_malloc_r+0x7e>
 80038f2:	600b      	str	r3, [r1, #0]
 80038f4:	50cd      	str	r5, [r1, r3]
 80038f6:	18cc      	adds	r4, r1, r3
 80038f8:	4630      	mov	r0, r6
 80038fa:	f000 f8d0 	bl	8003a9e <__malloc_unlock>
 80038fe:	f104 000b 	add.w	r0, r4, #11
 8003902:	1d23      	adds	r3, r4, #4
 8003904:	f020 0007 	bic.w	r0, r0, #7
 8003908:	1ac3      	subs	r3, r0, r3
 800390a:	d0d3      	beq.n	80038b4 <_malloc_r+0x20>
 800390c:	425a      	negs	r2, r3
 800390e:	50e2      	str	r2, [r4, r3]
 8003910:	e7d0      	b.n	80038b4 <_malloc_r+0x20>
 8003912:	428c      	cmp	r4, r1
 8003914:	684b      	ldr	r3, [r1, #4]
 8003916:	bf16      	itet	ne
 8003918:	6063      	strne	r3, [r4, #4]
 800391a:	6013      	streq	r3, [r2, #0]
 800391c:	460c      	movne	r4, r1
 800391e:	e7eb      	b.n	80038f8 <_malloc_r+0x64>
 8003920:	460c      	mov	r4, r1
 8003922:	6849      	ldr	r1, [r1, #4]
 8003924:	e7cc      	b.n	80038c0 <_malloc_r+0x2c>
 8003926:	1cc4      	adds	r4, r0, #3
 8003928:	f024 0403 	bic.w	r4, r4, #3
 800392c:	42a0      	cmp	r0, r4
 800392e:	d005      	beq.n	800393c <_malloc_r+0xa8>
 8003930:	1a21      	subs	r1, r4, r0
 8003932:	4630      	mov	r0, r6
 8003934:	f000 f808 	bl	8003948 <_sbrk_r>
 8003938:	3001      	adds	r0, #1
 800393a:	d0cf      	beq.n	80038dc <_malloc_r+0x48>
 800393c:	6025      	str	r5, [r4, #0]
 800393e:	e7db      	b.n	80038f8 <_malloc_r+0x64>
 8003940:	20004034 	.word	0x20004034
 8003944:	20004038 	.word	0x20004038

08003948 <_sbrk_r>:
 8003948:	b538      	push	{r3, r4, r5, lr}
 800394a:	4c06      	ldr	r4, [pc, #24]	; (8003964 <_sbrk_r+0x1c>)
 800394c:	2300      	movs	r3, #0
 800394e:	4605      	mov	r5, r0
 8003950:	4608      	mov	r0, r1
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	f7fd f88e 	bl	8000a74 <_sbrk>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_sbrk_r+0x1a>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	b103      	cbz	r3, 8003962 <_sbrk_r+0x1a>
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	20004048 	.word	0x20004048

08003968 <__sread>:
 8003968:	b510      	push	{r4, lr}
 800396a:	460c      	mov	r4, r1
 800396c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003970:	f000 f896 	bl	8003aa0 <_read_r>
 8003974:	2800      	cmp	r0, #0
 8003976:	bfab      	itete	ge
 8003978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800397a:	89a3      	ldrhlt	r3, [r4, #12]
 800397c:	181b      	addge	r3, r3, r0
 800397e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003982:	bfac      	ite	ge
 8003984:	6563      	strge	r3, [r4, #84]	; 0x54
 8003986:	81a3      	strhlt	r3, [r4, #12]
 8003988:	bd10      	pop	{r4, pc}

0800398a <__swrite>:
 800398a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398e:	461f      	mov	r7, r3
 8003990:	898b      	ldrh	r3, [r1, #12]
 8003992:	05db      	lsls	r3, r3, #23
 8003994:	4605      	mov	r5, r0
 8003996:	460c      	mov	r4, r1
 8003998:	4616      	mov	r6, r2
 800399a:	d505      	bpl.n	80039a8 <__swrite+0x1e>
 800399c:	2302      	movs	r3, #2
 800399e:	2200      	movs	r2, #0
 80039a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a4:	f000 f868 	bl	8003a78 <_lseek_r>
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039b2:	81a3      	strh	r3, [r4, #12]
 80039b4:	4632      	mov	r2, r6
 80039b6:	463b      	mov	r3, r7
 80039b8:	4628      	mov	r0, r5
 80039ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039be:	f000 b817 	b.w	80039f0 <_write_r>

080039c2 <__sseek>:
 80039c2:	b510      	push	{r4, lr}
 80039c4:	460c      	mov	r4, r1
 80039c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ca:	f000 f855 	bl	8003a78 <_lseek_r>
 80039ce:	1c43      	adds	r3, r0, #1
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	bf15      	itete	ne
 80039d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80039d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039de:	81a3      	strheq	r3, [r4, #12]
 80039e0:	bf18      	it	ne
 80039e2:	81a3      	strhne	r3, [r4, #12]
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <__sclose>:
 80039e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ea:	f000 b813 	b.w	8003a14 <_close_r>
	...

080039f0 <_write_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4c07      	ldr	r4, [pc, #28]	; (8003a10 <_write_r+0x20>)
 80039f4:	4605      	mov	r5, r0
 80039f6:	4608      	mov	r0, r1
 80039f8:	4611      	mov	r1, r2
 80039fa:	2200      	movs	r2, #0
 80039fc:	6022      	str	r2, [r4, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f7fc fda7 	bl	8000552 <_write>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d102      	bne.n	8003a0e <_write_r+0x1e>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	b103      	cbz	r3, 8003a0e <_write_r+0x1e>
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
 8003a10:	20004048 	.word	0x20004048

08003a14 <_close_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4c06      	ldr	r4, [pc, #24]	; (8003a30 <_close_r+0x1c>)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	6023      	str	r3, [r4, #0]
 8003a20:	f7fc fff4 	bl	8000a0c <_close>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_close_r+0x1a>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_close_r+0x1a>
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	20004048 	.word	0x20004048

08003a34 <_fstat_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4c07      	ldr	r4, [pc, #28]	; (8003a54 <_fstat_r+0x20>)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	f7fc ffef 	bl	8000a24 <_fstat>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d102      	bne.n	8003a50 <_fstat_r+0x1c>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	b103      	cbz	r3, 8003a50 <_fstat_r+0x1c>
 8003a4e:	602b      	str	r3, [r5, #0]
 8003a50:	bd38      	pop	{r3, r4, r5, pc}
 8003a52:	bf00      	nop
 8003a54:	20004048 	.word	0x20004048

08003a58 <_isatty_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4c06      	ldr	r4, [pc, #24]	; (8003a74 <_isatty_r+0x1c>)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	4605      	mov	r5, r0
 8003a60:	4608      	mov	r0, r1
 8003a62:	6023      	str	r3, [r4, #0]
 8003a64:	f7fc ffee 	bl	8000a44 <_isatty>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d102      	bne.n	8003a72 <_isatty_r+0x1a>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	b103      	cbz	r3, 8003a72 <_isatty_r+0x1a>
 8003a70:	602b      	str	r3, [r5, #0]
 8003a72:	bd38      	pop	{r3, r4, r5, pc}
 8003a74:	20004048 	.word	0x20004048

08003a78 <_lseek_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4c07      	ldr	r4, [pc, #28]	; (8003a98 <_lseek_r+0x20>)
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	4608      	mov	r0, r1
 8003a80:	4611      	mov	r1, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	6022      	str	r2, [r4, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f7fc ffe7 	bl	8000a5a <_lseek>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_lseek_r+0x1e>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_lseek_r+0x1e>
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	20004048 	.word	0x20004048

08003a9c <__malloc_lock>:
 8003a9c:	4770      	bx	lr

08003a9e <__malloc_unlock>:
 8003a9e:	4770      	bx	lr

08003aa0 <_read_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4c07      	ldr	r4, [pc, #28]	; (8003ac0 <_read_r+0x20>)
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	6022      	str	r2, [r4, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7fc ff8f 	bl	80009d2 <_read>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_read_r+0x1e>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_read_r+0x1e>
 8003abc:	602b      	str	r3, [r5, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	20004048 	.word	0x20004048

08003ac4 <_init>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr

08003ad0 <_fini>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	bf00      	nop
 8003ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ad6:	bc08      	pop	{r3}
 8003ad8:	469e      	mov	lr, r3
 8003ada:	4770      	bx	lr
