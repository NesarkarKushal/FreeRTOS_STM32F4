
Lab3_Changing_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004268  08004268  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004270  08004270  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004568  20000010  08004288  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004578  08004288  00024578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db3f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002248  00000000  00000000  0002db7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a90  00000000  00000000  0002fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020be3  00000000  00000000  000311e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095af  00000000  00000000  00051dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c79d1  00000000  00000000  0005b372  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  00122dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041bc 	.word	0x080041bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080041bc 	.word	0x080041bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetTimerTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetTimerTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000280 	.word	0x20000280
 8000534:	200002d4 	.word	0x200002d4

08000538 <Func1>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void Func1(void const * argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <Func1+0x34>)
 8000548:	f000 fcd8 	bl	8000efc <HAL_GPIO_WritePin>
    osDelay(500);
 800054c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000550:	f001 f976 	bl	8001840 <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <Func1+0x34>)
 800055c:	f000 fcce 	bl	8000efc <HAL_GPIO_WritePin>
    osDelay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f001 f96c 	bl	8001840 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000568:	e7ea      	b.n	8000540 <Func1+0x8>
 800056a:	bf00      	nop
 800056c:	40020c00 	.word	0x40020c00

08000570 <Func2>:
  }
}

void Func2(void const * argument)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  for(;;)
  {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <Func2+0x34>)
 8000580:	f000 fcbc 	bl	8000efc <HAL_GPIO_WritePin>
	    osDelay(500);
 8000584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000588:	f001 f95a 	bl	8001840 <osDelay>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <Func2+0x34>)
 8000594:	f000 fcb2 	bl	8000efc <HAL_GPIO_WritePin>
	    osDelay(500);  }
 8000598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059c:	f001 f950 	bl	8001840 <osDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005a0:	e7ea      	b.n	8000578 <Func2+0x8>
 80005a2:	bf00      	nop
 80005a4:	40020c00 	.word	0x40020c00

080005a8 <Func3>:
}

void Func3(void const * argument)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  for(;;)
  {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b6:	4809      	ldr	r0, [pc, #36]	; (80005dc <Func3+0x34>)
 80005b8:	f000 fca0 	bl	8000efc <HAL_GPIO_WritePin>
	    osDelay(500);
 80005bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c0:	f001 f93e 	bl	8001840 <osDelay>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <Func3+0x34>)
 80005cc:	f000 fc96 	bl	8000efc <HAL_GPIO_WritePin>
	    osDelay(500);
 80005d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d4:	f001 f934 	bl	8001840 <osDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005d8:	e7ea      	b.n	80005b0 <Func3+0x8>
 80005da:	bf00      	nop
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <main>:
//	    osDelay(500);
//  }
//}

int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0

  HAL_Init();
 80005e6:	f000 f997 	bl	8000918 <HAL_Init>

  SystemClock_Config();
 80005ea:	f000 f86f 	bl	80006cc <SystemClock_Config>

  MX_GPIO_Init();
 80005ee:	f000 f8cb 	bl	8000788 <MX_GPIO_Init>

  osThreadDef(TaskA, Func1, 1, 0, 128);
 80005f2:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <main+0xc8>)
 80005f4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  id1 = osThreadCreate(osThread(TaskA), NULL);
 8000606:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f8b6 	bl	800177e <osThreadCreate>
 8000612:	4602      	mov	r2, r0
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <main+0xcc>)
 8000616:	601a      	str	r2, [r3, #0]

  osThreadDef(TaskB, Func2, 1, 0, 128);
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <main+0xd0>)
 800061a:	f107 0420 	add.w	r4, r7, #32
 800061e:	461d      	mov	r5, r3
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  id2 = osThreadCreate(osThread(TaskB), NULL);
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f8a3 	bl	800177e <osThreadCreate>
 8000638:	4602      	mov	r2, r0
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <main+0xd4>)
 800063c:	601a      	str	r2, [r3, #0]

  osThreadDef(TaskC, Func3, 1, 0, 128);
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <main+0xd8>)
 8000640:	1d3c      	adds	r4, r7, #4
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  id3 = osThreadCreate(osThread(TaskC), NULL);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f892 	bl	800177e <osThreadCreate>
 800065a:	4602      	mov	r2, r0
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <main+0xdc>)
 800065e:	601a      	str	r2, [r3, #0]

  status1=osThreadSetPriority(id2,0);
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <main+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f8d5 	bl	8001816 <osThreadSetPriority>
 800066c:	4602      	mov	r2, r0
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <main+0xe0>)
 8000670:	601a      	str	r2, [r3, #0]
  status2=osThreadSetPriority(id3,0);
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <main+0xdc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f8cc 	bl	8001816 <osThreadSetPriority>
 800067e:	4602      	mov	r2, r0
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <main+0xe4>)
 8000682:	601a      	str	r2, [r3, #0]

  if(status1==osOK)
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <main+0xe0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d109      	bne.n	80006a0 <main+0xc0>
  {
	  if(status2==osOK)
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <main+0xe4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d105      	bne.n	80006a0 <main+0xc0>
	  {
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <main+0xe8>)
 800069c:	f000 fc2e 	bl	8000efc <HAL_GPIO_WritePin>
	  }
  }
  osKernelStart();
 80006a0:	f001 f866 	bl	8001770 <osKernelStart>


  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0xc4>
 80006a6:	bf00      	nop
 80006a8:	080041dc 	.word	0x080041dc
 80006ac:	20004530 	.word	0x20004530
 80006b0:	08004200 	.word	0x08004200
 80006b4:	2000452c 	.word	0x2000452c
 80006b8:	08004224 	.word	0x08004224
 80006bc:	20004528 	.word	0x20004528
 80006c0:	20004520 	.word	0x20004520
 80006c4:	2000451c 	.word	0x2000451c
 80006c8:	40020c00 	.word	0x40020c00

080006cc <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fd65 	bl	80041aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xb4>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xb4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <SystemClock_Config+0xb8>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemClock_Config+0xb8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fbf7 	bl	8000f30 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000748:	f000 f852 	bl	80007f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fe52 	bl	8001410 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000772:	f000 f83d 	bl	80007f0 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_GPIO_Init+0x60>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <MX_GPIO_Init+0x60>)
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_GPIO_Init+0x60>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0x64>)
 80007c0:	f000 fb9c 	bl	8000efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007c4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0x64>)
 80007dc:	f000 f9f4 	bl	8000bc8 <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020c00 	.word	0x40020c00

080007f0 <Error_Handler>:

void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0x6>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x54>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <HAL_MspInit+0x54>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x54>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_MspInit+0x54>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_MspInit+0x54>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x54>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 f99a 	bl	8000b76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <NMI_Handler+0x4>

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f89c 	bl	80009bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000884:	f002 fc14 	bl	80030b0 <xTaskGetSchedulerState>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d001      	beq.n	8000892 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800088e:	f003 f9fb 	bl	8003c88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <SystemInit+0x28>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <SystemInit+0x28>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <SystemInit+0x28>)
 80008ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008b2:	609a      	str	r2, [r3, #8]
#endif
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008ca:	e003      	b.n	80008d4 <LoopCopyDataInit>

080008cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008d2:	3104      	adds	r1, #4

080008d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008dc:	d3f6      	bcc.n	80008cc <CopyDataInit>
  ldr  r2, =_sbss
 80008de:	4a0b      	ldr	r2, [pc, #44]	; (800090c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008e0:	e002      	b.n	80008e8 <LoopFillZerobss>

080008e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008e4:	f842 3b04 	str.w	r3, [r2], #4

080008e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008ec:	d3f9      	bcc.n	80008e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ee:	f7ff ffd3 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f2:	f003 fc2b 	bl	800414c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f6:	f7ff fe73 	bl	80005e0 <main>
  bx  lr    
 80008fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000900:	08004278 	.word	0x08004278
  ldr  r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000908:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800090c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000910:	20004578 	.word	0x20004578

08000914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <HAL_Init+0x40>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_Init+0x40>)
 800092e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x40>)
 800093a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f90d 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff ff54 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023c00 	.word	0x40023c00

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f917 	bl	8000bae <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 f8ed 	bl	8000b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20004534 	.word	0x20004534

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20004534 	.word	0x20004534

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	; (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	; 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
         );
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	; 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff47 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff5c 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff8e 	bl	8000ab4 <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff ffb0 	bl	8000b1c <SysTick_Config>
 8000bbc:	4603      	mov	r3, r0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	; 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	e16b      	b.n	8000ebc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be4:	2201      	movs	r2, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 815a 	bne.w	8000eb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d00b      	beq.n	8000c22 <HAL_GPIO_Init+0x5a>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d007      	beq.n	8000c22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c16:	2b11      	cmp	r3, #17
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b12      	cmp	r3, #18
 8000c20:	d130      	bne.n	8000c84 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4013      	ands	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	091b      	lsrs	r3, r3, #4
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0xfc>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b12      	cmp	r3, #18
 8000cc2:	d123      	bne.n	8000d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	69b9      	ldr	r1, [r7, #24]
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0203 	and.w	r2, r3, #3
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80b4 	beq.w	8000eb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b5f      	ldr	r3, [pc, #380]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a5e      	ldr	r2, [pc, #376]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <HAL_GPIO_Init+0x308>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6a:	4a5a      	ldr	r2, [pc, #360]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x310>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d02b      	beq.n	8000dee <HAL_GPIO_Init+0x226>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a50      	ldr	r2, [pc, #320]	; (8000edc <HAL_GPIO_Init+0x314>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d025      	beq.n	8000dea <HAL_GPIO_Init+0x222>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x318>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d01f      	beq.n	8000de6 <HAL_GPIO_Init+0x21e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <HAL_GPIO_Init+0x31c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d019      	beq.n	8000de2 <HAL_GPIO_Init+0x21a>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_GPIO_Init+0x320>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d013      	beq.n	8000dde <HAL_GPIO_Init+0x216>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	; (8000eec <HAL_GPIO_Init+0x324>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x212>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	; (8000ef0 <HAL_GPIO_Init+0x328>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x20e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4a      	ldr	r2, [pc, #296]	; (8000ef4 <HAL_GPIO_Init+0x32c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x20a>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e00e      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	e00c      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dd6:	2306      	movs	r3, #6
 8000dd8:	e00a      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dda:	2305      	movs	r3, #5
 8000ddc:	e008      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dde:	2304      	movs	r3, #4
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000de2:	2303      	movs	r3, #3
 8000de4:	e004      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_GPIO_Init+0x228>
 8000dee:	2300      	movs	r3, #0
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	4093      	lsls	r3, r2
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e00:	4934      	ldr	r1, [pc, #208]	; (8000ed4 <HAL_GPIO_Init+0x30c>)
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e32:	4a31      	ldr	r2, [pc, #196]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e5c:	4a26      	ldr	r2, [pc, #152]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e62:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_GPIO_Init+0x330>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	61fb      	str	r3, [r7, #28]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f67f ae90 	bls.w	8000be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3724      	adds	r7, #36	; 0x24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40021c00 	.word	0x40021c00
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f18:	e003      	b.n	8000f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	619a      	str	r2, [r3, #24]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e25b      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d075      	beq.n	800103a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f4e:	4ba3      	ldr	r3, [pc, #652]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d00c      	beq.n	8000f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5a:	4ba0      	ldr	r3, [pc, #640]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d112      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f66:	4b9d      	ldr	r3, [pc, #628]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f72:	d10b      	bne.n	8000f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	4b99      	ldr	r3, [pc, #612]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d05b      	beq.n	8001038 <HAL_RCC_OscConfig+0x108>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d157      	bne.n	8001038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e236      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f94:	d106      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x74>
 8000f96:	4b91      	ldr	r3, [pc, #580]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a90      	ldr	r2, [pc, #576]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e01d      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b8b      	ldr	r3, [pc, #556]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a8a      	ldr	r2, [pc, #552]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b88      	ldr	r3, [pc, #544]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a87      	ldr	r2, [pc, #540]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0xb0>
 8000fc8:	4b84      	ldr	r3, [pc, #528]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a83      	ldr	r2, [pc, #524]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b81      	ldr	r3, [pc, #516]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a80      	ldr	r2, [pc, #512]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d013      	beq.n	8001010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fcfc 	bl	80009e4 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fcf8 	bl	80009e4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e1fb      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	4b76      	ldr	r3, [pc, #472]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0xc0>
 800100e:	e014      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fce8 	bl	80009e4 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fce4 	bl	80009e4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e1e7      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0xe8>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d063      	beq.n	800110e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001046:	4b65      	ldr	r3, [pc, #404]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00b      	beq.n	800106a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001052:	4b62      	ldr	r3, [pc, #392]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800105a:	2b08      	cmp	r3, #8
 800105c:	d11c      	bne.n	8001098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105e:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d116      	bne.n	8001098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106a:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <HAL_RCC_OscConfig+0x152>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d001      	beq.n	8001082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e1bb      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4b56      	ldr	r3, [pc, #344]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4952      	ldr	r1, [pc, #328]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001092:	4313      	orrs	r3, r2
 8001094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	e03a      	b.n	800110e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <HAL_RCC_OscConfig+0x2b0>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a6:	f7ff fc9d 	bl	80009e4 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc99 	bl	80009e4 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e19c      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010cc:	4b43      	ldr	r3, [pc, #268]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4940      	ldr	r1, [pc, #256]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
 80010e0:	e015      	b.n	800110e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <HAL_RCC_OscConfig+0x2b0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc7c 	bl	80009e4 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc78 	bl	80009e4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e17b      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d030      	beq.n	800117c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d016      	beq.n	8001150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001122:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <HAL_RCC_OscConfig+0x2b4>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001128:	f7ff fc5c 	bl	80009e4 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff fc58 	bl	80009e4 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e15b      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x200>
 800114e:	e015      	b.n	800117c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_RCC_OscConfig+0x2b4>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001156:	f7ff fc45 	bl	80009e4 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800115e:	f7ff fc41 	bl	80009e4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e144      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a0 	beq.w	80012ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10f      	bne.n	80011ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_RCC_OscConfig+0x2b8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d121      	bne.n	800120a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_RCC_OscConfig+0x2b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_RCC_OscConfig+0x2b8>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fc07 	bl	80009e4 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	e011      	b.n	80011fe <HAL_RCC_OscConfig+0x2ce>
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	42470000 	.word	0x42470000
 80011e4:	42470e80 	.word	0x42470e80
 80011e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ec:	f7ff fbfa 	bl	80009e4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e0fd      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fe:	4b81      	ldr	r3, [pc, #516]	; (8001404 <HAL_RCC_OscConfig+0x4d4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d106      	bne.n	8001220 <HAL_RCC_OscConfig+0x2f0>
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001216:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6713      	str	r3, [r2, #112]	; 0x70
 800121e:	e01c      	b.n	800125a <HAL_RCC_OscConfig+0x32a>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x312>
 8001228:	4b77      	ldr	r3, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 800122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122c:	4a76      	ldr	r2, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6713      	str	r3, [r2, #112]	; 0x70
 8001234:	4b74      	ldr	r3, [pc, #464]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	4a73      	ldr	r2, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6713      	str	r3, [r2, #112]	; 0x70
 8001240:	e00b      	b.n	800125a <HAL_RCC_OscConfig+0x32a>
 8001242:	4b71      	ldr	r3, [pc, #452]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001246:	4a70      	ldr	r2, [pc, #448]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6713      	str	r3, [r2, #112]	; 0x70
 800124e:	4b6e      	ldr	r3, [pc, #440]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001252:	4a6d      	ldr	r2, [pc, #436]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d015      	beq.n	800128e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001262:	f7ff fbbf 	bl	80009e4 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fbbb 	bl	80009e4 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0bc      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	4b61      	ldr	r3, [pc, #388]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0ee      	beq.n	800126a <HAL_RCC_OscConfig+0x33a>
 800128c:	e014      	b.n	80012b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fba9 	bl	80009e4 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fba5 	bl	80009e4 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0a6      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	4b56      	ldr	r3, [pc, #344]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 80012ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ee      	bne.n	8001296 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012be:	4b52      	ldr	r3, [pc, #328]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a51      	ldr	r2, [pc, #324]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 80012c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8092 	beq.w	80013f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012d4:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d05c      	beq.n	800139a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d141      	bne.n	800136c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b48      	ldr	r3, [pc, #288]	; (800140c <HAL_RCC_OscConfig+0x4dc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb79 	bl	80009e4 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fb75 	bl	80009e4 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e078      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69da      	ldr	r2, [r3, #28]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	019b      	lsls	r3, r3, #6
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	3b01      	subs	r3, #1
 800132e:	041b      	lsls	r3, r3, #16
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	061b      	lsls	r3, r3, #24
 8001338:	4933      	ldr	r1, [pc, #204]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <HAL_RCC_OscConfig+0x4dc>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fb4e 	bl	80009e4 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff fb4a 	bl	80009e4 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e04d      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x41c>
 800136a:	e045      	b.n	80013f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_RCC_OscConfig+0x4dc>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fb37 	bl	80009e4 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fb33 	bl	80009e4 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e036      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x44a>
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e029      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_RCC_OscConfig+0x4d8>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d115      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013ce:	4013      	ands	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d10d      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d106      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40007000 	.word	0x40007000
 8001408:	40023800 	.word	0x40023800
 800140c:	42470060 	.word	0x42470060

08001410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0cc      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001424:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d90c      	bls.n	800144c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b65      	ldr	r3, [pc, #404]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0b8      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a58      	ldr	r2, [pc, #352]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800146e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	494d      	ldr	r1, [pc, #308]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d044      	beq.n	8001530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d119      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e07f      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d003      	beq.n	80014ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e06f      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e067      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 0203 	bic.w	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4934      	ldr	r1, [pc, #208]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001500:	f7ff fa70 	bl	80009e4 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	e00a      	b.n	800151e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff fa6c 	bl	80009e4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e04f      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 020c 	and.w	r2, r3, #12
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	429a      	cmp	r2, r3
 800152e:	d1eb      	bne.n	8001508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001530:	4b25      	ldr	r3, [pc, #148]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 030f 	and.w	r3, r3, #15
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d20c      	bcs.n	8001558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e032      	b.n	80015be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	490e      	ldr	r1, [pc, #56]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001596:	f000 f821 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 800159a:	4601      	mov	r1, r0
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	fa21 f303 	lsr.w	r3, r1, r3
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f9d0 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00
 80015cc:	40023800 	.word	0x40023800
 80015d0:	08004258 	.word	0x08004258
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_GetSysClockFreq+0x158>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d007      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x32>
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d008      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x38>
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 808d 	bne.w	8001722 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_GetSysClockFreq+0x15c>)
 800160a:	60bb      	str	r3, [r7, #8]
       break;
 800160c:	e08c      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800160e:	4b4b      	ldr	r3, [pc, #300]	; (800173c <HAL_RCC_GetSysClockFreq+0x160>)
 8001610:	60bb      	str	r3, [r7, #8]
      break;
 8001612:	e089      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001614:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_GetSysClockFreq+0x158>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800161c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161e:	4b45      	ldr	r3, [pc, #276]	; (8001734 <HAL_RCC_GetSysClockFreq+0x158>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d023      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800162a:	4b42      	ldr	r3, [pc, #264]	; (8001734 <HAL_RCC_GetSysClockFreq+0x158>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	099b      	lsrs	r3, r3, #6
 8001630:	f04f 0400 	mov.w	r4, #0
 8001634:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	ea03 0501 	and.w	r5, r3, r1
 8001640:	ea04 0602 	and.w	r6, r4, r2
 8001644:	4a3d      	ldr	r2, [pc, #244]	; (800173c <HAL_RCC_GetSysClockFreq+0x160>)
 8001646:	fb02 f106 	mul.w	r1, r2, r6
 800164a:	2200      	movs	r2, #0
 800164c:	fb02 f205 	mul.w	r2, r2, r5
 8001650:	440a      	add	r2, r1
 8001652:	493a      	ldr	r1, [pc, #232]	; (800173c <HAL_RCC_GetSysClockFreq+0x160>)
 8001654:	fba5 0101 	umull	r0, r1, r5, r1
 8001658:	1853      	adds	r3, r2, r1
 800165a:	4619      	mov	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f04f 0400 	mov.w	r4, #0
 8001662:	461a      	mov	r2, r3
 8001664:	4623      	mov	r3, r4
 8001666:	f7fe fdb3 	bl	80001d0 <__aeabi_uldivmod>
 800166a:	4603      	mov	r3, r0
 800166c:	460c      	mov	r4, r1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e049      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_RCC_GetSysClockFreq+0x158>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	f04f 0400 	mov.w	r4, #0
 800167c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	ea03 0501 	and.w	r5, r3, r1
 8001688:	ea04 0602 	and.w	r6, r4, r2
 800168c:	4629      	mov	r1, r5
 800168e:	4632      	mov	r2, r6
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	f04f 0400 	mov.w	r4, #0
 8001698:	0154      	lsls	r4, r2, #5
 800169a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800169e:	014b      	lsls	r3, r1, #5
 80016a0:	4619      	mov	r1, r3
 80016a2:	4622      	mov	r2, r4
 80016a4:	1b49      	subs	r1, r1, r5
 80016a6:	eb62 0206 	sbc.w	r2, r2, r6
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	f04f 0400 	mov.w	r4, #0
 80016b2:	0194      	lsls	r4, r2, #6
 80016b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b8:	018b      	lsls	r3, r1, #6
 80016ba:	1a5b      	subs	r3, r3, r1
 80016bc:	eb64 0402 	sbc.w	r4, r4, r2
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016ce:	00d9      	lsls	r1, r3, #3
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	195b      	adds	r3, r3, r5
 80016d6:	eb44 0406 	adc.w	r4, r4, r6
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	02a2      	lsls	r2, r4, #10
 80016e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016e8:	0299      	lsls	r1, r3, #10
 80016ea:	460b      	mov	r3, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	4621      	mov	r1, r4
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f04f 0400 	mov.w	r4, #0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	f7fe fd68 	bl	80001d0 <__aeabi_uldivmod>
 8001700:	4603      	mov	r3, r0
 8001702:	460c      	mov	r4, r1
 8001704:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_GetSysClockFreq+0x158>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	0c1b      	lsrs	r3, r3, #16
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	3301      	adds	r3, #1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	60bb      	str	r3, [r7, #8]
      break;
 8001720:	e002      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001724:	60bb      	str	r3, [r7, #8]
      break;
 8001726:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001728:	68bb      	ldr	r3, [r7, #8]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	00f42400 	.word	0x00f42400
 800173c:	017d7840 	.word	0x017d7840

08001740 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	2b84      	cmp	r3, #132	; 0x84
 8001754:	d005      	beq.n	8001762 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	3303      	adds	r3, #3
 8001760:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001774:	f001 f868 	bl	8002848 <vTaskStartScheduler>
  
  return osOK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}

0800177e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800177e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001780:	b089      	sub	sp, #36	; 0x24
 8001782:	af04      	add	r7, sp, #16
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <osThreadCreate+0x54>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01c      	beq.n	80017d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685c      	ldr	r4, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681d      	ldr	r5, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691e      	ldr	r6, [r3, #16]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffc8 	bl	8001740 <makeFreeRtosPriority>
 80017b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017ba:	9202      	str	r2, [sp, #8]
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	9100      	str	r1, [sp, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4632      	mov	r2, r6
 80017c4:	4629      	mov	r1, r5
 80017c6:	4620      	mov	r0, r4
 80017c8:	f000 fdd2 	bl	8002370 <xTaskCreateStatic>
 80017cc:	4603      	mov	r3, r0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e01c      	b.n	800180c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685c      	ldr	r4, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017de:	b29e      	uxth	r6, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ffaa 	bl	8001740 <makeFreeRtosPriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9200      	str	r2, [sp, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	4632      	mov	r2, r6
 80017fa:	4629      	mov	r1, r5
 80017fc:	4620      	mov	r0, r4
 80017fe:	f000 fe11 	bl	8002424 <xTaskCreate>
 8001802:	4603      	mov	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d001      	beq.n	800180c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001808:	2300      	movs	r3, #0
 800180a:	e000      	b.n	800180e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001816 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 8001822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff8a 	bl	8001740 <makeFreeRtosPriority>
 800182c:	4603      	mov	r3, r0
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 ff61 	bl	80026f8 <vTaskPrioritySet>
  return osOK;
 8001836:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <osDelay+0x16>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	e000      	b.n	8001858 <osDelay+0x18>
 8001856:	2301      	movs	r3, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f000 ff19 	bl	8002690 <vTaskDelay>
  
  return osOK;
 800185e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f103 0208 	add.w	r2, r3, #8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f103 0208 	add.w	r2, r3, #8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f103 0208 	add.w	r2, r3, #8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d103      	bne.n	800192a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e00c      	b.n	8001944 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3308      	adds	r3, #8
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e002      	b.n	8001938 <vListInsert+0x2e>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	429a      	cmp	r2, r3
 8001942:	d2f6      	bcs.n	8001932 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	601a      	str	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6892      	ldr	r2, [r2, #8]
 8001992:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6852      	ldr	r2, [r2, #4]
 800199c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d103      	bne.n	80019b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1e5a      	subs	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d109      	bne.n	80019f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e8:	f383 8811 	msr	BASEPRI, r3
 80019ec:	f3bf 8f6f 	isb	sy
 80019f0:	f3bf 8f4f 	dsb	sy
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	e7fe      	b.n	80019f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80019f8:	f002 f8b8 	bl	8003b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	441a      	add	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	441a      	add	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	22ff      	movs	r2, #255	; 0xff
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d114      	bne.n	8001a78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01a      	beq.n	8001a8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3310      	adds	r3, #16
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 f972 	bl	8002d44 <xTaskRemoveFromEventList>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <xQueueGenericReset+0xcc>)
 8001a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f3bf 8f4f 	dsb	sy
 8001a72:	f3bf 8f6f 	isb	sy
 8001a76:	e009      	b.n	8001a8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3310      	adds	r3, #16
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fef3 	bl	8001868 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3324      	adds	r3, #36	; 0x24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff feee 	bl	8001868 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a8c:	f002 f89c 	bl	8003bc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000ed04 	.word	0xe000ed04

08001aa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	; 0x38
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <xQueueGenericCreateStatic+0x28>
 8001ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab8:	f383 8811 	msr	BASEPRI, r3
 8001abc:	f3bf 8f6f 	isb	sy
 8001ac0:	f3bf 8f4f 	dsb	sy
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac6:	e7fe      	b.n	8001ac6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <xQueueGenericCreateStatic+0x42>
 8001ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad2:	f383 8811 	msr	BASEPRI, r3
 8001ad6:	f3bf 8f6f 	isb	sy
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae0:	e7fe      	b.n	8001ae0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <xQueueGenericCreateStatic+0x4e>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <xQueueGenericCreateStatic+0x52>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <xQueueGenericCreateStatic+0x54>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <xQueueGenericCreateStatic+0x6c>
 8001af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afc:	f383 8811 	msr	BASEPRI, r3
 8001b00:	f3bf 8f6f 	isb	sy
 8001b04:	f3bf 8f4f 	dsb	sy
 8001b08:	623b      	str	r3, [r7, #32]
 8001b0a:	e7fe      	b.n	8001b0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d102      	bne.n	8001b18 <xQueueGenericCreateStatic+0x78>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <xQueueGenericCreateStatic+0x7c>
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <xQueueGenericCreateStatic+0x7e>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <xQueueGenericCreateStatic+0x96>
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	e7fe      	b.n	8001b34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001b36:	2348      	movs	r3, #72	; 0x48
 8001b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b48      	cmp	r3, #72	; 0x48
 8001b3e:	d009      	beq.n	8001b54 <xQueueGenericCreateStatic+0xb4>
 8001b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	e7fe      	b.n	8001b52 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001b54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f805 	bl	8001b86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e002      	b.n	8001ba8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	69b8      	ldr	r0, [r7, #24]
 8001bb8:	f7ff ff0a 	bl	80019d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d109      	bne.n	8001bf4 <xQueueGenericSend+0x30>
 8001be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf2:	e7fe      	b.n	8001bf2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d103      	bne.n	8001c02 <xQueueGenericSend+0x3e>
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <xQueueGenericSend+0x42>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <xQueueGenericSend+0x44>
 8001c06:	2300      	movs	r3, #0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d109      	bne.n	8001c20 <xQueueGenericSend+0x5c>
 8001c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c10:	f383 8811 	msr	BASEPRI, r3
 8001c14:	f3bf 8f6f 	isb	sy
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	e7fe      	b.n	8001c1e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d103      	bne.n	8001c2e <xQueueGenericSend+0x6a>
 8001c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <xQueueGenericSend+0x6e>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <xQueueGenericSend+0x70>
 8001c32:	2300      	movs	r3, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <xQueueGenericSend+0x88>
 8001c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	623b      	str	r3, [r7, #32]
 8001c4a:	e7fe      	b.n	8001c4a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c4c:	f001 fa30 	bl	80030b0 <xTaskGetSchedulerState>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <xQueueGenericSend+0x98>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <xQueueGenericSend+0x9c>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <xQueueGenericSend+0x9e>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <xQueueGenericSend+0xb6>
 8001c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	e7fe      	b.n	8001c78 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c7a:	f001 ff77 	bl	8003b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <xQueueGenericSend+0xcc>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d129      	bne.n	8001ce4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c96:	f000 f9ff 	bl	8002098 <prvCopyDataToQueue>
 8001c9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca6:	3324      	adds	r3, #36	; 0x24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 f84b 	bl	8002d44 <xTaskRemoveFromEventList>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <xQueueGenericSend+0x1f0>)
 8001cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	f3bf 8f6f 	isb	sy
 8001cc4:	e00a      	b.n	8001cdc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ccc:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <xQueueGenericSend+0x1f0>)
 8001cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cdc:	f001 ff74 	bl	8003bc8 <vPortExitCritical>
				return pdPASS;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e063      	b.n	8001dac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001cea:	f001 ff6d 	bl	8003bc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e05c      	b.n	8001dac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 f883 	bl	8002e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d02:	2301      	movs	r3, #1
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d06:	f001 ff5f 	bl	8003bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d0a:	f000 fe01 	bl	8002910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d0e:	f001 ff2d 	bl	8003b6c <vPortEnterCritical>
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	d103      	bne.n	8001d28 <xQueueGenericSend+0x164>
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d103      	bne.n	8001d3e <xQueueGenericSend+0x17a>
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d3e:	f001 ff43 	bl	8003bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d42:	1d3a      	adds	r2, r7, #4
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 f872 	bl	8002e34 <xTaskCheckForTimeOut>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d124      	bne.n	8001da0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d58:	f000 fa96 	bl	8002288 <prvIsQueueFull>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d018      	beq.n	8001d94 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	3310      	adds	r3, #16
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 ff9c 	bl	8002ca8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d72:	f000 fa21 	bl	80021b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d76:	f000 fdd9 	bl	800292c <xTaskResumeAll>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f af7c 	bne.w	8001c7a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <xQueueGenericSend+0x1f0>)
 8001d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	e772      	b.n	8001c7a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d96:	f000 fa0f 	bl	80021b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d9a:	f000 fdc7 	bl	800292c <xTaskResumeAll>
 8001d9e:	e76c      	b.n	8001c7a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001da2:	f000 fa09 	bl	80021b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001da6:	f000 fdc1 	bl	800292c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001daa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3738      	adds	r7, #56	; 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	e000ed04 	.word	0xe000ed04

08001db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	; 0x38
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <xQueueGenericSendFromISR+0x2c>
 8001dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd4:	f383 8811 	msr	BASEPRI, r3
 8001dd8:	f3bf 8f6f 	isb	sy
 8001ddc:	f3bf 8f4f 	dsb	sy
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e7fe      	b.n	8001de2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <xQueueGenericSendFromISR+0x3a>
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <xQueueGenericSendFromISR+0x3e>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <xQueueGenericSendFromISR+0x40>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <xQueueGenericSendFromISR+0x58>
 8001dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e00:	f383 8811 	msr	BASEPRI, r3
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	f3bf 8f4f 	dsb	sy
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	e7fe      	b.n	8001e0e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d103      	bne.n	8001e1e <xQueueGenericSendFromISR+0x66>
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <xQueueGenericSendFromISR+0x6a>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <xQueueGenericSendFromISR+0x6c>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <xQueueGenericSendFromISR+0x84>
 8001e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2c:	f383 8811 	msr	BASEPRI, r3
 8001e30:	f3bf 8f6f 	isb	sy
 8001e34:	f3bf 8f4f 	dsb	sy
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e7fe      	b.n	8001e3a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e3c:	f001 ff72 	bl	8003d24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e40:	f3ef 8211 	mrs	r2, BASEPRI
 8001e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e48:	f383 8811 	msr	BASEPRI, r3
 8001e4c:	f3bf 8f6f 	isb	sy
 8001e50:	f3bf 8f4f 	dsb	sy
 8001e54:	61ba      	str	r2, [r7, #24]
 8001e56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001e58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d302      	bcc.n	8001e6e <xQueueGenericSendFromISR+0xb6>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d12c      	bne.n	8001ec8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e7e:	f000 f90b 	bl	8002098 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8a:	d112      	bne.n	8001eb2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d016      	beq.n	8001ec2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e96:	3324      	adds	r3, #36	; 0x24
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 ff53 	bl	8002d44 <xTaskRemoveFromEventList>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e007      	b.n	8001ec2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	b25a      	sxtb	r2, r3
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001ec6:	e001      	b.n	8001ecc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3738      	adds	r7, #56	; 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <xQueueReceive+0x2e>
	__asm volatile
 8001efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	e7fe      	b.n	8001f0c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <xQueueReceive+0x3c>
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <xQueueReceive+0x40>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <xQueueReceive+0x42>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <xQueueReceive+0x5a>
 8001f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	e7fe      	b.n	8001f38 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f3a:	f001 f8b9 	bl	80030b0 <xTaskGetSchedulerState>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <xQueueReceive+0x6a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <xQueueReceive+0x6e>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <xQueueReceive+0x70>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <xQueueReceive+0x88>
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e7fe      	b.n	8001f66 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f68:	f001 fe00 	bl	8003b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01f      	beq.n	8001fb8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f7c:	f000 f8f6 	bl	800216c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	1e5a      	subs	r2, r3, #1
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00f      	beq.n	8001fb0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	3310      	adds	r3, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fed5 	bl	8002d44 <xTaskRemoveFromEventList>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001fa0:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <xQueueReceive+0x1b4>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001fb0:	f001 fe0a 	bl	8003bc8 <vPortExitCritical>
				return pdPASS;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e069      	b.n	800208c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001fbe:	f001 fe03 	bl	8003bc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e062      	b.n	800208c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d106      	bne.n	8001fda <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 ff19 	bl	8002e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001fda:	f001 fdf5 	bl	8003bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001fde:	f000 fc97 	bl	8002910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fe2:	f001 fdc3 	bl	8003b6c <vPortEnterCritical>
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d103      	bne.n	8001ffc <xQueueReceive+0x11c>
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002002:	b25b      	sxtb	r3, r3
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d103      	bne.n	8002012 <xQueueReceive+0x132>
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002012:	f001 fdd9 	bl	8003bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002016:	1d3a      	adds	r2, r7, #4
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f000 ff08 	bl	8002e34 <xTaskCheckForTimeOut>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d123      	bne.n	8002072 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800202a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800202c:	f000 f916 	bl	800225c <prvIsQueueEmpty>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d017      	beq.n	8002066 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	3324      	adds	r3, #36	; 0x24
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fe32 	bl	8002ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002046:	f000 f8b7 	bl	80021b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800204a:	f000 fc6f 	bl	800292c <xTaskResumeAll>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d189      	bne.n	8001f68 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <xQueueReceive+0x1b4>)
 8002056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	e780      	b.n	8001f68 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002068:	f000 f8a6 	bl	80021b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800206c:	f000 fc5e 	bl	800292c <xTaskResumeAll>
 8002070:	e77a      	b.n	8001f68 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002074:	f000 f8a0 	bl	80021b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002078:	f000 fc58 	bl	800292c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800207c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800207e:	f000 f8ed 	bl	800225c <prvIsQueueEmpty>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f43f af6f 	beq.w	8001f68 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800208a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800208c:	4618      	mov	r0, r3
 800208e:	3730      	adds	r7, #48	; 0x30
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	e000ed04 	.word	0xe000ed04

08002098 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d14d      	bne.n	800215a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 f812 	bl	80030ec <xTaskPriorityDisinherit>
 80020c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e043      	b.n	800215a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d119      	bne.n	800210c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6858      	ldr	r0, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	461a      	mov	r2, r3
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	f002 f856 	bl	8004194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	441a      	add	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d32b      	bcc.n	800215a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	e026      	b.n	800215a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	68d8      	ldr	r0, [r3, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	461a      	mov	r2, r3
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	f002 f83c 	bl	8004194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	425b      	negs	r3, r3
 8002126:	441a      	add	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	425b      	negs	r3, r3
 8002142:	441a      	add	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d105      	bne.n	800215a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	3b01      	subs	r3, #1
 8002158:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002162:	697b      	ldr	r3, [r7, #20]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d018      	beq.n	80021b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	441a      	add	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d303      	bcc.n	80021a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68d9      	ldr	r1, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	461a      	mov	r2, r3
 80021aa:	6838      	ldr	r0, [r7, #0]
 80021ac:	f001 fff2 	bl	8004194 <memcpy>
	}
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80021c0:	f001 fcd4 	bl	8003b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021cc:	e011      	b.n	80021f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d012      	beq.n	80021fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3324      	adds	r3, #36	; 0x24
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fdb2 	bl	8002d44 <xTaskRemoveFromEventList>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80021e6:	f000 fe85 	bl	8002ef4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	dce9      	bgt.n	80021ce <prvUnlockQueue+0x16>
 80021fa:	e000      	b.n	80021fe <prvUnlockQueue+0x46>
					break;
 80021fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	22ff      	movs	r2, #255	; 0xff
 8002202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002206:	f001 fcdf 	bl	8003bc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800220a:	f001 fcaf 	bl	8003b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002214:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002216:	e011      	b.n	800223c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3310      	adds	r3, #16
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fd8d 	bl	8002d44 <xTaskRemoveFromEventList>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002230:	f000 fe60 	bl	8002ef4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	3b01      	subs	r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800223c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002240:	2b00      	cmp	r3, #0
 8002242:	dce9      	bgt.n	8002218 <prvUnlockQueue+0x60>
 8002244:	e000      	b.n	8002248 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002246:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	22ff      	movs	r2, #255	; 0xff
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002250:	f001 fcba 	bl	8003bc8 <vPortExitCritical>
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002264:	f001 fc82 	bl	8003b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002270:	2301      	movs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e001      	b.n	800227a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800227a:	f001 fca5 	bl	8003bc8 <vPortExitCritical>

	return xReturn;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002290:	f001 fc6c 	bl	8003b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	429a      	cmp	r2, r3
 800229e:	d102      	bne.n	80022a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e001      	b.n	80022aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80022aa:	f001 fc8d 	bl	8003bc8 <vPortExitCritical>

	return xReturn;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e014      	b.n	80022f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <vQueueAddToRegistry+0x4c>)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80022d4:	490b      	ldr	r1, [pc, #44]	; (8002304 <vQueueAddToRegistry+0x4c>)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <vQueueAddToRegistry+0x4c>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80022ea:	e005      	b.n	80022f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	d9e7      	bls.n	80022c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	20004538 	.word	0x20004538

08002308 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002318:	f001 fc28 	bl	8003b6c <vPortEnterCritical>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002322:	b25b      	sxtb	r3, r3
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d103      	bne.n	8002332 <vQueueWaitForMessageRestricted+0x2a>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002338:	b25b      	sxtb	r3, r3
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d103      	bne.n	8002348 <vQueueWaitForMessageRestricted+0x40>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002348:	f001 fc3e 	bl	8003bc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3324      	adds	r3, #36	; 0x24
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fcc7 	bl	8002cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f7ff ff28 	bl	80021b8 <prvUnlockQueue>
	}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08e      	sub	sp, #56	; 0x38
 8002374:	af04      	add	r7, sp, #16
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <xTaskCreateStatic+0x28>
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	e7fe      	b.n	8002396 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <xTaskCreateStatic+0x42>
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	e7fe      	b.n	80023b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80023b2:	2354      	movs	r3, #84	; 0x54
 80023b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b54      	cmp	r3, #84	; 0x54
 80023ba:	d009      	beq.n	80023d0 <xTaskCreateStatic+0x60>
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e7fe      	b.n	80023ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80023d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01e      	beq.n	8002416 <xTaskCreateStatic+0xa6>
 80023d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01b      	beq.n	8002416 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023f0:	2300      	movs	r3, #0
 80023f2:	9303      	str	r3, [sp, #12]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f850 	bl	80024ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800240e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002410:	f000 f8d4 	bl	80025bc <prvAddNewTaskToReadyList>
 8002414:	e001      	b.n	800241a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800241a:	697b      	ldr	r3, [r7, #20]
	}
 800241c:	4618      	mov	r0, r3
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af04      	add	r7, sp, #16
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f001 fcb1 	bl	8003da0 <pvPortMalloc>
 800243e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00e      	beq.n	8002464 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002446:	2054      	movs	r0, #84	; 0x54
 8002448:	f001 fcaa 	bl	8003da0 <pvPortMalloc>
 800244c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
 800245a:	e005      	b.n	8002468 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800245c:	6978      	ldr	r0, [r7, #20]
 800245e:	f001 fd61 	bl	8003f24 <vPortFree>
 8002462:	e001      	b.n	8002468 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d017      	beq.n	800249e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	2300      	movs	r3, #0
 800247a:	9303      	str	r3, [sp, #12]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f80e 	bl	80024ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002492:	69f8      	ldr	r0, [r7, #28]
 8002494:	f000 f892 	bl	80025bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002498:	2301      	movs	r3, #1
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e002      	b.n	80024a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80024a4:	69bb      	ldr	r3, [r7, #24]
	}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b088      	sub	sp, #32
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024c6:	3b01      	subs	r3, #1
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f023 0307 	bic.w	r3, r3, #7
 80024d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <prvInitialiseNewTask+0x46>
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e7fe      	b.n	80024f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01f      	beq.n	800253a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e012      	b.n	8002526 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	7819      	ldrb	r1, [r3, #0]
 8002508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	3334      	adds	r3, #52	; 0x34
 8002510:	460a      	mov	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	4413      	add	r3, r2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3301      	adds	r3, #1
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d9e9      	bls.n	8002500 <prvInitialiseNewTask+0x52>
 800252c:	e000      	b.n	8002530 <prvInitialiseNewTask+0x82>
			{
				break;
 800252e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002538:	e003      	b.n	8002542 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	2b06      	cmp	r3, #6
 8002546:	d901      	bls.n	800254c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002548:	2306      	movs	r3, #6
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002556:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	2200      	movs	r2, #0
 800255c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	3304      	adds	r3, #4
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f9a0 	bl	80018a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	3318      	adds	r3, #24
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f99b 	bl	80018a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002576:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	f1c3 0207 	rsb	r2, r3, #7
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	2200      	movs	r2, #0
 800258c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	68f9      	ldr	r1, [r7, #12]
 800259a:	69b8      	ldr	r0, [r7, #24]
 800259c:	f001 f9be 	bl	800391c <pxPortInitialiseStack>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025b2:	bf00      	nop
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025c4:	f001 fad2 	bl	8003b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <prvAddNewTaskToReadyList+0xb8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	4a29      	ldr	r2, [pc, #164]	; (8002674 <prvAddNewTaskToReadyList+0xb8>)
 80025d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <prvAddNewTaskToReadyList+0xbc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025da:	4a27      	ldr	r2, [pc, #156]	; (8002678 <prvAddNewTaskToReadyList+0xbc>)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <prvAddNewTaskToReadyList+0xb8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d110      	bne.n	800260a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025e8:	f000 fca8 	bl	8002f3c <prvInitialiseTaskLists>
 80025ec:	e00d      	b.n	800260a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <prvAddNewTaskToReadyList+0xc0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <prvAddNewTaskToReadyList+0xbc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	429a      	cmp	r2, r3
 8002602:	d802      	bhi.n	800260a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002604:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <prvAddNewTaskToReadyList+0xbc>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <prvAddNewTaskToReadyList+0xc4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <prvAddNewTaskToReadyList+0xc4>)
 8002612:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	2201      	movs	r2, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <prvAddNewTaskToReadyList+0xc8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <prvAddNewTaskToReadyList+0xc8>)
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4a15      	ldr	r2, [pc, #84]	; (8002688 <prvAddNewTaskToReadyList+0xcc>)
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3304      	adds	r3, #4
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff f940 	bl	80018c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002642:	f001 fac1 	bl	8003bc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <prvAddNewTaskToReadyList+0xc0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00e      	beq.n	800266c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <prvAddNewTaskToReadyList+0xbc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <prvAddNewTaskToReadyList+0xd0>)
 800265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200007d4 	.word	0x200007d4
 8002678:	200006d4 	.word	0x200006d4
 800267c:	200007e0 	.word	0x200007e0
 8002680:	200007f0 	.word	0x200007f0
 8002684:	200007dc 	.word	0x200007dc
 8002688:	200006d8 	.word	0x200006d8
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <vTaskDelay+0x60>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <vTaskDelay+0x2e>
 80026aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ae:	f383 8811 	msr	BASEPRI, r3
 80026b2:	f3bf 8f6f 	isb	sy
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	e7fe      	b.n	80026bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80026be:	f000 f927 	bl	8002910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fd95 	bl	80031f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80026ca:	f000 f92f 	bl	800292c <xTaskResumeAll>
 80026ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <vTaskDelay+0x64>)
 80026d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200007fc 	.word	0x200007fc
 80026f4:	e000ed04 	.word	0xe000ed04

080026f8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b06      	cmp	r3, #6
 800270a:	d909      	bls.n	8002720 <vTaskPrioritySet+0x28>
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e7fe      	b.n	800271e <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b06      	cmp	r3, #6
 8002724:	d901      	bls.n	800272a <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002726:	2306      	movs	r3, #6
 8002728:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800272a:	f001 fa1f 	bl	8003b6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <vTaskPrioritySet+0x42>
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <vTaskPrioritySet+0x140>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e000      	b.n	800273c <vTaskPrioritySet+0x44>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d06f      	beq.n	800282c <vTaskPrioritySet+0x134>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	d90d      	bls.n	8002770 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8002754:	4b38      	ldr	r3, [pc, #224]	; (8002838 <vTaskPrioritySet+0x140>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	429a      	cmp	r2, r3
 800275c:	d00f      	beq.n	800277e <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <vTaskPrioritySet+0x140>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d309      	bcc.n	800277e <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e006      	b.n	800277e <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002770:	4b31      	ldr	r3, [pc, #196]	; (8002838 <vTaskPrioritySet+0x140>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	429a      	cmp	r2, r3
 8002778:	d101      	bne.n	800277e <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800277a:	2301      	movs	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	429a      	cmp	r2, r3
 800278e:	d102      	bne.n	8002796 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db04      	blt.n	80027ae <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f1c3 0207 	rsb	r2, r3, #7
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6959      	ldr	r1, [r3, #20]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4a1f      	ldr	r2, [pc, #124]	; (800283c <vTaskPrioritySet+0x144>)
 80027be:	4413      	add	r3, r2
 80027c0:	4299      	cmp	r1, r3
 80027c2:	d128      	bne.n	8002816 <vTaskPrioritySet+0x11e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	3304      	adds	r3, #4
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f8d7 	bl	800197c <uxListRemove>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <vTaskPrioritySet+0xf0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80027d4:	2201      	movs	r2, #1
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43da      	mvns	r2, r3
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <vTaskPrioritySet+0x148>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4013      	ands	r3, r2
 80027e4:	4a16      	ldr	r2, [pc, #88]	; (8002840 <vTaskPrioritySet+0x148>)
 80027e6:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <vTaskPrioritySet+0x148>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <vTaskPrioritySet+0x148>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4a0d      	ldr	r2, [pc, #52]	; (800283c <vTaskPrioritySet+0x144>)
 8002808:	441a      	add	r2, r3
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3304      	adds	r3, #4
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7ff f856 	bl	80018c2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <vTaskPrioritySet+0x134>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <vTaskPrioritySet+0x14c>)
 800281e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800282c:	f001 f9cc 	bl	8003bc8 <vPortExitCritical>
	}
 8002830:	bf00      	nop
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200006d4 	.word	0x200006d4
 800283c:	200006d8 	.word	0x200006d8
 8002840:	200007dc 	.word	0x200007dc
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002856:	463a      	mov	r2, r7
 8002858:	1d39      	adds	r1, r7, #4
 800285a:	f107 0308 	add.w	r3, r7, #8
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fe36 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002864:	6839      	ldr	r1, [r7, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	9202      	str	r2, [sp, #8]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	460a      	mov	r2, r1
 8002876:	4920      	ldr	r1, [pc, #128]	; (80028f8 <vTaskStartScheduler+0xb0>)
 8002878:	4820      	ldr	r0, [pc, #128]	; (80028fc <vTaskStartScheduler+0xb4>)
 800287a:	f7ff fd79 	bl	8002370 <xTaskCreateStatic>
 800287e:	4602      	mov	r2, r0
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <vTaskStartScheduler+0xb8>)
 8002882:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <vTaskStartScheduler+0xb8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e001      	b.n	8002896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800289c:	f000 fd10 	bl	80032c0 <xTimerCreateTimerTask>
 80028a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d115      	bne.n	80028d4 <vTaskStartScheduler+0x8c>
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <vTaskStartScheduler+0xbc>)
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <vTaskStartScheduler+0xc0>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <vTaskStartScheduler+0xc4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028ce:	f001 f8af 	bl	8003a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80028d2:	e00d      	b.n	80028f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d109      	bne.n	80028f0 <vTaskStartScheduler+0xa8>
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	e7fe      	b.n	80028ee <vTaskStartScheduler+0xa6>
}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	08004240 	.word	0x08004240
 80028fc:	08002f0d 	.word	0x08002f0d
 8002900:	200007f8 	.word	0x200007f8
 8002904:	200007f4 	.word	0x200007f4
 8002908:	200007e0 	.word	0x200007e0
 800290c:	200007d8 	.word	0x200007d8

08002910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <vTaskSuspendAll+0x18>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	4a03      	ldr	r2, [pc, #12]	; (8002928 <vTaskSuspendAll+0x18>)
 800291c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	200007fc 	.word	0x200007fc

0800292c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <xTaskResumeAll+0x114>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <xTaskResumeAll+0x2a>
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	e7fe      	b.n	8002954 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002956:	f001 f909 	bl	8003b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <xTaskResumeAll+0x114>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3b01      	subs	r3, #1
 8002960:	4a37      	ldr	r2, [pc, #220]	; (8002a40 <xTaskResumeAll+0x114>)
 8002962:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <xTaskResumeAll+0x114>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d161      	bne.n	8002a30 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <xTaskResumeAll+0x118>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05d      	beq.n	8002a30 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002974:	e02e      	b.n	80029d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002976:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <xTaskResumeAll+0x11c>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3318      	adds	r3, #24
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fffa 	bl	800197c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3304      	adds	r3, #4
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fff5 	bl	800197c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	2201      	movs	r2, #1
 8002998:	409a      	lsls	r2, r3
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <xTaskResumeAll+0x120>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <xTaskResumeAll+0x120>)
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <xTaskResumeAll+0x124>)
 80029b2:	441a      	add	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f7fe ff81 	bl	80018c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <xTaskResumeAll+0x128>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <xTaskResumeAll+0x12c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <xTaskResumeAll+0x11c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1cc      	bne.n	8002976 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029e2:	f000 fb45 	bl	8003070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <xTaskResumeAll+0x130>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80029f2:	f000 f847 	bl	8002a84 <xTaskIncrementTick>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <xTaskResumeAll+0x12c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f1      	bne.n	80029f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <xTaskResumeAll+0x130>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <xTaskResumeAll+0x12c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <xTaskResumeAll+0x134>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a30:	f001 f8ca 	bl	8003bc8 <vPortExitCritical>

	return xAlreadyYielded;
 8002a34:	68bb      	ldr	r3, [r7, #8]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200007fc 	.word	0x200007fc
 8002a44:	200007d4 	.word	0x200007d4
 8002a48:	20000794 	.word	0x20000794
 8002a4c:	200007dc 	.word	0x200007dc
 8002a50:	200006d8 	.word	0x200006d8
 8002a54:	200006d4 	.word	0x200006d4
 8002a58:	200007e8 	.word	0x200007e8
 8002a5c:	200007e4 	.word	0x200007e4
 8002a60:	e000ed04 	.word	0xe000ed04

08002a64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <xTaskGetTickCount+0x1c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a70:	687b      	ldr	r3, [r7, #4]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	200007d8 	.word	0x200007d8

08002a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	; (8002bc8 <xTaskIncrementTick+0x144>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 8087 	bne.w	8002ba6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <xTaskIncrementTick+0x148>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <xTaskIncrementTick+0x148>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11f      	bne.n	8002aec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002aac:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <xTaskIncrementTick+0x14c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <xTaskIncrementTick+0x46>
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	e7fe      	b.n	8002ac8 <xTaskIncrementTick+0x44>
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <xTaskIncrementTick+0x14c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <xTaskIncrementTick+0x150>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <xTaskIncrementTick+0x14c>)
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4a3e      	ldr	r2, [pc, #248]	; (8002bd4 <xTaskIncrementTick+0x150>)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <xTaskIncrementTick+0x154>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a3c      	ldr	r2, [pc, #240]	; (8002bd8 <xTaskIncrementTick+0x154>)
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	f000 fac2 	bl	8003070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <xTaskIncrementTick+0x158>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d348      	bcc.n	8002b88 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <xTaskIncrementTick+0x14c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b00:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <xTaskIncrementTick+0x158>)
 8002b02:	f04f 32ff 	mov.w	r2, #4294967295
 8002b06:	601a      	str	r2, [r3, #0]
					break;
 8002b08:	e03e      	b.n	8002b88 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <xTaskIncrementTick+0x14c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d203      	bcs.n	8002b2a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b22:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <xTaskIncrementTick+0x158>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b28:	e02e      	b.n	8002b88 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe ff24 	bl	800197c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	3318      	adds	r3, #24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe ff1b 	bl	800197c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <xTaskIncrementTick+0x15c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <xTaskIncrementTick+0x15c>)
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <xTaskIncrementTick+0x160>)
 8002b66:	441a      	add	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f7fe fea7 	bl	80018c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <xTaskIncrementTick+0x164>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3b9      	bcc.n	8002af6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b86:	e7b6      	b.n	8002af6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <xTaskIncrementTick+0x164>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8e:	4915      	ldr	r1, [pc, #84]	; (8002be4 <xTaskIncrementTick+0x160>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d907      	bls.n	8002bb0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e004      	b.n	8002bb0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <xTaskIncrementTick+0x168>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <xTaskIncrementTick+0x168>)
 8002bae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <xTaskIncrementTick+0x16c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002bbc:	697b      	ldr	r3, [r7, #20]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200007fc 	.word	0x200007fc
 8002bcc:	200007d8 	.word	0x200007d8
 8002bd0:	2000078c 	.word	0x2000078c
 8002bd4:	20000790 	.word	0x20000790
 8002bd8:	200007ec 	.word	0x200007ec
 8002bdc:	200007f4 	.word	0x200007f4
 8002be0:	200007dc 	.word	0x200007dc
 8002be4:	200006d8 	.word	0x200006d8
 8002be8:	200006d4 	.word	0x200006d4
 8002bec:	200007e4 	.word	0x200007e4
 8002bf0:	200007e8 	.word	0x200007e8

08002bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <vTaskSwitchContext+0xa0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c02:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <vTaskSwitchContext+0xa4>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c08:	e03e      	b.n	8002c88 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <vTaskSwitchContext+0xa4>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <vTaskSwitchContext+0xa8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	f1c3 031f 	rsb	r3, r3, #31
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	491e      	ldr	r1, [pc, #120]	; (8002ca0 <vTaskSwitchContext+0xac>)
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	e7fe      	b.n	8002c4c <vTaskSwitchContext+0x58>
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <vTaskSwitchContext+0xac>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d104      	bne.n	8002c7e <vTaskSwitchContext+0x8a>
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <vTaskSwitchContext+0xb0>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	200007fc 	.word	0x200007fc
 8002c98:	200007e8 	.word	0x200007e8
 8002c9c:	200007dc 	.word	0x200007dc
 8002ca0:	200006d8 	.word	0x200006d8
 8002ca4:	200006d4 	.word	0x200006d4

08002ca8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <vTaskPlaceOnEventList+0x24>
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e7fe      	b.n	8002cca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <vTaskPlaceOnEventList+0x44>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3318      	adds	r3, #24
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fe fe18 	bl	800190a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cda:	2101      	movs	r1, #1
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	f000 fa89 	bl	80031f4 <prvAddCurrentTaskToDelayedList>
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200006d4 	.word	0x200006d4

08002cf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <vTaskPlaceOnEventListRestricted+0x26>
 8002d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d06:	f383 8811 	msr	BASEPRI, r3
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e7fe      	b.n	8002d14 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <vTaskPlaceOnEventListRestricted+0x50>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7fe fdcf 	bl	80018c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	68b8      	ldr	r0, [r7, #8]
 8002d34:	f000 fa5e 	bl	80031f4 <prvAddCurrentTaskToDelayedList>
	}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200006d4 	.word	0x200006d4

08002d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <xTaskRemoveFromEventList+0x2a>
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e7fe      	b.n	8002d6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	3318      	adds	r3, #24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fe02 	bl	800197c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <xTaskRemoveFromEventList+0xac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d11c      	bne.n	8002dba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fdf9 	bl	800197c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <xTaskRemoveFromEventList+0xb0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <xTaskRemoveFromEventList+0xb0>)
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <xTaskRemoveFromEventList+0xb4>)
 8002daa:	441a      	add	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f7fe fd85 	bl	80018c2 <vListInsertEnd>
 8002db8:	e005      	b.n	8002dc6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480e      	ldr	r0, [pc, #56]	; (8002dfc <xTaskRemoveFromEventList+0xb8>)
 8002dc2:	f7fe fd7e 	bl	80018c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <xTaskRemoveFromEventList+0xbc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d905      	bls.n	8002de0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <xTaskRemoveFromEventList+0xc0>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e001      	b.n	8002de4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002de4:	697b      	ldr	r3, [r7, #20]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200007fc 	.word	0x200007fc
 8002df4:	200007dc 	.word	0x200007dc
 8002df8:	200006d8 	.word	0x200006d8
 8002dfc:	20000794 	.word	0x20000794
 8002e00:	200006d4 	.word	0x200006d4
 8002e04:	200007e8 	.word	0x200007e8

08002e08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <vTaskInternalSetTimeOutState+0x24>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <vTaskInternalSetTimeOutState+0x28>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	200007ec 	.word	0x200007ec
 8002e30:	200007d8 	.word	0x200007d8

08002e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <xTaskCheckForTimeOut+0x24>
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	e7fe      	b.n	8002e56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <xTaskCheckForTimeOut+0x3e>
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e7fe      	b.n	8002e70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002e72:	f000 fe7b 	bl	8003b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e76:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <xTaskCheckForTimeOut+0xb8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d102      	bne.n	8002e96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	e023      	b.n	8002ede <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <xTaskCheckForTimeOut+0xbc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d007      	beq.n	8002eb2 <xTaskCheckForTimeOut+0x7e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	e015      	b.n	8002ede <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d20b      	bcs.n	8002ed4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff9d 	bl	8002e08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e004      	b.n	8002ede <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002ede:	f000 fe73 	bl	8003bc8 <vPortExitCritical>

	return xReturn;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200007d8 	.word	0x200007d8
 8002ef0:	200007ec 	.word	0x200007ec

08002ef4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <vTaskMissedYield+0x14>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	200007e8 	.word	0x200007e8

08002f0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f14:	f000 f852 	bl	8002fbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <prvIdleTask+0x28>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d9f9      	bls.n	8002f14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <prvIdleTask+0x2c>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f30:	e7f0      	b.n	8002f14 <prvIdleTask+0x8>
 8002f32:	bf00      	nop
 8002f34:	200006d8 	.word	0x200006d8
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	e00c      	b.n	8002f62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <prvInitialiseTaskLists+0x60>)
 8002f54:	4413      	add	r3, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fc86 	bl	8001868 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d9ef      	bls.n	8002f48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f68:	480d      	ldr	r0, [pc, #52]	; (8002fa0 <prvInitialiseTaskLists+0x64>)
 8002f6a:	f7fe fc7d 	bl	8001868 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f6e:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <prvInitialiseTaskLists+0x68>)
 8002f70:	f7fe fc7a 	bl	8001868 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f74:	480c      	ldr	r0, [pc, #48]	; (8002fa8 <prvInitialiseTaskLists+0x6c>)
 8002f76:	f7fe fc77 	bl	8001868 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f7a:	480c      	ldr	r0, [pc, #48]	; (8002fac <prvInitialiseTaskLists+0x70>)
 8002f7c:	f7fe fc74 	bl	8001868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f80:	480b      	ldr	r0, [pc, #44]	; (8002fb0 <prvInitialiseTaskLists+0x74>)
 8002f82:	f7fe fc71 	bl	8001868 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <prvInitialiseTaskLists+0x78>)
 8002f88:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <prvInitialiseTaskLists+0x64>)
 8002f8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <prvInitialiseTaskLists+0x7c>)
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <prvInitialiseTaskLists+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200006d8 	.word	0x200006d8
 8002fa0:	20000764 	.word	0x20000764
 8002fa4:	20000778 	.word	0x20000778
 8002fa8:	20000794 	.word	0x20000794
 8002fac:	200007a8 	.word	0x200007a8
 8002fb0:	200007c0 	.word	0x200007c0
 8002fb4:	2000078c 	.word	0x2000078c
 8002fb8:	20000790 	.word	0x20000790

08002fbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc2:	e019      	b.n	8002ff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fc4:	f000 fdd2 	bl	8003b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <prvCheckTasksWaitingTermination+0x4c>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fcd1 	bl	800197c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <prvCheckTasksWaitingTermination+0x50>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	; (800300c <prvCheckTasksWaitingTermination+0x50>)
 8002fe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <prvCheckTasksWaitingTermination+0x54>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	4a09      	ldr	r2, [pc, #36]	; (8003010 <prvCheckTasksWaitingTermination+0x54>)
 8002fec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fee:	f000 fdeb 	bl	8003bc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f80e 	bl	8003014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <prvCheckTasksWaitingTermination+0x54>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e1      	bne.n	8002fc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200007a8 	.word	0x200007a8
 800300c:	200007d4 	.word	0x200007d4
 8003010:	200007bc 	.word	0x200007bc

08003014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4618      	mov	r0, r3
 800302c:	f000 ff7a 	bl	8003f24 <vPortFree>
				vPortFree( pxTCB );
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 ff77 	bl	8003f24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003036:	e017      	b.n	8003068 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303e:	2b01      	cmp	r3, #1
 8003040:	d103      	bne.n	800304a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 ff6e 	bl	8003f24 <vPortFree>
	}
 8003048:	e00e      	b.n	8003068 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003050:	2b02      	cmp	r3, #2
 8003052:	d009      	beq.n	8003068 <prvDeleteTCB+0x54>
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	e7fe      	b.n	8003066 <prvDeleteTCB+0x52>
	}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003088:	e008      	b.n	800309c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	2000078c 	.word	0x2000078c
 80030ac:	200007f4 	.word	0x200007f4

080030b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <xTaskGetSchedulerState+0x34>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030be:	2301      	movs	r3, #1
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	e008      	b.n	80030d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <xTaskGetSchedulerState+0x38>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80030cc:	2302      	movs	r3, #2
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	e001      	b.n	80030d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030d6:	687b      	ldr	r3, [r7, #4]
	}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	200007e0 	.word	0x200007e0
 80030e8:	200007fc 	.word	0x200007fc

080030ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d06c      	beq.n	80031dc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <xTaskPriorityDisinherit+0xfc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	429a      	cmp	r2, r3
 800310a:	d009      	beq.n	8003120 <xTaskPriorityDisinherit+0x34>
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e7fe      	b.n	800311e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <xTaskPriorityDisinherit+0x50>
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	e7fe      	b.n	800313a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003140:	1e5a      	subs	r2, r3, #1
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	429a      	cmp	r2, r3
 8003150:	d044      	beq.n	80031dc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d140      	bne.n	80031dc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3304      	adds	r3, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fc0c 	bl	800197c <uxListRemove>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316e:	491f      	ldr	r1, [pc, #124]	; (80031ec <xTaskPriorityDisinherit+0x100>)
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xTaskPriorityDisinherit+0xaa>
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	2201      	movs	r2, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <xTaskPriorityDisinherit+0x104>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4013      	ands	r3, r2
 8003192:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <xTaskPriorityDisinherit+0x104>)
 8003194:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f1c3 0207 	rsb	r2, r3, #7
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	2201      	movs	r2, #1
 80031b0:	409a      	lsls	r2, r3
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <xTaskPriorityDisinherit+0x104>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <xTaskPriorityDisinherit+0x104>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4a08      	ldr	r2, [pc, #32]	; (80031ec <xTaskPriorityDisinherit+0x100>)
 80031ca:	441a      	add	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fe fb75 	bl	80018c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031d8:	2301      	movs	r3, #1
 80031da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031dc:	697b      	ldr	r3, [r7, #20]
	}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200006d4 	.word	0x200006d4
 80031ec:	200006d8 	.word	0x200006d8
 80031f0:	200007dc 	.word	0x200007dc

080031f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3304      	adds	r3, #4
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fbb6 	bl	800197c <uxListRemove>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	2201      	movs	r2, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4013      	ands	r3, r2
 800322a:	4a20      	ldr	r2, [pc, #128]	; (80032ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800322c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d10a      	bne.n	800324c <prvAddCurrentTaskToDelayedList+0x58>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	481a      	ldr	r0, [pc, #104]	; (80032b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003246:	f7fe fb3c 	bl	80018c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800324a:	e026      	b.n	800329a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	429a      	cmp	r2, r3
 8003262:	d209      	bcs.n	8003278 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fe fb4a 	bl	800190a <vListInsert>
}
 8003276:	e010      	b.n	800329a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f7fe fb40 	bl	800190a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d202      	bcs.n	800329a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003294:	4a09      	ldr	r2, [pc, #36]	; (80032bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6013      	str	r3, [r2, #0]
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	200007d8 	.word	0x200007d8
 80032a8:	200006d4 	.word	0x200006d4
 80032ac:	200007dc 	.word	0x200007dc
 80032b0:	200007c0 	.word	0x200007c0
 80032b4:	20000790 	.word	0x20000790
 80032b8:	2000078c 	.word	0x2000078c
 80032bc:	200007f4 	.word	0x200007f4

080032c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80032ca:	f000 fae7 	bl	800389c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <xTimerCreateTimerTask+0x80>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d021      	beq.n	800331a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80032de:	1d3a      	adds	r2, r7, #4
 80032e0:	f107 0108 	add.w	r1, r7, #8
 80032e4:	f107 030c 	add.w	r3, r7, #12
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f90b 	bl	8000504 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	9202      	str	r2, [sp, #8]
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2302      	movs	r3, #2
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2300      	movs	r3, #0
 80032fe:	460a      	mov	r2, r1
 8003300:	4910      	ldr	r1, [pc, #64]	; (8003344 <xTimerCreateTimerTask+0x84>)
 8003302:	4811      	ldr	r0, [pc, #68]	; (8003348 <xTimerCreateTimerTask+0x88>)
 8003304:	f7ff f834 	bl	8002370 <xTaskCreateStatic>
 8003308:	4602      	mov	r2, r0
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <xTimerCreateTimerTask+0x8c>)
 800330c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <xTimerCreateTimerTask+0x8c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003316:	2301      	movs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <xTimerCreateTimerTask+0x74>
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e7fe      	b.n	8003332 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003334:	697b      	ldr	r3, [r7, #20]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000830 	.word	0x20000830
 8003344:	08004248 	.word	0x08004248
 8003348:	08003481 	.word	0x08003481
 800334c:	20000834 	.word	0x20000834

08003350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <xTimerGenericCommand+0x2c>
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	623b      	str	r3, [r7, #32]
 800337a:	e7fe      	b.n	800337a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <xTimerGenericCommand+0x94>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02a      	beq.n	80033da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	dc18      	bgt.n	80033c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003396:	f7ff fe8b 	bl	80030b0 <xTaskGetSchedulerState>
 800339a:	4603      	mov	r3, r0
 800339c:	2b02      	cmp	r3, #2
 800339e:	d109      	bne.n	80033b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <xTimerGenericCommand+0x94>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	f107 0114 	add.w	r1, r7, #20
 80033a8:	2300      	movs	r3, #0
 80033aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ac:	f7fe fc0a 	bl	8001bc4 <xQueueGenericSend>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24
 80033b2:	e012      	b.n	80033da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <xTimerGenericCommand+0x94>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	f107 0114 	add.w	r1, r7, #20
 80033bc:	2300      	movs	r3, #0
 80033be:	2200      	movs	r2, #0
 80033c0:	f7fe fc00 	bl	8001bc4 <xQueueGenericSend>
 80033c4:	6278      	str	r0, [r7, #36]	; 0x24
 80033c6:	e008      	b.n	80033da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <xTimerGenericCommand+0x94>)
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	f107 0114 	add.w	r1, r7, #20
 80033d0:	2300      	movs	r3, #0
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	f7fe fcf0 	bl	8001db8 <xQueueGenericSendFromISR>
 80033d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000830 	.word	0x20000830

080033e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <prvProcessExpiredTimer+0x94>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3304      	adds	r3, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fabb 	bl	800197c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d021      	beq.n	8003458 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	18d1      	adds	r1, r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	6978      	ldr	r0, [r7, #20]
 8003422:	f000 f8d1 	bl	80035c8 <prvInsertTimerInActiveList>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01e      	beq.n	800346a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800342c:	2300      	movs	r3, #0
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	2100      	movs	r1, #0
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7ff ff8a 	bl	8003350 <xTimerGenericCommand>
 800343c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d112      	bne.n	800346a <prvProcessExpiredTimer+0x82>
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e7fe      	b.n	8003456 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	b2da      	uxtb	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	6978      	ldr	r0, [r7, #20]
 8003470:	4798      	blx	r3
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000828 	.word	0x20000828

08003480 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003488:	f107 0308 	add.w	r3, r7, #8
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f857 	bl	8003540 <prvGetNextExpireTime>
 8003492:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4619      	mov	r1, r3
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f803 	bl	80034a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800349e:	f000 f8d5 	bl	800364c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034a2:	e7f1      	b.n	8003488 <prvTimerTask+0x8>

080034a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80034ae:	f7ff fa2f 	bl	8002910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034b2:	f107 0308 	add.w	r3, r7, #8
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f866 	bl	8003588 <prvSampleTimeNow>
 80034bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d130      	bne.n	8003526 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <prvProcessTimerOrBlockTask+0x3c>
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d806      	bhi.n	80034e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80034d2:	f7ff fa2b 	bl	800292c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff85 	bl	80033e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80034de:	e024      	b.n	800352a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <prvProcessTimerOrBlockTask+0x90>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <prvProcessTimerOrBlockTask+0x50>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <prvProcessTimerOrBlockTask+0x52>
 80034f4:	2300      	movs	r3, #0
 80034f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <prvProcessTimerOrBlockTask+0x94>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	4619      	mov	r1, r3
 8003506:	f7fe feff 	bl	8002308 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800350a:	f7ff fa0f 	bl	800292c <xTaskResumeAll>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <prvProcessTimerOrBlockTask+0x98>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
}
 8003524:	e001      	b.n	800352a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003526:	f7ff fa01 	bl	800292c <xTaskResumeAll>
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000082c 	.word	0x2000082c
 8003538:	20000830 	.word	0x20000830
 800353c:	e000ed04 	.word	0xe000ed04

08003540 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <prvGetNextExpireTime+0x44>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <prvGetNextExpireTime+0x16>
 8003552:	2201      	movs	r2, #1
 8003554:	e000      	b.n	8003558 <prvGetNextExpireTime+0x18>
 8003556:	2200      	movs	r2, #0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <prvGetNextExpireTime+0x44>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e001      	b.n	8003574 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003574:	68fb      	ldr	r3, [r7, #12]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000828 	.word	0x20000828

08003588 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003590:	f7ff fa68 	bl	8002a64 <xTaskGetTickCount>
 8003594:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <prvSampleTimeNow+0x3c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d205      	bcs.n	80035ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80035a0:	f000 f918 	bl	80037d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e002      	b.n	80035b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <prvSampleTimeNow+0x3c>)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80035b8:	68fb      	ldr	r3, [r7, #12]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000838 	.word	0x20000838

080035c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d812      	bhi.n	8003614 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad2      	subs	r2, r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e01b      	b.n	800363a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <prvInsertTimerInActiveList+0x7c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3304      	adds	r3, #4
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7fe f97c 	bl	800190a <vListInsert>
 8003612:	e012      	b.n	800363a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d206      	bcs.n	800362a <prvInsertTimerInActiveList+0x62>
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d302      	bcc.n	800362a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e007      	b.n	800363a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <prvInsertTimerInActiveList+0x80>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fe f968 	bl	800190a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800363a:	697b      	ldr	r3, [r7, #20]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000082c 	.word	0x2000082c
 8003648:	20000828 	.word	0x20000828

0800364c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	; 0x30
 8003650:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003652:	e0ac      	b.n	80037ae <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f2c0 80a8 	blt.w	80037ac <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d004      	beq.n	8003672 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe f985 	bl	800197c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff87 	bl	8003588 <prvSampleTimeNow>
 800367a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b09      	cmp	r3, #9
 8003680:	f200 8095 	bhi.w	80037ae <prvProcessReceivedCommands+0x162>
 8003684:	a201      	add	r2, pc, #4	; (adr r2, 800368c <prvProcessReceivedCommands+0x40>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036b5 	.word	0x080036b5
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036b5 	.word	0x080036b5
 8003698:	08003727 	.word	0x08003727
 800369c:	0800373b 	.word	0x0800373b
 80036a0:	08003783 	.word	0x08003783
 80036a4:	080036b5 	.word	0x080036b5
 80036a8:	080036b5 	.word	0x080036b5
 80036ac:	08003727 	.word	0x08003727
 80036b0:	0800373b 	.word	0x0800373b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	18d1      	adds	r1, r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d4:	f7ff ff78 	bl	80035c8 <prvInsertTimerInActiveList>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d067      	beq.n	80037ae <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05c      	beq.n	80037ae <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	441a      	add	r2, r3
 80036fc:	2300      	movs	r3, #0
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	2100      	movs	r1, #0
 8003704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003706:	f7ff fe23 	bl	8003350 <xTimerGenericCommand>
 800370a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d14d      	bne.n	80037ae <prvProcessReceivedCommands+0x162>
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e7fe      	b.n	8003724 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	b2da      	uxtb	r2, r3
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8003738:	e039      	b.n	80037ae <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <prvProcessReceivedCommands+0x122>
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e7fe      	b.n	800376c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	18d1      	adds	r1, r2, r3
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	6a3a      	ldr	r2, [r7, #32]
 800377a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800377c:	f7ff ff24 	bl	80035c8 <prvInsertTimerInActiveList>
					break;
 8003780:	e015      	b.n	80037ae <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003792:	f000 fbc7 	bl	8003f24 <vPortFree>
 8003796:	e00a      	b.n	80037ae <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80037aa:	e000      	b.n	80037ae <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80037ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <prvProcessReceivedCommands+0x184>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f107 0108 	add.w	r1, r7, #8
 80037b6:	2200      	movs	r2, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fb91 	bl	8001ee0 <xQueueReceive>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f47f af47 	bne.w	8003654 <prvProcessReceivedCommands+0x8>
	}
}
 80037c6:	bf00      	nop
 80037c8:	3728      	adds	r7, #40	; 0x28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000830 	.word	0x20000830

080037d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037da:	e047      	b.n	800386c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <prvSwitchTimerLists+0xc0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e6:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <prvSwitchTimerLists+0xc0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe f8c1 	bl	800197c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02d      	beq.n	800386c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	d90e      	bls.n	8003840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <prvSwitchTimerLists+0xc0>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fe f866 	bl	800190a <vListInsert>
 800383e:	e015      	b.n	800386c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	2100      	movs	r1, #0
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff fd80 	bl	8003350 <xTimerGenericCommand>
 8003850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <prvSwitchTimerLists+0x98>
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	e7fe      	b.n	800386a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <prvSwitchTimerLists+0xc0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1b2      	bne.n	80037dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <prvSwitchTimerLists+0xc0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <prvSwitchTimerLists+0xc4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <prvSwitchTimerLists+0xc0>)
 8003882:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <prvSwitchTimerLists+0xc4>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6013      	str	r3, [r2, #0]
}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000828 	.word	0x20000828
 8003898:	2000082c 	.word	0x2000082c

0800389c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80038a2:	f000 f963 	bl	8003b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d120      	bne.n	80038f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80038ae:	4814      	ldr	r0, [pc, #80]	; (8003900 <prvCheckForValidListAndQueue+0x64>)
 80038b0:	f7fd ffda 	bl	8001868 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038b4:	4813      	ldr	r0, [pc, #76]	; (8003904 <prvCheckForValidListAndQueue+0x68>)
 80038b6:	f7fd ffd7 	bl	8001868 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <prvCheckForValidListAndQueue+0x6c>)
 80038bc:	4a10      	ldr	r2, [pc, #64]	; (8003900 <prvCheckForValidListAndQueue+0x64>)
 80038be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <prvCheckForValidListAndQueue+0x70>)
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <prvCheckForValidListAndQueue+0x68>)
 80038c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <prvCheckForValidListAndQueue+0x74>)
 80038cc:	4a11      	ldr	r2, [pc, #68]	; (8003914 <prvCheckForValidListAndQueue+0x78>)
 80038ce:	210c      	movs	r1, #12
 80038d0:	200a      	movs	r0, #10
 80038d2:	f7fe f8e5 	bl	8001aa0 <xQueueGenericCreateStatic>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	490b      	ldr	r1, [pc, #44]	; (8003918 <prvCheckForValidListAndQueue+0x7c>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fce4 	bl	80022b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038f0:	f000 f96a 	bl	8003bc8 <vPortExitCritical>
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000830 	.word	0x20000830
 8003900:	20000800 	.word	0x20000800
 8003904:	20000814 	.word	0x20000814
 8003908:	20000828 	.word	0x20000828
 800390c:	2000082c 	.word	0x2000082c
 8003910:	200008b4 	.word	0x200008b4
 8003914:	2000083c 	.word	0x2000083c
 8003918:	08004250 	.word	0x08004250

0800391c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b04      	subs	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b04      	subs	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 0201 	bic.w	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3b04      	subs	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <pxPortInitialiseStack+0x64>)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3b14      	subs	r3, #20
 8003956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3b04      	subs	r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f06f 0202 	mvn.w	r2, #2
 800396a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3b20      	subs	r3, #32
 8003970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	08003985 	.word	0x08003985

08003984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <prvTaskExitError+0x50>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d009      	beq.n	80039ac <prvTaskExitError+0x28>
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e7fe      	b.n	80039aa <prvTaskExitError+0x26>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039be:	bf00      	nop
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0fc      	beq.n	80039c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000000c 	.word	0x2000000c
	...

080039e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	4770      	bx	lr
 80039fc:	f3af 8000 	nop.w

08003a00 <pxCurrentTCBConst2>:
 8003a00:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <prvPortStartFirstTask+0x24>)
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f380 8808 	msr	MSP, r0
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f380 8814 	msr	CONTROL, r0
 8003a1a:	b662      	cpsie	i
 8003a1c:	b661      	cpsie	f
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	df00      	svc	0
 8003a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a2a:	bf00      	nop
 8003a2c:	e000ed08 	.word	0xe000ed08

08003a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a36:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <xPortStartScheduler+0x118>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a44      	ldr	r2, [pc, #272]	; (8003b4c <xPortStartScheduler+0x11c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d109      	bne.n	8003a54 <xPortStartScheduler+0x24>
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e7fe      	b.n	8003a52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a54:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <xPortStartScheduler+0x118>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <xPortStartScheduler+0x120>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d109      	bne.n	8003a72 <xPortStartScheduler+0x42>
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e7fe      	b.n	8003a70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <xPortStartScheduler+0x124>)
 8003a74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	22ff      	movs	r2, #255	; 0xff
 8003a82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <xPortStartScheduler+0x128>)
 8003a98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aa0:	e009      	b.n	8003ab6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003aa2:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4a2c      	ldr	r2, [pc, #176]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003aaa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d0ef      	beq.n	8003aa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1c3 0307 	rsb	r3, r3, #7
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d009      	beq.n	8003ae2 <xPortStartScheduler+0xb2>
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	e7fe      	b.n	8003ae0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003aea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003af6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b00:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <xPortStartScheduler+0x130>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <xPortStartScheduler+0x130>)
 8003b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <xPortStartScheduler+0x130>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <xPortStartScheduler+0x130>)
 8003b12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b18:	f000 f8d6 	bl	8003cc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <xPortStartScheduler+0x134>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b22:	f000 f8f5 	bl	8003d10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b32:	f7ff ff69 	bl	8003a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b36:	f7ff f85d 	bl	8002bf4 <vTaskSwitchContext>
	prvTaskExitError();
 8003b3a:	f7ff ff23 	bl	8003984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	e000ed00 	.word	0xe000ed00
 8003b4c:	410fc271 	.word	0x410fc271
 8003b50:	410fc270 	.word	0x410fc270
 8003b54:	e000e400 	.word	0xe000e400
 8003b58:	200008fc 	.word	0x200008fc
 8003b5c:	20000900 	.word	0x20000900
 8003b60:	e000ed20 	.word	0xe000ed20
 8003b64:	2000000c 	.word	0x2000000c
 8003b68:	e000ef34 	.word	0xe000ef34

08003b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <vPortEnterCritical+0x54>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <vPortEnterCritical+0x54>)
 8003b8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <vPortEnterCritical+0x54>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d10e      	bne.n	8003bb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <vPortEnterCritical+0x58>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <vPortEnterCritical+0x48>
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	e7fe      	b.n	8003bb2 <vPortEnterCritical+0x46>
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	2000000c 	.word	0x2000000c
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <vPortExitCritical+0x4c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <vPortExitCritical+0x22>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	e7fe      	b.n	8003be8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <vPortExitCritical+0x4c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <vPortExitCritical+0x4c>)
 8003bf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <vPortExitCritical+0x4c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <vPortExitCritical+0x3e>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	2000000c 	.word	0x2000000c
	...

08003c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c20:	f3ef 8009 	mrs	r0, PSP
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <pxCurrentTCBConst>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f01e 0f10 	tst.w	lr, #16
 8003c30:	bf08      	it	eq
 8003c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3a:	6010      	str	r0, [r2, #0]
 8003c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c44:	f380 8811 	msr	BASEPRI, r0
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f7fe ffd0 	bl	8002bf4 <vTaskSwitchContext>
 8003c54:	f04f 0000 	mov.w	r0, #0
 8003c58:	f380 8811 	msr	BASEPRI, r0
 8003c5c:	bc09      	pop	{r0, r3}
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	6808      	ldr	r0, [r1, #0]
 8003c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c66:	f01e 0f10 	tst.w	lr, #16
 8003c6a:	bf08      	it	eq
 8003c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c70:	f380 8809 	msr	PSP, r0
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst>:
 8003c80:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ca0:	f7fe fef0 	bl	8002a84 <xTaskIncrementTick>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <xPortSysTickHandler+0x3c>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	e000ed04 	.word	0xe000ed04

08003cc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <vPortSetupTimerInterrupt+0x34>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <vPortSetupTimerInterrupt+0x38>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <vPortSetupTimerInterrupt+0x3c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <vPortSetupTimerInterrupt+0x40>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <vPortSetupTimerInterrupt+0x44>)
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cea:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <vPortSetupTimerInterrupt+0x34>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e010 	.word	0xe000e010
 8003d00:	e000e018 	.word	0xe000e018
 8003d04:	20000000 	.word	0x20000000
 8003d08:	10624dd3 	.word	0x10624dd3
 8003d0c:	e000e014 	.word	0xe000e014

08003d10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d20 <vPortEnableVFP+0x10>
 8003d14:	6801      	ldr	r1, [r0, #0]
 8003d16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d1a:	6001      	str	r1, [r0, #0]
 8003d1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d1e:	bf00      	nop
 8003d20:	e000ed88 	.word	0xe000ed88

08003d24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d2a:	f3ef 8305 	mrs	r3, IPSR
 8003d2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	d913      	bls.n	8003d5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d36:	4a16      	ldr	r2, [pc, #88]	; (8003d90 <vPortValidateInterruptPriority+0x6c>)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <vPortValidateInterruptPriority+0x70>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	7afa      	ldrb	r2, [r7, #11]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d209      	bcs.n	8003d5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	e7fe      	b.n	8003d5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <vPortValidateInterruptPriority+0x74>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <vPortValidateInterruptPriority+0x78>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d909      	bls.n	8003d82 <vPortValidateInterruptPriority+0x5e>
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	e7fe      	b.n	8003d80 <vPortValidateInterruptPriority+0x5c>
	}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e3f0 	.word	0xe000e3f0
 8003d94:	200008fc 	.word	0x200008fc
 8003d98:	e000ed0c 	.word	0xe000ed0c
 8003d9c:	20000900 	.word	0x20000900

08003da0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003dac:	f7fe fdb0 	bl	8002910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003db0:	4b57      	ldr	r3, [pc, #348]	; (8003f10 <pvPortMalloc+0x170>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003db8:	f000 f90c 	bl	8003fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dbc:	4b55      	ldr	r3, [pc, #340]	; (8003f14 <pvPortMalloc+0x174>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 808c 	bne.w	8003ee2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01c      	beq.n	8003e0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d013      	beq.n	8003e0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f023 0307 	bic.w	r3, r3, #7
 8003de8:	3308      	adds	r3, #8
 8003dea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <pvPortMalloc+0x6a>
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e7fe      	b.n	8003e08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d068      	beq.n	8003ee2 <pvPortMalloc+0x142>
 8003e10:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <pvPortMalloc+0x178>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d863      	bhi.n	8003ee2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e1a:	4b40      	ldr	r3, [pc, #256]	; (8003f1c <pvPortMalloc+0x17c>)
 8003e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e1e:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <pvPortMalloc+0x17c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e24:	e004      	b.n	8003e30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d903      	bls.n	8003e42 <pvPortMalloc+0xa2>
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f1      	bne.n	8003e26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <pvPortMalloc+0x170>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d04a      	beq.n	8003ee2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2208      	movs	r2, #8
 8003e52:	4413      	add	r3, r2
 8003e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	1ad2      	subs	r2, r2, r3
 8003e66:	2308      	movs	r3, #8
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d91e      	bls.n	8003eac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <pvPortMalloc+0xf4>
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	e7fe      	b.n	8003e92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1ad2      	subs	r2, r2, r3
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ea6:	69b8      	ldr	r0, [r7, #24]
 8003ea8:	f000 f8f6 	bl	8004098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003eac:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <pvPortMalloc+0x178>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <pvPortMalloc+0x178>)
 8003eb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <pvPortMalloc+0x178>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <pvPortMalloc+0x180>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d203      	bcs.n	8003ece <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ec6:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <pvPortMalloc+0x178>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a15      	ldr	r2, [pc, #84]	; (8003f20 <pvPortMalloc+0x180>)
 8003ecc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <pvPortMalloc+0x174>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ee2:	f7fe fd23 	bl	800292c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <pvPortMalloc+0x164>
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e7fe      	b.n	8003f02 <pvPortMalloc+0x162>
	return pvReturn;
 8003f04:	69fb      	ldr	r3, [r7, #28]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3728      	adds	r7, #40	; 0x28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	2000450c 	.word	0x2000450c
 8003f14:	20004518 	.word	0x20004518
 8003f18:	20004510 	.word	0x20004510
 8003f1c:	20004504 	.word	0x20004504
 8003f20:	20004514 	.word	0x20004514

08003f24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d046      	beq.n	8003fc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f36:	2308      	movs	r3, #8
 8003f38:	425b      	negs	r3, r3
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <vPortFree+0xa8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <vPortFree+0x42>
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e7fe      	b.n	8003f64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <vPortFree+0x5e>
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	e7fe      	b.n	8003f80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <vPortFree+0xa8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d019      	beq.n	8003fc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d115      	bne.n	8003fc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <vPortFree+0xa8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fa8:	f7fe fcb2 	bl	8002910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <vPortFree+0xac>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	4a06      	ldr	r2, [pc, #24]	; (8003fd0 <vPortFree+0xac>)
 8003fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fba:	6938      	ldr	r0, [r7, #16]
 8003fbc:	f000 f86c 	bl	8004098 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003fc0:	f7fe fcb4 	bl	800292c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fc4:	bf00      	nop
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20004518 	.word	0x20004518
 8003fd0:	20004510 	.word	0x20004510

08003fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <prvHeapInit+0xac>)
 8003fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00c      	beq.n	8004008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3307      	adds	r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <prvHeapInit+0xac>)
 8004004:	4413      	add	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <prvHeapInit+0xb0>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <prvHeapInit+0xb0>)
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4413      	add	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004020:	2208      	movs	r2, #8
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <prvHeapInit+0xb4>)
 8004034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <prvHeapInit+0xb4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <prvHeapInit+0xb4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	1ad2      	subs	r2, r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <prvHeapInit+0xb4>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4a0a      	ldr	r2, [pc, #40]	; (800408c <prvHeapInit+0xb8>)
 8004062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a09      	ldr	r2, [pc, #36]	; (8004090 <prvHeapInit+0xbc>)
 800406a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <prvHeapInit+0xc0>)
 800406e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004072:	601a      	str	r2, [r3, #0]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	20000904 	.word	0x20000904
 8004084:	20004504 	.word	0x20004504
 8004088:	2000450c 	.word	0x2000450c
 800408c:	20004514 	.word	0x20004514
 8004090:	20004510 	.word	0x20004510
 8004094:	20004518 	.word	0x20004518

08004098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040a0:	4b28      	ldr	r3, [pc, #160]	; (8004144 <prvInsertBlockIntoFreeList+0xac>)
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e002      	b.n	80040ac <prvInsertBlockIntoFreeList+0x14>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d8f7      	bhi.n	80040a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	4413      	add	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d108      	bne.n	80040da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	441a      	add	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	441a      	add	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d118      	bne.n	8004120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <prvInsertBlockIntoFreeList+0xb0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d00d      	beq.n	8004116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e008      	b.n	8004128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <prvInsertBlockIntoFreeList+0xb0>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e003      	b.n	8004128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	429a      	cmp	r2, r3
 800412e:	d002      	beq.n	8004136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20004504 	.word	0x20004504
 8004148:	2000450c 	.word	0x2000450c

0800414c <__libc_init_array>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	4e0d      	ldr	r6, [pc, #52]	; (8004184 <__libc_init_array+0x38>)
 8004150:	4c0d      	ldr	r4, [pc, #52]	; (8004188 <__libc_init_array+0x3c>)
 8004152:	1ba4      	subs	r4, r4, r6
 8004154:	10a4      	asrs	r4, r4, #2
 8004156:	2500      	movs	r5, #0
 8004158:	42a5      	cmp	r5, r4
 800415a:	d109      	bne.n	8004170 <__libc_init_array+0x24>
 800415c:	4e0b      	ldr	r6, [pc, #44]	; (800418c <__libc_init_array+0x40>)
 800415e:	4c0c      	ldr	r4, [pc, #48]	; (8004190 <__libc_init_array+0x44>)
 8004160:	f000 f82c 	bl	80041bc <_init>
 8004164:	1ba4      	subs	r4, r4, r6
 8004166:	10a4      	asrs	r4, r4, #2
 8004168:	2500      	movs	r5, #0
 800416a:	42a5      	cmp	r5, r4
 800416c:	d105      	bne.n	800417a <__libc_init_array+0x2e>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004174:	4798      	blx	r3
 8004176:	3501      	adds	r5, #1
 8004178:	e7ee      	b.n	8004158 <__libc_init_array+0xc>
 800417a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800417e:	4798      	blx	r3
 8004180:	3501      	adds	r5, #1
 8004182:	e7f2      	b.n	800416a <__libc_init_array+0x1e>
 8004184:	08004270 	.word	0x08004270
 8004188:	08004270 	.word	0x08004270
 800418c:	08004270 	.word	0x08004270
 8004190:	08004274 	.word	0x08004274

08004194 <memcpy>:
 8004194:	b510      	push	{r4, lr}
 8004196:	1e43      	subs	r3, r0, #1
 8004198:	440a      	add	r2, r1
 800419a:	4291      	cmp	r1, r2
 800419c:	d100      	bne.n	80041a0 <memcpy+0xc>
 800419e:	bd10      	pop	{r4, pc}
 80041a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041a8:	e7f7      	b.n	800419a <memcpy+0x6>

080041aa <memset>:
 80041aa:	4402      	add	r2, r0
 80041ac:	4603      	mov	r3, r0
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d100      	bne.n	80041b4 <memset+0xa>
 80041b2:	4770      	bx	lr
 80041b4:	f803 1b01 	strb.w	r1, [r3], #1
 80041b8:	e7f9      	b.n	80041ae <memset+0x4>
	...

080041bc <_init>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	bf00      	nop
 80041c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c2:	bc08      	pop	{r3}
 80041c4:	469e      	mov	lr, r3
 80041c6:	4770      	bx	lr

080041c8 <_fini>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	bf00      	nop
 80041cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ce:	bc08      	pop	{r3}
 80041d0:	469e      	mov	lr, r3
 80041d2:	4770      	bx	lr
