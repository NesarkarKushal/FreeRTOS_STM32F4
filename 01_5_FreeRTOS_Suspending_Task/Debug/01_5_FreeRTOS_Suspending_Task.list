
01_5_FreeRTOS_Suspending_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005198  08005198  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a0  080051a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080051a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004570  20000074  0800521c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045e4  0800521c  000245e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcad  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023bc  00000000  00000000  0002dd51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  00030110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  00030a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022215  00000000  00000000  00031308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000962b  00000000  00000000  0005351d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c817c  00000000  00000000  0005cb48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124cc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  00124d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005080 	.word	0x08005080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005080 	.word	0x08005080

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	200000e4 	.word	0x200000e4

080005a4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <vApplicationGetTimerTaskMemory+0x30>)
 80005ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200002e4 	.word	0x200002e4
 80005d4:	20000338 	.word	0x20000338

080005d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d013      	beq.n	8000618 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00b      	beq.n	8000618 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000600:	e000      	b.n	8000604 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000602:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f9      	beq.n	8000602 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800060e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <_write>:

#include <stdio.h>


int _write(int file,char *ptr, int len)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b086      	sub	sp, #24
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
	int i=0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
 800063a:	e009      	b.n	8000650 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	60ba      	str	r2, [r7, #8]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ffc7 	bl	80005d8 <ITM_SendChar>
	for(i=0;i<len;i++)
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	3301      	adds	r3, #1
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	dbf1      	blt.n	800063c <_write+0x16>
	return len;
 8000658:	687b      	ldr	r3, [r7, #4]

}
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <vBlueLedControllerTask>:
#define BLUE   GPIO_PIN_15

int i=0,j=0;

void  vBlueLedControllerTask(void *pvParameters)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	while(1)
	{
				printf("Blue= %d\n",i);
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <vBlueLedControllerTask+0x5c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4814      	ldr	r0, [pc, #80]	; (80006c4 <vBlueLedControllerTask+0x60>)
 8000674:	f003 fe20 	bl	80042b8 <iprintf>
				HAL_GPIO_WritePin(GPIOD,BLUE,1);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4812      	ldr	r0, [pc, #72]	; (80006c8 <vBlueLedControllerTask+0x64>)
 8000680:	f000 fd5c 	bl	800113c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 8000684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000688:	f002 f88e 	bl	80027a8 <vTaskDelay>
				HAL_GPIO_WritePin(GPIOD,BLUE,0);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <vBlueLedControllerTask+0x64>)
 8000694:	f000 fd52 	bl	800113c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 8000698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069c:	f002 f884 	bl	80027a8 <vTaskDelay>

				i=i+1;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <vBlueLedControllerTask+0x5c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vBlueLedControllerTask+0x5c>)
 80006a8:	6013      	str	r3, [r2, #0]
				if(i>=10)
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <vBlueLedControllerTask+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b09      	cmp	r3, #9
 80006b0:	dddc      	ble.n	800066c <vBlueLedControllerTask+0x8>
					vTaskSuspend(xHandle1);
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <vBlueLedControllerTask+0x68>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 f8aa 	bl	8002810 <vTaskSuspend>
				printf("Blue= %d\n",i);
 80006bc:	e7d6      	b.n	800066c <vBlueLedControllerTask+0x8>
 80006be:	bf00      	nop
 80006c0:	20000738 	.word	0x20000738
 80006c4:	08005098 	.word	0x08005098
 80006c8:	40020c00 	.word	0x40020c00
 80006cc:	20004598 	.word	0x20004598

080006d0 <vRedLedControllerTask>:
	}
}


void  vRedLedControllerTask(void *pvParameters)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		j+=1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <vRedLedControllerTask+0x48>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <vRedLedControllerTask+0x48>)
 80006e0:	6013      	str	r3, [r2, #0]
		printf("Red =%d \n",j);
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <vRedLedControllerTask+0x48>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <vRedLedControllerTask+0x4c>)
 80006ea:	f003 fde5 	bl	80042b8 <iprintf>

				HAL_GPIO_WritePin(GPIOD,RED,1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f4:	480a      	ldr	r0, [pc, #40]	; (8000720 <vRedLedControllerTask+0x50>)
 80006f6:	f000 fd21 	bl	800113c <HAL_GPIO_WritePin>
				vTaskDelay( 500);
 80006fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fe:	f002 f853 	bl	80027a8 <vTaskDelay>

				HAL_GPIO_WritePin(GPIOD,RED,0);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <vRedLedControllerTask+0x50>)
 800070a:	f000 fd17 	bl	800113c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 800070e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000712:	f002 f849 	bl	80027a8 <vTaskDelay>
		j+=1;
 8000716:	e7df      	b.n	80006d8 <vRedLedControllerTask+0x8>
 8000718:	2000073c 	.word	0x2000073c
 800071c:	080050a4 	.word	0x080050a4
 8000720:	40020c00 	.word	0x40020c00

08000724 <main>:




int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af02      	add	r7, sp, #8
  HAL_Init();
 800072a:	f000 fa15 	bl	8000b58 <HAL_Init>

  SystemClock_Config();
 800072e:	f000 f825 	bl	800077c <SystemClock_Config>

  MX_GPIO_Init();
 8000732:	f000 f881 	bl	8000838 <MX_GPIO_Init>
  xTaskCreate(vBlueLedControllerTask,
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <main+0x40>)
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2300      	movs	r3, #0
 8000740:	2280      	movs	r2, #128	; 0x80
 8000742:	4909      	ldr	r1, [pc, #36]	; (8000768 <main+0x44>)
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <main+0x48>)
 8000746:	f001 fef9 	bl	800253c <xTaskCreate>
  								NULL,
  								1,
  								&xHandle1
  								);

  	xTaskCreate(vRedLedControllerTask,
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <main+0x4c>)
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2302      	movs	r3, #2
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2300      	movs	r3, #0
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	4907      	ldr	r1, [pc, #28]	; (8000774 <main+0x50>)
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <main+0x54>)
 800075a:	f001 feef 	bl	800253c <xTaskCreate>
  								2,
								&xHandle2
  								);


     vTaskStartScheduler();
 800075e:	f002 f8e9 	bl	8002934 <vTaskStartScheduler>



  while (1)
 8000762:	e7fe      	b.n	8000762 <main+0x3e>
 8000764:	20004598 	.word	0x20004598
 8000768:	080050b0 	.word	0x080050b0
 800076c:	08000665 	.word	0x08000665
 8000770:	20004594 	.word	0x20004594
 8000774:	080050c4 	.word	0x080050c4
 8000778:	080006d1 	.word	0x080006d1

0800077c <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fd8b 	bl	80042a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xb4>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xb4>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xb4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <SystemClock_Config+0xb8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <SystemClock_Config+0xb8>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <SystemClock_Config+0xb8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fcbf 	bl	8001170 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f8:	f000 f894 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f000 ff1a 	bl	8001650 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000822:	f000 f87f 	bl	8000924 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <MX_GPIO_Init+0xe0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a30      	ldr	r2, [pc, #192]	; (8000918 <MX_GPIO_Init+0xe0>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <MX_GPIO_Init+0xe0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_GPIO_Init+0xe0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a29      	ldr	r2, [pc, #164]	; (8000918 <MX_GPIO_Init+0xe0>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_GPIO_Init+0xe0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_GPIO_Init+0xe0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a22      	ldr	r2, [pc, #136]	; (8000918 <MX_GPIO_Init+0xe0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_GPIO_Init+0xe0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_GPIO_Init+0xe0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <MX_GPIO_Init+0xe0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_GPIO_Init+0xe0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0xe4>)
 80008c4:	f000 fc3a 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <MX_GPIO_Init+0xe8>)
 80008d0:	f000 fc34 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008d4:	2302      	movs	r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_GPIO_Init+0xe4>)
 80008ec:	f000 fa8c 	bl	8000e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008f0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0xe8>)
 800090a:	f000 fa7d 	bl	8000e08 <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020800 	.word	0x40020800
 8000920:	40020c00 	.word	0x40020c00

08000924 <Error_Handler>:


void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092a:	e7fe      	b.n	800092a <Error_Handler+0x6>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_MspInit+0x54>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <HAL_MspInit+0x54>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x54>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x54>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_MspInit+0x54>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x54>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	210f      	movs	r1, #15
 800096e:	f06f 0001 	mvn.w	r0, #1
 8000972:	f000 fa20 	bl	8000db6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f922 	bl	8000bfc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009b8:	f002 fbf0 	bl	800319c <xTaskGetSchedulerState>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d001      	beq.n	80009c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009c2:	f003 f9d9 	bl	8003d78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	e00a      	b.n	80009f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009dc:	f3af 8000 	nop.w
 80009e0:	4601      	mov	r1, r0
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	60ba      	str	r2, [r7, #8]
 80009e8:	b2ca      	uxtb	r2, r1
 80009ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	dbf0      	blt.n	80009dc <_read+0x12>
	}

return len;
 80009fa:	687b      	ldr	r3, [r7, #4]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_isatty>:

int _isatty(int file)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	return 1;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b085      	sub	sp, #20
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f003 fbce 	bl	800423c <__errno>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20020000 	.word	0x20020000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	20000740 	.word	0x20000740
 8000ad4:	200045e8 	.word	0x200045e8

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <SystemInit+0x28>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <SystemInit+0x28>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SystemInit+0x28>)
 8000aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af2:	609a      	str	r2, [r3, #8]
#endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b0a:	e003      	b.n	8000b14 <LoopCopyDataInit>

08000b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b12:	3104      	adds	r1, #4

08000b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b1c:	d3f6      	bcc.n	8000b0c <CopyDataInit>
  ldr  r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b20:	e002      	b.n	8000b28 <LoopFillZerobss>

08000b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b24:	f842 3b04 	str.w	r3, [r2], #4

08000b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b2c:	d3f9      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd3 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fb89 	bl	8004248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fdf5 	bl	8000724 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b40:	080051a8 	.word	0x080051a8
  ldr  r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b48:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b4c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b50:	200045e4 	.word	0x200045e4

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f90d 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fece 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f917 	bl	8000dee <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f8ed 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	2000459c 	.word	0x2000459c

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	2000459c 	.word	0x2000459c

08000c3c <__NVIC_SetPriorityGrouping>:
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_SetPriority>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	; 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff47 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff5c 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff8e 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5d 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffb0 	bl	8000d5c <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	e16b      	b.n	80010fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	f040 815a 	bne.w	80010f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d00b      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d007      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e56:	2b11      	cmp	r3, #17
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d130      	bne.n	8000ec4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0xfc>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b12      	cmp	r3, #18
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80b4 	beq.w	80010f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b5f      	ldr	r3, [pc, #380]	; (8001110 <HAL_GPIO_Init+0x308>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a5e      	ldr	r2, [pc, #376]	; (8001110 <HAL_GPIO_Init+0x308>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <HAL_GPIO_Init+0x308>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000faa:	4a5a      	ldr	r2, [pc, #360]	; (8001114 <HAL_GPIO_Init+0x30c>)
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a51      	ldr	r2, [pc, #324]	; (8001118 <HAL_GPIO_Init+0x310>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d02b      	beq.n	800102e <HAL_GPIO_Init+0x226>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a50      	ldr	r2, [pc, #320]	; (800111c <HAL_GPIO_Init+0x314>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d025      	beq.n	800102a <HAL_GPIO_Init+0x222>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4f      	ldr	r2, [pc, #316]	; (8001120 <HAL_GPIO_Init+0x318>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d01f      	beq.n	8001026 <HAL_GPIO_Init+0x21e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4e      	ldr	r2, [pc, #312]	; (8001124 <HAL_GPIO_Init+0x31c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d019      	beq.n	8001022 <HAL_GPIO_Init+0x21a>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4d      	ldr	r2, [pc, #308]	; (8001128 <HAL_GPIO_Init+0x320>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d013      	beq.n	800101e <HAL_GPIO_Init+0x216>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4c      	ldr	r2, [pc, #304]	; (800112c <HAL_GPIO_Init+0x324>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d00d      	beq.n	800101a <HAL_GPIO_Init+0x212>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4b      	ldr	r2, [pc, #300]	; (8001130 <HAL_GPIO_Init+0x328>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_Init+0x20e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4a      	ldr	r2, [pc, #296]	; (8001134 <HAL_GPIO_Init+0x32c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_GPIO_Init+0x20a>
 800100e:	2307      	movs	r3, #7
 8001010:	e00e      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001012:	2308      	movs	r3, #8
 8001014:	e00c      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001016:	2306      	movs	r3, #6
 8001018:	e00a      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800101a:	2305      	movs	r3, #5
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800101e:	2304      	movs	r3, #4
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x228>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x228>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4934      	ldr	r1, [pc, #208]	; (8001114 <HAL_GPIO_Init+0x30c>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104e:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <HAL_GPIO_Init+0x330>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001072:	4a31      	ldr	r2, [pc, #196]	; (8001138 <HAL_GPIO_Init+0x330>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_GPIO_Init+0x330>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109c:	4a26      	ldr	r2, [pc, #152]	; (8001138 <HAL_GPIO_Init+0x330>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_GPIO_Init+0x330>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c6:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <HAL_GPIO_Init+0x330>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_GPIO_Init+0x330>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_GPIO_Init+0x330>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f ae90 	bls.w	8000e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	3724      	adds	r7, #36	; 0x24
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e25b      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118e:	4ba3      	ldr	r3, [pc, #652]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4ba0      	ldr	r3, [pc, #640]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b9d      	ldr	r3, [pc, #628]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b99      	ldr	r3, [pc, #612]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e236      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b91      	ldr	r3, [pc, #580]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a90      	ldr	r2, [pc, #576]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a8a      	ldr	r2, [pc, #552]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a87      	ldr	r2, [pc, #540]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a83      	ldr	r2, [pc, #524]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b81      	ldr	r3, [pc, #516]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a80      	ldr	r2, [pc, #512]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcfc 	bl	8000c24 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcf8 	bl	8000c24 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1fb      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fce8 	bl	8000c24 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fce4 	bl	8000c24 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1e7      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b6c      	ldr	r3, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001286:	4b65      	ldr	r3, [pc, #404]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1bb      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4952      	ldr	r1, [pc, #328]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <HAL_RCC_OscConfig+0x2b0>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc9d 	bl	8000c24 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc99 	bl	8000c24 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e19c      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b43      	ldr	r3, [pc, #268]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4940      	ldr	r1, [pc, #256]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <HAL_RCC_OscConfig+0x2b0>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc7c 	bl	8000c24 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc78 	bl	8000c24 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e17b      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d030      	beq.n	80013bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_RCC_OscConfig+0x2b4>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc5c 	bl	8000c24 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc58 	bl	8000c24 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e15b      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e015      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x2b4>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc45 	bl	8000c24 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fc41 	bl	8000c24 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e144      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a0 	beq.w	800150a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10f      	bne.n	80013fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d121      	bne.n	800144a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_RCC_OscConfig+0x2b8>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001412:	f7ff fc07 	bl	8000c24 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e011      	b.n	800143e <HAL_RCC_OscConfig+0x2ce>
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	42470000 	.word	0x42470000
 8001424:	42470e80 	.word	0x42470e80
 8001428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142c:	f7ff fbfa 	bl	8000c24 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0fd      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_RCC_OscConfig+0x4d4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x2f0>
 8001452:	4b7d      	ldr	r3, [pc, #500]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x32a>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x312>
 8001468:	4b77      	ldr	r3, [pc, #476]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a76      	ldr	r2, [pc, #472]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	4b74      	ldr	r3, [pc, #464]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	4a73      	ldr	r2, [pc, #460]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6713      	str	r3, [r2, #112]	; 0x70
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x32a>
 8001482:	4b71      	ldr	r3, [pc, #452]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a70      	ldr	r2, [pc, #448]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001492:	4a6d      	ldr	r2, [pc, #436]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbbf 	bl	8000c24 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fbbb 	bl	8000c24 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0bc      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x33a>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fba9 	bl	8000c24 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fba5 	bl	8000c24 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0a6      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b56      	ldr	r3, [pc, #344]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b52      	ldr	r3, [pc, #328]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8092 	beq.w	8001638 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001514:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d05c      	beq.n	80015da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d141      	bne.n	80015ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_RCC_OscConfig+0x4dc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb79 	bl	8000c24 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fb75 	bl	8000c24 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e078      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	061b      	lsls	r3, r3, #24
 8001578:	4933      	ldr	r1, [pc, #204]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157e:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_RCC_OscConfig+0x4dc>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fb4e 	bl	8000c24 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff fb4a 	bl	8000c24 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e04d      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x41c>
 80015aa:	e045      	b.n	8001638 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x4dc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb37 	bl	8000c24 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fb33 	bl	8000c24 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e036      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x44a>
 80015d8:	e02e      	b.n	8001638 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e029      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_RCC_OscConfig+0x4d8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d115      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800160e:	4013      	ands	r3, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001614:	4293      	cmp	r3, r2
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d106      	bne.n	8001634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40007000 	.word	0x40007000
 8001648:	40023800 	.word	0x40023800
 800164c:	42470060 	.word	0x42470060

08001650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0cc      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d90c      	bls.n	800168c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b65      	ldr	r3, [pc, #404]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b8      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016bc:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b50      	ldr	r3, [pc, #320]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	494d      	ldr	r1, [pc, #308]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d044      	beq.n	8001770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d119      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e07f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d003      	beq.n	800170e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	2b03      	cmp	r3, #3
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e067      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0203 	bic.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4934      	ldr	r1, [pc, #208]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001740:	f7ff fa70 	bl	8000c24 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	e00a      	b.n	800175e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7ff fa6c 	bl	8000c24 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e04f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 020c 	and.w	r2, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	429a      	cmp	r2, r3
 800176e:	d1eb      	bne.n	8001748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d20c      	bcs.n	8001798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e032      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4916      	ldr	r1, [pc, #88]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d6:	f000 f821 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017da:	4601      	mov	r1, r0
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	5cd3      	ldrb	r3, [r2, r3]
 80017ea:	fa21 f303 	lsr.w	r3, r1, r3
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f9d0 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	080050f0 	.word	0x080050f0
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001832:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_RCC_GetSysClockFreq+0x158>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d007      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x32>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d008      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x38>
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 808d 	bne.w	8001962 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_RCC_GetSysClockFreq+0x15c>)
 800184a:	60bb      	str	r3, [r7, #8]
       break;
 800184c:	e08c      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <HAL_RCC_GetSysClockFreq+0x160>)
 8001850:	60bb      	str	r3, [r7, #8]
      break;
 8001852:	e089      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_GetSysClockFreq+0x158>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185e:	4b45      	ldr	r3, [pc, #276]	; (8001974 <HAL_RCC_GetSysClockFreq+0x158>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d023      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b42      	ldr	r3, [pc, #264]	; (8001974 <HAL_RCC_GetSysClockFreq+0x158>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	ea03 0501 	and.w	r5, r3, r1
 8001880:	ea04 0602 	and.w	r6, r4, r2
 8001884:	4a3d      	ldr	r2, [pc, #244]	; (800197c <HAL_RCC_GetSysClockFreq+0x160>)
 8001886:	fb02 f106 	mul.w	r1, r2, r6
 800188a:	2200      	movs	r2, #0
 800188c:	fb02 f205 	mul.w	r2, r2, r5
 8001890:	440a      	add	r2, r1
 8001892:	493a      	ldr	r1, [pc, #232]	; (800197c <HAL_RCC_GetSysClockFreq+0x160>)
 8001894:	fba5 0101 	umull	r0, r1, r5, r1
 8001898:	1853      	adds	r3, r2, r1
 800189a:	4619      	mov	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4623      	mov	r3, r4
 80018a6:	f7fe fce3 	bl	8000270 <__aeabi_uldivmod>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e049      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_RCC_GetSysClockFreq+0x158>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	f04f 0400 	mov.w	r4, #0
 80018bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	ea03 0501 	and.w	r5, r3, r1
 80018c8:	ea04 0602 	and.w	r6, r4, r2
 80018cc:	4629      	mov	r1, r5
 80018ce:	4632      	mov	r2, r6
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	0154      	lsls	r4, r2, #5
 80018da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018de:	014b      	lsls	r3, r1, #5
 80018e0:	4619      	mov	r1, r3
 80018e2:	4622      	mov	r2, r4
 80018e4:	1b49      	subs	r1, r1, r5
 80018e6:	eb62 0206 	sbc.w	r2, r2, r6
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	f04f 0400 	mov.w	r4, #0
 80018f2:	0194      	lsls	r4, r2, #6
 80018f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018f8:	018b      	lsls	r3, r1, #6
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	00e2      	lsls	r2, r4, #3
 800190a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800190e:	00d9      	lsls	r1, r3, #3
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	195b      	adds	r3, r3, r5
 8001916:	eb44 0406 	adc.w	r4, r4, r6
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	02a2      	lsls	r2, r4, #10
 8001924:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001928:	0299      	lsls	r1, r3, #10
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	4618      	mov	r0, r3
 8001930:	4621      	mov	r1, r4
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f04f 0400 	mov.w	r4, #0
 8001938:	461a      	mov	r2, r3
 800193a:	4623      	mov	r3, r4
 800193c:	f7fe fc98 	bl	8000270 <__aeabi_uldivmod>
 8001940:	4603      	mov	r3, r0
 8001942:	460c      	mov	r4, r1
 8001944:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_GetSysClockFreq+0x158>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	3301      	adds	r3, #1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	60bb      	str	r3, [r7, #8]
      break;
 8001960:	e002      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001964:	60bb      	str	r3, [r7, #8]
      break;
 8001966:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001968:	68bb      	ldr	r3, [r7, #8]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	00f42400 	.word	0x00f42400
 800197c:	017d7840 	.word	0x017d7840

08001980 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f103 0208 	add.w	r2, r3, #8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f103 0208 	add.w	r2, r3, #8
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f103 0208 	add.w	r2, r3, #8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d103      	bne.n	8001a42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e00c      	b.n	8001a5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3308      	adds	r3, #8
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e002      	b.n	8001a50 <vListInsert+0x2e>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d2f6      	bcs.n	8001a4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	601a      	str	r2, [r3, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6892      	ldr	r2, [r2, #8]
 8001aaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6852      	ldr	r2, [r2, #4]
 8001ab4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d103      	bne.n	8001ac8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1e5a      	subs	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	e7fe      	b.n	8001b0e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001b10:	f002 f8a4 	bl	8003c5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	441a      	add	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b40:	3b01      	subs	r3, #1
 8001b42:	68f9      	ldr	r1, [r7, #12]
 8001b44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	441a      	add	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	22ff      	movs	r2, #255	; 0xff
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	22ff      	movs	r2, #255	; 0xff
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d114      	bne.n	8001b90 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d01a      	beq.n	8001ba4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3310      	adds	r3, #16
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 f95c 	bl	8002e30 <xTaskRemoveFromEventList>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d012      	beq.n	8001ba4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <xQueueGenericReset+0xcc>)
 8001b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	f3bf 8f6f 	isb	sy
 8001b8e:	e009      	b.n	8001ba4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3310      	adds	r3, #16
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fef3 	bl	8001980 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3324      	adds	r3, #36	; 0x24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff feee 	bl	8001980 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ba4:	f002 f888 	bl	8003cb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	e000ed04 	.word	0xe000ed04

08001bb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <xQueueGenericCreateStatic+0x28>
 8001bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd0:	f383 8811 	msr	BASEPRI, r3
 8001bd4:	f3bf 8f6f 	isb	sy
 8001bd8:	f3bf 8f4f 	dsb	sy
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bde:	e7fe      	b.n	8001bde <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <xQueueGenericCreateStatic+0x42>
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf8:	e7fe      	b.n	8001bf8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <xQueueGenericCreateStatic+0x4e>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <xQueueGenericCreateStatic+0x52>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <xQueueGenericCreateStatic+0x54>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <xQueueGenericCreateStatic+0x6c>
 8001c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c14:	f383 8811 	msr	BASEPRI, r3
 8001c18:	f3bf 8f6f 	isb	sy
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	e7fe      	b.n	8001c22 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <xQueueGenericCreateStatic+0x78>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <xQueueGenericCreateStatic+0x7c>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <xQueueGenericCreateStatic+0x7e>
 8001c34:	2300      	movs	r3, #0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <xQueueGenericCreateStatic+0x96>
 8001c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3e:	f383 8811 	msr	BASEPRI, r3
 8001c42:	f3bf 8f6f 	isb	sy
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	e7fe      	b.n	8001c4c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c4e:	2348      	movs	r3, #72	; 0x48
 8001c50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b48      	cmp	r3, #72	; 0x48
 8001c56:	d009      	beq.n	8001c6c <xQueueGenericCreateStatic+0xb4>
 8001c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5c:	f383 8811 	msr	BASEPRI, r3
 8001c60:	f3bf 8f6f 	isb	sy
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	e7fe      	b.n	8001c6a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001c6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00d      	beq.n	8001c94 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f805 	bl	8001c9e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3730      	adds	r7, #48	; 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e002      	b.n	8001cc0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ccc:	2101      	movs	r1, #1
 8001cce:	69b8      	ldr	r0, [r7, #24]
 8001cd0:	f7ff ff0a 	bl	8001ae8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08e      	sub	sp, #56	; 0x38
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <xQueueGenericSend+0x30>
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d0a:	e7fe      	b.n	8001d0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <xQueueGenericSend+0x3e>
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <xQueueGenericSend+0x42>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <xQueueGenericSend+0x44>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <xQueueGenericSend+0x5c>
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	e7fe      	b.n	8001d36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d103      	bne.n	8001d46 <xQueueGenericSend+0x6a>
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <xQueueGenericSend+0x6e>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <xQueueGenericSend+0x70>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <xQueueGenericSend+0x88>
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	623b      	str	r3, [r7, #32]
 8001d62:	e7fe      	b.n	8001d62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d64:	f001 fa1a 	bl	800319c <xTaskGetSchedulerState>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <xQueueGenericSend+0x98>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <xQueueGenericSend+0x9c>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <xQueueGenericSend+0x9e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <xQueueGenericSend+0xb6>
 8001d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d82:	f383 8811 	msr	BASEPRI, r3
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	e7fe      	b.n	8001d90 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d92:	f001 ff63 	bl	8003c5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <xQueueGenericSend+0xcc>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d129      	bne.n	8001dfc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dae:	f000 f9ff 	bl	80021b0 <prvCopyDataToQueue>
 8001db2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	3324      	adds	r3, #36	; 0x24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f001 f835 	bl	8002e30 <xTaskRemoveFromEventList>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <xQueueGenericSend+0x1f0>)
 8001dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	f3bf 8f6f 	isb	sy
 8001ddc:	e00a      	b.n	8001df4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <xQueueGenericSend+0x1f0>)
 8001de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001df4:	f001 ff60 	bl	8003cb8 <vPortExitCritical>
				return pdPASS;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e063      	b.n	8001ec4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e02:	f001 ff59 	bl	8003cb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e05c      	b.n	8001ec4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d106      	bne.n	8001e1e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 f86d 	bl	8002ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e1e:	f001 ff4b 	bl	8003cb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e22:	f000 fdeb 	bl	80029fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e26:	f001 ff19 	bl	8003c5c <vPortEnterCritical>
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e36:	d103      	bne.n	8001e40 <xQueueGenericSend+0x164>
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d103      	bne.n	8001e56 <xQueueGenericSend+0x17a>
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e56:	f001 ff2f 	bl	8003cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e5a:	1d3a      	adds	r2, r7, #4
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 f85c 	bl	8002f20 <xTaskCheckForTimeOut>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d124      	bne.n	8001eb8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e70:	f000 fa96 	bl	80023a0 <prvIsQueueFull>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d018      	beq.n	8001eac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 ff86 	bl	8002d94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e8a:	f000 fa21 	bl	80022d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e8e:	f000 fdc3 	bl	8002a18 <xTaskResumeAll>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f af7c 	bne.w	8001d92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <xQueueGenericSend+0x1f0>)
 8001e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f3bf 8f4f 	dsb	sy
 8001ea6:	f3bf 8f6f 	isb	sy
 8001eaa:	e772      	b.n	8001d92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eae:	f000 fa0f 	bl	80022d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001eb2:	f000 fdb1 	bl	8002a18 <xTaskResumeAll>
 8001eb6:	e76c      	b.n	8001d92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eba:	f000 fa09 	bl	80022d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ebe:	f000 fdab 	bl	8002a18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001ec2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3738      	adds	r7, #56	; 0x38
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	e000ed04 	.word	0xe000ed04

08001ed0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <xQueueGenericSendFromISR+0x2c>
 8001ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	e7fe      	b.n	8001efa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <xQueueGenericSendFromISR+0x3a>
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <xQueueGenericSendFromISR+0x3e>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <xQueueGenericSendFromISR+0x40>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <xQueueGenericSendFromISR+0x58>
 8001f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	623b      	str	r3, [r7, #32]
 8001f26:	e7fe      	b.n	8001f26 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d103      	bne.n	8001f36 <xQueueGenericSendFromISR+0x66>
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <xQueueGenericSendFromISR+0x6a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <xQueueGenericSendFromISR+0x6c>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <xQueueGenericSendFromISR+0x84>
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e7fe      	b.n	8001f52 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f54:	f001 ff5e 	bl	8003e14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f58:	f3ef 8211 	mrs	r2, BASEPRI
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	61ba      	str	r2, [r7, #24]
 8001f6e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d302      	bcc.n	8001f86 <xQueueGenericSendFromISR+0xb6>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d12c      	bne.n	8001fe0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f96:	f000 f90b 	bl	80021b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d112      	bne.n	8001fca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	3324      	adds	r3, #36	; 0x24
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 ff3d 	bl	8002e30 <xTaskRemoveFromEventList>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	b25a      	sxtb	r2, r3
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001fde:	e001      	b.n	8001fe4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3738      	adds	r7, #56	; 0x38
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <xQueueReceive+0x2e>
	__asm volatile
 8002012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002016:	f383 8811 	msr	BASEPRI, r3
 800201a:	f3bf 8f6f 	isb	sy
 800201e:	f3bf 8f4f 	dsb	sy
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	e7fe      	b.n	8002024 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <xQueueReceive+0x3c>
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <xQueueReceive+0x40>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <xQueueReceive+0x42>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <xQueueReceive+0x5a>
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	e7fe      	b.n	8002050 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002052:	f001 f8a3 	bl	800319c <xTaskGetSchedulerState>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <xQueueReceive+0x6a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <xQueueReceive+0x6e>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <xQueueReceive+0x70>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <xQueueReceive+0x88>
 800206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	e7fe      	b.n	800207e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002080:	f001 fdec 	bl	8003c5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01f      	beq.n	80020d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002094:	f000 f8f6 	bl	8002284 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	1e5a      	subs	r2, r3, #1
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00f      	beq.n	80020c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	3310      	adds	r3, #16
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 febf 	bl	8002e30 <xTaskRemoveFromEventList>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <xQueueReceive+0x1b4>)
 80020ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020c8:	f001 fdf6 	bl	8003cb8 <vPortExitCritical>
				return pdPASS;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e069      	b.n	80021a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020d6:	f001 fdef 	bl	8003cb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80020da:	2300      	movs	r3, #0
 80020dc:	e062      	b.n	80021a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 ff03 	bl	8002ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020ee:	2301      	movs	r3, #1
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020f2:	f001 fde1 	bl	8003cb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020f6:	f000 fc81 	bl	80029fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020fa:	f001 fdaf 	bl	8003c5c <vPortEnterCritical>
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002104:	b25b      	sxtb	r3, r3
 8002106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210a:	d103      	bne.n	8002114 <xQueueReceive+0x11c>
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800211a:	b25b      	sxtb	r3, r3
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d103      	bne.n	800212a <xQueueReceive+0x132>
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800212a:	f001 fdc5 	bl	8003cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800212e:	1d3a      	adds	r2, r7, #4
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fef2 	bl	8002f20 <xTaskCheckForTimeOut>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d123      	bne.n	800218a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002144:	f000 f916 	bl	8002374 <prvIsQueueEmpty>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d017      	beq.n	800217e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	3324      	adds	r3, #36	; 0x24
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fe1c 	bl	8002d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800215c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800215e:	f000 f8b7 	bl	80022d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002162:	f000 fc59 	bl	8002a18 <xTaskResumeAll>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d189      	bne.n	8002080 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <xQueueReceive+0x1b4>)
 800216e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	e780      	b.n	8002080 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800217e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002180:	f000 f8a6 	bl	80022d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002184:	f000 fc48 	bl	8002a18 <xTaskResumeAll>
 8002188:	e77a      	b.n	8002080 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800218a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800218c:	f000 f8a0 	bl	80022d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002190:	f000 fc42 	bl	8002a18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002196:	f000 f8ed 	bl	8002374 <prvIsQueueEmpty>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f43f af6f 	beq.w	8002080 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3730      	adds	r7, #48	; 0x30
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	e000ed04 	.word	0xe000ed04

080021b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10d      	bne.n	80021ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d14d      	bne.n	8002272 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fffc 	bl	80031d8 <xTaskPriorityDisinherit>
 80021e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	e043      	b.n	8002272 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d119      	bne.n	8002224 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6858      	ldr	r0, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	461a      	mov	r2, r3
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	f002 f848 	bl	8004290 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	441a      	add	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	d32b      	bcc.n	8002272 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	e026      	b.n	8002272 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68d8      	ldr	r0, [r3, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	461a      	mov	r2, r3
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	f002 f82e 	bl	8004290 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	425b      	negs	r3, r3
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	425b      	negs	r3, r3
 800225a:	441a      	add	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d105      	bne.n	8002272 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	3b01      	subs	r3, #1
 8002270:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800227a:	697b      	ldr	r3, [r7, #20]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d018      	beq.n	80022c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	441a      	add	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d303      	bcc.n	80022b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	461a      	mov	r2, r3
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f001 ffe4 	bl	8004290 <memcpy>
	}
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022d8:	f001 fcc0 	bl	8003c5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022e4:	e011      	b.n	800230a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d012      	beq.n	8002314 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3324      	adds	r3, #36	; 0x24
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fd9c 	bl	8002e30 <xTaskRemoveFromEventList>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80022fe:	f000 fe6f 	bl	8002fe0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	3b01      	subs	r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800230a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dce9      	bgt.n	80022e6 <prvUnlockQueue+0x16>
 8002312:	e000      	b.n	8002316 <prvUnlockQueue+0x46>
					break;
 8002314:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	22ff      	movs	r2, #255	; 0xff
 800231a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800231e:	f001 fccb 	bl	8003cb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002322:	f001 fc9b 	bl	8003c5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800232c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800232e:	e011      	b.n	8002354 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3310      	adds	r3, #16
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fd77 	bl	8002e30 <xTaskRemoveFromEventList>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002348:	f000 fe4a 	bl	8002fe0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800234c:	7bbb      	ldrb	r3, [r7, #14]
 800234e:	3b01      	subs	r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002358:	2b00      	cmp	r3, #0
 800235a:	dce9      	bgt.n	8002330 <prvUnlockQueue+0x60>
 800235c:	e000      	b.n	8002360 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800235e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002368:	f001 fca6 	bl	8003cb8 <vPortExitCritical>
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800237c:	f001 fc6e 	bl	8003c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002388:	2301      	movs	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e001      	b.n	8002392 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002392:	f001 fc91 	bl	8003cb8 <vPortExitCritical>

	return xReturn;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023a8:	f001 fc58 	bl	8003c5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d102      	bne.n	80023be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023b8:	2301      	movs	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e001      	b.n	80023c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023c2:	f001 fc79 	bl	8003cb8 <vPortExitCritical>

	return xReturn;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e014      	b.n	800240a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023e0:	4a0e      	ldr	r2, [pc, #56]	; (800241c <vQueueAddToRegistry+0x4c>)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80023ec:	490b      	ldr	r1, [pc, #44]	; (800241c <vQueueAddToRegistry+0x4c>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <vQueueAddToRegistry+0x4c>)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002402:	e005      	b.n	8002410 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b07      	cmp	r3, #7
 800240e:	d9e7      	bls.n	80023e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	200045a0 	.word	0x200045a0

08002420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002430:	f001 fc14 	bl	8003c5c <vPortEnterCritical>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800243a:	b25b      	sxtb	r3, r3
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d103      	bne.n	800244a <vQueueWaitForMessageRestricted+0x2a>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002450:	b25b      	sxtb	r3, r3
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d103      	bne.n	8002460 <vQueueWaitForMessageRestricted+0x40>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002460:	f001 fc2a 	bl	8003cb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fcb1 	bl	8002ddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff28 	bl	80022d0 <prvUnlockQueue>
	}
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af04      	add	r7, sp, #16
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <xTaskCreateStatic+0x28>
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	e7fe      	b.n	80024ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <xTaskCreateStatic+0x42>
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	e7fe      	b.n	80024c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80024ca:	2354      	movs	r3, #84	; 0x54
 80024cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b54      	cmp	r3, #84	; 0x54
 80024d2:	d009      	beq.n	80024e8 <xTaskCreateStatic+0x60>
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e7fe      	b.n	80024e6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80024e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01e      	beq.n	800252e <xTaskCreateStatic+0xa6>
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01b      	beq.n	800252e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002508:	2300      	movs	r3, #0
 800250a:	9303      	str	r3, [sp, #12]
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	9302      	str	r3, [sp, #8]
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f850 	bl	80025c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002528:	f000 f8d4 	bl	80026d4 <prvAddNewTaskToReadyList>
 800252c:	e001      	b.n	8002532 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002532:	697b      	ldr	r3, [r7, #20]
	}
 8002534:	4618      	mov	r0, r3
 8002536:	3728      	adds	r7, #40	; 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af04      	add	r7, sp, #16
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4618      	mov	r0, r3
 8002552:	f001 fc9d 	bl	8003e90 <pvPortMalloc>
 8002556:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00e      	beq.n	800257c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800255e:	2054      	movs	r0, #84	; 0x54
 8002560:	f001 fc96 	bl	8003e90 <pvPortMalloc>
 8002564:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
 8002572:	e005      	b.n	8002580 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002574:	6978      	ldr	r0, [r7, #20]
 8002576:	f001 fd4d 	bl	8004014 <vPortFree>
 800257a:	e001      	b.n	8002580 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d017      	beq.n	80025b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800258e:	88fa      	ldrh	r2, [r7, #6]
 8002590:	2300      	movs	r3, #0
 8002592:	9303      	str	r3, [sp, #12]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f80e 	bl	80025c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025aa:	69f8      	ldr	r0, [r7, #28]
 80025ac:	f000 f892 	bl	80026d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025b0:	2301      	movs	r3, #1
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	e002      	b.n	80025bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025bc:	69bb      	ldr	r3, [r7, #24]
	}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b088      	sub	sp, #32
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025de:	3b01      	subs	r3, #1
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f023 0307 	bic.w	r3, r3, #7
 80025ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <prvInitialiseNewTask+0x46>
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	e7fe      	b.n	800260a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d01f      	beq.n	8002652 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e012      	b.n	800263e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	7819      	ldrb	r1, [r3, #0]
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	3334      	adds	r3, #52	; 0x34
 8002628:	460a      	mov	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d006      	beq.n	8002646 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	3301      	adds	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d9e9      	bls.n	8002618 <prvInitialiseNewTask+0x52>
 8002644:	e000      	b.n	8002648 <prvInitialiseNewTask+0x82>
			{
				break;
 8002646:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002650:	e003      	b.n	800265a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	2b06      	cmp	r3, #6
 800265e:	d901      	bls.n	8002664 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002660:	2306      	movs	r3, #6
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	2200      	movs	r2, #0
 8002674:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	3304      	adds	r3, #4
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f9a0 	bl	80019c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	3318      	adds	r3, #24
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff f99b 	bl	80019c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	f1c3 0207 	rsb	r2, r3, #7
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	2200      	movs	r2, #0
 80026a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	68f9      	ldr	r1, [r7, #12]
 80026b2:	69b8      	ldr	r0, [r7, #24]
 80026b4:	f001 f9a8 	bl	8003a08 <pxPortInitialiseStack>
 80026b8:	4602      	mov	r2, r0
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026ca:	bf00      	nop
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026dc:	f001 fabe 	bl	8003c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026e0:	4b2a      	ldr	r3, [pc, #168]	; (800278c <prvAddNewTaskToReadyList+0xb8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a29      	ldr	r2, [pc, #164]	; (800278c <prvAddNewTaskToReadyList+0xb8>)
 80026e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026ea:	4b29      	ldr	r3, [pc, #164]	; (8002790 <prvAddNewTaskToReadyList+0xbc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80026f2:	4a27      	ldr	r2, [pc, #156]	; (8002790 <prvAddNewTaskToReadyList+0xbc>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <prvAddNewTaskToReadyList+0xb8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d110      	bne.n	8002722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002700:	f000 fc92 	bl	8003028 <prvInitialiseTaskLists>
 8002704:	e00d      	b.n	8002722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <prvAddNewTaskToReadyList+0xc0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <prvAddNewTaskToReadyList+0xbc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	429a      	cmp	r2, r3
 800271a:	d802      	bhi.n	8002722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <prvAddNewTaskToReadyList+0xbc>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <prvAddNewTaskToReadyList+0xc4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <prvAddNewTaskToReadyList+0xc4>)
 800272a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	2201      	movs	r2, #1
 8002732:	409a      	lsls	r2, r3
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <prvAddNewTaskToReadyList+0xc8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	4a18      	ldr	r2, [pc, #96]	; (800279c <prvAddNewTaskToReadyList+0xc8>)
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <prvAddNewTaskToReadyList+0xcc>)
 800274c:	441a      	add	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f7ff f940 	bl	80019da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800275a:	f001 faad 	bl	8003cb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <prvAddNewTaskToReadyList+0xc0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00e      	beq.n	8002784 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <prvAddNewTaskToReadyList+0xbc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <prvAddNewTaskToReadyList+0xd0>)
 8002776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000844 	.word	0x20000844
 8002790:	20000744 	.word	0x20000744
 8002794:	20000850 	.word	0x20000850
 8002798:	20000860 	.word	0x20000860
 800279c:	2000084c 	.word	0x2000084c
 80027a0:	20000748 	.word	0x20000748
 80027a4:	e000ed04 	.word	0xe000ed04

080027a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d016      	beq.n	80027e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <vTaskDelay+0x60>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <vTaskDelay+0x2e>
 80027c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	e7fe      	b.n	80027d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80027d6:	f000 f911 	bl	80029fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027da:	2100      	movs	r1, #0
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fd7f 	bl	80032e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027e2:	f000 f919 	bl	8002a18 <xTaskResumeAll>
 80027e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <vTaskDelay+0x64>)
 80027f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000086c 	.word	0x2000086c
 800280c:	e000ed04 	.word	0xe000ed04

08002810 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002818:	f001 fa20 	bl	8003c5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <vTaskSuspend+0x18>
 8002822:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <vTaskSuspend+0x104>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	e000      	b.n	800282a <vTaskSuspend+0x1a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3304      	adds	r3, #4
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f92f 	bl	8001a94 <uxListRemove>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d115      	bne.n	8002868 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002840:	4935      	ldr	r1, [pc, #212]	; (8002918 <vTaskSuspend+0x108>)
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <vTaskSuspend+0x58>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	2201      	movs	r2, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43da      	mvns	r2, r3
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <vTaskSuspend+0x10c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4013      	ands	r3, r2
 8002864:	4a2d      	ldr	r2, [pc, #180]	; (800291c <vTaskSuspend+0x10c>)
 8002866:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3318      	adds	r3, #24
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f90d 	bl	8001a94 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3304      	adds	r3, #4
 800287e:	4619      	mov	r1, r3
 8002880:	4827      	ldr	r0, [pc, #156]	; (8002920 <vTaskSuspend+0x110>)
 8002882:	f7ff f8aa 	bl	80019da <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d103      	bne.n	800289a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800289a:	f001 fa0d 	bl	8003cb8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <vTaskSuspend+0x114>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80028a6:	f001 f9d9 	bl	8003c5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80028aa:	f000 fc57 	bl	800315c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80028ae:	f001 fa03 	bl	8003cb8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <vTaskSuspend+0x104>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d126      	bne.n	800290a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <vTaskSuspend+0x114>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d016      	beq.n	80028f2 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <vTaskSuspend+0x118>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <vTaskSuspend+0xd0>
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	e7fe      	b.n	80028de <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <vTaskSuspend+0x11c>)
 80028e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028f0:	e00b      	b.n	800290a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <vTaskSuspend+0x110>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <vTaskSuspend+0x120>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d103      	bne.n	8002906 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <vTaskSuspend+0x104>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
	}
 8002904:	e001      	b.n	800290a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8002906:	f000 f9eb 	bl	8002ce0 <vTaskSwitchContext>
	}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000744 	.word	0x20000744
 8002918:	20000748 	.word	0x20000748
 800291c:	2000084c 	.word	0x2000084c
 8002920:	20000830 	.word	0x20000830
 8002924:	20000850 	.word	0x20000850
 8002928:	2000086c 	.word	0x2000086c
 800292c:	e000ed04 	.word	0xe000ed04
 8002930:	20000844 	.word	0x20000844

08002934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002942:	463a      	mov	r2, r7
 8002944:	1d39      	adds	r1, r7, #4
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fe10 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	9202      	str	r2, [sp, #8]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2300      	movs	r3, #0
 8002960:	460a      	mov	r2, r1
 8002962:	4920      	ldr	r1, [pc, #128]	; (80029e4 <vTaskStartScheduler+0xb0>)
 8002964:	4820      	ldr	r0, [pc, #128]	; (80029e8 <vTaskStartScheduler+0xb4>)
 8002966:	f7ff fd8f 	bl	8002488 <xTaskCreateStatic>
 800296a:	4602      	mov	r2, r0
 800296c:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <vTaskStartScheduler+0xb8>)
 800296e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <vTaskStartScheduler+0xb8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e001      	b.n	8002982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002988:	f000 fd10 	bl	80033ac <xTimerCreateTimerTask>
 800298c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d115      	bne.n	80029c0 <vTaskStartScheduler+0x8c>
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <vTaskStartScheduler+0xbc>)
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <vTaskStartScheduler+0xc0>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <vTaskStartScheduler+0xc4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029ba:	f001 f8b1 	bl	8003b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029be:	e00d      	b.n	80029dc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d109      	bne.n	80029dc <vTaskStartScheduler+0xa8>
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e7fe      	b.n	80029da <vTaskStartScheduler+0xa6>
}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	080050d8 	.word	0x080050d8
 80029e8:	08002ff9 	.word	0x08002ff9
 80029ec:	20000868 	.word	0x20000868
 80029f0:	20000864 	.word	0x20000864
 80029f4:	20000850 	.word	0x20000850
 80029f8:	20000848 	.word	0x20000848

080029fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <vTaskSuspendAll+0x18>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <vTaskSuspendAll+0x18>)
 8002a08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	2000086c 	.word	0x2000086c

08002a18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <xTaskResumeAll+0x2a>
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	e7fe      	b.n	8002a40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a42:	f001 f90b 	bl	8003c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	4a37      	ldr	r2, [pc, #220]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <xTaskResumeAll+0x114>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d161      	bne.n	8002b1c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <xTaskResumeAll+0x118>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05d      	beq.n	8002b1c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a60:	e02e      	b.n	8002ac0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a62:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <xTaskResumeAll+0x11c>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f810 	bl	8001a94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f80b 	bl	8001a94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	2201      	movs	r2, #1
 8002a84:	409a      	lsls	r2, r3
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <xTaskResumeAll+0x120>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <xTaskResumeAll+0x120>)
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <xTaskResumeAll+0x124>)
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7fe ff97 	bl	80019da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <xTaskResumeAll+0x128>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <xTaskResumeAll+0x12c>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <xTaskResumeAll+0x11c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1cc      	bne.n	8002a62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ace:	f000 fb45 	bl	800315c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <xTaskResumeAll+0x130>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ade:	f000 f847 	bl	8002b70 <xTaskIncrementTick>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <xTaskResumeAll+0x12c>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f1      	bne.n	8002ade <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <xTaskResumeAll+0x130>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <xTaskResumeAll+0x12c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <xTaskResumeAll+0x134>)
 8002b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b1c:	f001 f8cc 	bl	8003cb8 <vPortExitCritical>

	return xAlreadyYielded;
 8002b20:	68bb      	ldr	r3, [r7, #8]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000086c 	.word	0x2000086c
 8002b30:	20000844 	.word	0x20000844
 8002b34:	20000804 	.word	0x20000804
 8002b38:	2000084c 	.word	0x2000084c
 8002b3c:	20000748 	.word	0x20000748
 8002b40:	20000744 	.word	0x20000744
 8002b44:	20000858 	.word	0x20000858
 8002b48:	20000854 	.word	0x20000854
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <xTaskGetTickCount+0x1c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b5c:	687b      	ldr	r3, [r7, #4]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000848 	.word	0x20000848

08002b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	; (8002cb4 <xTaskIncrementTick+0x144>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8087 	bne.w	8002c92 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <xTaskIncrementTick+0x148>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <xTaskIncrementTick+0x148>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11f      	bne.n	8002bd8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b98:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <xTaskIncrementTick+0x46>
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	e7fe      	b.n	8002bb4 <xTaskIncrementTick+0x44>
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <xTaskIncrementTick+0x150>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a3e      	ldr	r2, [pc, #248]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4a3e      	ldr	r2, [pc, #248]	; (8002cc0 <xTaskIncrementTick+0x150>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <xTaskIncrementTick+0x154>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <xTaskIncrementTick+0x154>)
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	f000 fac2 	bl	800315c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <xTaskIncrementTick+0x158>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d348      	bcc.n	8002c74 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <xTaskIncrementTick+0x158>)
 8002bee:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf2:	601a      	str	r2, [r3, #0]
					break;
 8002bf4:	e03e      	b.n	8002c74 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf6:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <xTaskIncrementTick+0x14c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d203      	bcs.n	8002c16 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c0e:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <xTaskIncrementTick+0x158>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c14:	e02e      	b.n	8002c74 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff3a 	bl	8001a94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe ff31 	bl	8001a94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <xTaskIncrementTick+0x15c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <xTaskIncrementTick+0x15c>)
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <xTaskIncrementTick+0x160>)
 8002c52:	441a      	add	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f7fe febd 	bl	80019da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <xTaskIncrementTick+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d3b9      	bcc.n	8002be2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c72:	e7b6      	b.n	8002be2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <xTaskIncrementTick+0x164>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7a:	4915      	ldr	r1, [pc, #84]	; (8002cd0 <xTaskIncrementTick+0x160>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d907      	bls.n	8002c9c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e004      	b.n	8002c9c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <xTaskIncrementTick+0x168>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <xTaskIncrementTick+0x168>)
 8002c9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <xTaskIncrementTick+0x16c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ca8:	697b      	ldr	r3, [r7, #20]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000086c 	.word	0x2000086c
 8002cb8:	20000848 	.word	0x20000848
 8002cbc:	200007fc 	.word	0x200007fc
 8002cc0:	20000800 	.word	0x20000800
 8002cc4:	2000085c 	.word	0x2000085c
 8002cc8:	20000864 	.word	0x20000864
 8002ccc:	2000084c 	.word	0x2000084c
 8002cd0:	20000748 	.word	0x20000748
 8002cd4:	20000744 	.word	0x20000744
 8002cd8:	20000854 	.word	0x20000854
 8002cdc:	20000858 	.word	0x20000858

08002ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <vTaskSwitchContext+0xa0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <vTaskSwitchContext+0xa4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cf4:	e03e      	b.n	8002d74 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <vTaskSwitchContext+0xa4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfc:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <vTaskSwitchContext+0xa8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
 8002d0c:	f1c3 031f 	rsb	r3, r3, #31
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	491e      	ldr	r1, [pc, #120]	; (8002d8c <vTaskSwitchContext+0xac>)
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	e7fe      	b.n	8002d38 <vTaskSwitchContext+0x58>
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <vTaskSwitchContext+0xac>)
 8002d46:	4413      	add	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d104      	bne.n	8002d6a <vTaskSwitchContext+0x8a>
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <vTaskSwitchContext+0xb0>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	2000086c 	.word	0x2000086c
 8002d84:	20000858 	.word	0x20000858
 8002d88:	2000084c 	.word	0x2000084c
 8002d8c:	20000748 	.word	0x20000748
 8002d90:	20000744 	.word	0x20000744

08002d94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <vTaskPlaceOnEventList+0x24>
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e7fe      	b.n	8002db6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <vTaskPlaceOnEventList+0x44>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7fe fe2e 	bl	8001a22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f000 fa89 	bl	80032e0 <prvAddCurrentTaskToDelayedList>
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000744 	.word	0x20000744

08002ddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <vTaskPlaceOnEventListRestricted+0x26>
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e7fe      	b.n	8002e00 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <vTaskPlaceOnEventListRestricted+0x50>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3318      	adds	r3, #24
 8002e08:	4619      	mov	r1, r3
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7fe fde5 	bl	80019da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	68b8      	ldr	r0, [r7, #8]
 8002e20:	f000 fa5e 	bl	80032e0 <prvAddCurrentTaskToDelayedList>
	}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000744 	.word	0x20000744

08002e30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <xTaskRemoveFromEventList+0x2a>
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e7fe      	b.n	8002e58 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	3318      	adds	r3, #24
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fe18 	bl	8001a94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <xTaskRemoveFromEventList+0xac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d11c      	bne.n	8002ea6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe fe0f 	bl	8001a94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <xTaskRemoveFromEventList+0xb0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <xTaskRemoveFromEventList+0xb0>)
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <xTaskRemoveFromEventList+0xb4>)
 8002e96:	441a      	add	r2, r3
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f7fe fd9b 	bl	80019da <vListInsertEnd>
 8002ea4:	e005      	b.n	8002eb2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480e      	ldr	r0, [pc, #56]	; (8002ee8 <xTaskRemoveFromEventList+0xb8>)
 8002eae:	f7fe fd94 	bl	80019da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <xTaskRemoveFromEventList+0xbc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d905      	bls.n	8002ecc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <xTaskRemoveFromEventList+0xc0>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e001      	b.n	8002ed0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002ed0:	697b      	ldr	r3, [r7, #20]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000086c 	.word	0x2000086c
 8002ee0:	2000084c 	.word	0x2000084c
 8002ee4:	20000748 	.word	0x20000748
 8002ee8:	20000804 	.word	0x20000804
 8002eec:	20000744 	.word	0x20000744
 8002ef0:	20000858 	.word	0x20000858

08002ef4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <vTaskInternalSetTimeOutState+0x24>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <vTaskInternalSetTimeOutState+0x28>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	605a      	str	r2, [r3, #4]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	2000085c 	.word	0x2000085c
 8002f1c:	20000848 	.word	0x20000848

08002f20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <xTaskCheckForTimeOut+0x24>
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e7fe      	b.n	8002f42 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <xTaskCheckForTimeOut+0x3e>
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e7fe      	b.n	8002f5c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002f5e:	f000 fe7d 	bl	8003c5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <xTaskCheckForTimeOut+0xb8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d102      	bne.n	8002f82 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	e023      	b.n	8002fca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <xTaskCheckForTimeOut+0xbc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d007      	beq.n	8002f9e <xTaskCheckForTimeOut+0x7e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d302      	bcc.n	8002f9e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	e015      	b.n	8002fca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d20b      	bcs.n	8002fc0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad2      	subs	r2, r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff9d 	bl	8002ef4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e004      	b.n	8002fca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002fca:	f000 fe75 	bl	8003cb8 <vPortExitCritical>

	return xReturn;
 8002fce:	69fb      	ldr	r3, [r7, #28]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000848 	.word	0x20000848
 8002fdc:	2000085c 	.word	0x2000085c

08002fe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <vTaskMissedYield+0x14>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	20000858 	.word	0x20000858

08002ff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003000:	f000 f852 	bl	80030a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <prvIdleTask+0x28>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d9f9      	bls.n	8003000 <prvIdleTask+0x8>
			{
				taskYIELD();
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <prvIdleTask+0x2c>)
 800300e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800301c:	e7f0      	b.n	8003000 <prvIdleTask+0x8>
 800301e:	bf00      	nop
 8003020:	20000748 	.word	0x20000748
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e00c      	b.n	800304e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <prvInitialiseTaskLists+0x60>)
 8003040:	4413      	add	r3, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fc9c 	bl	8001980 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3301      	adds	r3, #1
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b06      	cmp	r3, #6
 8003052:	d9ef      	bls.n	8003034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <prvInitialiseTaskLists+0x64>)
 8003056:	f7fe fc93 	bl	8001980 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800305a:	480d      	ldr	r0, [pc, #52]	; (8003090 <prvInitialiseTaskLists+0x68>)
 800305c:	f7fe fc90 	bl	8001980 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003060:	480c      	ldr	r0, [pc, #48]	; (8003094 <prvInitialiseTaskLists+0x6c>)
 8003062:	f7fe fc8d 	bl	8001980 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003066:	480c      	ldr	r0, [pc, #48]	; (8003098 <prvInitialiseTaskLists+0x70>)
 8003068:	f7fe fc8a 	bl	8001980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800306c:	480b      	ldr	r0, [pc, #44]	; (800309c <prvInitialiseTaskLists+0x74>)
 800306e:	f7fe fc87 	bl	8001980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <prvInitialiseTaskLists+0x78>)
 8003074:	4a05      	ldr	r2, [pc, #20]	; (800308c <prvInitialiseTaskLists+0x64>)
 8003076:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <prvInitialiseTaskLists+0x7c>)
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <prvInitialiseTaskLists+0x68>)
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000748 	.word	0x20000748
 800308c:	200007d4 	.word	0x200007d4
 8003090:	200007e8 	.word	0x200007e8
 8003094:	20000804 	.word	0x20000804
 8003098:	20000818 	.word	0x20000818
 800309c:	20000830 	.word	0x20000830
 80030a0:	200007fc 	.word	0x200007fc
 80030a4:	20000800 	.word	0x20000800

080030a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030ae:	e019      	b.n	80030e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030b0:	f000 fdd4 	bl	8003c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <prvCheckTasksWaitingTermination+0x4c>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fce7 	bl	8001a94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <prvCheckTasksWaitingTermination+0x50>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <prvCheckTasksWaitingTermination+0x50>)
 80030ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <prvCheckTasksWaitingTermination+0x54>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <prvCheckTasksWaitingTermination+0x54>)
 80030d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80030da:	f000 fded 	bl	8003cb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f80e 	bl	8003100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <prvCheckTasksWaitingTermination+0x54>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e1      	bne.n	80030b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000818 	.word	0x20000818
 80030f8:	20000844 	.word	0x20000844
 80030fc:	2000082c 	.word	0x2000082c

08003100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800310e:	2b00      	cmp	r3, #0
 8003110:	d108      	bne.n	8003124 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4618      	mov	r0, r3
 8003118:	f000 ff7c 	bl	8004014 <vPortFree>
				vPortFree( pxTCB );
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 ff79 	bl	8004014 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003122:	e017      	b.n	8003154 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800312a:	2b01      	cmp	r3, #1
 800312c:	d103      	bne.n	8003136 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 ff70 	bl	8004014 <vPortFree>
	}
 8003134:	e00e      	b.n	8003154 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800313c:	2b02      	cmp	r3, #2
 800313e:	d009      	beq.n	8003154 <prvDeleteTCB+0x54>
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e7fe      	b.n	8003152 <prvDeleteTCB+0x52>
	}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <prvResetNextTaskUnblockTime+0x38>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <prvResetNextTaskUnblockTime+0x3c>)
 800316e:	f04f 32ff 	mov.w	r2, #4294967295
 8003172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003174:	e008      	b.n	8003188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <prvResetNextTaskUnblockTime+0x38>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <prvResetNextTaskUnblockTime+0x3c>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	200007fc 	.word	0x200007fc
 8003198:	20000864 	.word	0x20000864

0800319c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <xTaskGetSchedulerState+0x34>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031aa:	2301      	movs	r3, #1
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	e008      	b.n	80031c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <xTaskGetSchedulerState+0x38>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80031b8:	2302      	movs	r3, #2
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	e001      	b.n	80031c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80031c2:	687b      	ldr	r3, [r7, #4]
	}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	20000850 	.word	0x20000850
 80031d4:	2000086c 	.word	0x2000086c

080031d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d06c      	beq.n	80032c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031ee:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <xTaskPriorityDisinherit+0xfc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d009      	beq.n	800320c <xTaskPriorityDisinherit+0x34>
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e7fe      	b.n	800320a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <xTaskPriorityDisinherit+0x50>
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	e7fe      	b.n	8003226 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	1e5a      	subs	r2, r3, #1
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	429a      	cmp	r2, r3
 800323c:	d044      	beq.n	80032c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	2b00      	cmp	r3, #0
 8003244:	d140      	bne.n	80032c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3304      	adds	r3, #4
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fc22 	bl	8001a94 <uxListRemove>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d115      	bne.n	8003282 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	491f      	ldr	r1, [pc, #124]	; (80032d8 <xTaskPriorityDisinherit+0x100>)
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xTaskPriorityDisinherit+0xaa>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2201      	movs	r2, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	4b18      	ldr	r3, [pc, #96]	; (80032dc <xTaskPriorityDisinherit+0x104>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4013      	ands	r3, r2
 800327e:	4a17      	ldr	r2, [pc, #92]	; (80032dc <xTaskPriorityDisinherit+0x104>)
 8003280:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	f1c3 0207 	rsb	r2, r3, #7
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <xTaskPriorityDisinherit+0x104>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <xTaskPriorityDisinherit+0x104>)
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <xTaskPriorityDisinherit+0x100>)
 80032b6:	441a      	add	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7fe fb8b 	bl	80019da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80032c8:	697b      	ldr	r3, [r7, #20]
	}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000744 	.word	0x20000744
 80032d8:	20000748 	.word	0x20000748
 80032dc:	2000084c 	.word	0x2000084c

080032e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <prvAddCurrentTaskToDelayedList+0xb0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <prvAddCurrentTaskToDelayedList+0xb4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe fbcc 	bl	8001a94 <uxListRemove>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	2201      	movs	r2, #1
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	4b21      	ldr	r3, [pc, #132]	; (8003398 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4013      	ands	r3, r2
 8003316:	4a20      	ldr	r2, [pc, #128]	; (8003398 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003318:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d10a      	bne.n	8003338 <prvAddCurrentTaskToDelayedList+0x58>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <prvAddCurrentTaskToDelayedList+0xb4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3304      	adds	r3, #4
 800332e:	4619      	mov	r1, r3
 8003330:	481a      	ldr	r0, [pc, #104]	; (800339c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003332:	f7fe fb52 	bl	80019da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003336:	e026      	b.n	8003386 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4413      	add	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d209      	bcs.n	8003364 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003350:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3304      	adds	r3, #4
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f7fe fb60 	bl	8001a22 <vListInsert>
}
 8003362:	e010      	b.n	8003386 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <prvAddCurrentTaskToDelayedList+0xb4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7fe fb56 	bl	8001a22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003376:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d202      	bcs.n	8003386 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003380:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6013      	str	r3, [r2, #0]
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000848 	.word	0x20000848
 8003394:	20000744 	.word	0x20000744
 8003398:	2000084c 	.word	0x2000084c
 800339c:	20000830 	.word	0x20000830
 80033a0:	20000800 	.word	0x20000800
 80033a4:	200007fc 	.word	0x200007fc
 80033a8:	20000864 	.word	0x20000864

080033ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80033b6:	f000 fae7 	bl	8003988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <xTimerCreateTimerTask+0x80>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d021      	beq.n	8003406 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80033ca:	1d3a      	adds	r2, r7, #4
 80033cc:	f107 0108 	add.w	r1, r7, #8
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f8e5 	bl	80005a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	9202      	str	r2, [sp, #8]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	2302      	movs	r3, #2
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2300      	movs	r3, #0
 80033ea:	460a      	mov	r2, r1
 80033ec:	4910      	ldr	r1, [pc, #64]	; (8003430 <xTimerCreateTimerTask+0x84>)
 80033ee:	4811      	ldr	r0, [pc, #68]	; (8003434 <xTimerCreateTimerTask+0x88>)
 80033f0:	f7ff f84a 	bl	8002488 <xTaskCreateStatic>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <xTimerCreateTimerTask+0x8c>)
 80033f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80033fa:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <xTimerCreateTimerTask+0x8c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003402:	2301      	movs	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <xTimerCreateTimerTask+0x74>
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	e7fe      	b.n	800341e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003420:	697b      	ldr	r3, [r7, #20]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200008a0 	.word	0x200008a0
 8003430:	080050e0 	.word	0x080050e0
 8003434:	0800356d 	.word	0x0800356d
 8003438:	200008a4 	.word	0x200008a4

0800343c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <xTimerGenericCommand+0x2c>
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	e7fe      	b.n	8003466 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <xTimerGenericCommand+0x94>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02a      	beq.n	80034c6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	dc18      	bgt.n	80034b4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003482:	f7ff fe8b 	bl	800319c <xTaskGetSchedulerState>
 8003486:	4603      	mov	r3, r0
 8003488:	2b02      	cmp	r3, #2
 800348a:	d109      	bne.n	80034a0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800348c:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <xTimerGenericCommand+0x94>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	f107 0114 	add.w	r1, r7, #20
 8003494:	2300      	movs	r3, #0
 8003496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003498:	f7fe fc20 	bl	8001cdc <xQueueGenericSend>
 800349c:	6278      	str	r0, [r7, #36]	; 0x24
 800349e:	e012      	b.n	80034c6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <xTimerGenericCommand+0x94>)
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	f107 0114 	add.w	r1, r7, #20
 80034a8:	2300      	movs	r3, #0
 80034aa:	2200      	movs	r2, #0
 80034ac:	f7fe fc16 	bl	8001cdc <xQueueGenericSend>
 80034b0:	6278      	str	r0, [r7, #36]	; 0x24
 80034b2:	e008      	b.n	80034c6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <xTimerGenericCommand+0x94>)
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	f107 0114 	add.w	r1, r7, #20
 80034bc:	2300      	movs	r3, #0
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	f7fe fd06 	bl	8001ed0 <xQueueGenericSendFromISR>
 80034c4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200008a0 	.word	0x200008a0

080034d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <prvProcessExpiredTimer+0x94>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fad1 	bl	8001a94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d021      	beq.n	8003544 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	18d1      	adds	r1, r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	6978      	ldr	r0, [r7, #20]
 800350e:	f000 f8d1 	bl	80036b4 <prvInsertTimerInActiveList>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01e      	beq.n	8003556 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003518:	2300      	movs	r3, #0
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	2100      	movs	r1, #0
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f7ff ff8a 	bl	800343c <xTimerGenericCommand>
 8003528:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d112      	bne.n	8003556 <prvProcessExpiredTimer+0x82>
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e7fe      	b.n	8003542 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	b2da      	uxtb	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	4798      	blx	r3
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000898 	.word	0x20000898

0800356c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f857 	bl	800362c <prvGetNextExpireTime>
 800357e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4619      	mov	r1, r3
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f803 	bl	8003590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800358a:	f000 f8d5 	bl	8003738 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800358e:	e7f1      	b.n	8003574 <prvTimerTask+0x8>

08003590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800359a:	f7ff fa2f 	bl	80029fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f866 	bl	8003674 <prvSampleTimeNow>
 80035a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d130      	bne.n	8003612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <prvProcessTimerOrBlockTask+0x3c>
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d806      	bhi.n	80035cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035be:	f7ff fa2b 	bl	8002a18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff85 	bl	80034d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80035ca:	e024      	b.n	8003616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <prvProcessTimerOrBlockTask+0x90>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <prvProcessTimerOrBlockTask+0x50>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <prvProcessTimerOrBlockTask+0x52>
 80035e0:	2300      	movs	r3, #0
 80035e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <prvProcessTimerOrBlockTask+0x94>)
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	f7fe ff15 	bl	8002420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80035f6:	f7ff fa0f 	bl	8002a18 <xTaskResumeAll>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <prvProcessTimerOrBlockTask+0x98>)
 8003602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	f3bf 8f6f 	isb	sy
}
 8003610:	e001      	b.n	8003616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003612:	f7ff fa01 	bl	8002a18 <xTaskResumeAll>
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000089c 	.word	0x2000089c
 8003624:	200008a0 	.word	0x200008a0
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <prvGetNextExpireTime+0x44>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <prvGetNextExpireTime+0x16>
 800363e:	2201      	movs	r2, #1
 8003640:	e000      	b.n	8003644 <prvGetNextExpireTime+0x18>
 8003642:	2200      	movs	r2, #0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <prvGetNextExpireTime+0x44>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e001      	b.n	8003660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003660:	68fb      	ldr	r3, [r7, #12]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000898 	.word	0x20000898

08003674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800367c:	f7ff fa68 	bl	8002b50 <xTaskGetTickCount>
 8003680:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <prvSampleTimeNow+0x3c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d205      	bcs.n	8003698 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800368c:	f000 f918 	bl	80038c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e002      	b.n	800369e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <prvSampleTimeNow+0x3c>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036a4:	68fb      	ldr	r3, [r7, #12]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200008a8 	.word	0x200008a8

080036b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d812      	bhi.n	8003700 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad2      	subs	r2, r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80036e8:	2301      	movs	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e01b      	b.n	8003726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <prvInsertTimerInActiveList+0x7c>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3304      	adds	r3, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f7fe f992 	bl	8001a22 <vListInsert>
 80036fe:	e012      	b.n	8003726 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d206      	bcs.n	8003716 <prvInsertTimerInActiveList+0x62>
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e007      	b.n	8003726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <prvInsertTimerInActiveList+0x80>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3304      	adds	r3, #4
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7fe f97e 	bl	8001a22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003726:	697b      	ldr	r3, [r7, #20]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	2000089c 	.word	0x2000089c
 8003734:	20000898 	.word	0x20000898

08003738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800373e:	e0ac      	b.n	800389a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f2c0 80a8 	blt.w	8003898 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	3304      	adds	r3, #4
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe f99b 	bl	8001a94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff87 	bl	8003674 <prvSampleTimeNow>
 8003766:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b09      	cmp	r3, #9
 800376c:	f200 8095 	bhi.w	800389a <prvProcessReceivedCommands+0x162>
 8003770:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <prvProcessReceivedCommands+0x40>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037a1 	.word	0x080037a1
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037a1 	.word	0x080037a1
 8003784:	08003813 	.word	0x08003813
 8003788:	08003827 	.word	0x08003827
 800378c:	0800386f 	.word	0x0800386f
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037a1 	.word	0x080037a1
 8003798:	08003813 	.word	0x08003813
 800379c:	08003827 	.word	0x08003827
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	18d1      	adds	r1, r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037c0:	f7ff ff78 	bl	80036b4 <prvInsertTimerInActiveList>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d067      	beq.n	800389a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05c      	beq.n	800389a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	441a      	add	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2300      	movs	r3, #0
 80037ee:	2100      	movs	r1, #0
 80037f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037f2:	f7ff fe23 	bl	800343c <xTimerGenericCommand>
 80037f6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d14d      	bne.n	800389a <prvProcessReceivedCommands+0x162>
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e7fe      	b.n	8003810 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	b2da      	uxtb	r2, r3
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8003824:	e039      	b.n	800389a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <prvProcessReceivedCommands+0x122>
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e7fe      	b.n	8003858 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	18d1      	adds	r1, r2, r3
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003868:	f7ff ff24 	bl	80036b4 <prvInsertTimerInActiveList>
					break;
 800386c:	e015      	b.n	800389a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800387c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800387e:	f000 fbc9 	bl	8004014 <vPortFree>
 8003882:	e00a      	b.n	800389a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003896:	e000      	b.n	800389a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003898:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <prvProcessReceivedCommands+0x184>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f107 0108 	add.w	r1, r7, #8
 80038a2:	2200      	movs	r2, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fba7 	bl	8001ff8 <xQueueReceive>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f47f af47 	bne.w	8003740 <prvProcessReceivedCommands+0x8>
	}
}
 80038b2:	bf00      	nop
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200008a0 	.word	0x200008a0

080038c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038c6:	e047      	b.n	8003958 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <prvSwitchTimerLists+0xc0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <prvSwitchTimerLists+0xc0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3304      	adds	r3, #4
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe f8d7 	bl	8001a94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02d      	beq.n	8003958 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	429a      	cmp	r2, r3
 800390c:	d90e      	bls.n	800392c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800391a:	4b19      	ldr	r3, [pc, #100]	; (8003980 <prvSwitchTimerLists+0xc0>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3304      	adds	r3, #4
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fe f87c 	bl	8001a22 <vListInsert>
 800392a:	e015      	b.n	8003958 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800392c:	2300      	movs	r3, #0
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2300      	movs	r3, #0
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	2100      	movs	r1, #0
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fd80 	bl	800343c <xTimerGenericCommand>
 800393c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <prvSwitchTimerLists+0x98>
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	e7fe      	b.n	8003956 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <prvSwitchTimerLists+0xc0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1b2      	bne.n	80038c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <prvSwitchTimerLists+0xc0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <prvSwitchTimerLists+0xc4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a04      	ldr	r2, [pc, #16]	; (8003980 <prvSwitchTimerLists+0xc0>)
 800396e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <prvSwitchTimerLists+0xc4>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6013      	str	r3, [r2, #0]
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000898 	.word	0x20000898
 8003984:	2000089c 	.word	0x2000089c

08003988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800398e:	f000 f965 	bl	8003c5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <prvCheckForValidListAndQueue+0x60>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d120      	bne.n	80039dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800399a:	4814      	ldr	r0, [pc, #80]	; (80039ec <prvCheckForValidListAndQueue+0x64>)
 800399c:	f7fd fff0 	bl	8001980 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80039a0:	4813      	ldr	r0, [pc, #76]	; (80039f0 <prvCheckForValidListAndQueue+0x68>)
 80039a2:	f7fd ffed 	bl	8001980 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80039a6:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <prvCheckForValidListAndQueue+0x6c>)
 80039a8:	4a10      	ldr	r2, [pc, #64]	; (80039ec <prvCheckForValidListAndQueue+0x64>)
 80039aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <prvCheckForValidListAndQueue+0x70>)
 80039ae:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <prvCheckForValidListAndQueue+0x68>)
 80039b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80039b2:	2300      	movs	r3, #0
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <prvCheckForValidListAndQueue+0x74>)
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <prvCheckForValidListAndQueue+0x78>)
 80039ba:	210c      	movs	r1, #12
 80039bc:	200a      	movs	r0, #10
 80039be:	f7fe f8fb 	bl	8001bb8 <xQueueGenericCreateStatic>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <prvCheckForValidListAndQueue+0x60>)
 80039c6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <prvCheckForValidListAndQueue+0x60>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <prvCheckForValidListAndQueue+0x60>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	490b      	ldr	r1, [pc, #44]	; (8003a04 <prvCheckForValidListAndQueue+0x7c>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fcfa 	bl	80023d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039dc:	f000 f96c 	bl	8003cb8 <vPortExitCritical>
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200008a0 	.word	0x200008a0
 80039ec:	20000870 	.word	0x20000870
 80039f0:	20000884 	.word	0x20000884
 80039f4:	20000898 	.word	0x20000898
 80039f8:	2000089c 	.word	0x2000089c
 80039fc:	20000924 	.word	0x20000924
 8003a00:	200008ac 	.word	0x200008ac
 8003a04:	080050e8 	.word	0x080050e8

08003a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3b04      	subs	r3, #4
 8003a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b04      	subs	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3b04      	subs	r3, #4
 8003a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a38:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <pxPortInitialiseStack+0x64>)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3b14      	subs	r3, #20
 8003a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3b04      	subs	r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f06f 0202 	mvn.w	r2, #2
 8003a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3b20      	subs	r3, #32
 8003a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	08003a71 	.word	0x08003a71

08003a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <prvTaskExitError+0x50>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d009      	beq.n	8003a98 <prvTaskExitError+0x28>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e7fe      	b.n	8003a96 <prvTaskExitError+0x26>
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003aaa:	bf00      	nop
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0fc      	beq.n	8003aac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2000000c 	.word	0x2000000c
	...

08003ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <pxCurrentTCBConst2>)
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	6808      	ldr	r0, [r1, #0]
 8003ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	f380 8809 	msr	PSP, r0
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f380 8811 	msr	BASEPRI, r0
 8003aea:	4770      	bx	lr
 8003aec:	f3af 8000 	nop.w

08003af0 <pxCurrentTCBConst2>:
 8003af0:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop

08003af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <prvPortStartFirstTask+0x24>)
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	6800      	ldr	r0, [r0, #0]
 8003afe:	f380 8808 	msr	MSP, r0
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8814 	msr	CONTROL, r0
 8003b0a:	b662      	cpsie	i
 8003b0c:	b661      	cpsie	f
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	df00      	svc	0
 8003b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b1a:	bf00      	nop
 8003b1c:	e000ed08 	.word	0xe000ed08

08003b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b26:	4b44      	ldr	r3, [pc, #272]	; (8003c38 <xPortStartScheduler+0x118>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a44      	ldr	r2, [pc, #272]	; (8003c3c <xPortStartScheduler+0x11c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <xPortStartScheduler+0x24>
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e7fe      	b.n	8003b42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b44:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <xPortStartScheduler+0x118>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <xPortStartScheduler+0x120>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d109      	bne.n	8003b62 <xPortStartScheduler+0x42>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e7fe      	b.n	8003b60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <xPortStartScheduler+0x124>)
 8003b64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <xPortStartScheduler+0x128>)
 8003b88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b8a:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b90:	e009      	b.n	8003ba6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003b92:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003b9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d0ef      	beq.n	8003b92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bb2:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d009      	beq.n	8003bd2 <xPortStartScheduler+0xb2>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e7fe      	b.n	8003bd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <xPortStartScheduler+0x12c>)
 8003be6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bf0:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <xPortStartScheduler+0x130>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <xPortStartScheduler+0x130>)
 8003bf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bfc:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <xPortStartScheduler+0x130>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <xPortStartScheduler+0x130>)
 8003c02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c08:	f000 f8d6 	bl	8003db8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <xPortStartScheduler+0x134>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c12:	f000 f8f5 	bl	8003e00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <xPortStartScheduler+0x138>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <xPortStartScheduler+0x138>)
 8003c1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c22:	f7ff ff69 	bl	8003af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c26:	f7ff f85b 	bl	8002ce0 <vTaskSwitchContext>
	prvTaskExitError();
 8003c2a:	f7ff ff21 	bl	8003a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	e000ed00 	.word	0xe000ed00
 8003c3c:	410fc271 	.word	0x410fc271
 8003c40:	410fc270 	.word	0x410fc270
 8003c44:	e000e400 	.word	0xe000e400
 8003c48:	2000096c 	.word	0x2000096c
 8003c4c:	20000970 	.word	0x20000970
 8003c50:	e000ed20 	.word	0xe000ed20
 8003c54:	2000000c 	.word	0x2000000c
 8003c58:	e000ef34 	.word	0xe000ef34

08003c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <vPortEnterCritical+0x54>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <vPortEnterCritical+0x54>)
 8003c7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <vPortEnterCritical+0x54>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10e      	bne.n	8003ca4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <vPortEnterCritical+0x58>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <vPortEnterCritical+0x48>
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	e7fe      	b.n	8003ca2 <vPortEnterCritical+0x46>
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	2000000c 	.word	0x2000000c
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <vPortExitCritical+0x4c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <vPortExitCritical+0x22>
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	e7fe      	b.n	8003cd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <vPortExitCritical+0x4c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <vPortExitCritical+0x4c>)
 8003ce2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <vPortExitCritical+0x4c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <vPortExitCritical+0x3e>
 8003cec:	2300      	movs	r3, #0
 8003cee:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c
	...

08003d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d10:	f3ef 8009 	mrs	r0, PSP
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <pxCurrentTCBConst>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f01e 0f10 	tst.w	lr, #16
 8003d20:	bf08      	it	eq
 8003d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2a:	6010      	str	r0, [r2, #0]
 8003d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d34:	f380 8811 	msr	BASEPRI, r0
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f7fe ffce 	bl	8002ce0 <vTaskSwitchContext>
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f380 8811 	msr	BASEPRI, r0
 8003d4c:	bc09      	pop	{r0, r3}
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	6808      	ldr	r0, [r1, #0]
 8003d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d56:	f01e 0f10 	tst.w	lr, #16
 8003d5a:	bf08      	it	eq
 8003d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d60:	f380 8809 	msr	PSP, r0
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w

08003d70 <pxCurrentTCBConst>:
 8003d70:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop

08003d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d90:	f7fe feee 	bl	8002b70 <xTaskIncrementTick>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <xPortSysTickHandler+0x3c>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	e000ed04 	.word	0xe000ed04

08003db8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <vPortSetupTimerInterrupt+0x34>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <vPortSetupTimerInterrupt+0x38>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <vPortSetupTimerInterrupt+0x3c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <vPortSetupTimerInterrupt+0x40>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	099b      	lsrs	r3, r3, #6
 8003dd4:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <vPortSetupTimerInterrupt+0x44>)
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <vPortSetupTimerInterrupt+0x34>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010
 8003df0:	e000e018 	.word	0xe000e018
 8003df4:	20000000 	.word	0x20000000
 8003df8:	10624dd3 	.word	0x10624dd3
 8003dfc:	e000e014 	.word	0xe000e014

08003e00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e10 <vPortEnableVFP+0x10>
 8003e04:	6801      	ldr	r1, [r0, #0]
 8003e06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e0a:	6001      	str	r1, [r0, #0]
 8003e0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e0e:	bf00      	nop
 8003e10:	e000ed88 	.word	0xe000ed88

08003e14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e1a:	f3ef 8305 	mrs	r3, IPSR
 8003e1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	d913      	bls.n	8003e4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e26:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <vPortValidateInterruptPriority+0x6c>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <vPortValidateInterruptPriority+0x70>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	7afa      	ldrb	r2, [r7, #11]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d209      	bcs.n	8003e4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	e7fe      	b.n	8003e4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <vPortValidateInterruptPriority+0x74>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <vPortValidateInterruptPriority+0x78>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d909      	bls.n	8003e72 <vPortValidateInterruptPriority+0x5e>
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	e7fe      	b.n	8003e70 <vPortValidateInterruptPriority+0x5c>
	}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e3f0 	.word	0xe000e3f0
 8003e84:	2000096c 	.word	0x2000096c
 8003e88:	e000ed0c 	.word	0xe000ed0c
 8003e8c:	20000970 	.word	0x20000970

08003e90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e9c:	f7fe fdae 	bl	80029fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ea0:	4b57      	ldr	r3, [pc, #348]	; (8004000 <pvPortMalloc+0x170>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ea8:	f000 f90c 	bl	80040c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <pvPortMalloc+0x174>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f040 808c 	bne.w	8003fd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01c      	beq.n	8003efa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d013      	beq.n	8003efa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f023 0307 	bic.w	r3, r3, #7
 8003ed8:	3308      	adds	r3, #8
 8003eda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <pvPortMalloc+0x6a>
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e7fe      	b.n	8003ef8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d068      	beq.n	8003fd2 <pvPortMalloc+0x142>
 8003f00:	4b41      	ldr	r3, [pc, #260]	; (8004008 <pvPortMalloc+0x178>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d863      	bhi.n	8003fd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <pvPortMalloc+0x17c>)
 8003f0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <pvPortMalloc+0x17c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f14:	e004      	b.n	8003f20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d903      	bls.n	8003f32 <pvPortMalloc+0xa2>
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f1      	bne.n	8003f16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <pvPortMalloc+0x170>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d04a      	beq.n	8003fd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2208      	movs	r2, #8
 8003f42:	4413      	add	r3, r2
 8003f44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	1ad2      	subs	r2, r2, r3
 8003f56:	2308      	movs	r3, #8
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d91e      	bls.n	8003f9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <pvPortMalloc+0xf4>
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	e7fe      	b.n	8003f82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1ad2      	subs	r2, r2, r3
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f96:	69b8      	ldr	r0, [r7, #24]
 8003f98:	f000 f8f6 	bl	8004188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <pvPortMalloc+0x178>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	4a18      	ldr	r2, [pc, #96]	; (8004008 <pvPortMalloc+0x178>)
 8003fa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003faa:	4b17      	ldr	r3, [pc, #92]	; (8004008 <pvPortMalloc+0x178>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <pvPortMalloc+0x180>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d203      	bcs.n	8003fbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <pvPortMalloc+0x178>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <pvPortMalloc+0x180>)
 8003fbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <pvPortMalloc+0x174>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fd2:	f7fe fd21 	bl	8002a18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <pvPortMalloc+0x164>
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e7fe      	b.n	8003ff2 <pvPortMalloc+0x162>
	return pvReturn;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3728      	adds	r7, #40	; 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	2000457c 	.word	0x2000457c
 8004004:	20004588 	.word	0x20004588
 8004008:	20004580 	.word	0x20004580
 800400c:	20004574 	.word	0x20004574
 8004010:	20004584 	.word	0x20004584

08004014 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d046      	beq.n	80040b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004026:	2308      	movs	r3, #8
 8004028:	425b      	negs	r3, r3
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4413      	add	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	4b20      	ldr	r3, [pc, #128]	; (80040bc <vPortFree+0xa8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <vPortFree+0x42>
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e7fe      	b.n	8004054 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <vPortFree+0x5e>
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	e7fe      	b.n	8004070 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <vPortFree+0xa8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d019      	beq.n	80040b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d115      	bne.n	80040b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <vPortFree+0xa8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	43db      	mvns	r3, r3
 8004092:	401a      	ands	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004098:	f7fe fcb0 	bl	80029fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <vPortFree+0xac>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4413      	add	r3, r2
 80040a6:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <vPortFree+0xac>)
 80040a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040aa:	6938      	ldr	r0, [r7, #16]
 80040ac:	f000 f86c 	bl	8004188 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040b0:	f7fe fcb2 	bl	8002a18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040b4:	bf00      	nop
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20004588 	.word	0x20004588
 80040c0:	20004580 	.word	0x20004580

080040c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80040ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <prvHeapInit+0xac>)
 80040d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0307 	bic.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <prvHeapInit+0xac>)
 80040f4:	4413      	add	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <prvHeapInit+0xb0>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <prvHeapInit+0xb0>)
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004110:	2208      	movs	r2, #8
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <prvHeapInit+0xb4>)
 8004124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <prvHeapInit+0xb4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <prvHeapInit+0xb4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <prvHeapInit+0xb4>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <prvHeapInit+0xb8>)
 8004152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a09      	ldr	r2, [pc, #36]	; (8004180 <prvHeapInit+0xbc>)
 800415a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <prvHeapInit+0xc0>)
 800415e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	20000974 	.word	0x20000974
 8004174:	20004574 	.word	0x20004574
 8004178:	2000457c 	.word	0x2000457c
 800417c:	20004584 	.word	0x20004584
 8004180:	20004580 	.word	0x20004580
 8004184:	20004588 	.word	0x20004588

08004188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004190:	4b28      	ldr	r3, [pc, #160]	; (8004234 <prvInsertBlockIntoFreeList+0xac>)
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e002      	b.n	800419c <prvInsertBlockIntoFreeList+0x14>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d8f7      	bhi.n	8004196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	4413      	add	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d108      	bne.n	80041ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	441a      	add	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	441a      	add	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d118      	bne.n	8004210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <prvInsertBlockIntoFreeList+0xb0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d00d      	beq.n	8004206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e008      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <prvInsertBlockIntoFreeList+0xb0>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e003      	b.n	8004218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d002      	beq.n	8004226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20004574 	.word	0x20004574
 8004238:	2000457c 	.word	0x2000457c

0800423c <__errno>:
 800423c:	4b01      	ldr	r3, [pc, #4]	; (8004244 <__errno+0x8>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000010 	.word	0x20000010

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4e0d      	ldr	r6, [pc, #52]	; (8004280 <__libc_init_array+0x38>)
 800424c:	4c0d      	ldr	r4, [pc, #52]	; (8004284 <__libc_init_array+0x3c>)
 800424e:	1ba4      	subs	r4, r4, r6
 8004250:	10a4      	asrs	r4, r4, #2
 8004252:	2500      	movs	r5, #0
 8004254:	42a5      	cmp	r5, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	4e0b      	ldr	r6, [pc, #44]	; (8004288 <__libc_init_array+0x40>)
 800425a:	4c0c      	ldr	r4, [pc, #48]	; (800428c <__libc_init_array+0x44>)
 800425c:	f000 ff10 	bl	8005080 <_init>
 8004260:	1ba4      	subs	r4, r4, r6
 8004262:	10a4      	asrs	r4, r4, #2
 8004264:	2500      	movs	r5, #0
 8004266:	42a5      	cmp	r5, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004270:	4798      	blx	r3
 8004272:	3501      	adds	r5, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800427a:	4798      	blx	r3
 800427c:	3501      	adds	r5, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	080051a0 	.word	0x080051a0
 8004284:	080051a0 	.word	0x080051a0
 8004288:	080051a0 	.word	0x080051a0
 800428c:	080051a4 	.word	0x080051a4

08004290 <memcpy>:
 8004290:	b510      	push	{r4, lr}
 8004292:	1e43      	subs	r3, r0, #1
 8004294:	440a      	add	r2, r1
 8004296:	4291      	cmp	r1, r2
 8004298:	d100      	bne.n	800429c <memcpy+0xc>
 800429a:	bd10      	pop	{r4, pc}
 800429c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a4:	e7f7      	b.n	8004296 <memcpy+0x6>

080042a6 <memset>:
 80042a6:	4402      	add	r2, r0
 80042a8:	4603      	mov	r3, r0
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d100      	bne.n	80042b0 <memset+0xa>
 80042ae:	4770      	bx	lr
 80042b0:	f803 1b01 	strb.w	r1, [r3], #1
 80042b4:	e7f9      	b.n	80042aa <memset+0x4>
	...

080042b8 <iprintf>:
 80042b8:	b40f      	push	{r0, r1, r2, r3}
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <iprintf+0x2c>)
 80042bc:	b513      	push	{r0, r1, r4, lr}
 80042be:	681c      	ldr	r4, [r3, #0]
 80042c0:	b124      	cbz	r4, 80042cc <iprintf+0x14>
 80042c2:	69a3      	ldr	r3, [r4, #24]
 80042c4:	b913      	cbnz	r3, 80042cc <iprintf+0x14>
 80042c6:	4620      	mov	r0, r4
 80042c8:	f000 f84e 	bl	8004368 <__sinit>
 80042cc:	ab05      	add	r3, sp, #20
 80042ce:	9a04      	ldr	r2, [sp, #16]
 80042d0:	68a1      	ldr	r1, [r4, #8]
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 f955 	bl	8004584 <_vfiprintf_r>
 80042da:	b002      	add	sp, #8
 80042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e0:	b004      	add	sp, #16
 80042e2:	4770      	bx	lr
 80042e4:	20000010 	.word	0x20000010

080042e8 <std>:
 80042e8:	2300      	movs	r3, #0
 80042ea:	b510      	push	{r4, lr}
 80042ec:	4604      	mov	r4, r0
 80042ee:	e9c0 3300 	strd	r3, r3, [r0]
 80042f2:	6083      	str	r3, [r0, #8]
 80042f4:	8181      	strh	r1, [r0, #12]
 80042f6:	6643      	str	r3, [r0, #100]	; 0x64
 80042f8:	81c2      	strh	r2, [r0, #14]
 80042fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042fe:	6183      	str	r3, [r0, #24]
 8004300:	4619      	mov	r1, r3
 8004302:	2208      	movs	r2, #8
 8004304:	305c      	adds	r0, #92	; 0x5c
 8004306:	f7ff ffce 	bl	80042a6 <memset>
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <std+0x38>)
 800430c:	6263      	str	r3, [r4, #36]	; 0x24
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <std+0x3c>)
 8004310:	62a3      	str	r3, [r4, #40]	; 0x28
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <std+0x40>)
 8004314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <std+0x44>)
 8004318:	6224      	str	r4, [r4, #32]
 800431a:	6323      	str	r3, [r4, #48]	; 0x30
 800431c:	bd10      	pop	{r4, pc}
 800431e:	bf00      	nop
 8004320:	08004ae1 	.word	0x08004ae1
 8004324:	08004b03 	.word	0x08004b03
 8004328:	08004b3b 	.word	0x08004b3b
 800432c:	08004b5f 	.word	0x08004b5f

08004330 <_cleanup_r>:
 8004330:	4901      	ldr	r1, [pc, #4]	; (8004338 <_cleanup_r+0x8>)
 8004332:	f000 b885 	b.w	8004440 <_fwalk_reent>
 8004336:	bf00      	nop
 8004338:	08004e39 	.word	0x08004e39

0800433c <__sfmoreglue>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	1e4a      	subs	r2, r1, #1
 8004340:	2568      	movs	r5, #104	; 0x68
 8004342:	4355      	muls	r5, r2
 8004344:	460e      	mov	r6, r1
 8004346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800434a:	f000 f897 	bl	800447c <_malloc_r>
 800434e:	4604      	mov	r4, r0
 8004350:	b140      	cbz	r0, 8004364 <__sfmoreglue+0x28>
 8004352:	2100      	movs	r1, #0
 8004354:	e9c0 1600 	strd	r1, r6, [r0]
 8004358:	300c      	adds	r0, #12
 800435a:	60a0      	str	r0, [r4, #8]
 800435c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004360:	f7ff ffa1 	bl	80042a6 <memset>
 8004364:	4620      	mov	r0, r4
 8004366:	bd70      	pop	{r4, r5, r6, pc}

08004368 <__sinit>:
 8004368:	6983      	ldr	r3, [r0, #24]
 800436a:	b510      	push	{r4, lr}
 800436c:	4604      	mov	r4, r0
 800436e:	bb33      	cbnz	r3, 80043be <__sinit+0x56>
 8004370:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004374:	6503      	str	r3, [r0, #80]	; 0x50
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <__sinit+0x58>)
 8004378:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <__sinit+0x5c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6282      	str	r2, [r0, #40]	; 0x28
 800437e:	4298      	cmp	r0, r3
 8004380:	bf04      	itt	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	6183      	streq	r3, [r0, #24]
 8004386:	f000 f81f 	bl	80043c8 <__sfp>
 800438a:	6060      	str	r0, [r4, #4]
 800438c:	4620      	mov	r0, r4
 800438e:	f000 f81b 	bl	80043c8 <__sfp>
 8004392:	60a0      	str	r0, [r4, #8]
 8004394:	4620      	mov	r0, r4
 8004396:	f000 f817 	bl	80043c8 <__sfp>
 800439a:	2200      	movs	r2, #0
 800439c:	60e0      	str	r0, [r4, #12]
 800439e:	2104      	movs	r1, #4
 80043a0:	6860      	ldr	r0, [r4, #4]
 80043a2:	f7ff ffa1 	bl	80042e8 <std>
 80043a6:	2201      	movs	r2, #1
 80043a8:	2109      	movs	r1, #9
 80043aa:	68a0      	ldr	r0, [r4, #8]
 80043ac:	f7ff ff9c 	bl	80042e8 <std>
 80043b0:	2202      	movs	r2, #2
 80043b2:	2112      	movs	r1, #18
 80043b4:	68e0      	ldr	r0, [r4, #12]
 80043b6:	f7ff ff97 	bl	80042e8 <std>
 80043ba:	2301      	movs	r3, #1
 80043bc:	61a3      	str	r3, [r4, #24]
 80043be:	bd10      	pop	{r4, pc}
 80043c0:	08005100 	.word	0x08005100
 80043c4:	08004331 	.word	0x08004331

080043c8 <__sfp>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <__sfp+0x70>)
 80043cc:	681e      	ldr	r6, [r3, #0]
 80043ce:	69b3      	ldr	r3, [r6, #24]
 80043d0:	4607      	mov	r7, r0
 80043d2:	b913      	cbnz	r3, 80043da <__sfp+0x12>
 80043d4:	4630      	mov	r0, r6
 80043d6:	f7ff ffc7 	bl	8004368 <__sinit>
 80043da:	3648      	adds	r6, #72	; 0x48
 80043dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	d503      	bpl.n	80043ec <__sfp+0x24>
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	b133      	cbz	r3, 80043f6 <__sfp+0x2e>
 80043e8:	6836      	ldr	r6, [r6, #0]
 80043ea:	e7f7      	b.n	80043dc <__sfp+0x14>
 80043ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043f0:	b16d      	cbz	r5, 800440e <__sfp+0x46>
 80043f2:	3468      	adds	r4, #104	; 0x68
 80043f4:	e7f4      	b.n	80043e0 <__sfp+0x18>
 80043f6:	2104      	movs	r1, #4
 80043f8:	4638      	mov	r0, r7
 80043fa:	f7ff ff9f 	bl	800433c <__sfmoreglue>
 80043fe:	6030      	str	r0, [r6, #0]
 8004400:	2800      	cmp	r0, #0
 8004402:	d1f1      	bne.n	80043e8 <__sfp+0x20>
 8004404:	230c      	movs	r3, #12
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	4604      	mov	r4, r0
 800440a:	4620      	mov	r0, r4
 800440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <__sfp+0x74>)
 8004410:	6665      	str	r5, [r4, #100]	; 0x64
 8004412:	e9c4 5500 	strd	r5, r5, [r4]
 8004416:	60a5      	str	r5, [r4, #8]
 8004418:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800441c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004420:	2208      	movs	r2, #8
 8004422:	4629      	mov	r1, r5
 8004424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004428:	f7ff ff3d 	bl	80042a6 <memset>
 800442c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004434:	e7e9      	b.n	800440a <__sfp+0x42>
 8004436:	bf00      	nop
 8004438:	08005100 	.word	0x08005100
 800443c:	ffff0001 	.word	0xffff0001

08004440 <_fwalk_reent>:
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	4680      	mov	r8, r0
 8004446:	4689      	mov	r9, r1
 8004448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800444c:	2600      	movs	r6, #0
 800444e:	b914      	cbnz	r4, 8004456 <_fwalk_reent+0x16>
 8004450:	4630      	mov	r0, r6
 8004452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004456:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800445a:	3f01      	subs	r7, #1
 800445c:	d501      	bpl.n	8004462 <_fwalk_reent+0x22>
 800445e:	6824      	ldr	r4, [r4, #0]
 8004460:	e7f5      	b.n	800444e <_fwalk_reent+0xe>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d907      	bls.n	8004478 <_fwalk_reent+0x38>
 8004468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800446c:	3301      	adds	r3, #1
 800446e:	d003      	beq.n	8004478 <_fwalk_reent+0x38>
 8004470:	4629      	mov	r1, r5
 8004472:	4640      	mov	r0, r8
 8004474:	47c8      	blx	r9
 8004476:	4306      	orrs	r6, r0
 8004478:	3568      	adds	r5, #104	; 0x68
 800447a:	e7ee      	b.n	800445a <_fwalk_reent+0x1a>

0800447c <_malloc_r>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	1ccd      	adds	r5, r1, #3
 8004480:	f025 0503 	bic.w	r5, r5, #3
 8004484:	3508      	adds	r5, #8
 8004486:	2d0c      	cmp	r5, #12
 8004488:	bf38      	it	cc
 800448a:	250c      	movcc	r5, #12
 800448c:	2d00      	cmp	r5, #0
 800448e:	4606      	mov	r6, r0
 8004490:	db01      	blt.n	8004496 <_malloc_r+0x1a>
 8004492:	42a9      	cmp	r1, r5
 8004494:	d903      	bls.n	800449e <_malloc_r+0x22>
 8004496:	230c      	movs	r3, #12
 8004498:	6033      	str	r3, [r6, #0]
 800449a:	2000      	movs	r0, #0
 800449c:	bd70      	pop	{r4, r5, r6, pc}
 800449e:	f000 fd6b 	bl	8004f78 <__malloc_lock>
 80044a2:	4a21      	ldr	r2, [pc, #132]	; (8004528 <_malloc_r+0xac>)
 80044a4:	6814      	ldr	r4, [r2, #0]
 80044a6:	4621      	mov	r1, r4
 80044a8:	b991      	cbnz	r1, 80044d0 <_malloc_r+0x54>
 80044aa:	4c20      	ldr	r4, [pc, #128]	; (800452c <_malloc_r+0xb0>)
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	b91b      	cbnz	r3, 80044b8 <_malloc_r+0x3c>
 80044b0:	4630      	mov	r0, r6
 80044b2:	f000 fb05 	bl	8004ac0 <_sbrk_r>
 80044b6:	6020      	str	r0, [r4, #0]
 80044b8:	4629      	mov	r1, r5
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 fb00 	bl	8004ac0 <_sbrk_r>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d124      	bne.n	800450e <_malloc_r+0x92>
 80044c4:	230c      	movs	r3, #12
 80044c6:	6033      	str	r3, [r6, #0]
 80044c8:	4630      	mov	r0, r6
 80044ca:	f000 fd56 	bl	8004f7a <__malloc_unlock>
 80044ce:	e7e4      	b.n	800449a <_malloc_r+0x1e>
 80044d0:	680b      	ldr	r3, [r1, #0]
 80044d2:	1b5b      	subs	r3, r3, r5
 80044d4:	d418      	bmi.n	8004508 <_malloc_r+0x8c>
 80044d6:	2b0b      	cmp	r3, #11
 80044d8:	d90f      	bls.n	80044fa <_malloc_r+0x7e>
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	50cd      	str	r5, [r1, r3]
 80044de:	18cc      	adds	r4, r1, r3
 80044e0:	4630      	mov	r0, r6
 80044e2:	f000 fd4a 	bl	8004f7a <__malloc_unlock>
 80044e6:	f104 000b 	add.w	r0, r4, #11
 80044ea:	1d23      	adds	r3, r4, #4
 80044ec:	f020 0007 	bic.w	r0, r0, #7
 80044f0:	1ac3      	subs	r3, r0, r3
 80044f2:	d0d3      	beq.n	800449c <_malloc_r+0x20>
 80044f4:	425a      	negs	r2, r3
 80044f6:	50e2      	str	r2, [r4, r3]
 80044f8:	e7d0      	b.n	800449c <_malloc_r+0x20>
 80044fa:	428c      	cmp	r4, r1
 80044fc:	684b      	ldr	r3, [r1, #4]
 80044fe:	bf16      	itet	ne
 8004500:	6063      	strne	r3, [r4, #4]
 8004502:	6013      	streq	r3, [r2, #0]
 8004504:	460c      	movne	r4, r1
 8004506:	e7eb      	b.n	80044e0 <_malloc_r+0x64>
 8004508:	460c      	mov	r4, r1
 800450a:	6849      	ldr	r1, [r1, #4]
 800450c:	e7cc      	b.n	80044a8 <_malloc_r+0x2c>
 800450e:	1cc4      	adds	r4, r0, #3
 8004510:	f024 0403 	bic.w	r4, r4, #3
 8004514:	42a0      	cmp	r0, r4
 8004516:	d005      	beq.n	8004524 <_malloc_r+0xa8>
 8004518:	1a21      	subs	r1, r4, r0
 800451a:	4630      	mov	r0, r6
 800451c:	f000 fad0 	bl	8004ac0 <_sbrk_r>
 8004520:	3001      	adds	r0, #1
 8004522:	d0cf      	beq.n	80044c4 <_malloc_r+0x48>
 8004524:	6025      	str	r5, [r4, #0]
 8004526:	e7db      	b.n	80044e0 <_malloc_r+0x64>
 8004528:	2000458c 	.word	0x2000458c
 800452c:	20004590 	.word	0x20004590

08004530 <__sfputc_r>:
 8004530:	6893      	ldr	r3, [r2, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	b410      	push	{r4}
 8004538:	6093      	str	r3, [r2, #8]
 800453a:	da08      	bge.n	800454e <__sfputc_r+0x1e>
 800453c:	6994      	ldr	r4, [r2, #24]
 800453e:	42a3      	cmp	r3, r4
 8004540:	db01      	blt.n	8004546 <__sfputc_r+0x16>
 8004542:	290a      	cmp	r1, #10
 8004544:	d103      	bne.n	800454e <__sfputc_r+0x1e>
 8004546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800454a:	f000 bb0d 	b.w	8004b68 <__swbuf_r>
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	1c58      	adds	r0, r3, #1
 8004552:	6010      	str	r0, [r2, #0]
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	4608      	mov	r0, r1
 8004558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455c:	4770      	bx	lr

0800455e <__sfputs_r>:
 800455e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004560:	4606      	mov	r6, r0
 8004562:	460f      	mov	r7, r1
 8004564:	4614      	mov	r4, r2
 8004566:	18d5      	adds	r5, r2, r3
 8004568:	42ac      	cmp	r4, r5
 800456a:	d101      	bne.n	8004570 <__sfputs_r+0x12>
 800456c:	2000      	movs	r0, #0
 800456e:	e007      	b.n	8004580 <__sfputs_r+0x22>
 8004570:	463a      	mov	r2, r7
 8004572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004576:	4630      	mov	r0, r6
 8004578:	f7ff ffda 	bl	8004530 <__sfputc_r>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d1f3      	bne.n	8004568 <__sfputs_r+0xa>
 8004580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004584 <_vfiprintf_r>:
 8004584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004588:	460c      	mov	r4, r1
 800458a:	b09d      	sub	sp, #116	; 0x74
 800458c:	4617      	mov	r7, r2
 800458e:	461d      	mov	r5, r3
 8004590:	4606      	mov	r6, r0
 8004592:	b118      	cbz	r0, 800459c <_vfiprintf_r+0x18>
 8004594:	6983      	ldr	r3, [r0, #24]
 8004596:	b90b      	cbnz	r3, 800459c <_vfiprintf_r+0x18>
 8004598:	f7ff fee6 	bl	8004368 <__sinit>
 800459c:	4b7c      	ldr	r3, [pc, #496]	; (8004790 <_vfiprintf_r+0x20c>)
 800459e:	429c      	cmp	r4, r3
 80045a0:	d158      	bne.n	8004654 <_vfiprintf_r+0xd0>
 80045a2:	6874      	ldr	r4, [r6, #4]
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	0718      	lsls	r0, r3, #28
 80045a8:	d55e      	bpl.n	8004668 <_vfiprintf_r+0xe4>
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d05b      	beq.n	8004668 <_vfiprintf_r+0xe4>
 80045b0:	2300      	movs	r3, #0
 80045b2:	9309      	str	r3, [sp, #36]	; 0x24
 80045b4:	2320      	movs	r3, #32
 80045b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ba:	2330      	movs	r3, #48	; 0x30
 80045bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045c0:	9503      	str	r5, [sp, #12]
 80045c2:	f04f 0b01 	mov.w	fp, #1
 80045c6:	46b8      	mov	r8, r7
 80045c8:	4645      	mov	r5, r8
 80045ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045ce:	b10b      	cbz	r3, 80045d4 <_vfiprintf_r+0x50>
 80045d0:	2b25      	cmp	r3, #37	; 0x25
 80045d2:	d154      	bne.n	800467e <_vfiprintf_r+0xfa>
 80045d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80045d8:	d00b      	beq.n	80045f2 <_vfiprintf_r+0x6e>
 80045da:	4653      	mov	r3, sl
 80045dc:	463a      	mov	r2, r7
 80045de:	4621      	mov	r1, r4
 80045e0:	4630      	mov	r0, r6
 80045e2:	f7ff ffbc 	bl	800455e <__sfputs_r>
 80045e6:	3001      	adds	r0, #1
 80045e8:	f000 80c2 	beq.w	8004770 <_vfiprintf_r+0x1ec>
 80045ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ee:	4453      	add	r3, sl
 80045f0:	9309      	str	r3, [sp, #36]	; 0x24
 80045f2:	f898 3000 	ldrb.w	r3, [r8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80ba 	beq.w	8004770 <_vfiprintf_r+0x1ec>
 80045fc:	2300      	movs	r3, #0
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	9307      	str	r3, [sp, #28]
 800460a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800460e:	931a      	str	r3, [sp, #104]	; 0x68
 8004610:	46a8      	mov	r8, r5
 8004612:	2205      	movs	r2, #5
 8004614:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004618:	485e      	ldr	r0, [pc, #376]	; (8004794 <_vfiprintf_r+0x210>)
 800461a:	f7fb fdd9 	bl	80001d0 <memchr>
 800461e:	9b04      	ldr	r3, [sp, #16]
 8004620:	bb78      	cbnz	r0, 8004682 <_vfiprintf_r+0xfe>
 8004622:	06d9      	lsls	r1, r3, #27
 8004624:	bf44      	itt	mi
 8004626:	2220      	movmi	r2, #32
 8004628:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800462c:	071a      	lsls	r2, r3, #28
 800462e:	bf44      	itt	mi
 8004630:	222b      	movmi	r2, #43	; 0x2b
 8004632:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004636:	782a      	ldrb	r2, [r5, #0]
 8004638:	2a2a      	cmp	r2, #42	; 0x2a
 800463a:	d02a      	beq.n	8004692 <_vfiprintf_r+0x10e>
 800463c:	9a07      	ldr	r2, [sp, #28]
 800463e:	46a8      	mov	r8, r5
 8004640:	2000      	movs	r0, #0
 8004642:	250a      	movs	r5, #10
 8004644:	4641      	mov	r1, r8
 8004646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800464a:	3b30      	subs	r3, #48	; 0x30
 800464c:	2b09      	cmp	r3, #9
 800464e:	d969      	bls.n	8004724 <_vfiprintf_r+0x1a0>
 8004650:	b360      	cbz	r0, 80046ac <_vfiprintf_r+0x128>
 8004652:	e024      	b.n	800469e <_vfiprintf_r+0x11a>
 8004654:	4b50      	ldr	r3, [pc, #320]	; (8004798 <_vfiprintf_r+0x214>)
 8004656:	429c      	cmp	r4, r3
 8004658:	d101      	bne.n	800465e <_vfiprintf_r+0xda>
 800465a:	68b4      	ldr	r4, [r6, #8]
 800465c:	e7a2      	b.n	80045a4 <_vfiprintf_r+0x20>
 800465e:	4b4f      	ldr	r3, [pc, #316]	; (800479c <_vfiprintf_r+0x218>)
 8004660:	429c      	cmp	r4, r3
 8004662:	bf08      	it	eq
 8004664:	68f4      	ldreq	r4, [r6, #12]
 8004666:	e79d      	b.n	80045a4 <_vfiprintf_r+0x20>
 8004668:	4621      	mov	r1, r4
 800466a:	4630      	mov	r0, r6
 800466c:	f000 fae0 	bl	8004c30 <__swsetup_r>
 8004670:	2800      	cmp	r0, #0
 8004672:	d09d      	beq.n	80045b0 <_vfiprintf_r+0x2c>
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	b01d      	add	sp, #116	; 0x74
 800467a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467e:	46a8      	mov	r8, r5
 8004680:	e7a2      	b.n	80045c8 <_vfiprintf_r+0x44>
 8004682:	4a44      	ldr	r2, [pc, #272]	; (8004794 <_vfiprintf_r+0x210>)
 8004684:	1a80      	subs	r0, r0, r2
 8004686:	fa0b f000 	lsl.w	r0, fp, r0
 800468a:	4318      	orrs	r0, r3
 800468c:	9004      	str	r0, [sp, #16]
 800468e:	4645      	mov	r5, r8
 8004690:	e7be      	b.n	8004610 <_vfiprintf_r+0x8c>
 8004692:	9a03      	ldr	r2, [sp, #12]
 8004694:	1d11      	adds	r1, r2, #4
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	9103      	str	r1, [sp, #12]
 800469a:	2a00      	cmp	r2, #0
 800469c:	db01      	blt.n	80046a2 <_vfiprintf_r+0x11e>
 800469e:	9207      	str	r2, [sp, #28]
 80046a0:	e004      	b.n	80046ac <_vfiprintf_r+0x128>
 80046a2:	4252      	negs	r2, r2
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	9207      	str	r2, [sp, #28]
 80046aa:	9304      	str	r3, [sp, #16]
 80046ac:	f898 3000 	ldrb.w	r3, [r8]
 80046b0:	2b2e      	cmp	r3, #46	; 0x2e
 80046b2:	d10e      	bne.n	80046d2 <_vfiprintf_r+0x14e>
 80046b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80046b8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ba:	d138      	bne.n	800472e <_vfiprintf_r+0x1aa>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	9203      	str	r2, [sp, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bfb8      	it	lt
 80046c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80046cc:	f108 0802 	add.w	r8, r8, #2
 80046d0:	9305      	str	r3, [sp, #20]
 80046d2:	4d33      	ldr	r5, [pc, #204]	; (80047a0 <_vfiprintf_r+0x21c>)
 80046d4:	f898 1000 	ldrb.w	r1, [r8]
 80046d8:	2203      	movs	r2, #3
 80046da:	4628      	mov	r0, r5
 80046dc:	f7fb fd78 	bl	80001d0 <memchr>
 80046e0:	b140      	cbz	r0, 80046f4 <_vfiprintf_r+0x170>
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	1b40      	subs	r0, r0, r5
 80046e6:	fa03 f000 	lsl.w	r0, r3, r0
 80046ea:	9b04      	ldr	r3, [sp, #16]
 80046ec:	4303      	orrs	r3, r0
 80046ee:	f108 0801 	add.w	r8, r8, #1
 80046f2:	9304      	str	r3, [sp, #16]
 80046f4:	f898 1000 	ldrb.w	r1, [r8]
 80046f8:	482a      	ldr	r0, [pc, #168]	; (80047a4 <_vfiprintf_r+0x220>)
 80046fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046fe:	2206      	movs	r2, #6
 8004700:	f108 0701 	add.w	r7, r8, #1
 8004704:	f7fb fd64 	bl	80001d0 <memchr>
 8004708:	2800      	cmp	r0, #0
 800470a:	d037      	beq.n	800477c <_vfiprintf_r+0x1f8>
 800470c:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <_vfiprintf_r+0x224>)
 800470e:	bb1b      	cbnz	r3, 8004758 <_vfiprintf_r+0x1d4>
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	3307      	adds	r3, #7
 8004714:	f023 0307 	bic.w	r3, r3, #7
 8004718:	3308      	adds	r3, #8
 800471a:	9303      	str	r3, [sp, #12]
 800471c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471e:	444b      	add	r3, r9
 8004720:	9309      	str	r3, [sp, #36]	; 0x24
 8004722:	e750      	b.n	80045c6 <_vfiprintf_r+0x42>
 8004724:	fb05 3202 	mla	r2, r5, r2, r3
 8004728:	2001      	movs	r0, #1
 800472a:	4688      	mov	r8, r1
 800472c:	e78a      	b.n	8004644 <_vfiprintf_r+0xc0>
 800472e:	2300      	movs	r3, #0
 8004730:	f108 0801 	add.w	r8, r8, #1
 8004734:	9305      	str	r3, [sp, #20]
 8004736:	4619      	mov	r1, r3
 8004738:	250a      	movs	r5, #10
 800473a:	4640      	mov	r0, r8
 800473c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004740:	3a30      	subs	r2, #48	; 0x30
 8004742:	2a09      	cmp	r2, #9
 8004744:	d903      	bls.n	800474e <_vfiprintf_r+0x1ca>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0c3      	beq.n	80046d2 <_vfiprintf_r+0x14e>
 800474a:	9105      	str	r1, [sp, #20]
 800474c:	e7c1      	b.n	80046d2 <_vfiprintf_r+0x14e>
 800474e:	fb05 2101 	mla	r1, r5, r1, r2
 8004752:	2301      	movs	r3, #1
 8004754:	4680      	mov	r8, r0
 8004756:	e7f0      	b.n	800473a <_vfiprintf_r+0x1b6>
 8004758:	ab03      	add	r3, sp, #12
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	4622      	mov	r2, r4
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <_vfiprintf_r+0x228>)
 8004760:	a904      	add	r1, sp, #16
 8004762:	4630      	mov	r0, r6
 8004764:	f3af 8000 	nop.w
 8004768:	f1b0 3fff 	cmp.w	r0, #4294967295
 800476c:	4681      	mov	r9, r0
 800476e:	d1d5      	bne.n	800471c <_vfiprintf_r+0x198>
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	065b      	lsls	r3, r3, #25
 8004774:	f53f af7e 	bmi.w	8004674 <_vfiprintf_r+0xf0>
 8004778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800477a:	e77d      	b.n	8004678 <_vfiprintf_r+0xf4>
 800477c:	ab03      	add	r3, sp, #12
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	4622      	mov	r2, r4
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <_vfiprintf_r+0x228>)
 8004784:	a904      	add	r1, sp, #16
 8004786:	4630      	mov	r0, r6
 8004788:	f000 f888 	bl	800489c <_printf_i>
 800478c:	e7ec      	b.n	8004768 <_vfiprintf_r+0x1e4>
 800478e:	bf00      	nop
 8004790:	08005124 	.word	0x08005124
 8004794:	08005164 	.word	0x08005164
 8004798:	08005144 	.word	0x08005144
 800479c:	08005104 	.word	0x08005104
 80047a0:	0800516a 	.word	0x0800516a
 80047a4:	0800516e 	.word	0x0800516e
 80047a8:	00000000 	.word	0x00000000
 80047ac:	0800455f 	.word	0x0800455f

080047b0 <_printf_common>:
 80047b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	4691      	mov	r9, r2
 80047b6:	461f      	mov	r7, r3
 80047b8:	688a      	ldr	r2, [r1, #8]
 80047ba:	690b      	ldr	r3, [r1, #16]
 80047bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c0:	4293      	cmp	r3, r2
 80047c2:	bfb8      	it	lt
 80047c4:	4613      	movlt	r3, r2
 80047c6:	f8c9 3000 	str.w	r3, [r9]
 80047ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ce:	4606      	mov	r6, r0
 80047d0:	460c      	mov	r4, r1
 80047d2:	b112      	cbz	r2, 80047da <_printf_common+0x2a>
 80047d4:	3301      	adds	r3, #1
 80047d6:	f8c9 3000 	str.w	r3, [r9]
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	0699      	lsls	r1, r3, #26
 80047de:	bf42      	ittt	mi
 80047e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047e4:	3302      	addmi	r3, #2
 80047e6:	f8c9 3000 	strmi.w	r3, [r9]
 80047ea:	6825      	ldr	r5, [r4, #0]
 80047ec:	f015 0506 	ands.w	r5, r5, #6
 80047f0:	d107      	bne.n	8004802 <_printf_common+0x52>
 80047f2:	f104 0a19 	add.w	sl, r4, #25
 80047f6:	68e3      	ldr	r3, [r4, #12]
 80047f8:	f8d9 2000 	ldr.w	r2, [r9]
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	42ab      	cmp	r3, r5
 8004800:	dc28      	bgt.n	8004854 <_printf_common+0xa4>
 8004802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004806:	6822      	ldr	r2, [r4, #0]
 8004808:	3300      	adds	r3, #0
 800480a:	bf18      	it	ne
 800480c:	2301      	movne	r3, #1
 800480e:	0692      	lsls	r2, r2, #26
 8004810:	d42d      	bmi.n	800486e <_printf_common+0xbe>
 8004812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004816:	4639      	mov	r1, r7
 8004818:	4630      	mov	r0, r6
 800481a:	47c0      	blx	r8
 800481c:	3001      	adds	r0, #1
 800481e:	d020      	beq.n	8004862 <_printf_common+0xb2>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	68e5      	ldr	r5, [r4, #12]
 8004824:	f8d9 2000 	ldr.w	r2, [r9]
 8004828:	f003 0306 	and.w	r3, r3, #6
 800482c:	2b04      	cmp	r3, #4
 800482e:	bf08      	it	eq
 8004830:	1aad      	subeq	r5, r5, r2
 8004832:	68a3      	ldr	r3, [r4, #8]
 8004834:	6922      	ldr	r2, [r4, #16]
 8004836:	bf0c      	ite	eq
 8004838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800483c:	2500      	movne	r5, #0
 800483e:	4293      	cmp	r3, r2
 8004840:	bfc4      	itt	gt
 8004842:	1a9b      	subgt	r3, r3, r2
 8004844:	18ed      	addgt	r5, r5, r3
 8004846:	f04f 0900 	mov.w	r9, #0
 800484a:	341a      	adds	r4, #26
 800484c:	454d      	cmp	r5, r9
 800484e:	d11a      	bne.n	8004886 <_printf_common+0xd6>
 8004850:	2000      	movs	r0, #0
 8004852:	e008      	b.n	8004866 <_printf_common+0xb6>
 8004854:	2301      	movs	r3, #1
 8004856:	4652      	mov	r2, sl
 8004858:	4639      	mov	r1, r7
 800485a:	4630      	mov	r0, r6
 800485c:	47c0      	blx	r8
 800485e:	3001      	adds	r0, #1
 8004860:	d103      	bne.n	800486a <_printf_common+0xba>
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486a:	3501      	adds	r5, #1
 800486c:	e7c3      	b.n	80047f6 <_printf_common+0x46>
 800486e:	18e1      	adds	r1, r4, r3
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	2030      	movs	r0, #48	; 0x30
 8004874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004878:	4422      	add	r2, r4
 800487a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800487e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004882:	3302      	adds	r3, #2
 8004884:	e7c5      	b.n	8004812 <_printf_common+0x62>
 8004886:	2301      	movs	r3, #1
 8004888:	4622      	mov	r2, r4
 800488a:	4639      	mov	r1, r7
 800488c:	4630      	mov	r0, r6
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d0e6      	beq.n	8004862 <_printf_common+0xb2>
 8004894:	f109 0901 	add.w	r9, r9, #1
 8004898:	e7d8      	b.n	800484c <_printf_common+0x9c>
	...

0800489c <_printf_i>:
 800489c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80048a4:	460c      	mov	r4, r1
 80048a6:	7e09      	ldrb	r1, [r1, #24]
 80048a8:	b085      	sub	sp, #20
 80048aa:	296e      	cmp	r1, #110	; 0x6e
 80048ac:	4617      	mov	r7, r2
 80048ae:	4606      	mov	r6, r0
 80048b0:	4698      	mov	r8, r3
 80048b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048b4:	f000 80b3 	beq.w	8004a1e <_printf_i+0x182>
 80048b8:	d822      	bhi.n	8004900 <_printf_i+0x64>
 80048ba:	2963      	cmp	r1, #99	; 0x63
 80048bc:	d036      	beq.n	800492c <_printf_i+0x90>
 80048be:	d80a      	bhi.n	80048d6 <_printf_i+0x3a>
 80048c0:	2900      	cmp	r1, #0
 80048c2:	f000 80b9 	beq.w	8004a38 <_printf_i+0x19c>
 80048c6:	2958      	cmp	r1, #88	; 0x58
 80048c8:	f000 8083 	beq.w	80049d2 <_printf_i+0x136>
 80048cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048d4:	e032      	b.n	800493c <_printf_i+0xa0>
 80048d6:	2964      	cmp	r1, #100	; 0x64
 80048d8:	d001      	beq.n	80048de <_printf_i+0x42>
 80048da:	2969      	cmp	r1, #105	; 0x69
 80048dc:	d1f6      	bne.n	80048cc <_printf_i+0x30>
 80048de:	6820      	ldr	r0, [r4, #0]
 80048e0:	6813      	ldr	r3, [r2, #0]
 80048e2:	0605      	lsls	r5, r0, #24
 80048e4:	f103 0104 	add.w	r1, r3, #4
 80048e8:	d52a      	bpl.n	8004940 <_printf_i+0xa4>
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da03      	bge.n	80048fa <_printf_i+0x5e>
 80048f2:	222d      	movs	r2, #45	; 0x2d
 80048f4:	425b      	negs	r3, r3
 80048f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048fa:	486f      	ldr	r0, [pc, #444]	; (8004ab8 <_printf_i+0x21c>)
 80048fc:	220a      	movs	r2, #10
 80048fe:	e039      	b.n	8004974 <_printf_i+0xd8>
 8004900:	2973      	cmp	r1, #115	; 0x73
 8004902:	f000 809d 	beq.w	8004a40 <_printf_i+0x1a4>
 8004906:	d808      	bhi.n	800491a <_printf_i+0x7e>
 8004908:	296f      	cmp	r1, #111	; 0x6f
 800490a:	d020      	beq.n	800494e <_printf_i+0xb2>
 800490c:	2970      	cmp	r1, #112	; 0x70
 800490e:	d1dd      	bne.n	80048cc <_printf_i+0x30>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	f043 0320 	orr.w	r3, r3, #32
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	e003      	b.n	8004922 <_printf_i+0x86>
 800491a:	2975      	cmp	r1, #117	; 0x75
 800491c:	d017      	beq.n	800494e <_printf_i+0xb2>
 800491e:	2978      	cmp	r1, #120	; 0x78
 8004920:	d1d4      	bne.n	80048cc <_printf_i+0x30>
 8004922:	2378      	movs	r3, #120	; 0x78
 8004924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004928:	4864      	ldr	r0, [pc, #400]	; (8004abc <_printf_i+0x220>)
 800492a:	e055      	b.n	80049d8 <_printf_i+0x13c>
 800492c:	6813      	ldr	r3, [r2, #0]
 800492e:	1d19      	adds	r1, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6011      	str	r1, [r2, #0]
 8004934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800493c:	2301      	movs	r3, #1
 800493e:	e08c      	b.n	8004a5a <_printf_i+0x1be>
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6011      	str	r1, [r2, #0]
 8004944:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004948:	bf18      	it	ne
 800494a:	b21b      	sxthne	r3, r3
 800494c:	e7cf      	b.n	80048ee <_printf_i+0x52>
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	6825      	ldr	r5, [r4, #0]
 8004952:	1d18      	adds	r0, r3, #4
 8004954:	6010      	str	r0, [r2, #0]
 8004956:	0628      	lsls	r0, r5, #24
 8004958:	d501      	bpl.n	800495e <_printf_i+0xc2>
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	e002      	b.n	8004964 <_printf_i+0xc8>
 800495e:	0668      	lsls	r0, r5, #25
 8004960:	d5fb      	bpl.n	800495a <_printf_i+0xbe>
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	4854      	ldr	r0, [pc, #336]	; (8004ab8 <_printf_i+0x21c>)
 8004966:	296f      	cmp	r1, #111	; 0x6f
 8004968:	bf14      	ite	ne
 800496a:	220a      	movne	r2, #10
 800496c:	2208      	moveq	r2, #8
 800496e:	2100      	movs	r1, #0
 8004970:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004974:	6865      	ldr	r5, [r4, #4]
 8004976:	60a5      	str	r5, [r4, #8]
 8004978:	2d00      	cmp	r5, #0
 800497a:	f2c0 8095 	blt.w	8004aa8 <_printf_i+0x20c>
 800497e:	6821      	ldr	r1, [r4, #0]
 8004980:	f021 0104 	bic.w	r1, r1, #4
 8004984:	6021      	str	r1, [r4, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d13d      	bne.n	8004a06 <_printf_i+0x16a>
 800498a:	2d00      	cmp	r5, #0
 800498c:	f040 808e 	bne.w	8004aac <_printf_i+0x210>
 8004990:	4665      	mov	r5, ip
 8004992:	2a08      	cmp	r2, #8
 8004994:	d10b      	bne.n	80049ae <_printf_i+0x112>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	07db      	lsls	r3, r3, #31
 800499a:	d508      	bpl.n	80049ae <_printf_i+0x112>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bfde      	ittt	le
 80049a4:	2330      	movle	r3, #48	; 0x30
 80049a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049ae:	ebac 0305 	sub.w	r3, ip, r5
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	f8cd 8000 	str.w	r8, [sp]
 80049b8:	463b      	mov	r3, r7
 80049ba:	aa03      	add	r2, sp, #12
 80049bc:	4621      	mov	r1, r4
 80049be:	4630      	mov	r0, r6
 80049c0:	f7ff fef6 	bl	80047b0 <_printf_common>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d14d      	bne.n	8004a64 <_printf_i+0x1c8>
 80049c8:	f04f 30ff 	mov.w	r0, #4294967295
 80049cc:	b005      	add	sp, #20
 80049ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049d2:	4839      	ldr	r0, [pc, #228]	; (8004ab8 <_printf_i+0x21c>)
 80049d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	6821      	ldr	r1, [r4, #0]
 80049dc:	1d1d      	adds	r5, r3, #4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6015      	str	r5, [r2, #0]
 80049e2:	060a      	lsls	r2, r1, #24
 80049e4:	d50b      	bpl.n	80049fe <_printf_i+0x162>
 80049e6:	07ca      	lsls	r2, r1, #31
 80049e8:	bf44      	itt	mi
 80049ea:	f041 0120 	orrmi.w	r1, r1, #32
 80049ee:	6021      	strmi	r1, [r4, #0]
 80049f0:	b91b      	cbnz	r3, 80049fa <_printf_i+0x15e>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	f022 0220 	bic.w	r2, r2, #32
 80049f8:	6022      	str	r2, [r4, #0]
 80049fa:	2210      	movs	r2, #16
 80049fc:	e7b7      	b.n	800496e <_printf_i+0xd2>
 80049fe:	064d      	lsls	r5, r1, #25
 8004a00:	bf48      	it	mi
 8004a02:	b29b      	uxthmi	r3, r3
 8004a04:	e7ef      	b.n	80049e6 <_printf_i+0x14a>
 8004a06:	4665      	mov	r5, ip
 8004a08:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a0c:	fb02 3311 	mls	r3, r2, r1, r3
 8004a10:	5cc3      	ldrb	r3, [r0, r3]
 8004a12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a16:	460b      	mov	r3, r1
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d1f5      	bne.n	8004a08 <_printf_i+0x16c>
 8004a1c:	e7b9      	b.n	8004992 <_printf_i+0xf6>
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	6825      	ldr	r5, [r4, #0]
 8004a22:	6961      	ldr	r1, [r4, #20]
 8004a24:	1d18      	adds	r0, r3, #4
 8004a26:	6010      	str	r0, [r2, #0]
 8004a28:	0628      	lsls	r0, r5, #24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	d501      	bpl.n	8004a32 <_printf_i+0x196>
 8004a2e:	6019      	str	r1, [r3, #0]
 8004a30:	e002      	b.n	8004a38 <_printf_i+0x19c>
 8004a32:	066a      	lsls	r2, r5, #25
 8004a34:	d5fb      	bpl.n	8004a2e <_printf_i+0x192>
 8004a36:	8019      	strh	r1, [r3, #0]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	4665      	mov	r5, ip
 8004a3e:	e7b9      	b.n	80049b4 <_printf_i+0x118>
 8004a40:	6813      	ldr	r3, [r2, #0]
 8004a42:	1d19      	adds	r1, r3, #4
 8004a44:	6011      	str	r1, [r2, #0]
 8004a46:	681d      	ldr	r5, [r3, #0]
 8004a48:	6862      	ldr	r2, [r4, #4]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7fb fbbf 	bl	80001d0 <memchr>
 8004a52:	b108      	cbz	r0, 8004a58 <_printf_i+0x1bc>
 8004a54:	1b40      	subs	r0, r0, r5
 8004a56:	6060      	str	r0, [r4, #4]
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a62:	e7a7      	b.n	80049b4 <_printf_i+0x118>
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4639      	mov	r1, r7
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	47c0      	blx	r8
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d0aa      	beq.n	80049c8 <_printf_i+0x12c>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	079b      	lsls	r3, r3, #30
 8004a76:	d413      	bmi.n	8004aa0 <_printf_i+0x204>
 8004a78:	68e0      	ldr	r0, [r4, #12]
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	4298      	cmp	r0, r3
 8004a7e:	bfb8      	it	lt
 8004a80:	4618      	movlt	r0, r3
 8004a82:	e7a3      	b.n	80049cc <_printf_i+0x130>
 8004a84:	2301      	movs	r3, #1
 8004a86:	464a      	mov	r2, r9
 8004a88:	4639      	mov	r1, r7
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	47c0      	blx	r8
 8004a8e:	3001      	adds	r0, #1
 8004a90:	d09a      	beq.n	80049c8 <_printf_i+0x12c>
 8004a92:	3501      	adds	r5, #1
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	9a03      	ldr	r2, [sp, #12]
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	dcf2      	bgt.n	8004a84 <_printf_i+0x1e8>
 8004a9e:	e7eb      	b.n	8004a78 <_printf_i+0x1dc>
 8004aa0:	2500      	movs	r5, #0
 8004aa2:	f104 0919 	add.w	r9, r4, #25
 8004aa6:	e7f5      	b.n	8004a94 <_printf_i+0x1f8>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ac      	bne.n	8004a06 <_printf_i+0x16a>
 8004aac:	7803      	ldrb	r3, [r0, #0]
 8004aae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ab2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab6:	e76c      	b.n	8004992 <_printf_i+0xf6>
 8004ab8:	08005175 	.word	0x08005175
 8004abc:	08005186 	.word	0x08005186

08004ac0 <_sbrk_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4c06      	ldr	r4, [pc, #24]	; (8004adc <_sbrk_r+0x1c>)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	f7fb ffce 	bl	8000a6c <_sbrk>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_sbrk_r+0x1a>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_sbrk_r+0x1a>
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	200045e0 	.word	0x200045e0

08004ae0 <__sread>:
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae8:	f000 fa96 	bl	8005018 <_read_r>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	bfab      	itete	ge
 8004af0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004af2:	89a3      	ldrhlt	r3, [r4, #12]
 8004af4:	181b      	addge	r3, r3, r0
 8004af6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004afa:	bfac      	ite	ge
 8004afc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004afe:	81a3      	strhlt	r3, [r4, #12]
 8004b00:	bd10      	pop	{r4, pc}

08004b02 <__swrite>:
 8004b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b06:	461f      	mov	r7, r3
 8004b08:	898b      	ldrh	r3, [r1, #12]
 8004b0a:	05db      	lsls	r3, r3, #23
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	4616      	mov	r6, r2
 8004b12:	d505      	bpl.n	8004b20 <__swrite+0x1e>
 8004b14:	2302      	movs	r3, #2
 8004b16:	2200      	movs	r2, #0
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	f000 f9b6 	bl	8004e8c <_lseek_r>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	463b      	mov	r3, r7
 8004b30:	4628      	mov	r0, r5
 8004b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b36:	f000 b869 	b.w	8004c0c <_write_r>

08004b3a <__sseek>:
 8004b3a:	b510      	push	{r4, lr}
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b42:	f000 f9a3 	bl	8004e8c <_lseek_r>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	bf15      	itete	ne
 8004b4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b56:	81a3      	strheq	r3, [r4, #12]
 8004b58:	bf18      	it	ne
 8004b5a:	81a3      	strhne	r3, [r4, #12]
 8004b5c:	bd10      	pop	{r4, pc}

08004b5e <__sclose>:
 8004b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b62:	f000 b8d3 	b.w	8004d0c <_close_r>
	...

08004b68 <__swbuf_r>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	460e      	mov	r6, r1
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	4605      	mov	r5, r0
 8004b70:	b118      	cbz	r0, 8004b7a <__swbuf_r+0x12>
 8004b72:	6983      	ldr	r3, [r0, #24]
 8004b74:	b90b      	cbnz	r3, 8004b7a <__swbuf_r+0x12>
 8004b76:	f7ff fbf7 	bl	8004368 <__sinit>
 8004b7a:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <__swbuf_r+0x98>)
 8004b7c:	429c      	cmp	r4, r3
 8004b7e:	d12a      	bne.n	8004bd6 <__swbuf_r+0x6e>
 8004b80:	686c      	ldr	r4, [r5, #4]
 8004b82:	69a3      	ldr	r3, [r4, #24]
 8004b84:	60a3      	str	r3, [r4, #8]
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	071a      	lsls	r2, r3, #28
 8004b8a:	d52e      	bpl.n	8004bea <__swbuf_r+0x82>
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b363      	cbz	r3, 8004bea <__swbuf_r+0x82>
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	1ac0      	subs	r0, r0, r3
 8004b96:	6963      	ldr	r3, [r4, #20]
 8004b98:	b2f6      	uxtb	r6, r6
 8004b9a:	4283      	cmp	r3, r0
 8004b9c:	4637      	mov	r7, r6
 8004b9e:	dc04      	bgt.n	8004baa <__swbuf_r+0x42>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 f948 	bl	8004e38 <_fflush_r>
 8004ba8:	bb28      	cbnz	r0, 8004bf6 <__swbuf_r+0x8e>
 8004baa:	68a3      	ldr	r3, [r4, #8]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	60a3      	str	r3, [r4, #8]
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	6022      	str	r2, [r4, #0]
 8004bb6:	701e      	strb	r6, [r3, #0]
 8004bb8:	6963      	ldr	r3, [r4, #20]
 8004bba:	3001      	adds	r0, #1
 8004bbc:	4283      	cmp	r3, r0
 8004bbe:	d004      	beq.n	8004bca <__swbuf_r+0x62>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	07db      	lsls	r3, r3, #31
 8004bc4:	d519      	bpl.n	8004bfa <__swbuf_r+0x92>
 8004bc6:	2e0a      	cmp	r6, #10
 8004bc8:	d117      	bne.n	8004bfa <__swbuf_r+0x92>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 f933 	bl	8004e38 <_fflush_r>
 8004bd2:	b190      	cbz	r0, 8004bfa <__swbuf_r+0x92>
 8004bd4:	e00f      	b.n	8004bf6 <__swbuf_r+0x8e>
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <__swbuf_r+0x9c>)
 8004bd8:	429c      	cmp	r4, r3
 8004bda:	d101      	bne.n	8004be0 <__swbuf_r+0x78>
 8004bdc:	68ac      	ldr	r4, [r5, #8]
 8004bde:	e7d0      	b.n	8004b82 <__swbuf_r+0x1a>
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <__swbuf_r+0xa0>)
 8004be2:	429c      	cmp	r4, r3
 8004be4:	bf08      	it	eq
 8004be6:	68ec      	ldreq	r4, [r5, #12]
 8004be8:	e7cb      	b.n	8004b82 <__swbuf_r+0x1a>
 8004bea:	4621      	mov	r1, r4
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 f81f 	bl	8004c30 <__swsetup_r>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d0cc      	beq.n	8004b90 <__swbuf_r+0x28>
 8004bf6:	f04f 37ff 	mov.w	r7, #4294967295
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	08005124 	.word	0x08005124
 8004c04:	08005144 	.word	0x08005144
 8004c08:	08005104 	.word	0x08005104

08004c0c <_write_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4c07      	ldr	r4, [pc, #28]	; (8004c2c <_write_r+0x20>)
 8004c10:	4605      	mov	r5, r0
 8004c12:	4608      	mov	r0, r1
 8004c14:	4611      	mov	r1, r2
 8004c16:	2200      	movs	r2, #0
 8004c18:	6022      	str	r2, [r4, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f7fb fd03 	bl	8000626 <_write>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_write_r+0x1e>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_write_r+0x1e>
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	200045e0 	.word	0x200045e0

08004c30 <__swsetup_r>:
 8004c30:	4b32      	ldr	r3, [pc, #200]	; (8004cfc <__swsetup_r+0xcc>)
 8004c32:	b570      	push	{r4, r5, r6, lr}
 8004c34:	681d      	ldr	r5, [r3, #0]
 8004c36:	4606      	mov	r6, r0
 8004c38:	460c      	mov	r4, r1
 8004c3a:	b125      	cbz	r5, 8004c46 <__swsetup_r+0x16>
 8004c3c:	69ab      	ldr	r3, [r5, #24]
 8004c3e:	b913      	cbnz	r3, 8004c46 <__swsetup_r+0x16>
 8004c40:	4628      	mov	r0, r5
 8004c42:	f7ff fb91 	bl	8004368 <__sinit>
 8004c46:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <__swsetup_r+0xd0>)
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d10f      	bne.n	8004c6c <__swsetup_r+0x3c>
 8004c4c:	686c      	ldr	r4, [r5, #4]
 8004c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	0715      	lsls	r5, r2, #28
 8004c56:	d42c      	bmi.n	8004cb2 <__swsetup_r+0x82>
 8004c58:	06d0      	lsls	r0, r2, #27
 8004c5a:	d411      	bmi.n	8004c80 <__swsetup_r+0x50>
 8004c5c:	2209      	movs	r2, #9
 8004c5e:	6032      	str	r2, [r6, #0]
 8004c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	e03e      	b.n	8004cea <__swsetup_r+0xba>
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <__swsetup_r+0xd4>)
 8004c6e:	429c      	cmp	r4, r3
 8004c70:	d101      	bne.n	8004c76 <__swsetup_r+0x46>
 8004c72:	68ac      	ldr	r4, [r5, #8]
 8004c74:	e7eb      	b.n	8004c4e <__swsetup_r+0x1e>
 8004c76:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <__swsetup_r+0xd8>)
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	bf08      	it	eq
 8004c7c:	68ec      	ldreq	r4, [r5, #12]
 8004c7e:	e7e6      	b.n	8004c4e <__swsetup_r+0x1e>
 8004c80:	0751      	lsls	r1, r2, #29
 8004c82:	d512      	bpl.n	8004caa <__swsetup_r+0x7a>
 8004c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c86:	b141      	cbz	r1, 8004c9a <__swsetup_r+0x6a>
 8004c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	d002      	beq.n	8004c96 <__swsetup_r+0x66>
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 f973 	bl	8004f7c <_free_r>
 8004c96:	2300      	movs	r3, #0
 8004c98:	6363      	str	r3, [r4, #52]	; 0x34
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	f043 0308 	orr.w	r3, r3, #8
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	b94b      	cbnz	r3, 8004cca <__swsetup_r+0x9a>
 8004cb6:	89a3      	ldrh	r3, [r4, #12]
 8004cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc0:	d003      	beq.n	8004cca <__swsetup_r+0x9a>
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f000 f917 	bl	8004ef8 <__smakebuf_r>
 8004cca:	89a2      	ldrh	r2, [r4, #12]
 8004ccc:	f012 0301 	ands.w	r3, r2, #1
 8004cd0:	d00c      	beq.n	8004cec <__swsetup_r+0xbc>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60a3      	str	r3, [r4, #8]
 8004cd6:	6963      	ldr	r3, [r4, #20]
 8004cd8:	425b      	negs	r3, r3
 8004cda:	61a3      	str	r3, [r4, #24]
 8004cdc:	6923      	ldr	r3, [r4, #16]
 8004cde:	b953      	cbnz	r3, 8004cf6 <__swsetup_r+0xc6>
 8004ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004ce8:	d1ba      	bne.n	8004c60 <__swsetup_r+0x30>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	0792      	lsls	r2, r2, #30
 8004cee:	bf58      	it	pl
 8004cf0:	6963      	ldrpl	r3, [r4, #20]
 8004cf2:	60a3      	str	r3, [r4, #8]
 8004cf4:	e7f2      	b.n	8004cdc <__swsetup_r+0xac>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e7f7      	b.n	8004cea <__swsetup_r+0xba>
 8004cfa:	bf00      	nop
 8004cfc:	20000010 	.word	0x20000010
 8004d00:	08005124 	.word	0x08005124
 8004d04:	08005144 	.word	0x08005144
 8004d08:	08005104 	.word	0x08005104

08004d0c <_close_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4c06      	ldr	r4, [pc, #24]	; (8004d28 <_close_r+0x1c>)
 8004d10:	2300      	movs	r3, #0
 8004d12:	4605      	mov	r5, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	6023      	str	r3, [r4, #0]
 8004d18:	f7fb fe74 	bl	8000a04 <_close>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_close_r+0x1a>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_close_r+0x1a>
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	200045e0 	.word	0x200045e0

08004d2c <__sflush_r>:
 8004d2c:	898a      	ldrh	r2, [r1, #12]
 8004d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d32:	4605      	mov	r5, r0
 8004d34:	0710      	lsls	r0, r2, #28
 8004d36:	460c      	mov	r4, r1
 8004d38:	d458      	bmi.n	8004dec <__sflush_r+0xc0>
 8004d3a:	684b      	ldr	r3, [r1, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dc05      	bgt.n	8004d4c <__sflush_r+0x20>
 8004d40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dc02      	bgt.n	8004d4c <__sflush_r+0x20>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	d0f9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004d52:	2300      	movs	r3, #0
 8004d54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d58:	682f      	ldr	r7, [r5, #0]
 8004d5a:	6a21      	ldr	r1, [r4, #32]
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	d032      	beq.n	8004dc6 <__sflush_r+0x9a>
 8004d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	075a      	lsls	r2, r3, #29
 8004d66:	d505      	bpl.n	8004d74 <__sflush_r+0x48>
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	1ac0      	subs	r0, r0, r3
 8004d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d6e:	b10b      	cbz	r3, 8004d74 <__sflush_r+0x48>
 8004d70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d72:	1ac0      	subs	r0, r0, r3
 8004d74:	2300      	movs	r3, #0
 8004d76:	4602      	mov	r2, r0
 8004d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d7a:	6a21      	ldr	r1, [r4, #32]
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b0      	blx	r6
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	d106      	bne.n	8004d94 <__sflush_r+0x68>
 8004d86:	6829      	ldr	r1, [r5, #0]
 8004d88:	291d      	cmp	r1, #29
 8004d8a:	d848      	bhi.n	8004e1e <__sflush_r+0xf2>
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <__sflush_r+0x108>)
 8004d8e:	40ca      	lsrs	r2, r1
 8004d90:	07d6      	lsls	r6, r2, #31
 8004d92:	d544      	bpl.n	8004e1e <__sflush_r+0xf2>
 8004d94:	2200      	movs	r2, #0
 8004d96:	6062      	str	r2, [r4, #4]
 8004d98:	04d9      	lsls	r1, r3, #19
 8004d9a:	6922      	ldr	r2, [r4, #16]
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	d504      	bpl.n	8004daa <__sflush_r+0x7e>
 8004da0:	1c42      	adds	r2, r0, #1
 8004da2:	d101      	bne.n	8004da8 <__sflush_r+0x7c>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b903      	cbnz	r3, 8004daa <__sflush_r+0x7e>
 8004da8:	6560      	str	r0, [r4, #84]	; 0x54
 8004daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dac:	602f      	str	r7, [r5, #0]
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d0c9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004db2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004db6:	4299      	cmp	r1, r3
 8004db8:	d002      	beq.n	8004dc0 <__sflush_r+0x94>
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 f8de 	bl	8004f7c <_free_r>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8004dc4:	e7c0      	b.n	8004d48 <__sflush_r+0x1c>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	1c41      	adds	r1, r0, #1
 8004dce:	d1c8      	bne.n	8004d62 <__sflush_r+0x36>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0c5      	beq.n	8004d62 <__sflush_r+0x36>
 8004dd6:	2b1d      	cmp	r3, #29
 8004dd8:	d001      	beq.n	8004dde <__sflush_r+0xb2>
 8004dda:	2b16      	cmp	r3, #22
 8004ddc:	d101      	bne.n	8004de2 <__sflush_r+0xb6>
 8004dde:	602f      	str	r7, [r5, #0]
 8004de0:	e7b1      	b.n	8004d46 <__sflush_r+0x1a>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	e7ad      	b.n	8004d48 <__sflush_r+0x1c>
 8004dec:	690f      	ldr	r7, [r1, #16]
 8004dee:	2f00      	cmp	r7, #0
 8004df0:	d0a9      	beq.n	8004d46 <__sflush_r+0x1a>
 8004df2:	0793      	lsls	r3, r2, #30
 8004df4:	680e      	ldr	r6, [r1, #0]
 8004df6:	bf08      	it	eq
 8004df8:	694b      	ldreq	r3, [r1, #20]
 8004dfa:	600f      	str	r7, [r1, #0]
 8004dfc:	bf18      	it	ne
 8004dfe:	2300      	movne	r3, #0
 8004e00:	eba6 0807 	sub.w	r8, r6, r7
 8004e04:	608b      	str	r3, [r1, #8]
 8004e06:	f1b8 0f00 	cmp.w	r8, #0
 8004e0a:	dd9c      	ble.n	8004d46 <__sflush_r+0x1a>
 8004e0c:	4643      	mov	r3, r8
 8004e0e:	463a      	mov	r2, r7
 8004e10:	6a21      	ldr	r1, [r4, #32]
 8004e12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b0      	blx	r6
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	dc06      	bgt.n	8004e2a <__sflush_r+0xfe>
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	e78e      	b.n	8004d48 <__sflush_r+0x1c>
 8004e2a:	4407      	add	r7, r0
 8004e2c:	eba8 0800 	sub.w	r8, r8, r0
 8004e30:	e7e9      	b.n	8004e06 <__sflush_r+0xda>
 8004e32:	bf00      	nop
 8004e34:	20400001 	.word	0x20400001

08004e38 <_fflush_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	690b      	ldr	r3, [r1, #16]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	b1db      	cbz	r3, 8004e7a <_fflush_r+0x42>
 8004e42:	b118      	cbz	r0, 8004e4c <_fflush_r+0x14>
 8004e44:	6983      	ldr	r3, [r0, #24]
 8004e46:	b90b      	cbnz	r3, 8004e4c <_fflush_r+0x14>
 8004e48:	f7ff fa8e 	bl	8004368 <__sinit>
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <_fflush_r+0x48>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d109      	bne.n	8004e66 <_fflush_r+0x2e>
 8004e52:	686c      	ldr	r4, [r5, #4]
 8004e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e58:	b17b      	cbz	r3, 8004e7a <_fflush_r+0x42>
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e62:	f7ff bf63 	b.w	8004d2c <__sflush_r>
 8004e66:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <_fflush_r+0x4c>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	d101      	bne.n	8004e70 <_fflush_r+0x38>
 8004e6c:	68ac      	ldr	r4, [r5, #8]
 8004e6e:	e7f1      	b.n	8004e54 <_fflush_r+0x1c>
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <_fflush_r+0x50>)
 8004e72:	429c      	cmp	r4, r3
 8004e74:	bf08      	it	eq
 8004e76:	68ec      	ldreq	r4, [r5, #12]
 8004e78:	e7ec      	b.n	8004e54 <_fflush_r+0x1c>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	bd38      	pop	{r3, r4, r5, pc}
 8004e7e:	bf00      	nop
 8004e80:	08005124 	.word	0x08005124
 8004e84:	08005144 	.word	0x08005144
 8004e88:	08005104 	.word	0x08005104

08004e8c <_lseek_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	4c07      	ldr	r4, [pc, #28]	; (8004eac <_lseek_r+0x20>)
 8004e90:	4605      	mov	r5, r0
 8004e92:	4608      	mov	r0, r1
 8004e94:	4611      	mov	r1, r2
 8004e96:	2200      	movs	r2, #0
 8004e98:	6022      	str	r2, [r4, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f7fb fdd9 	bl	8000a52 <_lseek>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_lseek_r+0x1e>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_lseek_r+0x1e>
 8004ea8:	602b      	str	r3, [r5, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	200045e0 	.word	0x200045e0

08004eb0 <__swhatbuf_r>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	460e      	mov	r6, r1
 8004eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	b096      	sub	sp, #88	; 0x58
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	461d      	mov	r5, r3
 8004ec0:	da07      	bge.n	8004ed2 <__swhatbuf_r+0x22>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	89b3      	ldrh	r3, [r6, #12]
 8004ec8:	061a      	lsls	r2, r3, #24
 8004eca:	d410      	bmi.n	8004eee <__swhatbuf_r+0x3e>
 8004ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed0:	e00e      	b.n	8004ef0 <__swhatbuf_r+0x40>
 8004ed2:	466a      	mov	r2, sp
 8004ed4:	f000 f8b2 	bl	800503c <_fstat_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dbf2      	blt.n	8004ec2 <__swhatbuf_r+0x12>
 8004edc:	9a01      	ldr	r2, [sp, #4]
 8004ede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ee6:	425a      	negs	r2, r3
 8004ee8:	415a      	adcs	r2, r3
 8004eea:	602a      	str	r2, [r5, #0]
 8004eec:	e7ee      	b.n	8004ecc <__swhatbuf_r+0x1c>
 8004eee:	2340      	movs	r3, #64	; 0x40
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	b016      	add	sp, #88	; 0x58
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}

08004ef8 <__smakebuf_r>:
 8004ef8:	898b      	ldrh	r3, [r1, #12]
 8004efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004efc:	079d      	lsls	r5, r3, #30
 8004efe:	4606      	mov	r6, r0
 8004f00:	460c      	mov	r4, r1
 8004f02:	d507      	bpl.n	8004f14 <__smakebuf_r+0x1c>
 8004f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	6123      	str	r3, [r4, #16]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	6163      	str	r3, [r4, #20]
 8004f10:	b002      	add	sp, #8
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	ab01      	add	r3, sp, #4
 8004f16:	466a      	mov	r2, sp
 8004f18:	f7ff ffca 	bl	8004eb0 <__swhatbuf_r>
 8004f1c:	9900      	ldr	r1, [sp, #0]
 8004f1e:	4605      	mov	r5, r0
 8004f20:	4630      	mov	r0, r6
 8004f22:	f7ff faab 	bl	800447c <_malloc_r>
 8004f26:	b948      	cbnz	r0, 8004f3c <__smakebuf_r+0x44>
 8004f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2c:	059a      	lsls	r2, r3, #22
 8004f2e:	d4ef      	bmi.n	8004f10 <__smakebuf_r+0x18>
 8004f30:	f023 0303 	bic.w	r3, r3, #3
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	81a3      	strh	r3, [r4, #12]
 8004f3a:	e7e3      	b.n	8004f04 <__smakebuf_r+0xc>
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <__smakebuf_r+0x7c>)
 8004f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	6020      	str	r0, [r4, #0]
 8004f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f48:	81a3      	strh	r3, [r4, #12]
 8004f4a:	9b00      	ldr	r3, [sp, #0]
 8004f4c:	6163      	str	r3, [r4, #20]
 8004f4e:	9b01      	ldr	r3, [sp, #4]
 8004f50:	6120      	str	r0, [r4, #16]
 8004f52:	b15b      	cbz	r3, 8004f6c <__smakebuf_r+0x74>
 8004f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f000 f881 	bl	8005060 <_isatty_r>
 8004f5e:	b128      	cbz	r0, 8004f6c <__smakebuf_r+0x74>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	89a3      	ldrh	r3, [r4, #12]
 8004f6e:	431d      	orrs	r5, r3
 8004f70:	81a5      	strh	r5, [r4, #12]
 8004f72:	e7cd      	b.n	8004f10 <__smakebuf_r+0x18>
 8004f74:	08004331 	.word	0x08004331

08004f78 <__malloc_lock>:
 8004f78:	4770      	bx	lr

08004f7a <__malloc_unlock>:
 8004f7a:	4770      	bx	lr

08004f7c <_free_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4605      	mov	r5, r0
 8004f80:	2900      	cmp	r1, #0
 8004f82:	d045      	beq.n	8005010 <_free_r+0x94>
 8004f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f88:	1f0c      	subs	r4, r1, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	bfb8      	it	lt
 8004f8e:	18e4      	addlt	r4, r4, r3
 8004f90:	f7ff fff2 	bl	8004f78 <__malloc_lock>
 8004f94:	4a1f      	ldr	r2, [pc, #124]	; (8005014 <_free_r+0x98>)
 8004f96:	6813      	ldr	r3, [r2, #0]
 8004f98:	4610      	mov	r0, r2
 8004f9a:	b933      	cbnz	r3, 8004faa <_free_r+0x2e>
 8004f9c:	6063      	str	r3, [r4, #4]
 8004f9e:	6014      	str	r4, [r2, #0]
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa6:	f7ff bfe8 	b.w	8004f7a <__malloc_unlock>
 8004faa:	42a3      	cmp	r3, r4
 8004fac:	d90c      	bls.n	8004fc8 <_free_r+0x4c>
 8004fae:	6821      	ldr	r1, [r4, #0]
 8004fb0:	1862      	adds	r2, r4, r1
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	bf04      	itt	eq
 8004fb6:	681a      	ldreq	r2, [r3, #0]
 8004fb8:	685b      	ldreq	r3, [r3, #4]
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	bf04      	itt	eq
 8004fbe:	1852      	addeq	r2, r2, r1
 8004fc0:	6022      	streq	r2, [r4, #0]
 8004fc2:	6004      	str	r4, [r0, #0]
 8004fc4:	e7ec      	b.n	8004fa0 <_free_r+0x24>
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	b10a      	cbz	r2, 8004fd0 <_free_r+0x54>
 8004fcc:	42a2      	cmp	r2, r4
 8004fce:	d9fa      	bls.n	8004fc6 <_free_r+0x4a>
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	1858      	adds	r0, r3, r1
 8004fd4:	42a0      	cmp	r0, r4
 8004fd6:	d10b      	bne.n	8004ff0 <_free_r+0x74>
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	4401      	add	r1, r0
 8004fdc:	1858      	adds	r0, r3, r1
 8004fde:	4282      	cmp	r2, r0
 8004fe0:	6019      	str	r1, [r3, #0]
 8004fe2:	d1dd      	bne.n	8004fa0 <_free_r+0x24>
 8004fe4:	6810      	ldr	r0, [r2, #0]
 8004fe6:	6852      	ldr	r2, [r2, #4]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	4401      	add	r1, r0
 8004fec:	6019      	str	r1, [r3, #0]
 8004fee:	e7d7      	b.n	8004fa0 <_free_r+0x24>
 8004ff0:	d902      	bls.n	8004ff8 <_free_r+0x7c>
 8004ff2:	230c      	movs	r3, #12
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	e7d3      	b.n	8004fa0 <_free_r+0x24>
 8004ff8:	6820      	ldr	r0, [r4, #0]
 8004ffa:	1821      	adds	r1, r4, r0
 8004ffc:	428a      	cmp	r2, r1
 8004ffe:	bf04      	itt	eq
 8005000:	6811      	ldreq	r1, [r2, #0]
 8005002:	6852      	ldreq	r2, [r2, #4]
 8005004:	6062      	str	r2, [r4, #4]
 8005006:	bf04      	itt	eq
 8005008:	1809      	addeq	r1, r1, r0
 800500a:	6021      	streq	r1, [r4, #0]
 800500c:	605c      	str	r4, [r3, #4]
 800500e:	e7c7      	b.n	8004fa0 <_free_r+0x24>
 8005010:	bd38      	pop	{r3, r4, r5, pc}
 8005012:	bf00      	nop
 8005014:	2000458c 	.word	0x2000458c

08005018 <_read_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4c07      	ldr	r4, [pc, #28]	; (8005038 <_read_r+0x20>)
 800501c:	4605      	mov	r5, r0
 800501e:	4608      	mov	r0, r1
 8005020:	4611      	mov	r1, r2
 8005022:	2200      	movs	r2, #0
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	f7fb fccf 	bl	80009ca <_read>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_read_r+0x1e>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	b103      	cbz	r3, 8005036 <_read_r+0x1e>
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	200045e0 	.word	0x200045e0

0800503c <_fstat_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4c07      	ldr	r4, [pc, #28]	; (800505c <_fstat_r+0x20>)
 8005040:	2300      	movs	r3, #0
 8005042:	4605      	mov	r5, r0
 8005044:	4608      	mov	r0, r1
 8005046:	4611      	mov	r1, r2
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	f7fb fce7 	bl	8000a1c <_fstat>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	d102      	bne.n	8005058 <_fstat_r+0x1c>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	b103      	cbz	r3, 8005058 <_fstat_r+0x1c>
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	bd38      	pop	{r3, r4, r5, pc}
 800505a:	bf00      	nop
 800505c:	200045e0 	.word	0x200045e0

08005060 <_isatty_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4c06      	ldr	r4, [pc, #24]	; (800507c <_isatty_r+0x1c>)
 8005064:	2300      	movs	r3, #0
 8005066:	4605      	mov	r5, r0
 8005068:	4608      	mov	r0, r1
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	f7fb fce6 	bl	8000a3c <_isatty>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_isatty_r+0x1a>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	b103      	cbz	r3, 800507a <_isatty_r+0x1a>
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	200045e0 	.word	0x200045e0

08005080 <_init>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr

0800508c <_fini>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr
