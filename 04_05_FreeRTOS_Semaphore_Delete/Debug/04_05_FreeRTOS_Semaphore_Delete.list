
04_05_FreeRTOS_Semaphore_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a7c  08004a7c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a84  08004a84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004014  20000074  08004b00  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004088  08004b00  00024088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2f9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020f1  00000000  00000000  0002c39d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  0002e490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022143  00000000  00000000  0002f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008baa  00000000  00000000  0005161b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c82c3  00000000  00000000  0005a1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e8  00000000  00000000  00122504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800495c 	.word	0x0800495c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800495c 	.word	0x0800495c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	200000e4 	.word	0x200000e4

080005a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d013      	beq.n	80005e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00b      	beq.n	80005e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	e000      	b.n	80005d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f9      	beq.n	80005ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_write>:

#include <stdio.h>


int _write(int file,char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	int i=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x2a>
	ITM_SendChar((*ptr++));
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffc7 	bl	80005a4 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x16>
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <Light_lamp0>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void Light_lamp0()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <Light_lamp0+0x30>)
 800063c:	f000 fd24 	bl	8001088 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f001 ffce 	bl	80025e4 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064e:	4804      	ldr	r0, [pc, #16]	; (8000660 <Light_lamp0+0x30>)
 8000650:	f000 fd1a 	bl	8001088 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 8000654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000658:	f001 ffc4 	bl	80025e4 <vTaskDelay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020c00 	.word	0x40020c00

08000664 <TaskA>:


void TaskA(void const * argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  if(xSemaphoreTake(Sema,1000)!=NULL)
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <TaskA+0x58>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fbcf 	bl	8001e18 <xQueueSemaphoreTake>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00c      	beq.n	800069a <TaskA+0x36>
	  {
		  printf("Task A got Access\n");
 8000680:	480f      	ldr	r0, [pc, #60]	; (80006c0 <TaskA+0x5c>)
 8000682:	f003 fa97 	bl	8003bb4 <puts>
		  Light_lamp0();
 8000686:	f7ff ffd3 	bl	8000630 <Light_lamp0>
		  xSemaphoreGive( Sema );
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <TaskA+0x58>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	f001 fac6 	bl	8001c24 <xQueueGenericSend>
 8000698:	e002      	b.n	80006a0 <TaskA+0x3c>

	  }
	  else
	  {
		  printf("Task A failed to get Access\n");
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <TaskA+0x60>)
 800069c:	f003 fa8a 	bl	8003bb4 <puts>
	  }

	  vTaskDelay(300);
 80006a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006a4:	f001 ff9e 	bl	80025e4 <vTaskDelay>

	  vSemaphoreDelete(Sema);
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <TaskA+0x58>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fcbb 	bl	8002028 <vQueueDelete>
	  printf("Task is Deleted successfully");
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <TaskA+0x64>)
 80006b4:	f003 fa0a 	bl	8003acc <iprintf>
	  if(xSemaphoreTake(Sema,1000)!=NULL)
 80006b8:	e7d8      	b.n	800066c <TaskA+0x8>
 80006ba:	bf00      	nop
 80006bc:	2000403c 	.word	0x2000403c
 80006c0:	08004974 	.word	0x08004974
 80006c4:	08004988 	.word	0x08004988
 80006c8:	080049a4 	.word	0x080049a4

080006cc <main>:

}


int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af02      	add	r7, sp, #8

  HAL_Init();
 80006d2:	f000 f9e7 	bl	8000aa4 <HAL_Init>
  SystemClock_Config();
 80006d6:	f000 f81b 	bl	8000710 <SystemClock_Config>
  MX_GPIO_Init();
 80006da:	f000 f877 	bl	80007cc <MX_GPIO_Init>

  xTaskCreate(TaskA,"Task a",128,NULL,1,NULL);
 80006de:	2300      	movs	r3, #0
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	2301      	movs	r3, #1
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2300      	movs	r3, #0
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	4906      	ldr	r1, [pc, #24]	; (8000704 <main+0x38>)
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <main+0x3c>)
 80006ee:	f001 fe43 	bl	8002378 <xTaskCreate>

  Sema =xSemaphoreCreateMutex();
 80006f2:	2001      	movs	r0, #1
 80006f4:	f001 fa7e 	bl	8001bf4 <xQueueCreateMutex>
 80006f8:	4602      	mov	r2, r0
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <main+0x40>)
 80006fc:	601a      	str	r2, [r3, #0]

  vTaskStartScheduler();
 80006fe:	f001 ffa5 	bl	800264c <vTaskStartScheduler>
  while (1)
 8000702:	e7fe      	b.n	8000702 <main+0x36>
 8000704:	080049c4 	.word	0x080049c4
 8000708:	08000665 	.word	0x08000665
 800070c:	2000403c 	.word	0x2000403c

08000710 <SystemClock_Config>:
  {	}

}

void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	; 0x50
 8000714:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2230      	movs	r2, #48	; 0x30
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f9cb 	bl	8003aba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xb4>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xb4>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xb4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <SystemClock_Config+0xb8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <SystemClock_Config+0xb8>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <SystemClock_Config+0xb8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fc9b 	bl	80010bc <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800078c:	f000 f870 	bl	8000870 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fef6 	bl	800159c <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007b6:	f000 f85b 	bl	8000870 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_GPIO_Init+0x9c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <MX_GPIO_Init+0x9c>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_GPIO_Init+0x9c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800083c:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_GPIO_Init+0xa0>)
 800083e:	f000 fc23 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000842:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xa0>)
 800085c:	f000 fa7a 	bl	8000d54 <HAL_GPIO_Init>

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020c00 	.word	0x40020c00

08000870 <Error_Handler>:

void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	e7fe      	b.n	8000876 <Error_Handler+0x6>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_MspInit+0x54>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_MspInit+0x54>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_MspInit+0x54>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_MspInit+0x54>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	210f      	movs	r1, #15
 80008ba:	f06f 0001 	mvn.w	r0, #1
 80008be:	f000 fa20 	bl	8000d02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000900:	f000 f922 	bl	8000b48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000904:	f002 fa96 	bl	8002e34 <xTaskGetSchedulerState>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d001      	beq.n	8000912 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800090e:	f002 fe7b 	bl	8003608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}

08000916 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e00a      	b.n	800093e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000928:	f3af 8000 	nop.w
 800092c:	4601      	mov	r1, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	60ba      	str	r2, [r7, #8]
 8000934:	b2ca      	uxtb	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	3301      	adds	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	dbf0      	blt.n	8000928 <_read+0x12>
	}

return len;
 8000946:	687b      	ldr	r3, [r7, #4]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	return -1;
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000978:	605a      	str	r2, [r3, #4]
	return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_isatty>:

int _isatty(int file)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	return 1;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800099e:	b480      	push	{r7}
 80009a0:	b085      	sub	sp, #20
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
	return 0;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <_sbrk+0x5c>)
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <_sbrk+0x60>)
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d102      	bne.n	80009da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <_sbrk+0x64>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <_sbrk+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e8:	f003 f832 	bl	8003a50 <__errno>
 80009ec:	4602      	mov	r2, r0
 80009ee:	230c      	movs	r3, #12
 80009f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <_sbrk+0x64>)
 8000a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20020000 	.word	0x20020000
 8000a18:	00000400 	.word	0x00000400
 8000a1c:	200002e4 	.word	0x200002e4
 8000a20:	20004088 	.word	0x20004088

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <SystemInit+0x28>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <SystemInit+0x28>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SystemInit+0x28>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
  ldr  r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd3 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f002 ffed 	bl	8003a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fe23 	bl	80006cc <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a8c:	08004a8c 	.word	0x08004a8c
  ldr  r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a94:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000a98:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000a9c:	20004088 	.word	0x20004088

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f90d 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fece 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f917 	bl	8000d3a <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	f000 f8ed 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20004040 	.word	0x20004040

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20004040 	.word	0x20004040

08000b88 <__NVIC_SetPriorityGrouping>:
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_SetPriority>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff47 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff5c 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff8e 	bl	8000c40 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffb0 	bl	8000ca8 <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	e16b      	b.n	8001048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	f040 815a 	bne.w	8001042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d00b      	beq.n	8000dae <HAL_GPIO_Init+0x5a>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d007      	beq.n	8000dae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da2:	2b11      	cmp	r3, #17
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d130      	bne.n	8000e10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	f003 0201 	and.w	r2, r3, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0xfc>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b12      	cmp	r3, #18
 8000e4e:	d123      	bne.n	8000e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	691a      	ldr	r2, [r3, #16]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0203 	and.w	r2, r3, #3
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80b4 	beq.w	8001042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b5f      	ldr	r3, [pc, #380]	; (800105c <HAL_GPIO_Init+0x308>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a5e      	ldr	r2, [pc, #376]	; (800105c <HAL_GPIO_Init+0x308>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b5c      	ldr	r3, [pc, #368]	; (800105c <HAL_GPIO_Init+0x308>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef6:	4a5a      	ldr	r2, [pc, #360]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	3302      	adds	r3, #2
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a51      	ldr	r2, [pc, #324]	; (8001064 <HAL_GPIO_Init+0x310>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d02b      	beq.n	8000f7a <HAL_GPIO_Init+0x226>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a50      	ldr	r2, [pc, #320]	; (8001068 <HAL_GPIO_Init+0x314>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d025      	beq.n	8000f76 <HAL_GPIO_Init+0x222>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_GPIO_Init+0x318>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d01f      	beq.n	8000f72 <HAL_GPIO_Init+0x21e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4e      	ldr	r2, [pc, #312]	; (8001070 <HAL_GPIO_Init+0x31c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x21a>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4d      	ldr	r2, [pc, #308]	; (8001074 <HAL_GPIO_Init+0x320>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x216>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4c      	ldr	r2, [pc, #304]	; (8001078 <HAL_GPIO_Init+0x324>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x212>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4b      	ldr	r2, [pc, #300]	; (800107c <HAL_GPIO_Init+0x328>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x20e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <HAL_GPIO_Init+0x32c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x20a>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00e      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f5e:	2308      	movs	r3, #8
 8000f60:	e00c      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00a      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f66:	2305      	movs	r3, #5
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x228>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4934      	ldr	r1, [pc, #208]	; (8001060 <HAL_GPIO_Init+0x30c>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fbe:	4a31      	ldr	r2, [pc, #196]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe8:	4a26      	ldr	r2, [pc, #152]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <HAL_GPIO_Init+0x330>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <HAL_GPIO_Init+0x330>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <HAL_GPIO_Init+0x330>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800103c:	4a11      	ldr	r2, [pc, #68]	; (8001084 <HAL_GPIO_Init+0x330>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f ae90 	bls.w	8000d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	3724      	adds	r7, #36	; 0x24
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40023800 	.word	0x40023800
 8001060:	40013800 	.word	0x40013800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40021400 	.word	0x40021400
 800107c:	40021800 	.word	0x40021800
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40013c00 	.word	0x40013c00

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a4:	e003      	b.n	80010ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e25b      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d075      	beq.n	80011c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010da:	4ba3      	ldr	r3, [pc, #652]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d00c      	beq.n	8001100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d112      	bne.n	8001118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f2:	4b9d      	ldr	r3, [pc, #628]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010fe:	d10b      	bne.n	8001118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d05b      	beq.n	80011c4 <HAL_RCC_OscConfig+0x108>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d157      	bne.n	80011c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e236      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d106      	bne.n	8001130 <HAL_RCC_OscConfig+0x74>
 8001122:	4b91      	ldr	r3, [pc, #580]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a90      	ldr	r2, [pc, #576]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e01d      	b.n	800116c <HAL_RCC_OscConfig+0xb0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x98>
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a8a      	ldr	r2, [pc, #552]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a87      	ldr	r2, [pc, #540]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e00b      	b.n	800116c <HAL_RCC_OscConfig+0xb0>
 8001154:	4b84      	ldr	r3, [pc, #528]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a83      	ldr	r2, [pc, #524]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a80      	ldr	r2, [pc, #512]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fcfc 	bl	8000b70 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fcf8 	bl	8000b70 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1fb      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0xc0>
 800119a:	e014      	b.n	80011c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119c:	f7ff fce8 	bl	8000b70 <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fce4 	bl	8000b70 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1e7      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b6c      	ldr	r3, [pc, #432]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0xe8>
 80011c2:	e000      	b.n	80011c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d063      	beq.n	800129a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d2:	4b65      	ldr	r3, [pc, #404]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011de:	4b62      	ldr	r3, [pc, #392]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d11c      	bne.n	8001224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	4b5f      	ldr	r3, [pc, #380]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d116      	bne.n	8001224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x152>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e1bb      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120e:	4b56      	ldr	r3, [pc, #344]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4952      	ldr	r1, [pc, #328]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	e03a      	b.n	800129a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122c:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_RCC_OscConfig+0x2b0>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff fc9d 	bl	8000b70 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fc99 	bl	8000b70 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e19c      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124c:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4940      	ldr	r1, [pc, #256]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_RCC_OscConfig+0x2b0>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fc7c 	bl	8000b70 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127c:	f7ff fc78 	bl	8000b70 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e17b      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d030      	beq.n	8001308 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d016      	beq.n	80012dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_RCC_OscConfig+0x2b4>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b4:	f7ff fc5c 	bl	8000b70 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc58 	bl	8000b70 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e15b      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x200>
 80012da:	e015      	b.n	8001308 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <HAL_RCC_OscConfig+0x2b4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fc45 	bl	8000b70 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fc41 	bl	8000b70 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e144      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f0      	bne.n	80012ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a0 	beq.w	8001456 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d121      	bne.n	8001396 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_RCC_OscConfig+0x2b8>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fc07 	bl	8000b70 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e011      	b.n	800138a <HAL_RCC_OscConfig+0x2ce>
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	42470000 	.word	0x42470000
 8001370:	42470e80 	.word	0x42470e80
 8001374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001378:	f7ff fbfa 	bl	8000b70 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e0fd      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <HAL_RCC_OscConfig+0x4d4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x2f0>
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a7c      	ldr	r2, [pc, #496]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	e01c      	b.n	80013e6 <HAL_RCC_OscConfig+0x32a>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x312>
 80013b4:	4b77      	ldr	r3, [pc, #476]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	4a76      	ldr	r2, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6713      	str	r3, [r2, #112]	; 0x70
 80013c0:	4b74      	ldr	r3, [pc, #464]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a73      	ldr	r2, [pc, #460]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x32a>
 80013ce:	4b71      	ldr	r3, [pc, #452]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d2:	4a70      	ldr	r2, [pc, #448]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6713      	str	r3, [r2, #112]	; 0x70
 80013da:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a6d      	ldr	r2, [pc, #436]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d015      	beq.n	800141a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff fbbf 	bl	8000b70 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fbbb 	bl	8000b70 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0bc      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ee      	beq.n	80013f6 <HAL_RCC_OscConfig+0x33a>
 8001418:	e014      	b.n	8001444 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fba9 	bl	8000b70 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff fba5 	bl	8000b70 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0a6      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001438:	4b56      	ldr	r3, [pc, #344]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ee      	bne.n	8001422 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8092 	beq.w	8001584 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001460:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	2b08      	cmp	r3, #8
 800146a:	d05c      	beq.n	8001526 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d141      	bne.n	80014f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b48      	ldr	r3, [pc, #288]	; (8001598 <HAL_RCC_OscConfig+0x4dc>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb79 	bl	8000b70 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb75 	bl	8000b70 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e078      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	3b01      	subs	r3, #1
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	061b      	lsls	r3, r3, #24
 80014c4:	4933      	ldr	r1, [pc, #204]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_RCC_OscConfig+0x4dc>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb4e 	bl	8000b70 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb4a 	bl	8000b70 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e04d      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x41c>
 80014f6:	e045      	b.n	8001584 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb37 	bl	8000b70 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb33 	bl	8000b70 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e036      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x44a>
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e029      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_RCC_OscConfig+0x4d8>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	429a      	cmp	r2, r3
 8001544:	d11c      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d115      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800155a:	4013      	ands	r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001560:	4293      	cmp	r3, r2
 8001562:	d10d      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d106      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40007000 	.word	0x40007000
 8001594:	40023800 	.word	0x40023800
 8001598:	42470060 	.word	0x42470060

0800159c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0cc      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d90c      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b63      	ldr	r3, [pc, #396]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b8      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	4b59      	ldr	r3, [pc, #356]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001608:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a52      	ldr	r2, [pc, #328]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b50      	ldr	r3, [pc, #320]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	494d      	ldr	r1, [pc, #308]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d044      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d119      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e07f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d003      	beq.n	800165a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e067      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4934      	ldr	r1, [pc, #208]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fa70 	bl	8000b70 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff fa6c 	bl	8000b70 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e04f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d20c      	bcs.n	80016e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e032      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4916      	ldr	r1, [pc, #88]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001722:	f000 f821 	bl	8001768 <HAL_RCC_GetSysClockFreq>
 8001726:	4601      	mov	r1, r0
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	5cd3      	ldrb	r3, [r2, r3]
 8001736:	fa21 f303 	lsr.w	r3, r1, r3
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f9d0 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00
 8001758:	40023800 	.word	0x40023800
 800175c:	080049d4 	.word	0x080049d4
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b04      	cmp	r3, #4
 8001788:	d007      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x32>
 800178a:	2b08      	cmp	r3, #8
 800178c:	d008      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x38>
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 808d 	bne.w	80018ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001796:	60bb      	str	r3, [r7, #8]
       break;
 8001798:	e08c      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800179c:	60bb      	str	r3, [r7, #8]
      break;
 800179e:	e089      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d023      	beq.n	80017fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	ea03 0501 	and.w	r5, r3, r1
 80017cc:	ea04 0602 	and.w	r6, r4, r2
 80017d0:	4a3d      	ldr	r2, [pc, #244]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017d2:	fb02 f106 	mul.w	r1, r2, r6
 80017d6:	2200      	movs	r2, #0
 80017d8:	fb02 f205 	mul.w	r2, r2, r5
 80017dc:	440a      	add	r2, r1
 80017de:	493a      	ldr	r1, [pc, #232]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80017e0:	fba5 0101 	umull	r0, r1, r5, r1
 80017e4:	1853      	adds	r3, r2, r1
 80017e6:	4619      	mov	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4623      	mov	r3, r4
 80017f2:	f7fe fd3d 	bl	8000270 <__aeabi_uldivmod>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e049      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	f04f 0400 	mov.w	r4, #0
 8001808:	f240 11ff 	movw	r1, #511	; 0x1ff
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	ea03 0501 	and.w	r5, r3, r1
 8001814:	ea04 0602 	and.w	r6, r4, r2
 8001818:	4629      	mov	r1, r5
 800181a:	4632      	mov	r2, r6
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f04f 0400 	mov.w	r4, #0
 8001824:	0154      	lsls	r4, r2, #5
 8001826:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800182a:	014b      	lsls	r3, r1, #5
 800182c:	4619      	mov	r1, r3
 800182e:	4622      	mov	r2, r4
 8001830:	1b49      	subs	r1, r1, r5
 8001832:	eb62 0206 	sbc.w	r2, r2, r6
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	f04f 0400 	mov.w	r4, #0
 800183e:	0194      	lsls	r4, r2, #6
 8001840:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001844:	018b      	lsls	r3, r1, #6
 8001846:	1a5b      	subs	r3, r3, r1
 8001848:	eb64 0402 	sbc.w	r4, r4, r2
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	00e2      	lsls	r2, r4, #3
 8001856:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800185a:	00d9      	lsls	r1, r3, #3
 800185c:	460b      	mov	r3, r1
 800185e:	4614      	mov	r4, r2
 8001860:	195b      	adds	r3, r3, r5
 8001862:	eb44 0406 	adc.w	r4, r4, r6
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	02a2      	lsls	r2, r4, #10
 8001870:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001874:	0299      	lsls	r1, r3, #10
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	4618      	mov	r0, r3
 800187c:	4621      	mov	r1, r4
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	f7fe fcf2 	bl	8000270 <__aeabi_uldivmod>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	3301      	adds	r3, #1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	60bb      	str	r3, [r7, #8]
      break;
 80018ac:	e002      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018b0:	60bb      	str	r3, [r7, #8]
      break;
 80018b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b4:	68bb      	ldr	r3, [r7, #8]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400
 80018c8:	017d7840 	.word	0x017d7840

080018cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f103 0208 	add.w	r2, r3, #8
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f103 0208 	add.w	r2, r3, #8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f103 0208 	add.w	r2, r3, #8
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d103      	bne.n	800198e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e00c      	b.n	80019a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3308      	adds	r3, #8
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e002      	b.n	800199c <vListInsert+0x2e>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d2f6      	bcs.n	8001996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6892      	ldr	r2, [r2, #8]
 80019f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6852      	ldr	r2, [r2, #4]
 8001a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d103      	bne.n	8001a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1e5a      	subs	r2, r3, #1
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	e7fe      	b.n	8001a5a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001a5c:	f001 fd46 	bl	80034ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	441a      	add	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	68f9      	ldr	r1, [r7, #12]
 8001a90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	441a      	add	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	22ff      	movs	r2, #255	; 0xff
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	22ff      	movs	r2, #255	; 0xff
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d114      	bne.n	8001adc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3310      	adds	r3, #16
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 f802 	bl	8002ac8 <xTaskRemoveFromEventList>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <xQueueGenericReset+0xcc>)
 8001acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f3bf 8f4f 	dsb	sy
 8001ad6:	f3bf 8f6f 	isb	sy
 8001ada:	e009      	b.n	8001af0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3310      	adds	r3, #16
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fef3 	bl	80018cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3324      	adds	r3, #36	; 0x24
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff feee 	bl	80018cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001af0:	f001 fd2a 	bl	8003548 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001af4:	2301      	movs	r3, #1
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000ed04 	.word	0xe000ed04

08001b04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <xQueueGenericCreate+0x28>
 8001b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1c:	f383 8811 	msr	BASEPRI, r3
 8001b20:	f3bf 8f6f 	isb	sy
 8001b24:	f3bf 8f4f 	dsb	sy
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	e7fe      	b.n	8001b2a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e004      	b.n	8001b42 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3348      	adds	r3, #72	; 0x48
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fdac 	bl	80036a4 <pvPortMalloc>
 8001b4c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d011      	beq.n	8001b78 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3348      	adds	r3, #72	; 0x48
 8001b5c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b66:	79fa      	ldrb	r2, [r7, #7]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f805 	bl	8001b82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001b78:	69bb      	ldr	r3, [r7, #24]
	}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d103      	bne.n	8001b9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e002      	b.n	8001ba4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	69b8      	ldr	r0, [r7, #24]
 8001bb4:	f7ff ff3e 	bl	8001a34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00e      	beq.n	8001bec <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001be0:	2300      	movs	r3, #0
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f81c 	bl	8001c24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	6978      	ldr	r0, [r7, #20]
 8001c0e:	f7ff ff79 	bl	8001b04 <xQueueGenericCreate>
 8001c12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff ffd3 	bl	8001bc0 <prvInitialiseMutex>

		return xNewQueue;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
	}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08e      	sub	sp, #56	; 0x38
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <xQueueGenericSend+0x30>
 8001c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c44:	f383 8811 	msr	BASEPRI, r3
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c52:	e7fe      	b.n	8001c52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <xQueueGenericSend+0x3e>
 8001c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <xQueueGenericSend+0x42>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <xQueueGenericSend+0x44>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <xQueueGenericSend+0x5c>
 8001c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	e7fe      	b.n	8001c7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d103      	bne.n	8001c8e <xQueueGenericSend+0x6a>
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <xQueueGenericSend+0x6e>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <xQueueGenericSend+0x70>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <xQueueGenericSend+0x88>
 8001c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9c:	f383 8811 	msr	BASEPRI, r3
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	e7fe      	b.n	8001caa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cac:	f001 f8c2 	bl	8002e34 <xTaskGetSchedulerState>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <xQueueGenericSend+0x98>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <xQueueGenericSend+0x9c>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <xQueueGenericSend+0x9e>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <xQueueGenericSend+0xb6>
 8001cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cca:	f383 8811 	msr	BASEPRI, r3
 8001cce:	f3bf 8f6f 	isb	sy
 8001cd2:	f3bf 8f4f 	dsb	sy
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	e7fe      	b.n	8001cd8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cda:	f001 fc07 	bl	80034ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d302      	bcc.n	8001cf0 <xQueueGenericSend+0xcc>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d129      	bne.n	8001d44 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cf6:	f000 f9d1 	bl	800209c <prvCopyDataToQueue>
 8001cfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	3324      	adds	r3, #36	; 0x24
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 fedd 	bl	8002ac8 <xTaskRemoveFromEventList>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <xQueueGenericSend+0x1f0>)
 8001d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	e00a      	b.n	8001d3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <xQueueGenericSend+0x1f0>)
 8001d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001d3c:	f001 fc04 	bl	8003548 <vPortExitCritical>
				return pdPASS;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e063      	b.n	8001e0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d103      	bne.n	8001d52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d4a:	f001 fbfd 	bl	8003548 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e05c      	b.n	8001e0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d106      	bne.n	8001d66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 ff15 	bl	8002b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d62:	2301      	movs	r3, #1
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d66:	f001 fbef 	bl	8003548 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d6a:	f000 fccd 	bl	8002708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d6e:	f001 fbbd 	bl	80034ec <vPortEnterCritical>
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7e:	d103      	bne.n	8001d88 <xQueueGenericSend+0x164>
 8001d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d103      	bne.n	8001d9e <xQueueGenericSend+0x17a>
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d9e:	f001 fbd3 	bl	8003548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001da2:	1d3a      	adds	r2, r7, #4
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 ff04 	bl	8002bb8 <xTaskCheckForTimeOut>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d124      	bne.n	8001e00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001db8:	f000 fa42 	bl	8002240 <prvIsQueueFull>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d018      	beq.n	8001df4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	3310      	adds	r3, #16
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 fe58 	bl	8002a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dd2:	f000 f9cd 	bl	8002170 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001dd6:	f000 fca5 	bl	8002724 <xTaskResumeAll>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f af7c 	bne.w	8001cda <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <xQueueGenericSend+0x1f0>)
 8001de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	f3bf 8f4f 	dsb	sy
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	e772      	b.n	8001cda <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001df6:	f000 f9bb 	bl	8002170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001dfa:	f000 fc93 	bl	8002724 <xTaskResumeAll>
 8001dfe:	e76c      	b.n	8001cda <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e02:	f000 f9b5 	bl	8002170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e06:	f000 fc8d 	bl	8002724 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3738      	adds	r7, #56	; 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	e000ed04 	.word	0xe000ed04

08001e18 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08e      	sub	sp, #56	; 0x38
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d109      	bne.n	8001e48 <xQueueSemaphoreTake+0x30>
 8001e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	f3bf 8f6f 	isb	sy
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	623b      	str	r3, [r7, #32]
 8001e46:	e7fe      	b.n	8001e46 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <xQueueSemaphoreTake+0x4c>
 8001e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e54:	f383 8811 	msr	BASEPRI, r3
 8001e58:	f3bf 8f6f 	isb	sy
 8001e5c:	f3bf 8f4f 	dsb	sy
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e7fe      	b.n	8001e62 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e64:	f000 ffe6 	bl	8002e34 <xTaskGetSchedulerState>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <xQueueSemaphoreTake+0x5c>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <xQueueSemaphoreTake+0x60>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <xQueueSemaphoreTake+0x62>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <xQueueSemaphoreTake+0x7a>
 8001e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	e7fe      	b.n	8001e90 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e92:	f001 fb2b 	bl	80034ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d024      	beq.n	8001eec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001eb2:	f001 f979 	bl	80031a8 <pvTaskIncrementMutexHeldCount>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00f      	beq.n	8001ee4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fdfd 	bl	8002ac8 <xTaskRemoveFromEventList>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <xQueueSemaphoreTake+0x20c>)
 8001ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001ee4:	f001 fb30 	bl	8003548 <vPortExitCritical>
				return pdPASS;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e096      	b.n	800201a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d110      	bne.n	8001f14 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <xQueueSemaphoreTake+0xf4>
 8001ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e7fe      	b.n	8001f0a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001f0c:	f001 fb1c 	bl	8003548 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e082      	b.n	800201a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fe34 	bl	8002b8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f28:	f001 fb0e 	bl	8003548 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f2c:	f000 fbec 	bl	8002708 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f30:	f001 fadc 	bl	80034ec <vPortEnterCritical>
 8001f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f3a:	b25b      	sxtb	r3, r3
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d103      	bne.n	8001f4a <xQueueSemaphoreTake+0x132>
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f56:	d103      	bne.n	8001f60 <xQueueSemaphoreTake+0x148>
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f60:	f001 faf2 	bl	8003548 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f64:	463a      	mov	r2, r7
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fe23 	bl	8002bb8 <xTaskCheckForTimeOut>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d132      	bne.n	8001fde <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f7a:	f000 f94b 	bl	8002214 <prvIsQueueEmpty>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d026      	beq.n	8001fd2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8001f8c:	f001 faae 	bl	80034ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 ff6b 	bl	8002e70 <xTaskPriorityInherit>
 8001f9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001f9c:	f001 fad4 	bl	8003548 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa2:	3324      	adds	r3, #36	; 0x24
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fd69 	bl	8002a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fb0:	f000 f8de 	bl	8002170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001fb4:	f000 fbb6 	bl	8002724 <xTaskResumeAll>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f47f af69 	bne.w	8001e92 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <xQueueSemaphoreTake+0x20c>)
 8001fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	e75f      	b.n	8001e92 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001fd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fd4:	f000 f8cc 	bl	8002170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001fd8:	f000 fba4 	bl	8002724 <xTaskResumeAll>
 8001fdc:	e759      	b.n	8001e92 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fe0:	f000 f8c6 	bl	8002170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fe4:	f000 fb9e 	bl	8002724 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fea:	f000 f913 	bl	8002214 <prvIsQueueEmpty>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f43f af4e 	beq.w	8001e92 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001ffc:	f001 fa76 	bl	80034ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002002:	f000 f833 	bl	800206c <prvGetDisinheritPriorityAfterTimeout>
 8002006:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200e:	4618      	mov	r0, r3
 8002010:	f001 f832 	bl	8003078 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002014:	f001 fa98 	bl	8003548 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800201a:	4618      	mov	r0, r3
 800201c:	3738      	adds	r7, #56	; 0x38
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <vQueueDelete+0x26>
 800203a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	e7fe      	b.n	800204c <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f90e 	bl	8002270 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f001 fbe2 	bl	8003828 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e001      	b.n	800208e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800208e:	68fb      	ldr	r3, [r7, #12]
	}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10d      	bne.n	80020d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d14d      	bne.n	800215e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ff52 	bl	8002f70 <xTaskPriorityDisinherit>
 80020cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e043      	b.n	800215e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d119      	bne.n	8002110 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6858      	ldr	r0, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	461a      	mov	r2, r3
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	f001 fcdc 	bl	8003aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	441a      	add	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	429a      	cmp	r2, r3
 8002104:	d32b      	bcc.n	800215e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e026      	b.n	800215e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68d8      	ldr	r0, [r3, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	461a      	mov	r2, r3
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	f001 fcc2 	bl	8003aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	425b      	negs	r3, r3
 800212a:	441a      	add	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	425b      	negs	r3, r3
 8002146:	441a      	add	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d105      	bne.n	800215e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	3b01      	subs	r3, #1
 800215c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002166:	697b      	ldr	r3, [r7, #20]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002178:	f001 f9b8 	bl	80034ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002182:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002184:	e011      	b.n	80021aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3324      	adds	r3, #36	; 0x24
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fc98 	bl	8002ac8 <xTaskRemoveFromEventList>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800219e:	f000 fd6b 	bl	8002c78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	dce9      	bgt.n	8002186 <prvUnlockQueue+0x16>
 80021b2:	e000      	b.n	80021b6 <prvUnlockQueue+0x46>
					break;
 80021b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80021be:	f001 f9c3 	bl	8003548 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80021c2:	f001 f993 	bl	80034ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ce:	e011      	b.n	80021f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d012      	beq.n	80021fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3310      	adds	r3, #16
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fc73 	bl	8002ac8 <xTaskRemoveFromEventList>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80021e8:	f000 fd46 	bl	8002c78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80021ec:	7bbb      	ldrb	r3, [r7, #14]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	dce9      	bgt.n	80021d0 <prvUnlockQueue+0x60>
 80021fc:	e000      	b.n	8002200 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80021fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002208:	f001 f99e 	bl	8003548 <vPortExitCritical>
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800221c:	f001 f966 	bl	80034ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002228:	2301      	movs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e001      	b.n	8002232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002232:	f001 f989 	bl	8003548 <vPortExitCritical>

	return xReturn;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002248:	f001 f950 	bl	80034ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	429a      	cmp	r2, r3
 8002256:	d102      	bne.n	800225e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002258:	2301      	movs	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e001      	b.n	8002262 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002262:	f001 f971 	bl	8003548 <vPortExitCritical>

	return xReturn;
 8002266:	68fb      	ldr	r3, [r7, #12]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e016      	b.n	80022ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <vQueueUnregisterQueue+0x50>)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	429a      	cmp	r2, r3
 800228c:	d10b      	bne.n	80022a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <vQueueUnregisterQueue+0x50>)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2100      	movs	r1, #0
 8002294:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002298:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <vQueueUnregisterQueue+0x50>)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
				break;
 80022a4:	e005      	b.n	80022b2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3301      	adds	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b07      	cmp	r3, #7
 80022b0:	d9e5      	bls.n	800227e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20004044 	.word	0x20004044

080022c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08e      	sub	sp, #56	; 0x38
 80022c8:	af04      	add	r7, sp, #16
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <xTaskCreateStatic+0x28>
 80022d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	e7fe      	b.n	80022ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <xTaskCreateStatic+0x42>
 80022f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	e7fe      	b.n	8002304 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002306:	2354      	movs	r3, #84	; 0x54
 8002308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b54      	cmp	r3, #84	; 0x54
 800230e:	d009      	beq.n	8002324 <xTaskCreateStatic+0x60>
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	e7fe      	b.n	8002322 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002324:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01e      	beq.n	800236a <xTaskCreateStatic+0xa6>
 800232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01b      	beq.n	800236a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800233a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002344:	2300      	movs	r3, #0
 8002346:	9303      	str	r3, [sp, #12]
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f850 	bl	8002402 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002364:	f000 f8d4 	bl	8002510 <prvAddNewTaskToReadyList>
 8002368:	e001      	b.n	800236e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800236e:	697b      	ldr	r3, [r7, #20]
	}
 8002370:	4618      	mov	r0, r3
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08c      	sub	sp, #48	; 0x30
 800237c:	af04      	add	r7, sp, #16
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4618      	mov	r0, r3
 800238e:	f001 f989 	bl	80036a4 <pvPortMalloc>
 8002392:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00e      	beq.n	80023b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800239a:	2054      	movs	r0, #84	; 0x54
 800239c:	f001 f982 	bl	80036a4 <pvPortMalloc>
 80023a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
 80023ae:	e005      	b.n	80023bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80023b0:	6978      	ldr	r0, [r7, #20]
 80023b2:	f001 fa39 	bl	8003828 <vPortFree>
 80023b6:	e001      	b.n	80023bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d017      	beq.n	80023f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	2300      	movs	r3, #0
 80023ce:	9303      	str	r3, [sp, #12]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f80e 	bl	8002402 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023e6:	69f8      	ldr	r0, [r7, #28]
 80023e8:	f000 f892 	bl	8002510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80023ec:	2301      	movs	r3, #1
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e002      	b.n	80023f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023f8:	69bb      	ldr	r3, [r7, #24]
	}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800241a:	3b01      	subs	r3, #1
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f023 0307 	bic.w	r3, r3, #7
 8002428:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <prvInitialiseNewTask+0x46>
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e7fe      	b.n	8002446 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01f      	beq.n	800248e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e012      	b.n	800247a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	7819      	ldrb	r1, [r3, #0]
 800245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	3334      	adds	r3, #52	; 0x34
 8002464:	460a      	mov	r2, r1
 8002466:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	3301      	adds	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d9e9      	bls.n	8002454 <prvInitialiseNewTask+0x52>
 8002480:	e000      	b.n	8002484 <prvInitialiseNewTask+0x82>
			{
				break;
 8002482:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800248c:	e003      	b.n	8002496 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	2b06      	cmp	r3, #6
 800249a:	d901      	bls.n	80024a0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800249c:	2306      	movs	r3, #6
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	2200      	movs	r2, #0
 80024b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	3304      	adds	r3, #4
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa28 	bl	800190c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	3318      	adds	r3, #24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fa23 	bl	800190c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	f1c3 0207 	rsb	r2, r3, #7
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	2200      	movs	r2, #0
 80024e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	68f9      	ldr	r1, [r7, #12]
 80024ee:	69b8      	ldr	r0, [r7, #24]
 80024f0:	f000 fed4 	bl	800329c <pxPortInitialiseStack>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002506:	bf00      	nop
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002518:	f000 ffe8 	bl	80034ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <prvAddNewTaskToReadyList+0xb8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <prvAddNewTaskToReadyList+0xb8>)
 8002524:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <prvAddNewTaskToReadyList+0xbc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800252e:	4a27      	ldr	r2, [pc, #156]	; (80025cc <prvAddNewTaskToReadyList+0xbc>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <prvAddNewTaskToReadyList+0xb8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d110      	bne.n	800255e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800253c:	f000 fbc0 	bl	8002cc0 <prvInitialiseTaskLists>
 8002540:	e00d      	b.n	800255e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <prvAddNewTaskToReadyList+0xc0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <prvAddNewTaskToReadyList+0xbc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	429a      	cmp	r2, r3
 8002556:	d802      	bhi.n	800255e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002558:	4a1c      	ldr	r2, [pc, #112]	; (80025cc <prvAddNewTaskToReadyList+0xbc>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <prvAddNewTaskToReadyList+0xc4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <prvAddNewTaskToReadyList+0xc4>)
 8002566:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	2201      	movs	r2, #1
 800256e:	409a      	lsls	r2, r3
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <prvAddNewTaskToReadyList+0xc8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <prvAddNewTaskToReadyList+0xc8>)
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <prvAddNewTaskToReadyList+0xcc>)
 8002588:	441a      	add	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7ff f9c8 	bl	8001926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002596:	f000 ffd7 	bl	8003548 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <prvAddNewTaskToReadyList+0xc0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <prvAddNewTaskToReadyList+0xbc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d207      	bcs.n	80025c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <prvAddNewTaskToReadyList+0xd0>)
 80025b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200003e8 	.word	0x200003e8
 80025cc:	200002e8 	.word	0x200002e8
 80025d0:	200003f4 	.word	0x200003f4
 80025d4:	20000404 	.word	0x20000404
 80025d8:	200003f0 	.word	0x200003f0
 80025dc:	200002ec 	.word	0x200002ec
 80025e0:	e000ed04 	.word	0xe000ed04

080025e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d016      	beq.n	8002624 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <vTaskDelay+0x60>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <vTaskDelay+0x2e>
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	e7fe      	b.n	8002610 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002612:	f000 f879 	bl	8002708 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002616:	2100      	movs	r1, #0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fdd9 	bl	80031d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800261e:	f000 f881 	bl	8002724 <xTaskResumeAll>
 8002622:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <vTaskDelay+0x64>)
 800262c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000410 	.word	0x20000410
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800265a:	463a      	mov	r2, r7
 800265c:	1d39      	adds	r1, r7, #4
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff84 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	9202      	str	r2, [sp, #8]
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	460a      	mov	r2, r1
 800267a:	491d      	ldr	r1, [pc, #116]	; (80026f0 <vTaskStartScheduler+0xa4>)
 800267c:	481d      	ldr	r0, [pc, #116]	; (80026f4 <vTaskStartScheduler+0xa8>)
 800267e:	f7ff fe21 	bl	80022c4 <xTaskCreateStatic>
 8002682:	4602      	mov	r2, r0
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <vTaskStartScheduler+0xac>)
 8002686:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <vTaskStartScheduler+0xac>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e001      	b.n	800269a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d115      	bne.n	80026cc <vTaskStartScheduler+0x80>
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <vTaskStartScheduler+0xb0>)
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <vTaskStartScheduler+0xb4>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <vTaskStartScheduler+0xb8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026c6:	f000 fe73 	bl	80033b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026ca:	e00d      	b.n	80026e8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d109      	bne.n	80026e8 <vTaskStartScheduler+0x9c>
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e7fe      	b.n	80026e6 <vTaskStartScheduler+0x9a>
}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	080049cc 	.word	0x080049cc
 80026f4:	08002c91 	.word	0x08002c91
 80026f8:	2000040c 	.word	0x2000040c
 80026fc:	20000408 	.word	0x20000408
 8002700:	200003f4 	.word	0x200003f4
 8002704:	200003ec 	.word	0x200003ec

08002708 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <vTaskSuspendAll+0x18>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	4a03      	ldr	r2, [pc, #12]	; (8002720 <vTaskSuspendAll+0x18>)
 8002714:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	20000410 	.word	0x20000410

08002724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <xTaskResumeAll+0x114>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <xTaskResumeAll+0x2a>
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	e7fe      	b.n	800274c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800274e:	f000 fecd 	bl	80034ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <xTaskResumeAll+0x114>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3b01      	subs	r3, #1
 8002758:	4a37      	ldr	r2, [pc, #220]	; (8002838 <xTaskResumeAll+0x114>)
 800275a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <xTaskResumeAll+0x114>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d161      	bne.n	8002828 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <xTaskResumeAll+0x118>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05d      	beq.n	8002828 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800276c:	e02e      	b.n	80027cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <xTaskResumeAll+0x11c>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3318      	adds	r3, #24
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f930 	bl	80019e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3304      	adds	r3, #4
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f92b 	bl	80019e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	2201      	movs	r2, #1
 8002790:	409a      	lsls	r2, r3
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <xTaskResumeAll+0x120>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <xTaskResumeAll+0x120>)
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4a27      	ldr	r2, [pc, #156]	; (8002848 <xTaskResumeAll+0x124>)
 80027aa:	441a      	add	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f7ff f8b7 	bl	8001926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <xTaskResumeAll+0x128>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <xTaskResumeAll+0x12c>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <xTaskResumeAll+0x11c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1cc      	bne.n	800276e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027da:	f000 fb0b 	bl	8002df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <xTaskResumeAll+0x130>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80027ea:	f000 f837 	bl	800285c <xTaskIncrementTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <xTaskResumeAll+0x12c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f1      	bne.n	80027ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <xTaskResumeAll+0x130>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <xTaskResumeAll+0x12c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002814:	2301      	movs	r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <xTaskResumeAll+0x134>)
 800281a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002828:	f000 fe8e 	bl	8003548 <vPortExitCritical>

	return xAlreadyYielded;
 800282c:	68bb      	ldr	r3, [r7, #8]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000410 	.word	0x20000410
 800283c:	200003e8 	.word	0x200003e8
 8002840:	200003a8 	.word	0x200003a8
 8002844:	200003f0 	.word	0x200003f0
 8002848:	200002ec 	.word	0x200002ec
 800284c:	200002e8 	.word	0x200002e8
 8002850:	200003fc 	.word	0x200003fc
 8002854:	200003f8 	.word	0x200003f8
 8002858:	e000ed04 	.word	0xe000ed04

0800285c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002866:	4b4e      	ldr	r3, [pc, #312]	; (80029a0 <xTaskIncrementTick+0x144>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 8087 	bne.w	800297e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <xTaskIncrementTick+0x148>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <xTaskIncrementTick+0x148>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d11f      	bne.n	80028c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <xTaskIncrementTick+0x14c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <xTaskIncrementTick+0x46>
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	e7fe      	b.n	80028a0 <xTaskIncrementTick+0x44>
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	4b40      	ldr	r3, [pc, #256]	; (80029ac <xTaskIncrementTick+0x150>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a3e      	ldr	r2, [pc, #248]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <xTaskIncrementTick+0x150>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <xTaskIncrementTick+0x154>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <xTaskIncrementTick+0x154>)
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	f000 fa98 	bl	8002df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <xTaskIncrementTick+0x158>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d348      	bcc.n	8002960 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <xTaskIncrementTick+0x158>)
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	601a      	str	r2, [r3, #0]
					break;
 80028e0:	e03e      	b.n	8002960 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d203      	bcs.n	8002902 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028fa:	4a2e      	ldr	r2, [pc, #184]	; (80029b4 <xTaskIncrementTick+0x158>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002900:	e02e      	b.n	8002960 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3304      	adds	r3, #4
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff f86a 	bl	80019e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3318      	adds	r3, #24
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff f861 	bl	80019e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <xTaskIncrementTick+0x15c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <xTaskIncrementTick+0x15c>)
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <xTaskIncrementTick+0x160>)
 800293e:	441a      	add	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7fe ffed 	bl	8001926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <xTaskIncrementTick+0x164>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	429a      	cmp	r2, r3
 8002958:	d3b9      	bcc.n	80028ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800295a:	2301      	movs	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800295e:	e7b6      	b.n	80028ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <xTaskIncrementTick+0x164>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	4915      	ldr	r1, [pc, #84]	; (80029bc <xTaskIncrementTick+0x160>)
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d907      	bls.n	8002988 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e004      	b.n	8002988 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <xTaskIncrementTick+0x168>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <xTaskIncrementTick+0x168>)
 8002986:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <xTaskIncrementTick+0x16c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002990:	2301      	movs	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002994:	697b      	ldr	r3, [r7, #20]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000410 	.word	0x20000410
 80029a4:	200003ec 	.word	0x200003ec
 80029a8:	200003a0 	.word	0x200003a0
 80029ac:	200003a4 	.word	0x200003a4
 80029b0:	20000400 	.word	0x20000400
 80029b4:	20000408 	.word	0x20000408
 80029b8:	200003f0 	.word	0x200003f0
 80029bc:	200002ec 	.word	0x200002ec
 80029c0:	200002e8 	.word	0x200002e8
 80029c4:	200003f8 	.word	0x200003f8
 80029c8:	200003fc 	.word	0x200003fc

080029cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <vTaskSwitchContext+0xa0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <vTaskSwitchContext+0xa4>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029e0:	e03e      	b.n	8002a60 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <vTaskSwitchContext+0xa4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <vTaskSwitchContext+0xa8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	f1c3 031f 	rsb	r3, r3, #31
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	491e      	ldr	r1, [pc, #120]	; (8002a78 <vTaskSwitchContext+0xac>)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	e7fe      	b.n	8002a24 <vTaskSwitchContext+0x58>
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <vTaskSwitchContext+0xac>)
 8002a32:	4413      	add	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3308      	adds	r3, #8
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d104      	bne.n	8002a56 <vTaskSwitchContext+0x8a>
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <vTaskSwitchContext+0xb0>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	20000410 	.word	0x20000410
 8002a70:	200003fc 	.word	0x200003fc
 8002a74:	200003f0 	.word	0x200003f0
 8002a78:	200002ec 	.word	0x200002ec
 8002a7c:	200002e8 	.word	0x200002e8

08002a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <vTaskPlaceOnEventList+0x24>
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e7fe      	b.n	8002aa2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <vTaskPlaceOnEventList+0x44>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe ff5e 	bl	800196e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	6838      	ldr	r0, [r7, #0]
 8002ab6:	f000 fb8b 	bl	80031d0 <prvAddCurrentTaskToDelayedList>
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200002e8 	.word	0x200002e8

08002ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <xTaskRemoveFromEventList+0x2a>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e7fe      	b.n	8002af0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3318      	adds	r3, #24
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe ff72 	bl	80019e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <xTaskRemoveFromEventList+0xac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11c      	bne.n	8002b3e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	3304      	adds	r3, #4
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe ff69 	bl	80019e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	2201      	movs	r2, #1
 8002b14:	409a      	lsls	r2, r3
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <xTaskRemoveFromEventList+0xb0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <xTaskRemoveFromEventList+0xb0>)
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <xTaskRemoveFromEventList+0xb4>)
 8002b2e:	441a      	add	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	3304      	adds	r3, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f7fe fef5 	bl	8001926 <vListInsertEnd>
 8002b3c:	e005      	b.n	8002b4a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3318      	adds	r3, #24
 8002b42:	4619      	mov	r1, r3
 8002b44:	480e      	ldr	r0, [pc, #56]	; (8002b80 <xTaskRemoveFromEventList+0xb8>)
 8002b46:	f7fe feee 	bl	8001926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <xTaskRemoveFromEventList+0xbc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d905      	bls.n	8002b64 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <xTaskRemoveFromEventList+0xc0>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e001      	b.n	8002b68 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b68:	697b      	ldr	r3, [r7, #20]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000410 	.word	0x20000410
 8002b78:	200003f0 	.word	0x200003f0
 8002b7c:	200002ec 	.word	0x200002ec
 8002b80:	200003a8 	.word	0x200003a8
 8002b84:	200002e8 	.word	0x200002e8
 8002b88:	200003fc 	.word	0x200003fc

08002b8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <vTaskInternalSetTimeOutState+0x24>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <vTaskInternalSetTimeOutState+0x28>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	605a      	str	r2, [r3, #4]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	20000400 	.word	0x20000400
 8002bb4:	200003ec 	.word	0x200003ec

08002bb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <xTaskCheckForTimeOut+0x24>
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	e7fe      	b.n	8002bda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <xTaskCheckForTimeOut+0x3e>
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e7fe      	b.n	8002bf4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002bf6:	f000 fc79 	bl	80034ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <xTaskCheckForTimeOut+0xb8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d102      	bne.n	8002c1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e023      	b.n	8002c62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <xTaskCheckForTimeOut+0xbc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d007      	beq.n	8002c36 <xTaskCheckForTimeOut+0x7e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d302      	bcc.n	8002c36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	e015      	b.n	8002c62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d20b      	bcs.n	8002c58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff9d 	bl	8002b8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e004      	b.n	8002c62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c62:	f000 fc71 	bl	8003548 <vPortExitCritical>

	return xReturn;
 8002c66:	69fb      	ldr	r3, [r7, #28]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200003ec 	.word	0x200003ec
 8002c74:	20000400 	.word	0x20000400

08002c78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <vTaskMissedYield+0x14>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	200003fc 	.word	0x200003fc

08002c90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c98:	f000 f852 	bl	8002d40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <prvIdleTask+0x28>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d9f9      	bls.n	8002c98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <prvIdleTask+0x2c>)
 8002ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002cb4:	e7f0      	b.n	8002c98 <prvIdleTask+0x8>
 8002cb6:	bf00      	nop
 8002cb8:	200002ec 	.word	0x200002ec
 8002cbc:	e000ed04 	.word	0xe000ed04

08002cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	e00c      	b.n	8002ce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <prvInitialiseTaskLists+0x60>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fdf6 	bl	80018cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d9ef      	bls.n	8002ccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <prvInitialiseTaskLists+0x64>)
 8002cee:	f7fe fded 	bl	80018cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cf2:	480d      	ldr	r0, [pc, #52]	; (8002d28 <prvInitialiseTaskLists+0x68>)
 8002cf4:	f7fe fdea 	bl	80018cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <prvInitialiseTaskLists+0x6c>)
 8002cfa:	f7fe fde7 	bl	80018cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cfe:	480c      	ldr	r0, [pc, #48]	; (8002d30 <prvInitialiseTaskLists+0x70>)
 8002d00:	f7fe fde4 	bl	80018cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d04:	480b      	ldr	r0, [pc, #44]	; (8002d34 <prvInitialiseTaskLists+0x74>)
 8002d06:	f7fe fde1 	bl	80018cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <prvInitialiseTaskLists+0x78>)
 8002d0c:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <prvInitialiseTaskLists+0x64>)
 8002d0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <prvInitialiseTaskLists+0x7c>)
 8002d12:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <prvInitialiseTaskLists+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200002ec 	.word	0x200002ec
 8002d24:	20000378 	.word	0x20000378
 8002d28:	2000038c 	.word	0x2000038c
 8002d2c:	200003a8 	.word	0x200003a8
 8002d30:	200003bc 	.word	0x200003bc
 8002d34:	200003d4 	.word	0x200003d4
 8002d38:	200003a0 	.word	0x200003a0
 8002d3c:	200003a4 	.word	0x200003a4

08002d40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d46:	e019      	b.n	8002d7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d48:	f000 fbd0 	bl	80034ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <prvCheckTasksWaitingTermination+0x4c>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fe41 	bl	80019e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <prvCheckTasksWaitingTermination+0x50>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <prvCheckTasksWaitingTermination+0x50>)
 8002d66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <prvCheckTasksWaitingTermination+0x54>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <prvCheckTasksWaitingTermination+0x54>)
 8002d70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d72:	f000 fbe9 	bl	8003548 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f80e 	bl	8002d98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <prvCheckTasksWaitingTermination+0x54>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e1      	bne.n	8002d48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200003bc 	.word	0x200003bc
 8002d90:	200003e8 	.word	0x200003e8
 8002d94:	200003d0 	.word	0x200003d0

08002d98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd3a 	bl	8003828 <vPortFree>
				vPortFree( pxTCB );
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fd37 	bl	8003828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002dba:	e017      	b.n	8002dec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d103      	bne.n	8002dce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fd2e 	bl	8003828 <vPortFree>
	}
 8002dcc:	e00e      	b.n	8002dec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d009      	beq.n	8002dec <prvDeleteTCB+0x54>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e7fe      	b.n	8002dea <prvDeleteTCB+0x52>
	}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <prvResetNextTaskUnblockTime+0x38>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <prvResetNextTaskUnblockTime+0x3c>)
 8002e06:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e0c:	e008      	b.n	8002e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <prvResetNextTaskUnblockTime+0x38>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <prvResetNextTaskUnblockTime+0x3c>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	200003a0 	.word	0x200003a0
 8002e30:	20000408 	.word	0x20000408

08002e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <xTaskGetSchedulerState+0x34>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e42:	2301      	movs	r3, #1
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	e008      	b.n	8002e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <xTaskGetSchedulerState+0x38>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e50:	2302      	movs	r3, #2
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	e001      	b.n	8002e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e5a:	687b      	ldr	r3, [r7, #4]
	}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	200003f4 	.word	0x200003f4
 8002e6c:	20000410 	.word	0x20000410

08002e70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d069      	beq.n	8002f5a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <xTaskPriorityInherit+0xf4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d259      	bcs.n	8002f48 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db06      	blt.n	8002eaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e9c:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <xTaskPriorityInherit+0xf4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	f1c3 0207 	rsb	r2, r3, #7
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6959      	ldr	r1, [r3, #20]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <xTaskPriorityInherit+0xf8>)
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4299      	cmp	r1, r3
 8002ec0:	d13a      	bne.n	8002f38 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fd8a 	bl	80019e0 <uxListRemove>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	4924      	ldr	r1, [pc, #144]	; (8002f68 <xTaskPriorityInherit+0xf8>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xTaskPriorityInherit+0x8e>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	2201      	movs	r2, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <xTaskPriorityInherit+0xfc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <xTaskPriorityInherit+0xfc>)
 8002efc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002efe:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <xTaskPriorityInherit+0xf4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <xTaskPriorityInherit+0xfc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <xTaskPriorityInherit+0xfc>)
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <xTaskPriorityInherit+0xf8>)
 8002f28:	441a      	add	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7fe fcf8 	bl	8001926 <vListInsertEnd>
 8002f36:	e004      	b.n	8002f42 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <xTaskPriorityInherit+0xf4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e008      	b.n	8002f5a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <xTaskPriorityInherit+0xf4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d201      	bcs.n	8002f5a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
	}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	200002e8 	.word	0x200002e8
 8002f68:	200002ec 	.word	0x200002ec
 8002f6c:	200003f0 	.word	0x200003f0

08002f70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d06c      	beq.n	8003060 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <xTaskPriorityDisinherit+0xfc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d009      	beq.n	8002fa4 <xTaskPriorityDisinherit+0x34>
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e7fe      	b.n	8002fa2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <xTaskPriorityDisinherit+0x50>
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	e7fe      	b.n	8002fbe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d044      	beq.n	8003060 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d140      	bne.n	8003060 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fcfc 	bl	80019e0 <uxListRemove>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d115      	bne.n	800301a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	491f      	ldr	r1, [pc, #124]	; (8003070 <xTaskPriorityDisinherit+0x100>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <xTaskPriorityDisinherit+0xaa>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	2201      	movs	r2, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <xTaskPriorityDisinherit+0x104>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4013      	ands	r3, r2
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <xTaskPriorityDisinherit+0x104>)
 8003018:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f1c3 0207 	rsb	r2, r3, #7
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	2201      	movs	r2, #1
 8003034:	409a      	lsls	r2, r3
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <xTaskPriorityDisinherit+0x104>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <xTaskPriorityDisinherit+0x104>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4a08      	ldr	r2, [pc, #32]	; (8003070 <xTaskPriorityDisinherit+0x100>)
 800304e:	441a      	add	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7fe fc65 	bl	8001926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800305c:	2301      	movs	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003060:	697b      	ldr	r3, [r7, #20]
	}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200002e8 	.word	0x200002e8
 8003070:	200002ec 	.word	0x200002ec
 8003074:	200003f0 	.word	0x200003f0

08003078 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003086:	2301      	movs	r3, #1
 8003088:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8081 	beq.w	8003194 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <vTaskPriorityDisinheritAfterTimeout+0x36>
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e7fe      	b.n	80030ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d902      	bls.n	80030be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	e002      	b.n	80030c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d062      	beq.n	8003194 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d15d      	bne.n	8003194 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80030d8:	4b30      	ldr	r3, [pc, #192]	; (800319c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d109      	bne.n	80030f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	e7fe      	b.n	80030f4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db04      	blt.n	8003114 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f1c3 0207 	rsb	r2, r3, #7
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6959      	ldr	r1, [r3, #20]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003124:	4413      	add	r3, r2
 8003126:	4299      	cmp	r1, r3
 8003128:	d134      	bne.n	8003194 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	3304      	adds	r3, #4
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fc56 	bl	80019e0 <uxListRemove>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d115      	bne.n	8003166 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313e:	4918      	ldr	r1, [pc, #96]	; (80031a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2201      	movs	r2, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4013      	ands	r3, r2
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003164:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	2201      	movs	r2, #1
 800316c:	409a      	lsls	r2, r3
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003186:	441a      	add	r2, r3
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7fe fbc9 	bl	8001926 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	200002e8 	.word	0x200002e8
 80031a0:	200002ec 	.word	0x200002ec
 80031a4:	200003f0 	.word	0x200003f0

080031a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <pvTaskIncrementMutexHeldCount+0x24>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <pvTaskIncrementMutexHeldCount+0x24>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ba:	3201      	adds	r2, #1
 80031bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80031be:	4b03      	ldr	r3, [pc, #12]	; (80031cc <pvTaskIncrementMutexHeldCount+0x24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
	}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	200002e8 	.word	0x200002e8

080031d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031da:	4b29      	ldr	r3, [pc, #164]	; (8003280 <prvAddCurrentTaskToDelayedList+0xb0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fbfa 	bl	80019e0 <uxListRemove>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	2201      	movs	r2, #1
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	4b21      	ldr	r3, [pc, #132]	; (8003288 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4013      	ands	r3, r2
 8003206:	4a20      	ldr	r2, [pc, #128]	; (8003288 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003208:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d10a      	bne.n	8003228 <prvAddCurrentTaskToDelayedList+0x58>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3304      	adds	r3, #4
 800321e:	4619      	mov	r1, r3
 8003220:	481a      	ldr	r0, [pc, #104]	; (800328c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003222:	f7fe fb80 	bl	8001926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003226:	e026      	b.n	8003276 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d209      	bcs.n	8003254 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7fe fb8e 	bl	800196e <vListInsert>
}
 8003252:	e010      	b.n	8003276 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <prvAddCurrentTaskToDelayedList+0xb4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3304      	adds	r3, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f7fe fb84 	bl	800196e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d202      	bcs.n	8003276 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6013      	str	r3, [r2, #0]
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200003ec 	.word	0x200003ec
 8003284:	200002e8 	.word	0x200002e8
 8003288:	200003f0 	.word	0x200003f0
 800328c:	200003d4 	.word	0x200003d4
 8003290:	200003a4 	.word	0x200003a4
 8003294:	200003a0 	.word	0x200003a0
 8003298:	20000408 	.word	0x20000408

0800329c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3b04      	subs	r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3b04      	subs	r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f023 0201 	bic.w	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3b04      	subs	r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80032cc:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <pxPortInitialiseStack+0x64>)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3b14      	subs	r3, #20
 80032d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3b04      	subs	r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f06f 0202 	mvn.w	r2, #2
 80032ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3b20      	subs	r3, #32
 80032f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80032f2:	68fb      	ldr	r3, [r7, #12]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	08003305 	.word	0x08003305

08003304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <prvTaskExitError+0x50>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d009      	beq.n	800332c <prvTaskExitError+0x28>
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e7fe      	b.n	800332a <prvTaskExitError+0x26>
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800333e:	bf00      	nop
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0fc      	beq.n	8003340 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000000c 	.word	0x2000000c
	...

08003360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <pxCurrentTCBConst2>)
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	6808      	ldr	r0, [r1, #0]
 8003366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336a:	f380 8809 	msr	PSP, r0
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f380 8811 	msr	BASEPRI, r0
 800337a:	4770      	bx	lr
 800337c:	f3af 8000 	nop.w

08003380 <pxCurrentTCBConst2>:
 8003380:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop

08003388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003388:	4808      	ldr	r0, [pc, #32]	; (80033ac <prvPortStartFirstTask+0x24>)
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	6800      	ldr	r0, [r0, #0]
 800338e:	f380 8808 	msr	MSP, r0
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f380 8814 	msr	CONTROL, r0
 800339a:	b662      	cpsie	i
 800339c:	b661      	cpsie	f
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	df00      	svc	0
 80033a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80033aa:	bf00      	nop
 80033ac:	e000ed08 	.word	0xe000ed08

080033b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033b6:	4b44      	ldr	r3, [pc, #272]	; (80034c8 <xPortStartScheduler+0x118>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a44      	ldr	r2, [pc, #272]	; (80034cc <xPortStartScheduler+0x11c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d109      	bne.n	80033d4 <xPortStartScheduler+0x24>
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	e7fe      	b.n	80033d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033d4:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <xPortStartScheduler+0x118>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3d      	ldr	r2, [pc, #244]	; (80034d0 <xPortStartScheduler+0x120>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d109      	bne.n	80033f2 <xPortStartScheduler+0x42>
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e7fe      	b.n	80033f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033f2:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <xPortStartScheduler+0x124>)
 80033f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <xPortStartScheduler+0x128>)
 8003418:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800341a:	4b30      	ldr	r3, [pc, #192]	; (80034dc <xPortStartScheduler+0x12c>)
 800341c:	2207      	movs	r2, #7
 800341e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003420:	e009      	b.n	8003436 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <xPortStartScheduler+0x12c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3b01      	subs	r3, #1
 8003428:	4a2c      	ldr	r2, [pc, #176]	; (80034dc <xPortStartScheduler+0x12c>)
 800342a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	b2db      	uxtb	r3, r3
 8003434:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d0ef      	beq.n	8003422 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <xPortStartScheduler+0x12c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	d009      	beq.n	8003462 <xPortStartScheduler+0xb2>
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	e7fe      	b.n	8003460 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <xPortStartScheduler+0x12c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	4a1c      	ldr	r2, [pc, #112]	; (80034dc <xPortStartScheduler+0x12c>)
 800346a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <xPortStartScheduler+0x12c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <xPortStartScheduler+0x12c>)
 8003476:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <xPortStartScheduler+0x130>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <xPortStartScheduler+0x130>)
 8003486:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800348a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <xPortStartScheduler+0x130>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <xPortStartScheduler+0x130>)
 8003492:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003496:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003498:	f000 f8d6 	bl	8003648 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <xPortStartScheduler+0x134>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80034a2:	f000 f8f5 	bl	8003690 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <xPortStartScheduler+0x138>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <xPortStartScheduler+0x138>)
 80034ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80034b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80034b2:	f7ff ff69 	bl	8003388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80034b6:	f7ff fa89 	bl	80029cc <vTaskSwitchContext>
	prvTaskExitError();
 80034ba:	f7ff ff23 	bl	8003304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	e000ed00 	.word	0xe000ed00
 80034cc:	410fc271 	.word	0x410fc271
 80034d0:	410fc270 	.word	0x410fc270
 80034d4:	e000e400 	.word	0xe000e400
 80034d8:	20000414 	.word	0x20000414
 80034dc:	20000418 	.word	0x20000418
 80034e0:	e000ed20 	.word	0xe000ed20
 80034e4:	2000000c 	.word	0x2000000c
 80034e8:	e000ef34 	.word	0xe000ef34

080034ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <vPortEnterCritical+0x54>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <vPortEnterCritical+0x54>)
 800350c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <vPortEnterCritical+0x54>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10e      	bne.n	8003534 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <vPortEnterCritical+0x58>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <vPortEnterCritical+0x48>
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	e7fe      	b.n	8003532 <vPortEnterCritical+0x46>
	}
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	2000000c 	.word	0x2000000c
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <vPortExitCritical+0x4c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <vPortExitCritical+0x22>
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e7fe      	b.n	8003568 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <vPortExitCritical+0x4c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3b01      	subs	r3, #1
 8003570:	4a08      	ldr	r2, [pc, #32]	; (8003594 <vPortExitCritical+0x4c>)
 8003572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <vPortExitCritical+0x4c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <vPortExitCritical+0x3e>
 800357c:	2300      	movs	r3, #0
 800357e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	2000000c 	.word	0x2000000c
	...

080035a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80035a0:	f3ef 8009 	mrs	r0, PSP
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	4b15      	ldr	r3, [pc, #84]	; (8003600 <pxCurrentTCBConst>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	f01e 0f10 	tst.w	lr, #16
 80035b0:	bf08      	it	eq
 80035b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80035b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ba:	6010      	str	r0, [r2, #0]
 80035bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035c4:	f380 8811 	msr	BASEPRI, r0
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f7ff f9fc 	bl	80029cc <vTaskSwitchContext>
 80035d4:	f04f 0000 	mov.w	r0, #0
 80035d8:	f380 8811 	msr	BASEPRI, r0
 80035dc:	bc09      	pop	{r0, r3}
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	6808      	ldr	r0, [r1, #0]
 80035e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e6:	f01e 0f10 	tst.w	lr, #16
 80035ea:	bf08      	it	eq
 80035ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80035f0:	f380 8809 	msr	PSP, r0
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	f3af 8000 	nop.w

08003600 <pxCurrentTCBConst>:
 8003600:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop

08003608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003620:	f7ff f91c 	bl	800285c <xTaskIncrementTick>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <xPortSysTickHandler+0x3c>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <vPortSetupTimerInterrupt+0x34>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <vPortSetupTimerInterrupt+0x38>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <vPortSetupTimerInterrupt+0x3c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <vPortSetupTimerInterrupt+0x40>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	4a09      	ldr	r2, [pc, #36]	; (800368c <vPortSetupTimerInterrupt+0x44>)
 8003666:	3b01      	subs	r3, #1
 8003668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800366a:	4b04      	ldr	r3, [pc, #16]	; (800367c <vPortSetupTimerInterrupt+0x34>)
 800366c:	2207      	movs	r2, #7
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000e010 	.word	0xe000e010
 8003680:	e000e018 	.word	0xe000e018
 8003684:	20000000 	.word	0x20000000
 8003688:	10624dd3 	.word	0x10624dd3
 800368c:	e000e014 	.word	0xe000e014

08003690 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003690:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036a0 <vPortEnableVFP+0x10>
 8003694:	6801      	ldr	r1, [r0, #0]
 8003696:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800369a:	6001      	str	r1, [r0, #0]
 800369c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800369e:	bf00      	nop
 80036a0:	e000ed88 	.word	0xe000ed88

080036a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80036b0:	f7ff f82a 	bl	8002708 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80036b4:	4b57      	ldr	r3, [pc, #348]	; (8003814 <pvPortMalloc+0x170>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80036bc:	f000 f90c 	bl	80038d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036c0:	4b55      	ldr	r3, [pc, #340]	; (8003818 <pvPortMalloc+0x174>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 808c 	bne.w	80037e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01c      	beq.n	800370e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80036d4:	2208      	movs	r2, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d013      	beq.n	800370e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f023 0307 	bic.w	r3, r3, #7
 80036ec:	3308      	adds	r3, #8
 80036ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <pvPortMalloc+0x6a>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	e7fe      	b.n	800370c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d068      	beq.n	80037e6 <pvPortMalloc+0x142>
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <pvPortMalloc+0x178>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d863      	bhi.n	80037e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800371e:	4b40      	ldr	r3, [pc, #256]	; (8003820 <pvPortMalloc+0x17c>)
 8003720:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003722:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <pvPortMalloc+0x17c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003728:	e004      	b.n	8003734 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	d903      	bls.n	8003746 <pvPortMalloc+0xa2>
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f1      	bne.n	800372a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003746:	4b33      	ldr	r3, [pc, #204]	; (8003814 <pvPortMalloc+0x170>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	429a      	cmp	r2, r3
 800374e:	d04a      	beq.n	80037e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2208      	movs	r2, #8
 8003756:	4413      	add	r3, r2
 8003758:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad2      	subs	r2, r2, r3
 800376a:	2308      	movs	r3, #8
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	429a      	cmp	r2, r3
 8003770:	d91e      	bls.n	80037b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <pvPortMalloc+0xf4>
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e7fe      	b.n	8003796 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad2      	subs	r2, r2, r3
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037aa:	69b8      	ldr	r0, [r7, #24]
 80037ac:	f000 f8f6 	bl	800399c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <pvPortMalloc+0x178>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <pvPortMalloc+0x178>)
 80037bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <pvPortMalloc+0x178>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b18      	ldr	r3, [pc, #96]	; (8003824 <pvPortMalloc+0x180>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d203      	bcs.n	80037d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <pvPortMalloc+0x178>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <pvPortMalloc+0x180>)
 80037d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <pvPortMalloc+0x174>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	431a      	orrs	r2, r3
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80037e6:	f7fe ff9d 	bl	8002724 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <pvPortMalloc+0x164>
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e7fe      	b.n	8003806 <pvPortMalloc+0x162>
	return pvReturn;
 8003808:	69fb      	ldr	r3, [r7, #28]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20004024 	.word	0x20004024
 8003818:	20004030 	.word	0x20004030
 800381c:	20004028 	.word	0x20004028
 8003820:	2000401c 	.word	0x2000401c
 8003824:	2000402c 	.word	0x2000402c

08003828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d046      	beq.n	80038c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800383a:	2308      	movs	r3, #8
 800383c:	425b      	negs	r3, r3
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4413      	add	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <vPortFree+0xa8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <vPortFree+0x42>
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e7fe      	b.n	8003868 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <vPortFree+0x5e>
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	e7fe      	b.n	8003884 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <vPortFree+0xa8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d019      	beq.n	80038c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <vPortFree+0xa8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80038ac:	f7fe ff2c 	bl	8002708 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <vPortFree+0xac>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	4a06      	ldr	r2, [pc, #24]	; (80038d4 <vPortFree+0xac>)
 80038bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038be:	6938      	ldr	r0, [r7, #16]
 80038c0:	f000 f86c 	bl	800399c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80038c4:	f7fe ff2e 	bl	8002724 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80038c8:	bf00      	nop
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20004030 	.word	0x20004030
 80038d4:	20004028 	.word	0x20004028

080038d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80038e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <prvHeapInit+0xac>)
 80038e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3307      	adds	r3, #7
 80038f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0307 	bic.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	4a1f      	ldr	r2, [pc, #124]	; (8003984 <prvHeapInit+0xac>)
 8003908:	4413      	add	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <prvHeapInit+0xb0>)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <prvHeapInit+0xb0>)
 8003918:	2200      	movs	r2, #0
 800391a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	4413      	add	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003924:	2208      	movs	r2, #8
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0307 	bic.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <prvHeapInit+0xb4>)
 8003938:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <prvHeapInit+0xb4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <prvHeapInit+0xb4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	1ad2      	subs	r2, r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <prvHeapInit+0xb4>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <prvHeapInit+0xb8>)
 8003966:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a09      	ldr	r2, [pc, #36]	; (8003994 <prvHeapInit+0xbc>)
 800396e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <prvHeapInit+0xc0>)
 8003972:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003976:	601a      	str	r2, [r3, #0]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	2000041c 	.word	0x2000041c
 8003988:	2000401c 	.word	0x2000401c
 800398c:	20004024 	.word	0x20004024
 8003990:	2000402c 	.word	0x2000402c
 8003994:	20004028 	.word	0x20004028
 8003998:	20004030 	.word	0x20004030

0800399c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039a4:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <prvInsertBlockIntoFreeList+0xac>)
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e002      	b.n	80039b0 <prvInsertBlockIntoFreeList+0x14>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d8f7      	bhi.n	80039aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d108      	bne.n	80039de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	441a      	add	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	441a      	add	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d118      	bne.n	8003a24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <prvInsertBlockIntoFreeList+0xb0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d00d      	beq.n	8003a1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	441a      	add	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e008      	b.n	8003a2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <prvInsertBlockIntoFreeList+0xb0>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e003      	b.n	8003a2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d002      	beq.n	8003a3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000401c 	.word	0x2000401c
 8003a4c:	20004024 	.word	0x20004024

08003a50 <__errno>:
 8003a50:	4b01      	ldr	r3, [pc, #4]	; (8003a58 <__errno+0x8>)
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000010 	.word	0x20000010

08003a5c <__libc_init_array>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	4e0d      	ldr	r6, [pc, #52]	; (8003a94 <__libc_init_array+0x38>)
 8003a60:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <__libc_init_array+0x3c>)
 8003a62:	1ba4      	subs	r4, r4, r6
 8003a64:	10a4      	asrs	r4, r4, #2
 8003a66:	2500      	movs	r5, #0
 8003a68:	42a5      	cmp	r5, r4
 8003a6a:	d109      	bne.n	8003a80 <__libc_init_array+0x24>
 8003a6c:	4e0b      	ldr	r6, [pc, #44]	; (8003a9c <__libc_init_array+0x40>)
 8003a6e:	4c0c      	ldr	r4, [pc, #48]	; (8003aa0 <__libc_init_array+0x44>)
 8003a70:	f000 ff74 	bl	800495c <_init>
 8003a74:	1ba4      	subs	r4, r4, r6
 8003a76:	10a4      	asrs	r4, r4, #2
 8003a78:	2500      	movs	r5, #0
 8003a7a:	42a5      	cmp	r5, r4
 8003a7c:	d105      	bne.n	8003a8a <__libc_init_array+0x2e>
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a84:	4798      	blx	r3
 8003a86:	3501      	adds	r5, #1
 8003a88:	e7ee      	b.n	8003a68 <__libc_init_array+0xc>
 8003a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a8e:	4798      	blx	r3
 8003a90:	3501      	adds	r5, #1
 8003a92:	e7f2      	b.n	8003a7a <__libc_init_array+0x1e>
 8003a94:	08004a84 	.word	0x08004a84
 8003a98:	08004a84 	.word	0x08004a84
 8003a9c:	08004a84 	.word	0x08004a84
 8003aa0:	08004a88 	.word	0x08004a88

08003aa4 <memcpy>:
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	1e43      	subs	r3, r0, #1
 8003aa8:	440a      	add	r2, r1
 8003aaa:	4291      	cmp	r1, r2
 8003aac:	d100      	bne.n	8003ab0 <memcpy+0xc>
 8003aae:	bd10      	pop	{r4, pc}
 8003ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ab8:	e7f7      	b.n	8003aaa <memcpy+0x6>

08003aba <memset>:
 8003aba:	4402      	add	r2, r0
 8003abc:	4603      	mov	r3, r0
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d100      	bne.n	8003ac4 <memset+0xa>
 8003ac2:	4770      	bx	lr
 8003ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ac8:	e7f9      	b.n	8003abe <memset+0x4>
	...

08003acc <iprintf>:
 8003acc:	b40f      	push	{r0, r1, r2, r3}
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <iprintf+0x2c>)
 8003ad0:	b513      	push	{r0, r1, r4, lr}
 8003ad2:	681c      	ldr	r4, [r3, #0]
 8003ad4:	b124      	cbz	r4, 8003ae0 <iprintf+0x14>
 8003ad6:	69a3      	ldr	r3, [r4, #24]
 8003ad8:	b913      	cbnz	r3, 8003ae0 <iprintf+0x14>
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 fa22 	bl	8003f24 <__sinit>
 8003ae0:	ab05      	add	r3, sp, #20
 8003ae2:	9a04      	ldr	r2, [sp, #16]
 8003ae4:	68a1      	ldr	r1, [r4, #8]
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f000 fbdb 	bl	80042a4 <_vfiprintf_r>
 8003aee:	b002      	add	sp, #8
 8003af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af4:	b004      	add	sp, #16
 8003af6:	4770      	bx	lr
 8003af8:	20000010 	.word	0x20000010

08003afc <_puts_r>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	460e      	mov	r6, r1
 8003b00:	4605      	mov	r5, r0
 8003b02:	b118      	cbz	r0, 8003b0c <_puts_r+0x10>
 8003b04:	6983      	ldr	r3, [r0, #24]
 8003b06:	b90b      	cbnz	r3, 8003b0c <_puts_r+0x10>
 8003b08:	f000 fa0c 	bl	8003f24 <__sinit>
 8003b0c:	69ab      	ldr	r3, [r5, #24]
 8003b0e:	68ac      	ldr	r4, [r5, #8]
 8003b10:	b913      	cbnz	r3, 8003b18 <_puts_r+0x1c>
 8003b12:	4628      	mov	r0, r5
 8003b14:	f000 fa06 	bl	8003f24 <__sinit>
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <_puts_r+0xac>)
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d117      	bne.n	8003b4e <_puts_r+0x52>
 8003b1e:	686c      	ldr	r4, [r5, #4]
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	d51d      	bpl.n	8003b62 <_puts_r+0x66>
 8003b26:	6923      	ldr	r3, [r4, #16]
 8003b28:	b1db      	cbz	r3, 8003b62 <_puts_r+0x66>
 8003b2a:	3e01      	subs	r6, #1
 8003b2c:	68a3      	ldr	r3, [r4, #8]
 8003b2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60a3      	str	r3, [r4, #8]
 8003b36:	b9e9      	cbnz	r1, 8003b74 <_puts_r+0x78>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da2e      	bge.n	8003b9a <_puts_r+0x9e>
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	210a      	movs	r1, #10
 8003b40:	4628      	mov	r0, r5
 8003b42:	f000 f83f 	bl	8003bc4 <__swbuf_r>
 8003b46:	3001      	adds	r0, #1
 8003b48:	d011      	beq.n	8003b6e <_puts_r+0x72>
 8003b4a:	200a      	movs	r0, #10
 8003b4c:	e011      	b.n	8003b72 <_puts_r+0x76>
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <_puts_r+0xb0>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	d101      	bne.n	8003b58 <_puts_r+0x5c>
 8003b54:	68ac      	ldr	r4, [r5, #8]
 8003b56:	e7e3      	b.n	8003b20 <_puts_r+0x24>
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <_puts_r+0xb4>)
 8003b5a:	429c      	cmp	r4, r3
 8003b5c:	bf08      	it	eq
 8003b5e:	68ec      	ldreq	r4, [r5, #12]
 8003b60:	e7de      	b.n	8003b20 <_puts_r+0x24>
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 f87f 	bl	8003c68 <__swsetup_r>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0dd      	beq.n	8003b2a <_puts_r+0x2e>
 8003b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da04      	bge.n	8003b82 <_puts_r+0x86>
 8003b78:	69a2      	ldr	r2, [r4, #24]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	dc06      	bgt.n	8003b8c <_puts_r+0x90>
 8003b7e:	290a      	cmp	r1, #10
 8003b80:	d004      	beq.n	8003b8c <_puts_r+0x90>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	6022      	str	r2, [r4, #0]
 8003b88:	7019      	strb	r1, [r3, #0]
 8003b8a:	e7cf      	b.n	8003b2c <_puts_r+0x30>
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f000 f818 	bl	8003bc4 <__swbuf_r>
 8003b94:	3001      	adds	r0, #1
 8003b96:	d1c9      	bne.n	8003b2c <_puts_r+0x30>
 8003b98:	e7e9      	b.n	8003b6e <_puts_r+0x72>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	6022      	str	r2, [r4, #0]
 8003ba2:	7018      	strb	r0, [r3, #0]
 8003ba4:	e7e5      	b.n	8003b72 <_puts_r+0x76>
 8003ba6:	bf00      	nop
 8003ba8:	08004a08 	.word	0x08004a08
 8003bac:	08004a28 	.word	0x08004a28
 8003bb0:	080049e8 	.word	0x080049e8

08003bb4 <puts>:
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <puts+0xc>)
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	f7ff bf9f 	b.w	8003afc <_puts_r>
 8003bbe:	bf00      	nop
 8003bc0:	20000010 	.word	0x20000010

08003bc4 <__swbuf_r>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	4605      	mov	r5, r0
 8003bcc:	b118      	cbz	r0, 8003bd6 <__swbuf_r+0x12>
 8003bce:	6983      	ldr	r3, [r0, #24]
 8003bd0:	b90b      	cbnz	r3, 8003bd6 <__swbuf_r+0x12>
 8003bd2:	f000 f9a7 	bl	8003f24 <__sinit>
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <__swbuf_r+0x98>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	d12a      	bne.n	8003c32 <__swbuf_r+0x6e>
 8003bdc:	686c      	ldr	r4, [r5, #4]
 8003bde:	69a3      	ldr	r3, [r4, #24]
 8003be0:	60a3      	str	r3, [r4, #8]
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	071a      	lsls	r2, r3, #28
 8003be6:	d52e      	bpl.n	8003c46 <__swbuf_r+0x82>
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	b363      	cbz	r3, 8003c46 <__swbuf_r+0x82>
 8003bec:	6923      	ldr	r3, [r4, #16]
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	1ac0      	subs	r0, r0, r3
 8003bf2:	6963      	ldr	r3, [r4, #20]
 8003bf4:	b2f6      	uxtb	r6, r6
 8003bf6:	4283      	cmp	r3, r0
 8003bf8:	4637      	mov	r7, r6
 8003bfa:	dc04      	bgt.n	8003c06 <__swbuf_r+0x42>
 8003bfc:	4621      	mov	r1, r4
 8003bfe:	4628      	mov	r0, r5
 8003c00:	f000 f926 	bl	8003e50 <_fflush_r>
 8003c04:	bb28      	cbnz	r0, 8003c52 <__swbuf_r+0x8e>
 8003c06:	68a3      	ldr	r3, [r4, #8]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60a3      	str	r3, [r4, #8]
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	6022      	str	r2, [r4, #0]
 8003c12:	701e      	strb	r6, [r3, #0]
 8003c14:	6963      	ldr	r3, [r4, #20]
 8003c16:	3001      	adds	r0, #1
 8003c18:	4283      	cmp	r3, r0
 8003c1a:	d004      	beq.n	8003c26 <__swbuf_r+0x62>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	07db      	lsls	r3, r3, #31
 8003c20:	d519      	bpl.n	8003c56 <__swbuf_r+0x92>
 8003c22:	2e0a      	cmp	r6, #10
 8003c24:	d117      	bne.n	8003c56 <__swbuf_r+0x92>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 f911 	bl	8003e50 <_fflush_r>
 8003c2e:	b190      	cbz	r0, 8003c56 <__swbuf_r+0x92>
 8003c30:	e00f      	b.n	8003c52 <__swbuf_r+0x8e>
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <__swbuf_r+0x9c>)
 8003c34:	429c      	cmp	r4, r3
 8003c36:	d101      	bne.n	8003c3c <__swbuf_r+0x78>
 8003c38:	68ac      	ldr	r4, [r5, #8]
 8003c3a:	e7d0      	b.n	8003bde <__swbuf_r+0x1a>
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <__swbuf_r+0xa0>)
 8003c3e:	429c      	cmp	r4, r3
 8003c40:	bf08      	it	eq
 8003c42:	68ec      	ldreq	r4, [r5, #12]
 8003c44:	e7cb      	b.n	8003bde <__swbuf_r+0x1a>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 f80d 	bl	8003c68 <__swsetup_r>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	d0cc      	beq.n	8003bec <__swbuf_r+0x28>
 8003c52:	f04f 37ff 	mov.w	r7, #4294967295
 8003c56:	4638      	mov	r0, r7
 8003c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08004a08 	.word	0x08004a08
 8003c60:	08004a28 	.word	0x08004a28
 8003c64:	080049e8 	.word	0x080049e8

08003c68 <__swsetup_r>:
 8003c68:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <__swsetup_r+0xcc>)
 8003c6a:	b570      	push	{r4, r5, r6, lr}
 8003c6c:	681d      	ldr	r5, [r3, #0]
 8003c6e:	4606      	mov	r6, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	b125      	cbz	r5, 8003c7e <__swsetup_r+0x16>
 8003c74:	69ab      	ldr	r3, [r5, #24]
 8003c76:	b913      	cbnz	r3, 8003c7e <__swsetup_r+0x16>
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f000 f953 	bl	8003f24 <__sinit>
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <__swsetup_r+0xd0>)
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d10f      	bne.n	8003ca4 <__swsetup_r+0x3c>
 8003c84:	686c      	ldr	r4, [r5, #4]
 8003c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	0715      	lsls	r5, r2, #28
 8003c8e:	d42c      	bmi.n	8003cea <__swsetup_r+0x82>
 8003c90:	06d0      	lsls	r0, r2, #27
 8003c92:	d411      	bmi.n	8003cb8 <__swsetup_r+0x50>
 8003c94:	2209      	movs	r2, #9
 8003c96:	6032      	str	r2, [r6, #0]
 8003c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	e03e      	b.n	8003d22 <__swsetup_r+0xba>
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <__swsetup_r+0xd4>)
 8003ca6:	429c      	cmp	r4, r3
 8003ca8:	d101      	bne.n	8003cae <__swsetup_r+0x46>
 8003caa:	68ac      	ldr	r4, [r5, #8]
 8003cac:	e7eb      	b.n	8003c86 <__swsetup_r+0x1e>
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <__swsetup_r+0xd8>)
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	bf08      	it	eq
 8003cb4:	68ec      	ldreq	r4, [r5, #12]
 8003cb6:	e7e6      	b.n	8003c86 <__swsetup_r+0x1e>
 8003cb8:	0751      	lsls	r1, r2, #29
 8003cba:	d512      	bpl.n	8003ce2 <__swsetup_r+0x7a>
 8003cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cbe:	b141      	cbz	r1, 8003cd2 <__swsetup_r+0x6a>
 8003cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	d002      	beq.n	8003cce <__swsetup_r+0x66>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f000 fa19 	bl	8004100 <_free_r>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6063      	str	r3, [r4, #4]
 8003cde:	6923      	ldr	r3, [r4, #16]
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	b94b      	cbnz	r3, 8003d02 <__swsetup_r+0x9a>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	d003      	beq.n	8003d02 <__swsetup_r+0x9a>
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 f9bf 	bl	8004080 <__smakebuf_r>
 8003d02:	89a2      	ldrh	r2, [r4, #12]
 8003d04:	f012 0301 	ands.w	r3, r2, #1
 8003d08:	d00c      	beq.n	8003d24 <__swsetup_r+0xbc>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	6963      	ldr	r3, [r4, #20]
 8003d10:	425b      	negs	r3, r3
 8003d12:	61a3      	str	r3, [r4, #24]
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	b953      	cbnz	r3, 8003d2e <__swsetup_r+0xc6>
 8003d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d20:	d1ba      	bne.n	8003c98 <__swsetup_r+0x30>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	0792      	lsls	r2, r2, #30
 8003d26:	bf58      	it	pl
 8003d28:	6963      	ldrpl	r3, [r4, #20]
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	e7f2      	b.n	8003d14 <__swsetup_r+0xac>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	e7f7      	b.n	8003d22 <__swsetup_r+0xba>
 8003d32:	bf00      	nop
 8003d34:	20000010 	.word	0x20000010
 8003d38:	08004a08 	.word	0x08004a08
 8003d3c:	08004a28 	.word	0x08004a28
 8003d40:	080049e8 	.word	0x080049e8

08003d44 <__sflush_r>:
 8003d44:	898a      	ldrh	r2, [r1, #12]
 8003d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	0710      	lsls	r0, r2, #28
 8003d4e:	460c      	mov	r4, r1
 8003d50:	d458      	bmi.n	8003e04 <__sflush_r+0xc0>
 8003d52:	684b      	ldr	r3, [r1, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	dc05      	bgt.n	8003d64 <__sflush_r+0x20>
 8003d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dc02      	bgt.n	8003d64 <__sflush_r+0x20>
 8003d5e:	2000      	movs	r0, #0
 8003d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d0f9      	beq.n	8003d5e <__sflush_r+0x1a>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d70:	682f      	ldr	r7, [r5, #0]
 8003d72:	6a21      	ldr	r1, [r4, #32]
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	d032      	beq.n	8003dde <__sflush_r+0x9a>
 8003d78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	075a      	lsls	r2, r3, #29
 8003d7e:	d505      	bpl.n	8003d8c <__sflush_r+0x48>
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	1ac0      	subs	r0, r0, r3
 8003d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d86:	b10b      	cbz	r3, 8003d8c <__sflush_r+0x48>
 8003d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d8a:	1ac0      	subs	r0, r0, r3
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d92:	6a21      	ldr	r1, [r4, #32]
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b0      	blx	r6
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	d106      	bne.n	8003dac <__sflush_r+0x68>
 8003d9e:	6829      	ldr	r1, [r5, #0]
 8003da0:	291d      	cmp	r1, #29
 8003da2:	d848      	bhi.n	8003e36 <__sflush_r+0xf2>
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <__sflush_r+0x108>)
 8003da6:	40ca      	lsrs	r2, r1
 8003da8:	07d6      	lsls	r6, r2, #31
 8003daa:	d544      	bpl.n	8003e36 <__sflush_r+0xf2>
 8003dac:	2200      	movs	r2, #0
 8003dae:	6062      	str	r2, [r4, #4]
 8003db0:	04d9      	lsls	r1, r3, #19
 8003db2:	6922      	ldr	r2, [r4, #16]
 8003db4:	6022      	str	r2, [r4, #0]
 8003db6:	d504      	bpl.n	8003dc2 <__sflush_r+0x7e>
 8003db8:	1c42      	adds	r2, r0, #1
 8003dba:	d101      	bne.n	8003dc0 <__sflush_r+0x7c>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b903      	cbnz	r3, 8003dc2 <__sflush_r+0x7e>
 8003dc0:	6560      	str	r0, [r4, #84]	; 0x54
 8003dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dc4:	602f      	str	r7, [r5, #0]
 8003dc6:	2900      	cmp	r1, #0
 8003dc8:	d0c9      	beq.n	8003d5e <__sflush_r+0x1a>
 8003dca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	d002      	beq.n	8003dd8 <__sflush_r+0x94>
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	f000 f994 	bl	8004100 <_free_r>
 8003dd8:	2000      	movs	r0, #0
 8003dda:	6360      	str	r0, [r4, #52]	; 0x34
 8003ddc:	e7c0      	b.n	8003d60 <__sflush_r+0x1c>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b0      	blx	r6
 8003de4:	1c41      	adds	r1, r0, #1
 8003de6:	d1c8      	bne.n	8003d7a <__sflush_r+0x36>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0c5      	beq.n	8003d7a <__sflush_r+0x36>
 8003dee:	2b1d      	cmp	r3, #29
 8003df0:	d001      	beq.n	8003df6 <__sflush_r+0xb2>
 8003df2:	2b16      	cmp	r3, #22
 8003df4:	d101      	bne.n	8003dfa <__sflush_r+0xb6>
 8003df6:	602f      	str	r7, [r5, #0]
 8003df8:	e7b1      	b.n	8003d5e <__sflush_r+0x1a>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e00:	81a3      	strh	r3, [r4, #12]
 8003e02:	e7ad      	b.n	8003d60 <__sflush_r+0x1c>
 8003e04:	690f      	ldr	r7, [r1, #16]
 8003e06:	2f00      	cmp	r7, #0
 8003e08:	d0a9      	beq.n	8003d5e <__sflush_r+0x1a>
 8003e0a:	0793      	lsls	r3, r2, #30
 8003e0c:	680e      	ldr	r6, [r1, #0]
 8003e0e:	bf08      	it	eq
 8003e10:	694b      	ldreq	r3, [r1, #20]
 8003e12:	600f      	str	r7, [r1, #0]
 8003e14:	bf18      	it	ne
 8003e16:	2300      	movne	r3, #0
 8003e18:	eba6 0807 	sub.w	r8, r6, r7
 8003e1c:	608b      	str	r3, [r1, #8]
 8003e1e:	f1b8 0f00 	cmp.w	r8, #0
 8003e22:	dd9c      	ble.n	8003d5e <__sflush_r+0x1a>
 8003e24:	4643      	mov	r3, r8
 8003e26:	463a      	mov	r2, r7
 8003e28:	6a21      	ldr	r1, [r4, #32]
 8003e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	47b0      	blx	r6
 8003e30:	2800      	cmp	r0, #0
 8003e32:	dc06      	bgt.n	8003e42 <__sflush_r+0xfe>
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3a:	81a3      	strh	r3, [r4, #12]
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	e78e      	b.n	8003d60 <__sflush_r+0x1c>
 8003e42:	4407      	add	r7, r0
 8003e44:	eba8 0800 	sub.w	r8, r8, r0
 8003e48:	e7e9      	b.n	8003e1e <__sflush_r+0xda>
 8003e4a:	bf00      	nop
 8003e4c:	20400001 	.word	0x20400001

08003e50 <_fflush_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	4605      	mov	r5, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	b1db      	cbz	r3, 8003e92 <_fflush_r+0x42>
 8003e5a:	b118      	cbz	r0, 8003e64 <_fflush_r+0x14>
 8003e5c:	6983      	ldr	r3, [r0, #24]
 8003e5e:	b90b      	cbnz	r3, 8003e64 <_fflush_r+0x14>
 8003e60:	f000 f860 	bl	8003f24 <__sinit>
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <_fflush_r+0x48>)
 8003e66:	429c      	cmp	r4, r3
 8003e68:	d109      	bne.n	8003e7e <_fflush_r+0x2e>
 8003e6a:	686c      	ldr	r4, [r5, #4]
 8003e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e70:	b17b      	cbz	r3, 8003e92 <_fflush_r+0x42>
 8003e72:	4621      	mov	r1, r4
 8003e74:	4628      	mov	r0, r5
 8003e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e7a:	f7ff bf63 	b.w	8003d44 <__sflush_r>
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <_fflush_r+0x4c>)
 8003e80:	429c      	cmp	r4, r3
 8003e82:	d101      	bne.n	8003e88 <_fflush_r+0x38>
 8003e84:	68ac      	ldr	r4, [r5, #8]
 8003e86:	e7f1      	b.n	8003e6c <_fflush_r+0x1c>
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <_fflush_r+0x50>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	bf08      	it	eq
 8003e8e:	68ec      	ldreq	r4, [r5, #12]
 8003e90:	e7ec      	b.n	8003e6c <_fflush_r+0x1c>
 8003e92:	2000      	movs	r0, #0
 8003e94:	bd38      	pop	{r3, r4, r5, pc}
 8003e96:	bf00      	nop
 8003e98:	08004a08 	.word	0x08004a08
 8003e9c:	08004a28 	.word	0x08004a28
 8003ea0:	080049e8 	.word	0x080049e8

08003ea4 <std>:
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8003eae:	6083      	str	r3, [r0, #8]
 8003eb0:	8181      	strh	r1, [r0, #12]
 8003eb2:	6643      	str	r3, [r0, #100]	; 0x64
 8003eb4:	81c2      	strh	r2, [r0, #14]
 8003eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eba:	6183      	str	r3, [r0, #24]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	305c      	adds	r0, #92	; 0x5c
 8003ec2:	f7ff fdfa 	bl	8003aba <memset>
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <std+0x38>)
 8003ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <std+0x3c>)
 8003ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <std+0x40>)
 8003ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <std+0x44>)
 8003ed4:	6224      	str	r4, [r4, #32]
 8003ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ed8:	bd10      	pop	{r4, pc}
 8003eda:	bf00      	nop
 8003edc:	08004801 	.word	0x08004801
 8003ee0:	08004823 	.word	0x08004823
 8003ee4:	0800485b 	.word	0x0800485b
 8003ee8:	0800487f 	.word	0x0800487f

08003eec <_cleanup_r>:
 8003eec:	4901      	ldr	r1, [pc, #4]	; (8003ef4 <_cleanup_r+0x8>)
 8003eee:	f000 b885 	b.w	8003ffc <_fwalk_reent>
 8003ef2:	bf00      	nop
 8003ef4:	08003e51 	.word	0x08003e51

08003ef8 <__sfmoreglue>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	1e4a      	subs	r2, r1, #1
 8003efc:	2568      	movs	r5, #104	; 0x68
 8003efe:	4355      	muls	r5, r2
 8003f00:	460e      	mov	r6, r1
 8003f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f06:	f000 f949 	bl	800419c <_malloc_r>
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	b140      	cbz	r0, 8003f20 <__sfmoreglue+0x28>
 8003f0e:	2100      	movs	r1, #0
 8003f10:	e9c0 1600 	strd	r1, r6, [r0]
 8003f14:	300c      	adds	r0, #12
 8003f16:	60a0      	str	r0, [r4, #8]
 8003f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f1c:	f7ff fdcd 	bl	8003aba <memset>
 8003f20:	4620      	mov	r0, r4
 8003f22:	bd70      	pop	{r4, r5, r6, pc}

08003f24 <__sinit>:
 8003f24:	6983      	ldr	r3, [r0, #24]
 8003f26:	b510      	push	{r4, lr}
 8003f28:	4604      	mov	r4, r0
 8003f2a:	bb33      	cbnz	r3, 8003f7a <__sinit+0x56>
 8003f2c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003f30:	6503      	str	r3, [r0, #80]	; 0x50
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <__sinit+0x58>)
 8003f34:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <__sinit+0x5c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6282      	str	r2, [r0, #40]	; 0x28
 8003f3a:	4298      	cmp	r0, r3
 8003f3c:	bf04      	itt	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	6183      	streq	r3, [r0, #24]
 8003f42:	f000 f81f 	bl	8003f84 <__sfp>
 8003f46:	6060      	str	r0, [r4, #4]
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f000 f81b 	bl	8003f84 <__sfp>
 8003f4e:	60a0      	str	r0, [r4, #8]
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 f817 	bl	8003f84 <__sfp>
 8003f56:	2200      	movs	r2, #0
 8003f58:	60e0      	str	r0, [r4, #12]
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	6860      	ldr	r0, [r4, #4]
 8003f5e:	f7ff ffa1 	bl	8003ea4 <std>
 8003f62:	2201      	movs	r2, #1
 8003f64:	2109      	movs	r1, #9
 8003f66:	68a0      	ldr	r0, [r4, #8]
 8003f68:	f7ff ff9c 	bl	8003ea4 <std>
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	2112      	movs	r1, #18
 8003f70:	68e0      	ldr	r0, [r4, #12]
 8003f72:	f7ff ff97 	bl	8003ea4 <std>
 8003f76:	2301      	movs	r3, #1
 8003f78:	61a3      	str	r3, [r4, #24]
 8003f7a:	bd10      	pop	{r4, pc}
 8003f7c:	080049e4 	.word	0x080049e4
 8003f80:	08003eed 	.word	0x08003eed

08003f84 <__sfp>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <__sfp+0x70>)
 8003f88:	681e      	ldr	r6, [r3, #0]
 8003f8a:	69b3      	ldr	r3, [r6, #24]
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	b913      	cbnz	r3, 8003f96 <__sfp+0x12>
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ffc7 	bl	8003f24 <__sinit>
 8003f96:	3648      	adds	r6, #72	; 0x48
 8003f98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	d503      	bpl.n	8003fa8 <__sfp+0x24>
 8003fa0:	6833      	ldr	r3, [r6, #0]
 8003fa2:	b133      	cbz	r3, 8003fb2 <__sfp+0x2e>
 8003fa4:	6836      	ldr	r6, [r6, #0]
 8003fa6:	e7f7      	b.n	8003f98 <__sfp+0x14>
 8003fa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fac:	b16d      	cbz	r5, 8003fca <__sfp+0x46>
 8003fae:	3468      	adds	r4, #104	; 0x68
 8003fb0:	e7f4      	b.n	8003f9c <__sfp+0x18>
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f7ff ff9f 	bl	8003ef8 <__sfmoreglue>
 8003fba:	6030      	str	r0, [r6, #0]
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	d1f1      	bne.n	8003fa4 <__sfp+0x20>
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <__sfp+0x74>)
 8003fcc:	6665      	str	r5, [r4, #100]	; 0x64
 8003fce:	e9c4 5500 	strd	r5, r5, [r4]
 8003fd2:	60a5      	str	r5, [r4, #8]
 8003fd4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003fd8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fe4:	f7ff fd69 	bl	8003aba <memset>
 8003fe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ff0:	e7e9      	b.n	8003fc6 <__sfp+0x42>
 8003ff2:	bf00      	nop
 8003ff4:	080049e4 	.word	0x080049e4
 8003ff8:	ffff0001 	.word	0xffff0001

08003ffc <_fwalk_reent>:
 8003ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004000:	4680      	mov	r8, r0
 8004002:	4689      	mov	r9, r1
 8004004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004008:	2600      	movs	r6, #0
 800400a:	b914      	cbnz	r4, 8004012 <_fwalk_reent+0x16>
 800400c:	4630      	mov	r0, r6
 800400e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004012:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004016:	3f01      	subs	r7, #1
 8004018:	d501      	bpl.n	800401e <_fwalk_reent+0x22>
 800401a:	6824      	ldr	r4, [r4, #0]
 800401c:	e7f5      	b.n	800400a <_fwalk_reent+0xe>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d907      	bls.n	8004034 <_fwalk_reent+0x38>
 8004024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004028:	3301      	adds	r3, #1
 800402a:	d003      	beq.n	8004034 <_fwalk_reent+0x38>
 800402c:	4629      	mov	r1, r5
 800402e:	4640      	mov	r0, r8
 8004030:	47c8      	blx	r9
 8004032:	4306      	orrs	r6, r0
 8004034:	3568      	adds	r5, #104	; 0x68
 8004036:	e7ee      	b.n	8004016 <_fwalk_reent+0x1a>

08004038 <__swhatbuf_r>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	460e      	mov	r6, r1
 800403c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004040:	2900      	cmp	r1, #0
 8004042:	b096      	sub	sp, #88	; 0x58
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	da07      	bge.n	800405a <__swhatbuf_r+0x22>
 800404a:	2300      	movs	r3, #0
 800404c:	602b      	str	r3, [r5, #0]
 800404e:	89b3      	ldrh	r3, [r6, #12]
 8004050:	061a      	lsls	r2, r3, #24
 8004052:	d410      	bmi.n	8004076 <__swhatbuf_r+0x3e>
 8004054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004058:	e00e      	b.n	8004078 <__swhatbuf_r+0x40>
 800405a:	466a      	mov	r2, sp
 800405c:	f000 fc36 	bl	80048cc <_fstat_r>
 8004060:	2800      	cmp	r0, #0
 8004062:	dbf2      	blt.n	800404a <__swhatbuf_r+0x12>
 8004064:	9a01      	ldr	r2, [sp, #4]
 8004066:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800406a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800406e:	425a      	negs	r2, r3
 8004070:	415a      	adcs	r2, r3
 8004072:	602a      	str	r2, [r5, #0]
 8004074:	e7ee      	b.n	8004054 <__swhatbuf_r+0x1c>
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	2000      	movs	r0, #0
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	b016      	add	sp, #88	; 0x58
 800407e:	bd70      	pop	{r4, r5, r6, pc}

08004080 <__smakebuf_r>:
 8004080:	898b      	ldrh	r3, [r1, #12]
 8004082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004084:	079d      	lsls	r5, r3, #30
 8004086:	4606      	mov	r6, r0
 8004088:	460c      	mov	r4, r1
 800408a:	d507      	bpl.n	800409c <__smakebuf_r+0x1c>
 800408c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	6123      	str	r3, [r4, #16]
 8004094:	2301      	movs	r3, #1
 8004096:	6163      	str	r3, [r4, #20]
 8004098:	b002      	add	sp, #8
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	ab01      	add	r3, sp, #4
 800409e:	466a      	mov	r2, sp
 80040a0:	f7ff ffca 	bl	8004038 <__swhatbuf_r>
 80040a4:	9900      	ldr	r1, [sp, #0]
 80040a6:	4605      	mov	r5, r0
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 f877 	bl	800419c <_malloc_r>
 80040ae:	b948      	cbnz	r0, 80040c4 <__smakebuf_r+0x44>
 80040b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b4:	059a      	lsls	r2, r3, #22
 80040b6:	d4ef      	bmi.n	8004098 <__smakebuf_r+0x18>
 80040b8:	f023 0303 	bic.w	r3, r3, #3
 80040bc:	f043 0302 	orr.w	r3, r3, #2
 80040c0:	81a3      	strh	r3, [r4, #12]
 80040c2:	e7e3      	b.n	800408c <__smakebuf_r+0xc>
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <__smakebuf_r+0x7c>)
 80040c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	6020      	str	r0, [r4, #0]
 80040cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d0:	81a3      	strh	r3, [r4, #12]
 80040d2:	9b00      	ldr	r3, [sp, #0]
 80040d4:	6163      	str	r3, [r4, #20]
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	6120      	str	r0, [r4, #16]
 80040da:	b15b      	cbz	r3, 80040f4 <__smakebuf_r+0x74>
 80040dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040e0:	4630      	mov	r0, r6
 80040e2:	f000 fc05 	bl	80048f0 <_isatty_r>
 80040e6:	b128      	cbz	r0, 80040f4 <__smakebuf_r+0x74>
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	431d      	orrs	r5, r3
 80040f8:	81a5      	strh	r5, [r4, #12]
 80040fa:	e7cd      	b.n	8004098 <__smakebuf_r+0x18>
 80040fc:	08003eed 	.word	0x08003eed

08004100 <_free_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	2900      	cmp	r1, #0
 8004106:	d045      	beq.n	8004194 <_free_r+0x94>
 8004108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410c:	1f0c      	subs	r4, r1, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	18e4      	addlt	r4, r4, r3
 8004114:	f000 fc0e 	bl	8004934 <__malloc_lock>
 8004118:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <_free_r+0x98>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	4610      	mov	r0, r2
 800411e:	b933      	cbnz	r3, 800412e <_free_r+0x2e>
 8004120:	6063      	str	r3, [r4, #4]
 8004122:	6014      	str	r4, [r2, #0]
 8004124:	4628      	mov	r0, r5
 8004126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800412a:	f000 bc04 	b.w	8004936 <__malloc_unlock>
 800412e:	42a3      	cmp	r3, r4
 8004130:	d90c      	bls.n	800414c <_free_r+0x4c>
 8004132:	6821      	ldr	r1, [r4, #0]
 8004134:	1862      	adds	r2, r4, r1
 8004136:	4293      	cmp	r3, r2
 8004138:	bf04      	itt	eq
 800413a:	681a      	ldreq	r2, [r3, #0]
 800413c:	685b      	ldreq	r3, [r3, #4]
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	bf04      	itt	eq
 8004142:	1852      	addeq	r2, r2, r1
 8004144:	6022      	streq	r2, [r4, #0]
 8004146:	6004      	str	r4, [r0, #0]
 8004148:	e7ec      	b.n	8004124 <_free_r+0x24>
 800414a:	4613      	mov	r3, r2
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	b10a      	cbz	r2, 8004154 <_free_r+0x54>
 8004150:	42a2      	cmp	r2, r4
 8004152:	d9fa      	bls.n	800414a <_free_r+0x4a>
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	1858      	adds	r0, r3, r1
 8004158:	42a0      	cmp	r0, r4
 800415a:	d10b      	bne.n	8004174 <_free_r+0x74>
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	4401      	add	r1, r0
 8004160:	1858      	adds	r0, r3, r1
 8004162:	4282      	cmp	r2, r0
 8004164:	6019      	str	r1, [r3, #0]
 8004166:	d1dd      	bne.n	8004124 <_free_r+0x24>
 8004168:	6810      	ldr	r0, [r2, #0]
 800416a:	6852      	ldr	r2, [r2, #4]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	4401      	add	r1, r0
 8004170:	6019      	str	r1, [r3, #0]
 8004172:	e7d7      	b.n	8004124 <_free_r+0x24>
 8004174:	d902      	bls.n	800417c <_free_r+0x7c>
 8004176:	230c      	movs	r3, #12
 8004178:	602b      	str	r3, [r5, #0]
 800417a:	e7d3      	b.n	8004124 <_free_r+0x24>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	1821      	adds	r1, r4, r0
 8004180:	428a      	cmp	r2, r1
 8004182:	bf04      	itt	eq
 8004184:	6811      	ldreq	r1, [r2, #0]
 8004186:	6852      	ldreq	r2, [r2, #4]
 8004188:	6062      	str	r2, [r4, #4]
 800418a:	bf04      	itt	eq
 800418c:	1809      	addeq	r1, r1, r0
 800418e:	6021      	streq	r1, [r4, #0]
 8004190:	605c      	str	r4, [r3, #4]
 8004192:	e7c7      	b.n	8004124 <_free_r+0x24>
 8004194:	bd38      	pop	{r3, r4, r5, pc}
 8004196:	bf00      	nop
 8004198:	20004034 	.word	0x20004034

0800419c <_malloc_r>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	1ccd      	adds	r5, r1, #3
 80041a0:	f025 0503 	bic.w	r5, r5, #3
 80041a4:	3508      	adds	r5, #8
 80041a6:	2d0c      	cmp	r5, #12
 80041a8:	bf38      	it	cc
 80041aa:	250c      	movcc	r5, #12
 80041ac:	2d00      	cmp	r5, #0
 80041ae:	4606      	mov	r6, r0
 80041b0:	db01      	blt.n	80041b6 <_malloc_r+0x1a>
 80041b2:	42a9      	cmp	r1, r5
 80041b4:	d903      	bls.n	80041be <_malloc_r+0x22>
 80041b6:	230c      	movs	r3, #12
 80041b8:	6033      	str	r3, [r6, #0]
 80041ba:	2000      	movs	r0, #0
 80041bc:	bd70      	pop	{r4, r5, r6, pc}
 80041be:	f000 fbb9 	bl	8004934 <__malloc_lock>
 80041c2:	4a21      	ldr	r2, [pc, #132]	; (8004248 <_malloc_r+0xac>)
 80041c4:	6814      	ldr	r4, [r2, #0]
 80041c6:	4621      	mov	r1, r4
 80041c8:	b991      	cbnz	r1, 80041f0 <_malloc_r+0x54>
 80041ca:	4c20      	ldr	r4, [pc, #128]	; (800424c <_malloc_r+0xb0>)
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	b91b      	cbnz	r3, 80041d8 <_malloc_r+0x3c>
 80041d0:	4630      	mov	r0, r6
 80041d2:	f000 fb05 	bl	80047e0 <_sbrk_r>
 80041d6:	6020      	str	r0, [r4, #0]
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 fb00 	bl	80047e0 <_sbrk_r>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d124      	bne.n	800422e <_malloc_r+0x92>
 80041e4:	230c      	movs	r3, #12
 80041e6:	6033      	str	r3, [r6, #0]
 80041e8:	4630      	mov	r0, r6
 80041ea:	f000 fba4 	bl	8004936 <__malloc_unlock>
 80041ee:	e7e4      	b.n	80041ba <_malloc_r+0x1e>
 80041f0:	680b      	ldr	r3, [r1, #0]
 80041f2:	1b5b      	subs	r3, r3, r5
 80041f4:	d418      	bmi.n	8004228 <_malloc_r+0x8c>
 80041f6:	2b0b      	cmp	r3, #11
 80041f8:	d90f      	bls.n	800421a <_malloc_r+0x7e>
 80041fa:	600b      	str	r3, [r1, #0]
 80041fc:	50cd      	str	r5, [r1, r3]
 80041fe:	18cc      	adds	r4, r1, r3
 8004200:	4630      	mov	r0, r6
 8004202:	f000 fb98 	bl	8004936 <__malloc_unlock>
 8004206:	f104 000b 	add.w	r0, r4, #11
 800420a:	1d23      	adds	r3, r4, #4
 800420c:	f020 0007 	bic.w	r0, r0, #7
 8004210:	1ac3      	subs	r3, r0, r3
 8004212:	d0d3      	beq.n	80041bc <_malloc_r+0x20>
 8004214:	425a      	negs	r2, r3
 8004216:	50e2      	str	r2, [r4, r3]
 8004218:	e7d0      	b.n	80041bc <_malloc_r+0x20>
 800421a:	428c      	cmp	r4, r1
 800421c:	684b      	ldr	r3, [r1, #4]
 800421e:	bf16      	itet	ne
 8004220:	6063      	strne	r3, [r4, #4]
 8004222:	6013      	streq	r3, [r2, #0]
 8004224:	460c      	movne	r4, r1
 8004226:	e7eb      	b.n	8004200 <_malloc_r+0x64>
 8004228:	460c      	mov	r4, r1
 800422a:	6849      	ldr	r1, [r1, #4]
 800422c:	e7cc      	b.n	80041c8 <_malloc_r+0x2c>
 800422e:	1cc4      	adds	r4, r0, #3
 8004230:	f024 0403 	bic.w	r4, r4, #3
 8004234:	42a0      	cmp	r0, r4
 8004236:	d005      	beq.n	8004244 <_malloc_r+0xa8>
 8004238:	1a21      	subs	r1, r4, r0
 800423a:	4630      	mov	r0, r6
 800423c:	f000 fad0 	bl	80047e0 <_sbrk_r>
 8004240:	3001      	adds	r0, #1
 8004242:	d0cf      	beq.n	80041e4 <_malloc_r+0x48>
 8004244:	6025      	str	r5, [r4, #0]
 8004246:	e7db      	b.n	8004200 <_malloc_r+0x64>
 8004248:	20004034 	.word	0x20004034
 800424c:	20004038 	.word	0x20004038

08004250 <__sfputc_r>:
 8004250:	6893      	ldr	r3, [r2, #8]
 8004252:	3b01      	subs	r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	b410      	push	{r4}
 8004258:	6093      	str	r3, [r2, #8]
 800425a:	da08      	bge.n	800426e <__sfputc_r+0x1e>
 800425c:	6994      	ldr	r4, [r2, #24]
 800425e:	42a3      	cmp	r3, r4
 8004260:	db01      	blt.n	8004266 <__sfputc_r+0x16>
 8004262:	290a      	cmp	r1, #10
 8004264:	d103      	bne.n	800426e <__sfputc_r+0x1e>
 8004266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800426a:	f7ff bcab 	b.w	8003bc4 <__swbuf_r>
 800426e:	6813      	ldr	r3, [r2, #0]
 8004270:	1c58      	adds	r0, r3, #1
 8004272:	6010      	str	r0, [r2, #0]
 8004274:	7019      	strb	r1, [r3, #0]
 8004276:	4608      	mov	r0, r1
 8004278:	f85d 4b04 	ldr.w	r4, [sp], #4
 800427c:	4770      	bx	lr

0800427e <__sfputs_r>:
 800427e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004280:	4606      	mov	r6, r0
 8004282:	460f      	mov	r7, r1
 8004284:	4614      	mov	r4, r2
 8004286:	18d5      	adds	r5, r2, r3
 8004288:	42ac      	cmp	r4, r5
 800428a:	d101      	bne.n	8004290 <__sfputs_r+0x12>
 800428c:	2000      	movs	r0, #0
 800428e:	e007      	b.n	80042a0 <__sfputs_r+0x22>
 8004290:	463a      	mov	r2, r7
 8004292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004296:	4630      	mov	r0, r6
 8004298:	f7ff ffda 	bl	8004250 <__sfputc_r>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d1f3      	bne.n	8004288 <__sfputs_r+0xa>
 80042a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042a4 <_vfiprintf_r>:
 80042a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a8:	460c      	mov	r4, r1
 80042aa:	b09d      	sub	sp, #116	; 0x74
 80042ac:	4617      	mov	r7, r2
 80042ae:	461d      	mov	r5, r3
 80042b0:	4606      	mov	r6, r0
 80042b2:	b118      	cbz	r0, 80042bc <_vfiprintf_r+0x18>
 80042b4:	6983      	ldr	r3, [r0, #24]
 80042b6:	b90b      	cbnz	r3, 80042bc <_vfiprintf_r+0x18>
 80042b8:	f7ff fe34 	bl	8003f24 <__sinit>
 80042bc:	4b7c      	ldr	r3, [pc, #496]	; (80044b0 <_vfiprintf_r+0x20c>)
 80042be:	429c      	cmp	r4, r3
 80042c0:	d158      	bne.n	8004374 <_vfiprintf_r+0xd0>
 80042c2:	6874      	ldr	r4, [r6, #4]
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	0718      	lsls	r0, r3, #28
 80042c8:	d55e      	bpl.n	8004388 <_vfiprintf_r+0xe4>
 80042ca:	6923      	ldr	r3, [r4, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05b      	beq.n	8004388 <_vfiprintf_r+0xe4>
 80042d0:	2300      	movs	r3, #0
 80042d2:	9309      	str	r3, [sp, #36]	; 0x24
 80042d4:	2320      	movs	r3, #32
 80042d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042da:	2330      	movs	r3, #48	; 0x30
 80042dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042e0:	9503      	str	r5, [sp, #12]
 80042e2:	f04f 0b01 	mov.w	fp, #1
 80042e6:	46b8      	mov	r8, r7
 80042e8:	4645      	mov	r5, r8
 80042ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80042ee:	b10b      	cbz	r3, 80042f4 <_vfiprintf_r+0x50>
 80042f0:	2b25      	cmp	r3, #37	; 0x25
 80042f2:	d154      	bne.n	800439e <_vfiprintf_r+0xfa>
 80042f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80042f8:	d00b      	beq.n	8004312 <_vfiprintf_r+0x6e>
 80042fa:	4653      	mov	r3, sl
 80042fc:	463a      	mov	r2, r7
 80042fe:	4621      	mov	r1, r4
 8004300:	4630      	mov	r0, r6
 8004302:	f7ff ffbc 	bl	800427e <__sfputs_r>
 8004306:	3001      	adds	r0, #1
 8004308:	f000 80c2 	beq.w	8004490 <_vfiprintf_r+0x1ec>
 800430c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800430e:	4453      	add	r3, sl
 8004310:	9309      	str	r3, [sp, #36]	; 0x24
 8004312:	f898 3000 	ldrb.w	r3, [r8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80ba 	beq.w	8004490 <_vfiprintf_r+0x1ec>
 800431c:	2300      	movs	r3, #0
 800431e:	f04f 32ff 	mov.w	r2, #4294967295
 8004322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004326:	9304      	str	r3, [sp, #16]
 8004328:	9307      	str	r3, [sp, #28]
 800432a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800432e:	931a      	str	r3, [sp, #104]	; 0x68
 8004330:	46a8      	mov	r8, r5
 8004332:	2205      	movs	r2, #5
 8004334:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004338:	485e      	ldr	r0, [pc, #376]	; (80044b4 <_vfiprintf_r+0x210>)
 800433a:	f7fb ff49 	bl	80001d0 <memchr>
 800433e:	9b04      	ldr	r3, [sp, #16]
 8004340:	bb78      	cbnz	r0, 80043a2 <_vfiprintf_r+0xfe>
 8004342:	06d9      	lsls	r1, r3, #27
 8004344:	bf44      	itt	mi
 8004346:	2220      	movmi	r2, #32
 8004348:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800434c:	071a      	lsls	r2, r3, #28
 800434e:	bf44      	itt	mi
 8004350:	222b      	movmi	r2, #43	; 0x2b
 8004352:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004356:	782a      	ldrb	r2, [r5, #0]
 8004358:	2a2a      	cmp	r2, #42	; 0x2a
 800435a:	d02a      	beq.n	80043b2 <_vfiprintf_r+0x10e>
 800435c:	9a07      	ldr	r2, [sp, #28]
 800435e:	46a8      	mov	r8, r5
 8004360:	2000      	movs	r0, #0
 8004362:	250a      	movs	r5, #10
 8004364:	4641      	mov	r1, r8
 8004366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800436a:	3b30      	subs	r3, #48	; 0x30
 800436c:	2b09      	cmp	r3, #9
 800436e:	d969      	bls.n	8004444 <_vfiprintf_r+0x1a0>
 8004370:	b360      	cbz	r0, 80043cc <_vfiprintf_r+0x128>
 8004372:	e024      	b.n	80043be <_vfiprintf_r+0x11a>
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <_vfiprintf_r+0x214>)
 8004376:	429c      	cmp	r4, r3
 8004378:	d101      	bne.n	800437e <_vfiprintf_r+0xda>
 800437a:	68b4      	ldr	r4, [r6, #8]
 800437c:	e7a2      	b.n	80042c4 <_vfiprintf_r+0x20>
 800437e:	4b4f      	ldr	r3, [pc, #316]	; (80044bc <_vfiprintf_r+0x218>)
 8004380:	429c      	cmp	r4, r3
 8004382:	bf08      	it	eq
 8004384:	68f4      	ldreq	r4, [r6, #12]
 8004386:	e79d      	b.n	80042c4 <_vfiprintf_r+0x20>
 8004388:	4621      	mov	r1, r4
 800438a:	4630      	mov	r0, r6
 800438c:	f7ff fc6c 	bl	8003c68 <__swsetup_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	d09d      	beq.n	80042d0 <_vfiprintf_r+0x2c>
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	b01d      	add	sp, #116	; 0x74
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439e:	46a8      	mov	r8, r5
 80043a0:	e7a2      	b.n	80042e8 <_vfiprintf_r+0x44>
 80043a2:	4a44      	ldr	r2, [pc, #272]	; (80044b4 <_vfiprintf_r+0x210>)
 80043a4:	1a80      	subs	r0, r0, r2
 80043a6:	fa0b f000 	lsl.w	r0, fp, r0
 80043aa:	4318      	orrs	r0, r3
 80043ac:	9004      	str	r0, [sp, #16]
 80043ae:	4645      	mov	r5, r8
 80043b0:	e7be      	b.n	8004330 <_vfiprintf_r+0x8c>
 80043b2:	9a03      	ldr	r2, [sp, #12]
 80043b4:	1d11      	adds	r1, r2, #4
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	9103      	str	r1, [sp, #12]
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	db01      	blt.n	80043c2 <_vfiprintf_r+0x11e>
 80043be:	9207      	str	r2, [sp, #28]
 80043c0:	e004      	b.n	80043cc <_vfiprintf_r+0x128>
 80043c2:	4252      	negs	r2, r2
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	9207      	str	r2, [sp, #28]
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	f898 3000 	ldrb.w	r3, [r8]
 80043d0:	2b2e      	cmp	r3, #46	; 0x2e
 80043d2:	d10e      	bne.n	80043f2 <_vfiprintf_r+0x14e>
 80043d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80043d8:	2b2a      	cmp	r3, #42	; 0x2a
 80043da:	d138      	bne.n	800444e <_vfiprintf_r+0x1aa>
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	1d1a      	adds	r2, r3, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	9203      	str	r2, [sp, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bfb8      	it	lt
 80043e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80043ec:	f108 0802 	add.w	r8, r8, #2
 80043f0:	9305      	str	r3, [sp, #20]
 80043f2:	4d33      	ldr	r5, [pc, #204]	; (80044c0 <_vfiprintf_r+0x21c>)
 80043f4:	f898 1000 	ldrb.w	r1, [r8]
 80043f8:	2203      	movs	r2, #3
 80043fa:	4628      	mov	r0, r5
 80043fc:	f7fb fee8 	bl	80001d0 <memchr>
 8004400:	b140      	cbz	r0, 8004414 <_vfiprintf_r+0x170>
 8004402:	2340      	movs	r3, #64	; 0x40
 8004404:	1b40      	subs	r0, r0, r5
 8004406:	fa03 f000 	lsl.w	r0, r3, r0
 800440a:	9b04      	ldr	r3, [sp, #16]
 800440c:	4303      	orrs	r3, r0
 800440e:	f108 0801 	add.w	r8, r8, #1
 8004412:	9304      	str	r3, [sp, #16]
 8004414:	f898 1000 	ldrb.w	r1, [r8]
 8004418:	482a      	ldr	r0, [pc, #168]	; (80044c4 <_vfiprintf_r+0x220>)
 800441a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800441e:	2206      	movs	r2, #6
 8004420:	f108 0701 	add.w	r7, r8, #1
 8004424:	f7fb fed4 	bl	80001d0 <memchr>
 8004428:	2800      	cmp	r0, #0
 800442a:	d037      	beq.n	800449c <_vfiprintf_r+0x1f8>
 800442c:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <_vfiprintf_r+0x224>)
 800442e:	bb1b      	cbnz	r3, 8004478 <_vfiprintf_r+0x1d4>
 8004430:	9b03      	ldr	r3, [sp, #12]
 8004432:	3307      	adds	r3, #7
 8004434:	f023 0307 	bic.w	r3, r3, #7
 8004438:	3308      	adds	r3, #8
 800443a:	9303      	str	r3, [sp, #12]
 800443c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800443e:	444b      	add	r3, r9
 8004440:	9309      	str	r3, [sp, #36]	; 0x24
 8004442:	e750      	b.n	80042e6 <_vfiprintf_r+0x42>
 8004444:	fb05 3202 	mla	r2, r5, r2, r3
 8004448:	2001      	movs	r0, #1
 800444a:	4688      	mov	r8, r1
 800444c:	e78a      	b.n	8004364 <_vfiprintf_r+0xc0>
 800444e:	2300      	movs	r3, #0
 8004450:	f108 0801 	add.w	r8, r8, #1
 8004454:	9305      	str	r3, [sp, #20]
 8004456:	4619      	mov	r1, r3
 8004458:	250a      	movs	r5, #10
 800445a:	4640      	mov	r0, r8
 800445c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004460:	3a30      	subs	r2, #48	; 0x30
 8004462:	2a09      	cmp	r2, #9
 8004464:	d903      	bls.n	800446e <_vfiprintf_r+0x1ca>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0c3      	beq.n	80043f2 <_vfiprintf_r+0x14e>
 800446a:	9105      	str	r1, [sp, #20]
 800446c:	e7c1      	b.n	80043f2 <_vfiprintf_r+0x14e>
 800446e:	fb05 2101 	mla	r1, r5, r1, r2
 8004472:	2301      	movs	r3, #1
 8004474:	4680      	mov	r8, r0
 8004476:	e7f0      	b.n	800445a <_vfiprintf_r+0x1b6>
 8004478:	ab03      	add	r3, sp, #12
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4622      	mov	r2, r4
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <_vfiprintf_r+0x228>)
 8004480:	a904      	add	r1, sp, #16
 8004482:	4630      	mov	r0, r6
 8004484:	f3af 8000 	nop.w
 8004488:	f1b0 3fff 	cmp.w	r0, #4294967295
 800448c:	4681      	mov	r9, r0
 800448e:	d1d5      	bne.n	800443c <_vfiprintf_r+0x198>
 8004490:	89a3      	ldrh	r3, [r4, #12]
 8004492:	065b      	lsls	r3, r3, #25
 8004494:	f53f af7e 	bmi.w	8004394 <_vfiprintf_r+0xf0>
 8004498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800449a:	e77d      	b.n	8004398 <_vfiprintf_r+0xf4>
 800449c:	ab03      	add	r3, sp, #12
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	4622      	mov	r2, r4
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <_vfiprintf_r+0x228>)
 80044a4:	a904      	add	r1, sp, #16
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f888 	bl	80045bc <_printf_i>
 80044ac:	e7ec      	b.n	8004488 <_vfiprintf_r+0x1e4>
 80044ae:	bf00      	nop
 80044b0:	08004a08 	.word	0x08004a08
 80044b4:	08004a48 	.word	0x08004a48
 80044b8:	08004a28 	.word	0x08004a28
 80044bc:	080049e8 	.word	0x080049e8
 80044c0:	08004a4e 	.word	0x08004a4e
 80044c4:	08004a52 	.word	0x08004a52
 80044c8:	00000000 	.word	0x00000000
 80044cc:	0800427f 	.word	0x0800427f

080044d0 <_printf_common>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4691      	mov	r9, r2
 80044d6:	461f      	mov	r7, r3
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bfb8      	it	lt
 80044e4:	4613      	movlt	r3, r2
 80044e6:	f8c9 3000 	str.w	r3, [r9]
 80044ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ee:	4606      	mov	r6, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	b112      	cbz	r2, 80044fa <_printf_common+0x2a>
 80044f4:	3301      	adds	r3, #1
 80044f6:	f8c9 3000 	str.w	r3, [r9]
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	0699      	lsls	r1, r3, #26
 80044fe:	bf42      	ittt	mi
 8004500:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004504:	3302      	addmi	r3, #2
 8004506:	f8c9 3000 	strmi.w	r3, [r9]
 800450a:	6825      	ldr	r5, [r4, #0]
 800450c:	f015 0506 	ands.w	r5, r5, #6
 8004510:	d107      	bne.n	8004522 <_printf_common+0x52>
 8004512:	f104 0a19 	add.w	sl, r4, #25
 8004516:	68e3      	ldr	r3, [r4, #12]
 8004518:	f8d9 2000 	ldr.w	r2, [r9]
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	42ab      	cmp	r3, r5
 8004520:	dc28      	bgt.n	8004574 <_printf_common+0xa4>
 8004522:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	3300      	adds	r3, #0
 800452a:	bf18      	it	ne
 800452c:	2301      	movne	r3, #1
 800452e:	0692      	lsls	r2, r2, #26
 8004530:	d42d      	bmi.n	800458e <_printf_common+0xbe>
 8004532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004536:	4639      	mov	r1, r7
 8004538:	4630      	mov	r0, r6
 800453a:	47c0      	blx	r8
 800453c:	3001      	adds	r0, #1
 800453e:	d020      	beq.n	8004582 <_printf_common+0xb2>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	68e5      	ldr	r5, [r4, #12]
 8004544:	f8d9 2000 	ldr.w	r2, [r9]
 8004548:	f003 0306 	and.w	r3, r3, #6
 800454c:	2b04      	cmp	r3, #4
 800454e:	bf08      	it	eq
 8004550:	1aad      	subeq	r5, r5, r2
 8004552:	68a3      	ldr	r3, [r4, #8]
 8004554:	6922      	ldr	r2, [r4, #16]
 8004556:	bf0c      	ite	eq
 8004558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800455c:	2500      	movne	r5, #0
 800455e:	4293      	cmp	r3, r2
 8004560:	bfc4      	itt	gt
 8004562:	1a9b      	subgt	r3, r3, r2
 8004564:	18ed      	addgt	r5, r5, r3
 8004566:	f04f 0900 	mov.w	r9, #0
 800456a:	341a      	adds	r4, #26
 800456c:	454d      	cmp	r5, r9
 800456e:	d11a      	bne.n	80045a6 <_printf_common+0xd6>
 8004570:	2000      	movs	r0, #0
 8004572:	e008      	b.n	8004586 <_printf_common+0xb6>
 8004574:	2301      	movs	r3, #1
 8004576:	4652      	mov	r2, sl
 8004578:	4639      	mov	r1, r7
 800457a:	4630      	mov	r0, r6
 800457c:	47c0      	blx	r8
 800457e:	3001      	adds	r0, #1
 8004580:	d103      	bne.n	800458a <_printf_common+0xba>
 8004582:	f04f 30ff 	mov.w	r0, #4294967295
 8004586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458a:	3501      	adds	r5, #1
 800458c:	e7c3      	b.n	8004516 <_printf_common+0x46>
 800458e:	18e1      	adds	r1, r4, r3
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	2030      	movs	r0, #48	; 0x30
 8004594:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004598:	4422      	add	r2, r4
 800459a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800459e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045a2:	3302      	adds	r3, #2
 80045a4:	e7c5      	b.n	8004532 <_printf_common+0x62>
 80045a6:	2301      	movs	r3, #1
 80045a8:	4622      	mov	r2, r4
 80045aa:	4639      	mov	r1, r7
 80045ac:	4630      	mov	r0, r6
 80045ae:	47c0      	blx	r8
 80045b0:	3001      	adds	r0, #1
 80045b2:	d0e6      	beq.n	8004582 <_printf_common+0xb2>
 80045b4:	f109 0901 	add.w	r9, r9, #1
 80045b8:	e7d8      	b.n	800456c <_printf_common+0x9c>
	...

080045bc <_printf_i>:
 80045bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045c4:	460c      	mov	r4, r1
 80045c6:	7e09      	ldrb	r1, [r1, #24]
 80045c8:	b085      	sub	sp, #20
 80045ca:	296e      	cmp	r1, #110	; 0x6e
 80045cc:	4617      	mov	r7, r2
 80045ce:	4606      	mov	r6, r0
 80045d0:	4698      	mov	r8, r3
 80045d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045d4:	f000 80b3 	beq.w	800473e <_printf_i+0x182>
 80045d8:	d822      	bhi.n	8004620 <_printf_i+0x64>
 80045da:	2963      	cmp	r1, #99	; 0x63
 80045dc:	d036      	beq.n	800464c <_printf_i+0x90>
 80045de:	d80a      	bhi.n	80045f6 <_printf_i+0x3a>
 80045e0:	2900      	cmp	r1, #0
 80045e2:	f000 80b9 	beq.w	8004758 <_printf_i+0x19c>
 80045e6:	2958      	cmp	r1, #88	; 0x58
 80045e8:	f000 8083 	beq.w	80046f2 <_printf_i+0x136>
 80045ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045f4:	e032      	b.n	800465c <_printf_i+0xa0>
 80045f6:	2964      	cmp	r1, #100	; 0x64
 80045f8:	d001      	beq.n	80045fe <_printf_i+0x42>
 80045fa:	2969      	cmp	r1, #105	; 0x69
 80045fc:	d1f6      	bne.n	80045ec <_printf_i+0x30>
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	0605      	lsls	r5, r0, #24
 8004604:	f103 0104 	add.w	r1, r3, #4
 8004608:	d52a      	bpl.n	8004660 <_printf_i+0xa4>
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6011      	str	r1, [r2, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da03      	bge.n	800461a <_printf_i+0x5e>
 8004612:	222d      	movs	r2, #45	; 0x2d
 8004614:	425b      	negs	r3, r3
 8004616:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800461a:	486f      	ldr	r0, [pc, #444]	; (80047d8 <_printf_i+0x21c>)
 800461c:	220a      	movs	r2, #10
 800461e:	e039      	b.n	8004694 <_printf_i+0xd8>
 8004620:	2973      	cmp	r1, #115	; 0x73
 8004622:	f000 809d 	beq.w	8004760 <_printf_i+0x1a4>
 8004626:	d808      	bhi.n	800463a <_printf_i+0x7e>
 8004628:	296f      	cmp	r1, #111	; 0x6f
 800462a:	d020      	beq.n	800466e <_printf_i+0xb2>
 800462c:	2970      	cmp	r1, #112	; 0x70
 800462e:	d1dd      	bne.n	80045ec <_printf_i+0x30>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	e003      	b.n	8004642 <_printf_i+0x86>
 800463a:	2975      	cmp	r1, #117	; 0x75
 800463c:	d017      	beq.n	800466e <_printf_i+0xb2>
 800463e:	2978      	cmp	r1, #120	; 0x78
 8004640:	d1d4      	bne.n	80045ec <_printf_i+0x30>
 8004642:	2378      	movs	r3, #120	; 0x78
 8004644:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004648:	4864      	ldr	r0, [pc, #400]	; (80047dc <_printf_i+0x220>)
 800464a:	e055      	b.n	80046f8 <_printf_i+0x13c>
 800464c:	6813      	ldr	r3, [r2, #0]
 800464e:	1d19      	adds	r1, r3, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6011      	str	r1, [r2, #0]
 8004654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800465c:	2301      	movs	r3, #1
 800465e:	e08c      	b.n	800477a <_printf_i+0x1be>
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6011      	str	r1, [r2, #0]
 8004664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004668:	bf18      	it	ne
 800466a:	b21b      	sxthne	r3, r3
 800466c:	e7cf      	b.n	800460e <_printf_i+0x52>
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	6825      	ldr	r5, [r4, #0]
 8004672:	1d18      	adds	r0, r3, #4
 8004674:	6010      	str	r0, [r2, #0]
 8004676:	0628      	lsls	r0, r5, #24
 8004678:	d501      	bpl.n	800467e <_printf_i+0xc2>
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	e002      	b.n	8004684 <_printf_i+0xc8>
 800467e:	0668      	lsls	r0, r5, #25
 8004680:	d5fb      	bpl.n	800467a <_printf_i+0xbe>
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	4854      	ldr	r0, [pc, #336]	; (80047d8 <_printf_i+0x21c>)
 8004686:	296f      	cmp	r1, #111	; 0x6f
 8004688:	bf14      	ite	ne
 800468a:	220a      	movne	r2, #10
 800468c:	2208      	moveq	r2, #8
 800468e:	2100      	movs	r1, #0
 8004690:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004694:	6865      	ldr	r5, [r4, #4]
 8004696:	60a5      	str	r5, [r4, #8]
 8004698:	2d00      	cmp	r5, #0
 800469a:	f2c0 8095 	blt.w	80047c8 <_printf_i+0x20c>
 800469e:	6821      	ldr	r1, [r4, #0]
 80046a0:	f021 0104 	bic.w	r1, r1, #4
 80046a4:	6021      	str	r1, [r4, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d13d      	bne.n	8004726 <_printf_i+0x16a>
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	f040 808e 	bne.w	80047cc <_printf_i+0x210>
 80046b0:	4665      	mov	r5, ip
 80046b2:	2a08      	cmp	r2, #8
 80046b4:	d10b      	bne.n	80046ce <_printf_i+0x112>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	07db      	lsls	r3, r3, #31
 80046ba:	d508      	bpl.n	80046ce <_printf_i+0x112>
 80046bc:	6923      	ldr	r3, [r4, #16]
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	bfde      	ittt	le
 80046c4:	2330      	movle	r3, #48	; 0x30
 80046c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046ce:	ebac 0305 	sub.w	r3, ip, r5
 80046d2:	6123      	str	r3, [r4, #16]
 80046d4:	f8cd 8000 	str.w	r8, [sp]
 80046d8:	463b      	mov	r3, r7
 80046da:	aa03      	add	r2, sp, #12
 80046dc:	4621      	mov	r1, r4
 80046de:	4630      	mov	r0, r6
 80046e0:	f7ff fef6 	bl	80044d0 <_printf_common>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d14d      	bne.n	8004784 <_printf_i+0x1c8>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	b005      	add	sp, #20
 80046ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046f2:	4839      	ldr	r0, [pc, #228]	; (80047d8 <_printf_i+0x21c>)
 80046f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	6821      	ldr	r1, [r4, #0]
 80046fc:	1d1d      	adds	r5, r3, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6015      	str	r5, [r2, #0]
 8004702:	060a      	lsls	r2, r1, #24
 8004704:	d50b      	bpl.n	800471e <_printf_i+0x162>
 8004706:	07ca      	lsls	r2, r1, #31
 8004708:	bf44      	itt	mi
 800470a:	f041 0120 	orrmi.w	r1, r1, #32
 800470e:	6021      	strmi	r1, [r4, #0]
 8004710:	b91b      	cbnz	r3, 800471a <_printf_i+0x15e>
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	f022 0220 	bic.w	r2, r2, #32
 8004718:	6022      	str	r2, [r4, #0]
 800471a:	2210      	movs	r2, #16
 800471c:	e7b7      	b.n	800468e <_printf_i+0xd2>
 800471e:	064d      	lsls	r5, r1, #25
 8004720:	bf48      	it	mi
 8004722:	b29b      	uxthmi	r3, r3
 8004724:	e7ef      	b.n	8004706 <_printf_i+0x14a>
 8004726:	4665      	mov	r5, ip
 8004728:	fbb3 f1f2 	udiv	r1, r3, r2
 800472c:	fb02 3311 	mls	r3, r2, r1, r3
 8004730:	5cc3      	ldrb	r3, [r0, r3]
 8004732:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004736:	460b      	mov	r3, r1
 8004738:	2900      	cmp	r1, #0
 800473a:	d1f5      	bne.n	8004728 <_printf_i+0x16c>
 800473c:	e7b9      	b.n	80046b2 <_printf_i+0xf6>
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	6825      	ldr	r5, [r4, #0]
 8004742:	6961      	ldr	r1, [r4, #20]
 8004744:	1d18      	adds	r0, r3, #4
 8004746:	6010      	str	r0, [r2, #0]
 8004748:	0628      	lsls	r0, r5, #24
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	d501      	bpl.n	8004752 <_printf_i+0x196>
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	e002      	b.n	8004758 <_printf_i+0x19c>
 8004752:	066a      	lsls	r2, r5, #25
 8004754:	d5fb      	bpl.n	800474e <_printf_i+0x192>
 8004756:	8019      	strh	r1, [r3, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	4665      	mov	r5, ip
 800475e:	e7b9      	b.n	80046d4 <_printf_i+0x118>
 8004760:	6813      	ldr	r3, [r2, #0]
 8004762:	1d19      	adds	r1, r3, #4
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	681d      	ldr	r5, [r3, #0]
 8004768:	6862      	ldr	r2, [r4, #4]
 800476a:	2100      	movs	r1, #0
 800476c:	4628      	mov	r0, r5
 800476e:	f7fb fd2f 	bl	80001d0 <memchr>
 8004772:	b108      	cbz	r0, 8004778 <_printf_i+0x1bc>
 8004774:	1b40      	subs	r0, r0, r5
 8004776:	6060      	str	r0, [r4, #4]
 8004778:	6863      	ldr	r3, [r4, #4]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	2300      	movs	r3, #0
 800477e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004782:	e7a7      	b.n	80046d4 <_printf_i+0x118>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	462a      	mov	r2, r5
 8004788:	4639      	mov	r1, r7
 800478a:	4630      	mov	r0, r6
 800478c:	47c0      	blx	r8
 800478e:	3001      	adds	r0, #1
 8004790:	d0aa      	beq.n	80046e8 <_printf_i+0x12c>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	079b      	lsls	r3, r3, #30
 8004796:	d413      	bmi.n	80047c0 <_printf_i+0x204>
 8004798:	68e0      	ldr	r0, [r4, #12]
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	4298      	cmp	r0, r3
 800479e:	bfb8      	it	lt
 80047a0:	4618      	movlt	r0, r3
 80047a2:	e7a3      	b.n	80046ec <_printf_i+0x130>
 80047a4:	2301      	movs	r3, #1
 80047a6:	464a      	mov	r2, r9
 80047a8:	4639      	mov	r1, r7
 80047aa:	4630      	mov	r0, r6
 80047ac:	47c0      	blx	r8
 80047ae:	3001      	adds	r0, #1
 80047b0:	d09a      	beq.n	80046e8 <_printf_i+0x12c>
 80047b2:	3501      	adds	r5, #1
 80047b4:	68e3      	ldr	r3, [r4, #12]
 80047b6:	9a03      	ldr	r2, [sp, #12]
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	42ab      	cmp	r3, r5
 80047bc:	dcf2      	bgt.n	80047a4 <_printf_i+0x1e8>
 80047be:	e7eb      	b.n	8004798 <_printf_i+0x1dc>
 80047c0:	2500      	movs	r5, #0
 80047c2:	f104 0919 	add.w	r9, r4, #25
 80047c6:	e7f5      	b.n	80047b4 <_printf_i+0x1f8>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ac      	bne.n	8004726 <_printf_i+0x16a>
 80047cc:	7803      	ldrb	r3, [r0, #0]
 80047ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d6:	e76c      	b.n	80046b2 <_printf_i+0xf6>
 80047d8:	08004a59 	.word	0x08004a59
 80047dc:	08004a6a 	.word	0x08004a6a

080047e0 <_sbrk_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4c06      	ldr	r4, [pc, #24]	; (80047fc <_sbrk_r+0x1c>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	4605      	mov	r5, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	f7fc f8e4 	bl	80009b8 <_sbrk>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_sbrk_r+0x1a>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_sbrk_r+0x1a>
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	20004084 	.word	0x20004084

08004800 <__sread>:
 8004800:	b510      	push	{r4, lr}
 8004802:	460c      	mov	r4, r1
 8004804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004808:	f000 f896 	bl	8004938 <_read_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	bfab      	itete	ge
 8004810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004812:	89a3      	ldrhlt	r3, [r4, #12]
 8004814:	181b      	addge	r3, r3, r0
 8004816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800481a:	bfac      	ite	ge
 800481c:	6563      	strge	r3, [r4, #84]	; 0x54
 800481e:	81a3      	strhlt	r3, [r4, #12]
 8004820:	bd10      	pop	{r4, pc}

08004822 <__swrite>:
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	461f      	mov	r7, r3
 8004828:	898b      	ldrh	r3, [r1, #12]
 800482a:	05db      	lsls	r3, r3, #23
 800482c:	4605      	mov	r5, r0
 800482e:	460c      	mov	r4, r1
 8004830:	4616      	mov	r6, r2
 8004832:	d505      	bpl.n	8004840 <__swrite+0x1e>
 8004834:	2302      	movs	r3, #2
 8004836:	2200      	movs	r2, #0
 8004838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800483c:	f000 f868 	bl	8004910 <_lseek_r>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800484a:	81a3      	strh	r3, [r4, #12]
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	4628      	mov	r0, r5
 8004852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004856:	f000 b817 	b.w	8004888 <_write_r>

0800485a <__sseek>:
 800485a:	b510      	push	{r4, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 f855 	bl	8004910 <_lseek_r>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	bf15      	itete	ne
 800486c:	6560      	strne	r0, [r4, #84]	; 0x54
 800486e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004876:	81a3      	strheq	r3, [r4, #12]
 8004878:	bf18      	it	ne
 800487a:	81a3      	strhne	r3, [r4, #12]
 800487c:	bd10      	pop	{r4, pc}

0800487e <__sclose>:
 800487e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004882:	f000 b813 	b.w	80048ac <_close_r>
	...

08004888 <_write_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4c07      	ldr	r4, [pc, #28]	; (80048a8 <_write_r+0x20>)
 800488c:	4605      	mov	r5, r0
 800488e:	4608      	mov	r0, r1
 8004890:	4611      	mov	r1, r2
 8004892:	2200      	movs	r2, #0
 8004894:	6022      	str	r2, [r4, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	f7fb feab 	bl	80005f2 <_write>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_write_r+0x1e>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_write_r+0x1e>
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	20004084 	.word	0x20004084

080048ac <_close_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4c06      	ldr	r4, [pc, #24]	; (80048c8 <_close_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4605      	mov	r5, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	f7fc f84a 	bl	8000950 <_close>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_close_r+0x1a>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_close_r+0x1a>
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	20004084 	.word	0x20004084

080048cc <_fstat_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4c07      	ldr	r4, [pc, #28]	; (80048ec <_fstat_r+0x20>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4605      	mov	r5, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	f7fc f845 	bl	8000968 <_fstat>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d102      	bne.n	80048e8 <_fstat_r+0x1c>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	b103      	cbz	r3, 80048e8 <_fstat_r+0x1c>
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	bd38      	pop	{r3, r4, r5, pc}
 80048ea:	bf00      	nop
 80048ec:	20004084 	.word	0x20004084

080048f0 <_isatty_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4c06      	ldr	r4, [pc, #24]	; (800490c <_isatty_r+0x1c>)
 80048f4:	2300      	movs	r3, #0
 80048f6:	4605      	mov	r5, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	f7fc f844 	bl	8000988 <_isatty>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_isatty_r+0x1a>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	b103      	cbz	r3, 800490a <_isatty_r+0x1a>
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	20004084 	.word	0x20004084

08004910 <_lseek_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4c07      	ldr	r4, [pc, #28]	; (8004930 <_lseek_r+0x20>)
 8004914:	4605      	mov	r5, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	2200      	movs	r2, #0
 800491c:	6022      	str	r2, [r4, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fc f83d 	bl	800099e <_lseek>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_lseek_r+0x1e>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	b103      	cbz	r3, 800492e <_lseek_r+0x1e>
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	20004084 	.word	0x20004084

08004934 <__malloc_lock>:
 8004934:	4770      	bx	lr

08004936 <__malloc_unlock>:
 8004936:	4770      	bx	lr

08004938 <_read_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4c07      	ldr	r4, [pc, #28]	; (8004958 <_read_r+0x20>)
 800493c:	4605      	mov	r5, r0
 800493e:	4608      	mov	r0, r1
 8004940:	4611      	mov	r1, r2
 8004942:	2200      	movs	r2, #0
 8004944:	6022      	str	r2, [r4, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fb ffe5 	bl	8000916 <_read>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_read_r+0x1e>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	b103      	cbz	r3, 8004956 <_read_r+0x1e>
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20004084 	.word	0x20004084

0800495c <_init>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr

08004968 <_fini>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	bf00      	nop
 800496c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496e:	bc08      	pop	{r3}
 8004970:	469e      	mov	lr, r3
 8004972:	4770      	bx	lr
