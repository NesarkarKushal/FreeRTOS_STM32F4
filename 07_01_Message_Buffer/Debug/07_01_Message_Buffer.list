
07_01_Message_Buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004440  08004440  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004448  08004448  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd8  20000074  080044c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000404c  080044c4  0002404c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b63a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f07  00000000  00000000  0002b6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000718  00000000  00000000  0002ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021f53  00000000  00000000  0002e510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000804e  00000000  00000000  00050463  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c917a  00000000  00000000  000584b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012162b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000258c  00000000  00000000  001216a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042bc 	.word	0x080042bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080042bc 	.word	0x080042bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	200000e4 	.word	0x200000e4

080005a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d013      	beq.n	80005e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00b      	beq.n	80005e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	e000      	b.n	80005d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f9      	beq.n	80005ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_write>:
#include "message_buffer.h"

#include <stdio.h>

int _write(int file,char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	int i=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x2a>
	ITM_SendChar((*ptr++));
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffc7 	bl	80005a4 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x16>
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <TaskA>:
static void MX_GPIO_Init(void);

MessageBufferHandle_t msg_tx,msg_rx;

void TaskA(void const * argument)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	size_t xBytesSent;
	uint8_t ucArrayToSend[] = { 0, 1, 2, 3 };
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <TaskA+0x38>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60bb      	str	r3, [r7, #8]
	char *pcStringToSend = "String to send";
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <TaskA+0x3c>)
 8000640:	617b      	str	r3, [r7, #20]
	const TickType_t x100ms = pdMS_TO_TICKS( 100 );
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	613b      	str	r3, [r7, #16]


	xBytesSent = xMessageBufferSend( msg_rx,
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <TaskA+0x40>)
 8000648:	6818      	ldr	r0, [r3, #0]
 800064a:	f107 0108 	add.w	r1, r7, #8
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2204      	movs	r2, #4
 8000652:	f001 f8d9 	bl	8001808 <xStreamBufferSend>
 8000656:	60f8      	str	r0, [r7, #12]
//	if( xBytesSent != sizeof( ucArrayToSend ) )
//	{
//		printf("Failed to send no space\n");
//	}

	vTaskDelay(2000);
 8000658:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800065c:	f001 fd4e 	bl	80020fc <vTaskDelay>
//
//	if( xBytesSent != strlen( pcStringToSend ) )
//	{
//		printf("Failed to send no space\n");
//	}
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	080042e4 	.word	0x080042e4
 800066c:	080042d4 	.word	0x080042d4
 8000670:	20004040 	.word	0x20004040

08000674 <TaskB>:

void TaskB(void const * argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint8_t ucRxData[3];
	size_t xReceivedBytes;
	int i;
	int size;
	const TickType_t xBlockTime = pdMS_TO_TICKS( 2000 );
 800067c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000680:	61bb      	str	r3, [r7, #24]

	size=sizeof( ucRxData );
 8000682:	2303      	movs	r3, #3
 8000684:	617b      	str	r3, [r7, #20]
	for(;;)
	{
	xReceivedBytes = xMessageBufferReceive( msg_rx,
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <TaskB+0x60>)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	f107 010c 	add.w	r1, r7, #12
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	2203      	movs	r2, #3
 8000692:	f001 f9a7 	bl	80019e4 <xStreamBufferReceive>
 8000696:	6138      	str	r0, [r7, #16]
											ucRxData,
											sizeof( ucRxData ),
											xBlockTime );
	if( xReceivedBytes > 0 )
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0f3      	beq.n	8000686 <TaskB+0x12>
	{
		for(i=0;i<size;i++)
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
 80006a2:	e00e      	b.n	80006c2 <TaskB+0x4e>
		{
			printf("received=%d\n",ucRxData[i]);
 80006a4:	f107 020c 	add.w	r2, r7, #12
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <TaskB+0x64>)
 80006b2:	f002 febb 	bl	800342c <iprintf>
			vTaskDelay(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f001 fd20 	bl	80020fc <vTaskDelay>
		for(i=0;i<size;i++)
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	3301      	adds	r3, #1
 80006c0:	61fb      	str	r3, [r7, #28]
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbec      	blt.n	80006a4 <TaskB+0x30>
		}
		printf("done-------\n");
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <TaskB+0x68>)
 80006cc:	f002 ff22 	bl	8003514 <puts>
	xReceivedBytes = xMessageBufferReceive( msg_rx,
 80006d0:	e7d9      	b.n	8000686 <TaskB+0x12>
 80006d2:	bf00      	nop
 80006d4:	20004040 	.word	0x20004040
 80006d8:	080042e8 	.word	0x080042e8
 80006dc:	080042f8 	.word	0x080042f8

080006e0 <main>:
	}
	}
}

int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af02      	add	r7, sp, #8

  HAL_Init();
 80006e6:	f000 f9f1 	bl	8000acc <HAL_Init>

  SystemClock_Config();
 80006ea:	f000 f84f 	bl	800078c <SystemClock_Config>

  MX_GPIO_Init();
 80006ee:	f000 f8ab 	bl	8000848 <MX_GPIO_Init>
  msg_tx=xMessageBufferCreate(100);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2100      	movs	r1, #0
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f000 fffc 	bl	80016f4 <xStreamBufferGenericCreate>
 80006fc:	4602      	mov	r2, r0
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <main+0x88>)
 8000700:	601a      	str	r2, [r3, #0]
  msg_rx=xMessageBufferCreate(100);
 8000702:	2201      	movs	r2, #1
 8000704:	2100      	movs	r1, #0
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f000 fff4 	bl	80016f4 <xStreamBufferGenericCreate>
 800070c:	4602      	mov	r2, r0
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x8c>)
 8000710:	601a      	str	r2, [r3, #0]

  if(msg_tx==NULL)
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <main+0x88>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d103      	bne.n	8000722 <main+0x42>
  {
	  printf("Failed to Create Tx message box as there is no space\n");
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0x90>)
 800071c:	f002 fefa 	bl	8003514 <puts>
 8000720:	e01e      	b.n	8000760 <main+0x80>
  }
  else if(msg_rx==NULL)
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <main+0x8c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <main+0x52>
  {
	  printf("Failed to Create Rx Message box as there is no space\n");
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <main+0x94>)
 800072c:	f002 fef2 	bl	8003514 <puts>
 8000730:	e016      	b.n	8000760 <main+0x80>
  }
  else
  {
	  xTaskCreate(TaskA,"TX",128,NULL,1,NULL);
 8000732:	2300      	movs	r3, #0
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	2301      	movs	r3, #1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2300      	movs	r3, #0
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	490e      	ldr	r1, [pc, #56]	; (8000778 <main+0x98>)
 8000740:	480e      	ldr	r0, [pc, #56]	; (800077c <main+0x9c>)
 8000742:	f001 fba5 	bl	8001e90 <xTaskCreate>
	  xTaskCreate(TaskB,"RX",128,NULL,1,NULL);
 8000746:	2300      	movs	r3, #0
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	2301      	movs	r3, #1
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	2300      	movs	r3, #0
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	490b      	ldr	r1, [pc, #44]	; (8000780 <main+0xa0>)
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <main+0xa4>)
 8000756:	f001 fb9b 	bl	8001e90 <xTaskCreate>
	  printf("Threads are created\n");
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <main+0xa8>)
 800075c:	f002 feda 	bl	8003514 <puts>
  }

  vTaskStartScheduler();
 8000760:	f001 fd00 	bl	8002164 <vTaskStartScheduler>
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x84>
 8000766:	bf00      	nop
 8000768:	2000403c 	.word	0x2000403c
 800076c:	20004040 	.word	0x20004040
 8000770:	08004304 	.word	0x08004304
 8000774:	0800433c 	.word	0x0800433c
 8000778:	08004374 	.word	0x08004374
 800077c:	08000631 	.word	0x08000631
 8000780:	08004378 	.word	0x08004378
 8000784:	08000675 	.word	0x08000675
 8000788:	0800437c 	.word	0x0800437c

0800078c <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fe3d 	bl	800341a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <SystemClock_Config+0xb4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <SystemClock_Config+0xb4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <SystemClock_Config+0xb4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <SystemClock_Config+0xb8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <SystemClock_Config+0xb8>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <SystemClock_Config+0xb8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fabd 	bl	8000d7c <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000808:	f000 f846 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd18 	bl	800125c <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000832:	f000 f831 	bl	8000898 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_GPIO_Init+0x4c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_GPIO_Init+0x4c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_GPIO_Init+0x4c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_GPIO_Init+0x4c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <MX_GPIO_Init+0x4c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_GPIO_Init+0x4c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089e:	e7fe      	b.n	800089e <Error_Handler+0x6>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <HAL_MspInit+0x54>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x54>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_MspInit+0x54>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_MspInit+0x54>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	210f      	movs	r1, #15
 80008e2:	f06f 0001 	mvn.w	r0, #1
 80008e6:	f000 fa20 	bl	8000d2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 f922 	bl	8000b70 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800092c:	f001 ffb2 	bl	8002894 <xTaskGetSchedulerState>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d001      	beq.n	800093a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000936:	f002 fb17 	bl	8002f68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	e00a      	b.n	8000966 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000950:	f3af 8000 	nop.w
 8000954:	4601      	mov	r1, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	60ba      	str	r2, [r7, #8]
 800095c:	b2ca      	uxtb	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbf0      	blt.n	8000950 <_read+0x12>
	}

return len;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	return -1;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a0:	605a      	str	r2, [r3, #4]
	return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_isatty>:

int _isatty(int file)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	return 1;
 80009b8:	2301      	movs	r3, #1
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
	return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f002 fcce 	bl	80033b0 <__errno>
 8000a14:	4602      	mov	r2, r0
 8000a16:	230c      	movs	r3, #12
 8000a18:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20020000 	.word	0x20020000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	200002e4 	.word	0x200002e4
 8000a48:	20004050 	.word	0x20004050

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <SystemInit+0x28>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <SystemInit+0x28>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SystemInit+0x28>)
 8000a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a66:	609a      	str	r2, [r3, #8]
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a7e:	e003      	b.n	8000a88 <LoopCopyDataInit>

08000a80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a86:	3104      	adds	r1, #4

08000a88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a90:	d3f6      	bcc.n	8000a80 <CopyDataInit>
  ldr  r2, =_sbss
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a94:	e002      	b.n	8000a9c <LoopFillZerobss>

08000a96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a98:	f842 3b04 	str.w	r3, [r2], #4

08000a9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa0:	d3f9      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aa2:	f7ff ffd3 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f002 fc89 	bl	80033bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aaa:	f7ff fe19 	bl	80006e0 <main>
  bx  lr    
 8000aae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ab4:	08004450 	.word	0x08004450
  ldr  r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000abc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000ac0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000ac4:	2000404c 	.word	0x2000404c

08000ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC_IRQHandler>
	...

08000acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_Init+0x40>)
 8000ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_Init+0x40>)
 8000ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_Init+0x40>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f90d 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fece 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023c00 	.word	0x40023c00

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f917 	bl	8000d62 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f8ed 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20004044 	.word	0x20004044

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20004044 	.word	0x20004044

08000bb0 <__NVIC_SetPriorityGrouping>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_SetPriority>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff47 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff5c 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffb0 	bl	8000cd0 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e25b      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d075      	beq.n	8000e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d9a:	4ba3      	ldr	r3, [pc, #652]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d00c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da6:	4ba0      	ldr	r3, [pc, #640]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d112      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db2:	4b9d      	ldr	r3, [pc, #628]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dbe:	d10b      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	4b99      	ldr	r3, [pc, #612]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d05b      	beq.n	8000e84 <HAL_RCC_OscConfig+0x108>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d157      	bne.n	8000e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e236      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de0:	d106      	bne.n	8000df0 <HAL_RCC_OscConfig+0x74>
 8000de2:	4b91      	ldr	r3, [pc, #580]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a90      	ldr	r2, [pc, #576]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e01d      	b.n	8000e2c <HAL_RCC_OscConfig+0xb0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0x98>
 8000dfa:	4b8b      	ldr	r3, [pc, #556]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a8a      	ldr	r2, [pc, #552]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b88      	ldr	r3, [pc, #544]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a87      	ldr	r2, [pc, #540]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e00b      	b.n	8000e2c <HAL_RCC_OscConfig+0xb0>
 8000e14:	4b84      	ldr	r3, [pc, #528]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a83      	ldr	r2, [pc, #524]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b81      	ldr	r3, [pc, #516]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a80      	ldr	r2, [pc, #512]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d013      	beq.n	8000e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff feb0 	bl	8000b98 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff feac 	bl	8000b98 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e1fb      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	4b76      	ldr	r3, [pc, #472]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0xc0>
 8000e5a:	e014      	b.n	8000e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fe9c 	bl	8000b98 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fe98 	bl	8000b98 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1e7      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	4b6c      	ldr	r3, [pc, #432]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0xe8>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d063      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e92:	4b65      	ldr	r3, [pc, #404]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e9e:	4b62      	ldr	r3, [pc, #392]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d11c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eaa:	4b5f      	ldr	r3, [pc, #380]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d116      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <HAL_RCC_OscConfig+0x152>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d001      	beq.n	8000ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e1bb      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4b56      	ldr	r3, [pc, #344]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4952      	ldr	r1, [pc, #328]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	e03a      	b.n	8000f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d020      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eec:	4b4f      	ldr	r3, [pc, #316]	; (800102c <HAL_RCC_OscConfig+0x2b0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fe51 	bl	8000b98 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fe4d 	bl	8000b98 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e19c      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	4b46      	ldr	r3, [pc, #280]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4940      	ldr	r1, [pc, #256]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <HAL_RCC_OscConfig+0x2b0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fe30 	bl	8000b98 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fe2c 	bl	8000b98 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e17b      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d030      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d016      	beq.n	8000f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <HAL_RCC_OscConfig+0x2b4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f74:	f7ff fe10 	bl	8000b98 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fe0c 	bl	8000b98 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e15b      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x200>
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_RCC_OscConfig+0x2b4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fdf9 	bl	8000b98 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000faa:	f7ff fdf5 	bl	8000b98 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e144      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f0      	bne.n	8000faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a0 	beq.w	8001116 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10f      	bne.n	8001006 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001002:	2301      	movs	r3, #1
 8001004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_RCC_OscConfig+0x2b8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100e:	2b00      	cmp	r3, #0
 8001010:	d121      	bne.n	8001056 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_RCC_OscConfig+0x2b8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_RCC_OscConfig+0x2b8>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101e:	f7ff fdbb 	bl	8000b98 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	e011      	b.n	800104a <HAL_RCC_OscConfig+0x2ce>
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	42470000 	.word	0x42470000
 8001030:	42470e80 	.word	0x42470e80
 8001034:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001038:	f7ff fdae 	bl	8000b98 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e0fd      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104a:	4b81      	ldr	r3, [pc, #516]	; (8001250 <HAL_RCC_OscConfig+0x4d4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d106      	bne.n	800106c <HAL_RCC_OscConfig+0x2f0>
 800105e:	4b7d      	ldr	r3, [pc, #500]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001062:	4a7c      	ldr	r2, [pc, #496]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6713      	str	r3, [r2, #112]	; 0x70
 800106a:	e01c      	b.n	80010a6 <HAL_RCC_OscConfig+0x32a>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b05      	cmp	r3, #5
 8001072:	d10c      	bne.n	800108e <HAL_RCC_OscConfig+0x312>
 8001074:	4b77      	ldr	r3, [pc, #476]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001078:	4a76      	ldr	r2, [pc, #472]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6713      	str	r3, [r2, #112]	; 0x70
 8001080:	4b74      	ldr	r3, [pc, #464]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001084:	4a73      	ldr	r2, [pc, #460]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6713      	str	r3, [r2, #112]	; 0x70
 800108c:	e00b      	b.n	80010a6 <HAL_RCC_OscConfig+0x32a>
 800108e:	4b71      	ldr	r3, [pc, #452]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001092:	4a70      	ldr	r2, [pc, #448]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	6713      	str	r3, [r2, #112]	; 0x70
 800109a:	4b6e      	ldr	r3, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 800109c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800109e:	4a6d      	ldr	r2, [pc, #436]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 80010a0:	f023 0304 	bic.w	r3, r3, #4
 80010a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d015      	beq.n	80010da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ae:	f7ff fd73 	bl	8000b98 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b4:	e00a      	b.n	80010cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b6:	f7ff fd6f 	bl	8000b98 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e0bc      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	4b61      	ldr	r3, [pc, #388]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 80010ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0ee      	beq.n	80010b6 <HAL_RCC_OscConfig+0x33a>
 80010d8:	e014      	b.n	8001104 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff fd5d 	bl	8000b98 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e0:	e00a      	b.n	80010f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	f7ff fd59 	bl	8000b98 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e0a6      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 80010fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1ee      	bne.n	80010e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d105      	bne.n	8001116 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a51      	ldr	r2, [pc, #324]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8092 	beq.w	8001244 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b08      	cmp	r3, #8
 800112a:	d05c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d141      	bne.n	80011b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fd2d 	bl	8000b98 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001142:	f7ff fd29 	bl	8000b98 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e078      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f0      	bne.n	8001142 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69da      	ldr	r2, [r3, #28]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	019b      	lsls	r3, r3, #6
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	085b      	lsrs	r3, r3, #1
 8001178:	3b01      	subs	r3, #1
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	061b      	lsls	r3, r3, #24
 8001184:	4933      	ldr	r1, [pc, #204]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fd02 	bl	8000b98 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff fcfe 	bl	8000b98 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e04d      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x41c>
 80011b6:	e045      	b.n	8001244 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_OscConfig+0x4dc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fceb 	bl	8000b98 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fce7 	bl	8000b98 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e036      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x44a>
 80011e4:	e02e      	b.n	8001244 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e029      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_RCC_OscConfig+0x4d8>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	429a      	cmp	r2, r3
 8001204:	d11c      	bne.n	8001240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001210:	429a      	cmp	r2, r3
 8001212:	d115      	bne.n	8001240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800121a:	4013      	ands	r3, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001220:	4293      	cmp	r3, r2
 8001222:	d10d      	bne.n	8001240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800123c:	429a      	cmp	r2, r3
 800123e:	d001      	beq.n	8001244 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40007000 	.word	0x40007000
 8001254:	40023800 	.word	0x40023800
 8001258:	42470060 	.word	0x42470060

0800125c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0cc      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90c      	bls.n	8001298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b65      	ldr	r3, [pc, #404]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d044      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d119      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d003      	beq.n	800131a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001316:	2b03      	cmp	r3, #3
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e067      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4934      	ldr	r1, [pc, #208]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	4313      	orrs	r3, r2
 800134a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fc24 	bl	8000b98 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fc20 	bl	8000b98 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e04f      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d20c      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f821 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013e6:	4601      	mov	r1, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	fa21 f303 	lsr.w	r3, r1, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fb84 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00
 8001418:	40023800 	.word	0x40023800
 800141c:	08004398 	.word	0x08004398
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800143e:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_GetSysClockFreq+0x158>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b04      	cmp	r3, #4
 8001448:	d007      	beq.n	800145a <HAL_RCC_GetSysClockFreq+0x32>
 800144a:	2b08      	cmp	r3, #8
 800144c:	d008      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x38>
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 808d 	bne.w	800156e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001454:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001456:	60bb      	str	r3, [r7, #8]
       break;
 8001458:	e08c      	b.n	8001574 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800145a:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <HAL_RCC_GetSysClockFreq+0x160>)
 800145c:	60bb      	str	r3, [r7, #8]
      break;
 800145e:	e089      	b.n	8001574 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_RCC_GetSysClockFreq+0x158>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001468:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800146a:	4b45      	ldr	r3, [pc, #276]	; (8001580 <HAL_RCC_GetSysClockFreq+0x158>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d023      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001476:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_RCC_GetSysClockFreq+0x158>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	099b      	lsrs	r3, r3, #6
 800147c:	f04f 0400 	mov.w	r4, #0
 8001480:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	ea03 0501 	and.w	r5, r3, r1
 800148c:	ea04 0602 	and.w	r6, r4, r2
 8001490:	4a3d      	ldr	r2, [pc, #244]	; (8001588 <HAL_RCC_GetSysClockFreq+0x160>)
 8001492:	fb02 f106 	mul.w	r1, r2, r6
 8001496:	2200      	movs	r2, #0
 8001498:	fb02 f205 	mul.w	r2, r2, r5
 800149c:	440a      	add	r2, r1
 800149e:	493a      	ldr	r1, [pc, #232]	; (8001588 <HAL_RCC_GetSysClockFreq+0x160>)
 80014a0:	fba5 0101 	umull	r0, r1, r5, r1
 80014a4:	1853      	adds	r3, r2, r1
 80014a6:	4619      	mov	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 0400 	mov.w	r4, #0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4623      	mov	r3, r4
 80014b2:	f7fe fedd 	bl	8000270 <__aeabi_uldivmod>
 80014b6:	4603      	mov	r3, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e049      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_RCC_GetSysClockFreq+0x158>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	099b      	lsrs	r3, r3, #6
 80014c4:	f04f 0400 	mov.w	r4, #0
 80014c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	ea03 0501 	and.w	r5, r3, r1
 80014d4:	ea04 0602 	and.w	r6, r4, r2
 80014d8:	4629      	mov	r1, r5
 80014da:	4632      	mov	r2, r6
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	f04f 0400 	mov.w	r4, #0
 80014e4:	0154      	lsls	r4, r2, #5
 80014e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ea:	014b      	lsls	r3, r1, #5
 80014ec:	4619      	mov	r1, r3
 80014ee:	4622      	mov	r2, r4
 80014f0:	1b49      	subs	r1, r1, r5
 80014f2:	eb62 0206 	sbc.w	r2, r2, r6
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f04f 0400 	mov.w	r4, #0
 80014fe:	0194      	lsls	r4, r2, #6
 8001500:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001504:	018b      	lsls	r3, r1, #6
 8001506:	1a5b      	subs	r3, r3, r1
 8001508:	eb64 0402 	sbc.w	r4, r4, r2
 800150c:	f04f 0100 	mov.w	r1, #0
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	00e2      	lsls	r2, r4, #3
 8001516:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800151a:	00d9      	lsls	r1, r3, #3
 800151c:	460b      	mov	r3, r1
 800151e:	4614      	mov	r4, r2
 8001520:	195b      	adds	r3, r3, r5
 8001522:	eb44 0406 	adc.w	r4, r4, r6
 8001526:	f04f 0100 	mov.w	r1, #0
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	02a2      	lsls	r2, r4, #10
 8001530:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001534:	0299      	lsls	r1, r3, #10
 8001536:	460b      	mov	r3, r1
 8001538:	4614      	mov	r4, r2
 800153a:	4618      	mov	r0, r3
 800153c:	4621      	mov	r1, r4
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f04f 0400 	mov.w	r4, #0
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	f7fe fe92 	bl	8000270 <__aeabi_uldivmod>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_RCC_GetSysClockFreq+0x158>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	0c1b      	lsrs	r3, r3, #16
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	3301      	adds	r3, #1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	60bb      	str	r3, [r7, #8]
      break;
 800156c:	e002      	b.n	8001574 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001570:	60bb      	str	r3, [r7, #8]
      break;
 8001572:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001574:	68bb      	ldr	r3, [r7, #8]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	00f42400 	.word	0x00f42400
 8001588:	017d7840 	.word	0x017d7840

0800158c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f103 0208 	add.w	r2, r3, #8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f103 0208 	add.w	r2, r3, #8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f103 0208 	add.w	r2, r3, #8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d103      	bne.n	800164e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e00c      	b.n	8001668 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3308      	adds	r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e002      	b.n	800165c <vListInsert+0x2e>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	429a      	cmp	r2, r3
 8001666:	d2f6      	bcs.n	8001656 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6892      	ldr	r2, [r2, #8]
 80016b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6852      	ldr	r2, [r2, #4]
 80016c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d103      	bne.n	80016d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1e5a      	subs	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10f      	bne.n	8001726 <xStreamBufferGenericCreate+0x32>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b04      	cmp	r3, #4
 8001710:	d819      	bhi.n	8001746 <xStreamBufferGenericCreate+0x52>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001716:	f383 8811 	msr	BASEPRI, r3
 800171a:	f3bf 8f6f 	isb	sy
 800171e:	f3bf 8f4f 	dsb	sy
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	e7fe      	b.n	8001724 <xStreamBufferGenericCreate+0x30>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <xStreamBufferGenericCreate+0x52>
 8001732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001736:	f383 8811 	msr	BASEPRI, r3
 800173a:	f3bf 8f6f 	isb	sy
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	e7fe      	b.n	8001744 <xStreamBufferGenericCreate+0x50>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	d909      	bls.n	8001762 <xStreamBufferGenericCreate+0x6e>
 800174e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001752:	f383 8811 	msr	BASEPRI, r3
 8001756:	f3bf 8f6f 	isb	sy
 800175a:	f3bf 8f4f 	dsb	sy
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e7fe      	b.n	8001760 <xStreamBufferGenericCreate+0x6c>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <xStreamBufferGenericCreate+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8001768:	2301      	movs	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3320      	adds	r3, #32
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fc44 	bl	8003004 <pvPortMalloc>
 800177c:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00a      	beq.n	800179a <xStreamBufferGenericCreate+0xa6>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f103 0120 	add.w	r1, r3, #32
 800178a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	6a38      	ldr	r0, [r7, #32]
 8001796:	f000 faef 	bl	8001d78 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800179a:	6a3b      	ldr	r3, [r7, #32]
	}
 800179c:	4618      	mov	r0, r3
 800179e:	3728      	adds	r7, #40	; 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <xStreamBufferSpacesAvailable+0x26>
 80017b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ba:	f383 8811 	msr	BASEPRI, r3
 80017be:	f3bf 8f6f 	isb	sy
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e7fe      	b.n	80017c8 <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d304      	bcc.n	80017fa <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80017fa:	697b      	ldr	r3, [r7, #20]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b090      	sub	sp, #64	; 0x40
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <xStreamBufferSend+0x34>
 8001828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182c:	f383 8811 	msr	BASEPRI, r3
 8001830:	f3bf 8f6f 	isb	sy
 8001834:	f3bf 8f4f 	dsb	sy
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
 800183a:	e7fe      	b.n	800183a <xStreamBufferSend+0x32>
	configASSERT( pxStreamBuffer );
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <xStreamBufferSend+0x4e>
 8001842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	e7fe      	b.n	8001854 <xStreamBufferSend+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	7f1b      	ldrb	r3, [r3, #28]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d010      	beq.n	8001884 <xStreamBufferSend+0x7c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001864:	3304      	adds	r3, #4
 8001866:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8001868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d809      	bhi.n	8001884 <xStreamBufferSend+0x7c>
 8001870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001874:	f383 8811 	msr	BASEPRI, r3
 8001878:	f3bf 8f6f 	isb	sy
 800187c:	f3bf 8f4f 	dsb	sy
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e7fe      	b.n	8001882 <xStreamBufferSend+0x7a>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d03d      	beq.n	8001906 <xStreamBufferSend+0xfe>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fe82 	bl	8002598 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8001894:	f001 fada 	bl	8002e4c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001898:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800189a:	f7ff ff83 	bl	80017a4 <xStreamBufferSpacesAvailable>
 800189e:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80018a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d216      	bcs.n	80018d6 <xStreamBufferSend+0xce>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80018a8:	2000      	movs	r0, #0
 80018aa:	f001 f91d 	bl	8002ae8 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <xStreamBufferSend+0xc2>
 80018b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	e7fe      	b.n	80018c8 <xStreamBufferSend+0xc0>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80018ca:	f000 ffd3 	bl	8002874 <xTaskGetCurrentTaskHandle>
 80018ce:	4602      	mov	r2, r0
 80018d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	e002      	b.n	80018dc <xStreamBufferSend+0xd4>
				}
				else
				{
					taskEXIT_CRITICAL();
 80018d6:	f001 fae7 	bl	8002ea8 <vPortExitCritical>
					break;
 80018da:	e014      	b.n	8001906 <xStreamBufferSend+0xfe>
				}
			}
			taskEXIT_CRITICAL();
 80018dc:	f001 fae4 	bl	8002ea8 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 fff2 	bl	80028d0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80018f2:	463a      	mov	r2, r7
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 fe88 	bl	8002610 <xTaskCheckForTimeOut>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0c6      	beq.n	8001894 <xStreamBufferSend+0x8c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8001906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001908:	2b00      	cmp	r3, #0
 800190a:	d103      	bne.n	8001914 <xStreamBufferSend+0x10c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800190c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800190e:	f7ff ff49 	bl	80017a4 <xStreamBufferSpacesAvailable>
 8001912:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8001914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001920:	f000 f823 	bl	800196a <prvWriteMessageToBuffer>
 8001924:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	d019      	beq.n	8001960 <xStreamBufferSend+0x158>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800192c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800192e:	f000 fa03 	bl	8001d38 <prvBytesInBuffer>
 8001932:	4602      	mov	r2, r0
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d311      	bcc.n	8001960 <xStreamBufferSend+0x158>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800193c:	f000 fc70 	bl	8002220 <vTaskSuspendAll>
 8001940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <xStreamBufferSend+0x154>
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	6918      	ldr	r0, [r3, #16]
 800194c:	2300      	movs	r3, #0
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	f001 f817 	bl	8002984 <xTaskGenericNotify>
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	f000 fc6e 	bl	800223c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8001960:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001962:	4618      	mov	r0, r3
 8001964:	3738      	adds	r7, #56	; 0x38
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e01d      	b.n	80019c0 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	7f1b      	ldrb	r3, [r3, #28]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d108      	bne.n	80019a2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8001990:	2301      	movs	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	4293      	cmp	r3, r2
 800199a:	bf28      	it	cs
 800199c:	4613      	movcs	r3, r2
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	e00e      	b.n	80019c0 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d308      	bcc.n	80019bc <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2204      	movs	r2, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f8d9 	bl	8001b6c <prvWriteBytesToBuffer>
 80019ba:	e001      	b.n	80019c0 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	461a      	mov	r2, r3
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f8cd 	bl	8001b6c <prvWriteBytesToBuffer>
 80019d2:	6138      	str	r0, [r7, #16]
 80019d4:	e001      	b.n	80019da <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80019da:	693b      	ldr	r3, [r7, #16]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <xStreamBufferReceive+0x30>
 8001a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a04:	f383 8811 	msr	BASEPRI, r3
 8001a08:	f3bf 8f6f 	isb	sy
 8001a0c:	f3bf 8f4f 	dsb	sy
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e7fe      	b.n	8001a12 <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <xStreamBufferReceive+0x4a>
 8001a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	e7fe      	b.n	8001a2c <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	7f1b      	ldrb	r3, [r3, #28]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e001      	b.n	8001a44 <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d033      	beq.n	8001ab2 <xStreamBufferReceive+0xce>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8001a4a:	f001 f9ff 	bl	8002e4c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001a4e:	6a38      	ldr	r0, [r7, #32]
 8001a50:	f000 f972 	bl	8001d38 <prvBytesInBuffer>
 8001a54:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d815      	bhi.n	8001a8a <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f001 f842 	bl	8002ae8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <xStreamBufferReceive+0x9c>
 8001a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e7fe      	b.n	8001a7e <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8001a80:	f000 fef8 	bl	8002874 <xTaskGetCurrentTaskHandle>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001a8a:	f001 fa0d 	bl	8002ea8 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d811      	bhi.n	8001aba <xStreamBufferReceive+0xd6>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f000 ff17 	bl	80028d0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001aa8:	6a38      	ldr	r0, [r7, #32]
 8001aaa:	f000 f945 	bl	8001d38 <prvBytesInBuffer>
 8001aae:	62b8      	str	r0, [r7, #40]	; 0x28
 8001ab0:	e003      	b.n	8001aba <xStreamBufferReceive+0xd6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001ab2:	6a38      	ldr	r0, [r7, #32]
 8001ab4:	f000 f940 	bl	8001d38 <prvBytesInBuffer>
 8001ab8:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8001aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d91d      	bls.n	8001afe <xStreamBufferReceive+0x11a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	6a38      	ldr	r0, [r7, #32]
 8001ace:	f000 f81b 	bl	8001b08 <prvReadMessageFromBuffer>
 8001ad2:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d011      	beq.n	8001afe <xStreamBufferReceive+0x11a>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8001ada:	f000 fba1 	bl	8002220 <vTaskSuspendAll>
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <xStreamBufferReceive+0x116>
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	6958      	ldr	r0, [r3, #20]
 8001aea:	2300      	movs	r3, #0
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	f000 ff48 	bl	8002984 <xTaskGenericNotify>
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	f000 fb9f 	bl	800223c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d019      	beq.n	8001b50 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8001b22:	f107 0110 	add.w	r1, r7, #16
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f88d 	bl	8001c4a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d907      	bls.n	8001b54 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e001      	b.n	8001b54 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f875 	bl	8001c4a <prvReadBytesFromBuffer>
 8001b60:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8001b62:	697b      	ldr	r3, [r7, #20]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <prvWriteBytesToBuffer+0x26>
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e7fe      	b.n	8001b90 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	bf28      	it	cs
 8001ba6:	4613      	movcs	r3, r2
 8001ba8:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	441a      	add	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d909      	bls.n	8001bcc <prvWriteBytesToBuffer+0x60>
 8001bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbc:	f383 8811 	msr	BASEPRI, r3
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	e7fe      	b.n	8001bca <prvWriteBytesToBuffer+0x5e>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	4413      	add	r3, r2
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fc13 	bl	8003404 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d91b      	bls.n	8001c1e <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d909      	bls.n	8001c08 <prvWriteBytesToBuffer+0x9c>
 8001bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e7fe      	b.n	8001c06 <prvWriteBytesToBuffer+0x9a>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6998      	ldr	r0, [r3, #24]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	18d1      	adds	r1, r2, r3
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f001 fbf3 	bl	8003404 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d304      	bcc.n	8001c3a <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	605a      	str	r2, [r3, #4]

	return xCount;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b08a      	sub	sp, #40	; 0x28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	bf28      	it	cs
 8001c60:	4613      	movcs	r3, r2
 8001c62:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d061      	beq.n	8001d2e <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	6a3a      	ldr	r2, [r7, #32]
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	bf28      	it	cs
 8001c7e:	4613      	movcs	r3, r2
 8001c80:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d909      	bls.n	8001c9e <prvReadBytesFromBuffer+0x54>
 8001c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8e:	f383 8811 	msr	BASEPRI, r3
 8001c92:	f3bf 8f6f 	isb	sy
 8001c96:	f3bf 8f4f 	dsb	sy
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e7fe      	b.n	8001c9c <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8001c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	441a      	add	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d909      	bls.n	8001cc0 <prvReadBytesFromBuffer+0x76>
 8001cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb0:	f383 8811 	msr	BASEPRI, r3
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	f3bf 8f4f 	dsb	sy
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e7fe      	b.n	8001cbe <prvReadBytesFromBuffer+0x74>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	4413      	add	r3, r2
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	68b8      	ldr	r0, [r7, #8]
 8001cce:	f001 fb99 	bl	8003404 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8001cd2:	6a3a      	ldr	r2, [r7, #32]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d918      	bls.n	8001d0c <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8001cda:	6a3a      	ldr	r2, [r7, #32]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d909      	bls.n	8001cf6 <prvReadBytesFromBuffer+0xac>
 8001ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce6:	f383 8811 	msr	BASEPRI, r3
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	f3bf 8f4f 	dsb	sy
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e7fe      	b.n	8001cf4 <prvReadBytesFromBuffer+0xaa>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	18d0      	adds	r0, r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6999      	ldr	r1, [r3, #24]
 8001d00:	6a3a      	ldr	r2, [r7, #32]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	f001 fb7c 	bl	8003404 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	4413      	add	r3, r2
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d304      	bcc.n	8001d28 <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d304      	bcc.n	8001d6a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8001d86:	2355      	movs	r3, #85	; 0x55
 8001d88:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6979      	ldr	r1, [r7, #20]
 8001d8e:	68b8      	ldr	r0, [r7, #8]
 8001d90:	f001 fb43 	bl	800341a <memset>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <prvInitialiseNewStreamBuffer+0x38>
 8001d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da0:	f383 8811 	msr	BASEPRI, r3
 8001da4:	f3bf 8f6f 	isb	sy
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	e7fe      	b.n	8001dae <prvInitialiseNewStreamBuffer+0x36>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8001db0:	2220      	movs	r2, #32
 8001db2:	2100      	movs	r1, #0
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f001 fb30 	bl	800341a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dd2:	771a      	strb	r2, [r3, #28]
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af04      	add	r7, sp, #16
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <xTaskCreateStatic+0x28>
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	e7fe      	b.n	8001e02 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <xTaskCreateStatic+0x42>
 8001e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	e7fe      	b.n	8001e1c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e1e:	2354      	movs	r3, #84	; 0x54
 8001e20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b54      	cmp	r3, #84	; 0x54
 8001e26:	d009      	beq.n	8001e3c <xTaskCreateStatic+0x60>
 8001e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2c:	f383 8811 	msr	BASEPRI, r3
 8001e30:	f3bf 8f6f 	isb	sy
 8001e34:	f3bf 8f4f 	dsb	sy
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	e7fe      	b.n	8001e3a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001e3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01e      	beq.n	8001e82 <xTaskCreateStatic+0xa6>
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01b      	beq.n	8001e82 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9303      	str	r3, [sp, #12]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f850 	bl	8001f1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e7c:	f000 f8d4 	bl	8002028 <prvAddNewTaskToReadyList>
 8001e80:	e001      	b.n	8001e86 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001e86:	697b      	ldr	r3, [r7, #20]
	}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af04      	add	r7, sp, #16
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 f8ad 	bl	8003004 <pvPortMalloc>
 8001eaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00e      	beq.n	8001ed0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001eb2:	2054      	movs	r0, #84	; 0x54
 8001eb4:	f001 f8a6 	bl	8003004 <pvPortMalloc>
 8001eb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec6:	e005      	b.n	8001ed4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f001 f95d 	bl	8003188 <vPortFree>
 8001ece:	e001      	b.n	8001ed4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d017      	beq.n	8001f0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9303      	str	r3, [sp, #12]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f80e 	bl	8001f1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001efe:	69f8      	ldr	r0, [r7, #28]
 8001f00:	f000 f892 	bl	8002028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	e002      	b.n	8001f10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001f10:	69bb      	ldr	r3, [r7, #24]
	}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f32:	3b01      	subs	r3, #1
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f023 0307 	bic.w	r3, r3, #7
 8001f40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <prvInitialiseNewTask+0x46>
 8001f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f50:	f383 8811 	msr	BASEPRI, r3
 8001f54:	f3bf 8f6f 	isb	sy
 8001f58:	f3bf 8f4f 	dsb	sy
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e7fe      	b.n	8001f5e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01f      	beq.n	8001fa6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	e012      	b.n	8001f92 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	4413      	add	r3, r2
 8001f72:	7819      	ldrb	r1, [r3, #0]
 8001f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3334      	adds	r3, #52	; 0x34
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d9e9      	bls.n	8001f6c <prvInitialiseNewTask+0x52>
 8001f98:	e000      	b.n	8001f9c <prvInitialiseNewTask+0x82>
			{
				break;
 8001f9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa4:	e003      	b.n	8001fae <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	d901      	bls.n	8001fb8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001fb4:	2306      	movs	r3, #6
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fafc 	bl	80015cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff faf7 	bl	80015cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe6:	f1c3 0207 	rsb	r2, r3, #7
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	69b8      	ldr	r0, [r7, #24]
 8002008:	f000 fdfa 	bl	8002c00 <pxPortInitialiseStack>
 800200c:	4602      	mov	r2, r0
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800201e:	bf00      	nop
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002030:	f000 ff0c 	bl	8002e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <prvAddNewTaskToReadyList+0xb8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <prvAddNewTaskToReadyList+0xb8>)
 800203c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <prvAddNewTaskToReadyList+0xbc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002046:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <prvAddNewTaskToReadyList+0xbc>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <prvAddNewTaskToReadyList+0xb8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d110      	bne.n	8002076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002054:	f000 fb54 	bl	8002700 <prvInitialiseTaskLists>
 8002058:	e00d      	b.n	8002076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <prvAddNewTaskToReadyList+0xc0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <prvAddNewTaskToReadyList+0xbc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	429a      	cmp	r2, r3
 800206e:	d802      	bhi.n	8002076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <prvAddNewTaskToReadyList+0xbc>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <prvAddNewTaskToReadyList+0xc4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <prvAddNewTaskToReadyList+0xc4>)
 800207e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <prvAddNewTaskToReadyList+0xc8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4313      	orrs	r3, r2
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <prvAddNewTaskToReadyList+0xc8>)
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <prvAddNewTaskToReadyList+0xcc>)
 80020a0:	441a      	add	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4610      	mov	r0, r2
 80020aa:	f7ff fa9c 	bl	80015e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80020ae:	f000 fefb 	bl	8002ea8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <prvAddNewTaskToReadyList+0xc0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00e      	beq.n	80020d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <prvAddNewTaskToReadyList+0xbc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <prvAddNewTaskToReadyList+0xd0>)
 80020ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200003e8 	.word	0x200003e8
 80020e4:	200002e8 	.word	0x200002e8
 80020e8:	200003f4 	.word	0x200003f4
 80020ec:	20000404 	.word	0x20000404
 80020f0:	200003f0 	.word	0x200003f0
 80020f4:	200002ec 	.word	0x200002ec
 80020f8:	e000ed04 	.word	0xe000ed04

080020fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d016      	beq.n	800213c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <vTaskDelay+0x60>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <vTaskDelay+0x2e>
 8002116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211a:	f383 8811 	msr	BASEPRI, r3
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	f3bf 8f4f 	dsb	sy
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	e7fe      	b.n	8002128 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800212a:	f000 f879 	bl	8002220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800212e:	2100      	movs	r1, #0
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fcff 	bl	8002b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002136:	f000 f881 	bl	800223c <xTaskResumeAll>
 800213a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <vTaskDelay+0x64>)
 8002144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000410 	.word	0x20000410
 8002160:	e000ed04 	.word	0xe000ed04

08002164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002172:	463a      	mov	r2, r7
 8002174:	1d39      	adds	r1, r7, #4
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9f8 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	9202      	str	r2, [sp, #8]
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2300      	movs	r3, #0
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	460a      	mov	r2, r1
 8002192:	491d      	ldr	r1, [pc, #116]	; (8002208 <vTaskStartScheduler+0xa4>)
 8002194:	481d      	ldr	r0, [pc, #116]	; (800220c <vTaskStartScheduler+0xa8>)
 8002196:	f7ff fe21 	bl	8001ddc <xTaskCreateStatic>
 800219a:	4602      	mov	r2, r0
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <vTaskStartScheduler+0xac>)
 800219e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <vTaskStartScheduler+0xac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80021a8:	2301      	movs	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e001      	b.n	80021b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d115      	bne.n	80021e4 <vTaskStartScheduler+0x80>
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <vTaskStartScheduler+0xb0>)
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <vTaskStartScheduler+0xb4>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <vTaskStartScheduler+0xb8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80021de:	f000 fd97 	bl	8002d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80021e2:	e00d      	b.n	8002200 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d109      	bne.n	8002200 <vTaskStartScheduler+0x9c>
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e7fe      	b.n	80021fe <vTaskStartScheduler+0x9a>
}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	08004390 	.word	0x08004390
 800220c:	080026d1 	.word	0x080026d1
 8002210:	2000040c 	.word	0x2000040c
 8002214:	20000408 	.word	0x20000408
 8002218:	200003f4 	.word	0x200003f4
 800221c:	200003ec 	.word	0x200003ec

08002220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <vTaskSuspendAll+0x18>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	4a03      	ldr	r2, [pc, #12]	; (8002238 <vTaskSuspendAll+0x18>)
 800222c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	20000410 	.word	0x20000410

0800223c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <xTaskResumeAll+0x114>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <xTaskResumeAll+0x2a>
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	e7fe      	b.n	8002264 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002266:	f000 fdf1 	bl	8002e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <xTaskResumeAll+0x114>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	4a37      	ldr	r2, [pc, #220]	; (8002350 <xTaskResumeAll+0x114>)
 8002272:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <xTaskResumeAll+0x114>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d161      	bne.n	8002340 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <xTaskResumeAll+0x118>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d05d      	beq.n	8002340 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002284:	e02e      	b.n	80022e4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <xTaskResumeAll+0x11c>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3318      	adds	r3, #24
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fa04 	bl	80016a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3304      	adds	r3, #4
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f9ff 	bl	80016a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	2201      	movs	r2, #1
 80022a8:	409a      	lsls	r2, r3
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <xTaskResumeAll+0x120>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	4a2a      	ldr	r2, [pc, #168]	; (800235c <xTaskResumeAll+0x120>)
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <xTaskResumeAll+0x124>)
 80022c2:	441a      	add	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f7ff f98b 	bl	80015e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <xTaskResumeAll+0x128>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	429a      	cmp	r2, r3
 80022dc:	d302      	bcc.n	80022e4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <xTaskResumeAll+0x12c>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <xTaskResumeAll+0x11c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1cc      	bne.n	8002286 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80022f2:	f000 fa9f 	bl	8002834 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <xTaskResumeAll+0x130>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d010      	beq.n	8002324 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002302:	f000 f837 	bl	8002374 <xTaskIncrementTick>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <xTaskResumeAll+0x12c>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3b01      	subs	r3, #1
 8002316:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f1      	bne.n	8002302 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <xTaskResumeAll+0x130>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <xTaskResumeAll+0x12c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800232c:	2301      	movs	r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <xTaskResumeAll+0x134>)
 8002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002340:	f000 fdb2 	bl	8002ea8 <vPortExitCritical>

	return xAlreadyYielded;
 8002344:	68bb      	ldr	r3, [r7, #8]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000410 	.word	0x20000410
 8002354:	200003e8 	.word	0x200003e8
 8002358:	200003a8 	.word	0x200003a8
 800235c:	200003f0 	.word	0x200003f0
 8002360:	200002ec 	.word	0x200002ec
 8002364:	200002e8 	.word	0x200002e8
 8002368:	200003fc 	.word	0x200003fc
 800236c:	200003f8 	.word	0x200003f8
 8002370:	e000ed04 	.word	0xe000ed04

08002374 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800237e:	4b4e      	ldr	r3, [pc, #312]	; (80024b8 <xTaskIncrementTick+0x144>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8087 	bne.w	8002496 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002388:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <xTaskIncrementTick+0x148>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002390:	4a4a      	ldr	r2, [pc, #296]	; (80024bc <xTaskIncrementTick+0x148>)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11f      	bne.n	80023dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <xTaskIncrementTick+0x14c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <xTaskIncrementTick+0x46>
 80023a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	e7fe      	b.n	80023b8 <xTaskIncrementTick+0x44>
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <xTaskIncrementTick+0x14c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <xTaskIncrementTick+0x150>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <xTaskIncrementTick+0x14c>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4a3e      	ldr	r2, [pc, #248]	; (80024c4 <xTaskIncrementTick+0x150>)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <xTaskIncrementTick+0x154>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a3c      	ldr	r2, [pc, #240]	; (80024c8 <xTaskIncrementTick+0x154>)
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	f000 fa2c 	bl	8002834 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80023dc:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <xTaskIncrementTick+0x158>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d348      	bcc.n	8002478 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <xTaskIncrementTick+0x14c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d104      	bne.n	80023fa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <xTaskIncrementTick+0x158>)
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	601a      	str	r2, [r3, #0]
					break;
 80023f8:	e03e      	b.n	8002478 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <xTaskIncrementTick+0x14c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d203      	bcs.n	800241a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002412:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <xTaskIncrementTick+0x158>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002418:	e02e      	b.n	8002478 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3304      	adds	r3, #4
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f93e 	bl	80016a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3318      	adds	r3, #24
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f935 	bl	80016a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	2201      	movs	r2, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <xTaskIncrementTick+0x15c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <xTaskIncrementTick+0x15c>)
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <xTaskIncrementTick+0x160>)
 8002456:	441a      	add	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3304      	adds	r3, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f7ff f8c1 	bl	80015e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <xTaskIncrementTick+0x164>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	429a      	cmp	r2, r3
 8002470:	d3b9      	bcc.n	80023e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002472:	2301      	movs	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002476:	e7b6      	b.n	80023e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <xTaskIncrementTick+0x164>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247e:	4915      	ldr	r1, [pc, #84]	; (80024d4 <xTaskIncrementTick+0x160>)
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d907      	bls.n	80024a0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002490:	2301      	movs	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	e004      	b.n	80024a0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <xTaskIncrementTick+0x168>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <xTaskIncrementTick+0x168>)
 800249e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <xTaskIncrementTick+0x16c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80024ac:	697b      	ldr	r3, [r7, #20]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000410 	.word	0x20000410
 80024bc:	200003ec 	.word	0x200003ec
 80024c0:	200003a0 	.word	0x200003a0
 80024c4:	200003a4 	.word	0x200003a4
 80024c8:	20000400 	.word	0x20000400
 80024cc:	20000408 	.word	0x20000408
 80024d0:	200003f0 	.word	0x200003f0
 80024d4:	200002ec 	.word	0x200002ec
 80024d8:	200002e8 	.word	0x200002e8
 80024dc:	200003f8 	.word	0x200003f8
 80024e0:	200003fc 	.word	0x200003fc

080024e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <vTaskSwitchContext+0xa0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80024f2:	4b25      	ldr	r3, [pc, #148]	; (8002588 <vTaskSwitchContext+0xa4>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80024f8:	e03e      	b.n	8002578 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <vTaskSwitchContext+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <vTaskSwitchContext+0xa8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	f1c3 031f 	rsb	r3, r3, #31
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <vTaskSwitchContext+0xac>)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <vTaskSwitchContext+0x5a>
	__asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	e7fe      	b.n	800253c <vTaskSwitchContext+0x58>
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <vTaskSwitchContext+0xac>)
 800254a:	4413      	add	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	3308      	adds	r3, #8
 8002560:	429a      	cmp	r2, r3
 8002562:	d104      	bne.n	800256e <vTaskSwitchContext+0x8a>
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a07      	ldr	r2, [pc, #28]	; (8002594 <vTaskSwitchContext+0xb0>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	20000410 	.word	0x20000410
 8002588:	200003fc 	.word	0x200003fc
 800258c:	200003f0 	.word	0x200003f0
 8002590:	200002ec 	.word	0x200002ec
 8002594:	200002e8 	.word	0x200002e8

08002598 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <vTaskSetTimeOutState+0x22>
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e7fe      	b.n	80025b8 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 80025ba:	f000 fc47 	bl	8002e4c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <vTaskSetTimeOutState+0x44>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <vTaskSetTimeOutState+0x48>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80025ce:	f000 fc6b 	bl	8002ea8 <vPortExitCritical>
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000400 	.word	0x20000400
 80025e0:	200003ec 	.word	0x200003ec

080025e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <vTaskInternalSetTimeOutState+0x24>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <vTaskInternalSetTimeOutState+0x28>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605a      	str	r2, [r3, #4]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	20000400 	.word	0x20000400
 800260c:	200003ec 	.word	0x200003ec

08002610 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <xTaskCheckForTimeOut+0x24>
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e7fe      	b.n	8002632 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <xTaskCheckForTimeOut+0x3e>
 800263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e7fe      	b.n	800264c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800264e:	f000 fbfd 	bl	8002e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <xTaskCheckForTimeOut+0xb8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d102      	bne.n	8002672 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	e023      	b.n	80026ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <xTaskCheckForTimeOut+0xbc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d007      	beq.n	800268e <xTaskCheckForTimeOut+0x7e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	429a      	cmp	r2, r3
 8002686:	d302      	bcc.n	800268e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002688:	2301      	movs	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	e015      	b.n	80026ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	d20b      	bcs.n	80026b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad2      	subs	r2, r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff9d 	bl	80025e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e004      	b.n	80026ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80026ba:	f000 fbf5 	bl	8002ea8 <vPortExitCritical>

	return xReturn;
 80026be:	69fb      	ldr	r3, [r7, #28]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200003ec 	.word	0x200003ec
 80026cc:	20000400 	.word	0x20000400

080026d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80026d8:	f000 f852 	bl	8002780 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <prvIdleTask+0x28>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d9f9      	bls.n	80026d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <prvIdleTask+0x2c>)
 80026e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80026f4:	e7f0      	b.n	80026d8 <prvIdleTask+0x8>
 80026f6:	bf00      	nop
 80026f8:	200002ec 	.word	0x200002ec
 80026fc:	e000ed04 	.word	0xe000ed04

08002700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	e00c      	b.n	8002726 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <prvInitialiseTaskLists+0x60>)
 8002718:	4413      	add	r3, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe ff36 	bl	800158c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3301      	adds	r3, #1
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d9ef      	bls.n	800270c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800272c:	480d      	ldr	r0, [pc, #52]	; (8002764 <prvInitialiseTaskLists+0x64>)
 800272e:	f7fe ff2d 	bl	800158c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002732:	480d      	ldr	r0, [pc, #52]	; (8002768 <prvInitialiseTaskLists+0x68>)
 8002734:	f7fe ff2a 	bl	800158c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <prvInitialiseTaskLists+0x6c>)
 800273a:	f7fe ff27 	bl	800158c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800273e:	480c      	ldr	r0, [pc, #48]	; (8002770 <prvInitialiseTaskLists+0x70>)
 8002740:	f7fe ff24 	bl	800158c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002744:	480b      	ldr	r0, [pc, #44]	; (8002774 <prvInitialiseTaskLists+0x74>)
 8002746:	f7fe ff21 	bl	800158c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <prvInitialiseTaskLists+0x78>)
 800274c:	4a05      	ldr	r2, [pc, #20]	; (8002764 <prvInitialiseTaskLists+0x64>)
 800274e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <prvInitialiseTaskLists+0x7c>)
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <prvInitialiseTaskLists+0x68>)
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002ec 	.word	0x200002ec
 8002764:	20000378 	.word	0x20000378
 8002768:	2000038c 	.word	0x2000038c
 800276c:	200003a8 	.word	0x200003a8
 8002770:	200003bc 	.word	0x200003bc
 8002774:	200003d4 	.word	0x200003d4
 8002778:	200003a0 	.word	0x200003a0
 800277c:	200003a4 	.word	0x200003a4

08002780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002786:	e019      	b.n	80027bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002788:	f000 fb60 	bl	8002e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <prvCheckTasksWaitingTermination+0x4c>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe ff81 	bl	80016a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <prvCheckTasksWaitingTermination+0x50>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <prvCheckTasksWaitingTermination+0x50>)
 80027a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <prvCheckTasksWaitingTermination+0x54>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <prvCheckTasksWaitingTermination+0x54>)
 80027b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80027b2:	f000 fb79 	bl	8002ea8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f80e 	bl	80027d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <prvCheckTasksWaitingTermination+0x54>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e1      	bne.n	8002788 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200003bc 	.word	0x200003bc
 80027d0:	200003e8 	.word	0x200003e8
 80027d4:	200003d0 	.word	0x200003d0

080027d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fcca 	bl	8003188 <vPortFree>
				vPortFree( pxTCB );
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fcc7 	bl	8003188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80027fa:	e017      	b.n	800282c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002802:	2b01      	cmp	r3, #1
 8002804:	d103      	bne.n	800280e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fcbe 	bl	8003188 <vPortFree>
	}
 800280c:	e00e      	b.n	800282c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002814:	2b02      	cmp	r3, #2
 8002816:	d009      	beq.n	800282c <prvDeleteTCB+0x54>
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e7fe      	b.n	800282a <prvDeleteTCB+0x52>
	}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <prvResetNextTaskUnblockTime+0x38>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <prvResetNextTaskUnblockTime+0x3c>)
 8002846:	f04f 32ff 	mov.w	r2, #4294967295
 800284a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800284c:	e008      	b.n	8002860 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <prvResetNextTaskUnblockTime+0x38>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <prvResetNextTaskUnblockTime+0x3c>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	200003a0 	.word	0x200003a0
 8002870:	20000408 	.word	0x20000408

08002874 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <xTaskGetCurrentTaskHandle+0x1c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002880:	687b      	ldr	r3, [r7, #4]
	}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200002e8 	.word	0x200002e8

08002894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <xTaskGetSchedulerState+0x34>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80028a2:	2301      	movs	r3, #1
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	e008      	b.n	80028ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <xTaskGetSchedulerState+0x38>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80028b0:	2302      	movs	r3, #2
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	e001      	b.n	80028ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80028ba:	687b      	ldr	r3, [r7, #4]
	}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	200003f4 	.word	0x200003f4
 80028cc:	20000410 	.word	0x20000410

080028d0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80028de:	f000 fab5 	bl	8002e4c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <xTaskNotifyWait+0xac>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d01a      	beq.n	8002926 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <xTaskNotifyWait+0xac>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	43d2      	mvns	r2, r2
 80028fa:	400a      	ands	r2, r1
 80028fc:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80028fe:	4b1f      	ldr	r3, [pc, #124]	; (800297c <xTaskNotifyWait+0xac>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800290e:	2101      	movs	r1, #1
 8002910:	6838      	ldr	r0, [r7, #0]
 8002912:	f000 f90f 	bl	8002b34 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <xTaskNotifyWait+0xb0>)
 8002918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002926:	f000 fabf 	bl	8002ea8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800292a:	f000 fa8f 	bl	8002e4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <xTaskNotifyWait+0xac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <xTaskNotifyWait+0xac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d002      	beq.n	8002952 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e008      	b.n	8002964 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <xTaskNotifyWait+0xac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	43d2      	mvns	r2, r2
 800295c:	400a      	ands	r2, r1
 800295e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <xTaskNotifyWait+0xac>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800296e:	f000 fa9b 	bl	8002ea8 <vPortExitCritical>

		return xReturn;
 8002972:	697b      	ldr	r3, [r7, #20]
	}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200002e8 	.word	0x200002e8
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8002994:	2301      	movs	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <xTaskGenericNotify+0x2e>
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e7fe      	b.n	80029b0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80029b6:	f000 fa49 	bl	8002e4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ce:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d827      	bhi.n	8002a2e <xTaskGenericNotify+0xaa>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <xTaskGenericNotify+0x60>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002a4d 	.word	0x08002a4d
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a07 	.word	0x08002a07
 80029f0:	08002a13 	.word	0x08002a13
 80029f4:	08002a1b 	.word	0x08002a1b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002a04:	e025      	b.n	8002a52 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002a10:	e01f      	b.n	8002a52 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002a18:	e01b      	b.n	8002a52 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d003      	beq.n	8002a28 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002a26:	e014      	b.n	8002a52 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002a2c:	e011      	b.n	8002a52 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d00b      	beq.n	8002a50 <xTaskGenericNotify+0xcc>
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e7fe      	b.n	8002a4a <xTaskGenericNotify+0xc6>
					break;
 8002a4c:	bf00      	nop
 8002a4e:	e000      	b.n	8002a52 <xTaskGenericNotify+0xce>

					break;
 8002a50:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d138      	bne.n	8002aca <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe fe1f 	bl	80016a0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	2201      	movs	r2, #1
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <xTaskGenericNotify+0x154>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <xTaskGenericNotify+0x154>)
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4a16      	ldr	r2, [pc, #88]	; (8002adc <xTaskGenericNotify+0x158>)
 8002a82:	441a      	add	r2, r3
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	3304      	adds	r3, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f7fe fdab 	bl	80015e6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <xTaskGenericNotify+0x128>
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e7fe      	b.n	8002aaa <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <xTaskGenericNotify+0x15c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d907      	bls.n	8002aca <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <xTaskGenericNotify+0x160>)
 8002abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002aca:	f000 f9ed 	bl	8002ea8 <vPortExitCritical>

		return xReturn;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200003f0 	.word	0x200003f0
 8002adc:	200002ec 	.word	0x200002ec
 8002ae0:	200002e8 	.word	0x200002e8
 8002ae4:	e000ed04 	.word	0xe000ed04

08002ae8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <xTaskNotifyStateClear+0x14>
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <xTaskNotifyStateClear+0x48>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e000      	b.n	8002afe <xTaskNotifyStateClear+0x16>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8002b00:	f000 f9a4 	bl	8002e4c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d106      	bne.n	8002b1e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e001      	b.n	8002b22 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8002b22:	f000 f9c1 	bl	8002ea8 <vPortExitCritical>

		return xReturn;
 8002b26:	68fb      	ldr	r3, [r7, #12]
	}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200002e8 	.word	0x200002e8

08002b34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b3e:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fda8 	bl	80016a0 <uxListRemove>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	4a20      	ldr	r2, [pc, #128]	; (8002bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d10a      	bne.n	8002b8c <prvAddCurrentTaskToDelayedList+0x58>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3304      	adds	r3, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	481a      	ldr	r0, [pc, #104]	; (8002bf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b86:	f7fe fd2e 	bl	80015e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b8a:	e026      	b.n	8002bda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d209      	bcs.n	8002bb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f7fe fd3c 	bl	800162e <vListInsert>
}
 8002bb6:	e010      	b.n	8002bda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	f7fe fd32 	bl	800162e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d202      	bcs.n	8002bda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002bd4:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6013      	str	r3, [r2, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200003ec 	.word	0x200003ec
 8002be8:	200002e8 	.word	0x200002e8
 8002bec:	200003f0 	.word	0x200003f0
 8002bf0:	200003d4 	.word	0x200003d4
 8002bf4:	200003a4 	.word	0x200003a4
 8002bf8:	200003a0 	.word	0x200003a0
 8002bfc:	20000408 	.word	0x20000408

08002c00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3b04      	subs	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0201 	bic.w	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b04      	subs	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c30:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <pxPortInitialiseStack+0x64>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b14      	subs	r3, #20
 8002c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3b04      	subs	r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f06f 0202 	mvn.w	r2, #2
 8002c4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3b20      	subs	r3, #32
 8002c54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	08002c69 	.word	0x08002c69

08002c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <prvTaskExitError+0x50>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d009      	beq.n	8002c90 <prvTaskExitError+0x28>
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e7fe      	b.n	8002c8e <prvTaskExitError+0x26>
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ca2:	bf00      	nop
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0fc      	beq.n	8002ca4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	00000000 	.word	0x00000000

08002cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <pxCurrentTCBConst2>)
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	6808      	ldr	r0, [r1, #0]
 8002cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cca:	f380 8809 	msr	PSP, r0
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f380 8811 	msr	BASEPRI, r0
 8002cda:	4770      	bx	lr
 8002cdc:	f3af 8000 	nop.w

08002ce0 <pxCurrentTCBConst2>:
 8002ce0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop

08002ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ce8:	4808      	ldr	r0, [pc, #32]	; (8002d0c <prvPortStartFirstTask+0x24>)
 8002cea:	6800      	ldr	r0, [r0, #0]
 8002cec:	6800      	ldr	r0, [r0, #0]
 8002cee:	f380 8808 	msr	MSP, r0
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f380 8814 	msr	CONTROL, r0
 8002cfa:	b662      	cpsie	i
 8002cfc:	b661      	cpsie	f
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	df00      	svc	0
 8002d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d0a:	bf00      	nop
 8002d0c:	e000ed08 	.word	0xe000ed08

08002d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d16:	4b44      	ldr	r3, [pc, #272]	; (8002e28 <xPortStartScheduler+0x118>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a44      	ldr	r2, [pc, #272]	; (8002e2c <xPortStartScheduler+0x11c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d109      	bne.n	8002d34 <xPortStartScheduler+0x24>
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e7fe      	b.n	8002d32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d34:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <xPortStartScheduler+0x118>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <xPortStartScheduler+0x120>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d109      	bne.n	8002d52 <xPortStartScheduler+0x42>
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e7fe      	b.n	8002d50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <xPortStartScheduler+0x124>)
 8002d54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	22ff      	movs	r2, #255	; 0xff
 8002d62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <xPortStartScheduler+0x128>)
 8002d78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d7a:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d80:	e009      	b.n	8002d96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002d82:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002d8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d0ef      	beq.n	8002d82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002da2:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d009      	beq.n	8002dc2 <xPortStartScheduler+0xb2>
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	e7fe      	b.n	8002dc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002dca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <xPortStartScheduler+0x12c>)
 8002dd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002de0:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <xPortStartScheduler+0x130>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <xPortStartScheduler+0x130>)
 8002de6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <xPortStartScheduler+0x130>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <xPortStartScheduler+0x130>)
 8002df2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002df6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002df8:	f000 f8d6 	bl	8002fa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <xPortStartScheduler+0x134>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e02:	f000 f8f5 	bl	8002ff0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <xPortStartScheduler+0x138>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <xPortStartScheduler+0x138>)
 8002e0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e12:	f7ff ff69 	bl	8002ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e16:	f7ff fb65 	bl	80024e4 <vTaskSwitchContext>
	prvTaskExitError();
 8002e1a:	f7ff ff25 	bl	8002c68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	e000ed00 	.word	0xe000ed00
 8002e2c:	410fc271 	.word	0x410fc271
 8002e30:	410fc270 	.word	0x410fc270
 8002e34:	e000e400 	.word	0xe000e400
 8002e38:	20000414 	.word	0x20000414
 8002e3c:	20000418 	.word	0x20000418
 8002e40:	e000ed20 	.word	0xe000ed20
 8002e44:	2000000c 	.word	0x2000000c
 8002e48:	e000ef34 	.word	0xe000ef34

08002e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <vPortEnterCritical+0x54>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <vPortEnterCritical+0x54>)
 8002e6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <vPortEnterCritical+0x54>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10e      	bne.n	8002e94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <vPortEnterCritical+0x58>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d009      	beq.n	8002e94 <vPortEnterCritical+0x48>
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	e7fe      	b.n	8002e92 <vPortEnterCritical+0x46>
	}
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	e000ed04 	.word	0xe000ed04

08002ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <vPortExitCritical+0x4c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <vPortExitCritical+0x22>
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	e7fe      	b.n	8002ec8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <vPortExitCritical+0x4c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <vPortExitCritical+0x4c>)
 8002ed2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <vPortExitCritical+0x4c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <vPortExitCritical+0x3e>
 8002edc:	2300      	movs	r3, #0
 8002ede:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	2000000c 	.word	0x2000000c
	...

08002f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f00:	f3ef 8009 	mrs	r0, PSP
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <pxCurrentTCBConst>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f01e 0f10 	tst.w	lr, #16
 8002f10:	bf08      	it	eq
 8002f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1a:	6010      	str	r0, [r2, #0]
 8002f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f24:	f380 8811 	msr	BASEPRI, r0
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f7ff fad8 	bl	80024e4 <vTaskSwitchContext>
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f380 8811 	msr	BASEPRI, r0
 8002f3c:	bc09      	pop	{r0, r3}
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	6808      	ldr	r0, [r1, #0]
 8002f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f46:	f01e 0f10 	tst.w	lr, #16
 8002f4a:	bf08      	it	eq
 8002f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f50:	f380 8809 	msr	PSP, r0
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	f3af 8000 	nop.w

08002f60 <pxCurrentTCBConst>:
 8002f60:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop

08002f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f80:	f7ff f9f8 	bl	8002374 <xTaskIncrementTick>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <xPortSysTickHandler+0x3c>)
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <vPortSetupTimerInterrupt+0x34>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <vPortSetupTimerInterrupt+0x38>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <vPortSetupTimerInterrupt+0x3c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <vPortSetupTimerInterrupt+0x40>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <vPortSetupTimerInterrupt+0x44>)
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <vPortSetupTimerInterrupt+0x34>)
 8002fcc:	2207      	movs	r2, #7
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e010 	.word	0xe000e010
 8002fe0:	e000e018 	.word	0xe000e018
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	10624dd3 	.word	0x10624dd3
 8002fec:	e000e014 	.word	0xe000e014

08002ff0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ff0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003000 <vPortEnableVFP+0x10>
 8002ff4:	6801      	ldr	r1, [r0, #0]
 8002ff6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ffa:	6001      	str	r1, [r0, #0]
 8002ffc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ffe:	bf00      	nop
 8003000:	e000ed88 	.word	0xe000ed88

08003004 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003010:	f7ff f906 	bl	8002220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003014:	4b57      	ldr	r3, [pc, #348]	; (8003174 <pvPortMalloc+0x170>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800301c:	f000 f90c 	bl	8003238 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <pvPortMalloc+0x174>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 808c 	bne.w	8003146 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01c      	beq.n	800306e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003034:	2208      	movs	r2, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	2b00      	cmp	r3, #0
 8003044:	d013      	beq.n	800306e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f023 0307 	bic.w	r3, r3, #7
 800304c:	3308      	adds	r3, #8
 800304e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <pvPortMalloc+0x6a>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e7fe      	b.n	800306c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d068      	beq.n	8003146 <pvPortMalloc+0x142>
 8003074:	4b41      	ldr	r3, [pc, #260]	; (800317c <pvPortMalloc+0x178>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d863      	bhi.n	8003146 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800307e:	4b40      	ldr	r3, [pc, #256]	; (8003180 <pvPortMalloc+0x17c>)
 8003080:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <pvPortMalloc+0x17c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003088:	e004      	b.n	8003094 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	d903      	bls.n	80030a6 <pvPortMalloc+0xa2>
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f1      	bne.n	800308a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <pvPortMalloc+0x170>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d04a      	beq.n	8003146 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2208      	movs	r2, #8
 80030b6:	4413      	add	r3, r2
 80030b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	1ad2      	subs	r2, r2, r3
 80030ca:	2308      	movs	r3, #8
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d91e      	bls.n	8003110 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d009      	beq.n	80030f8 <pvPortMalloc+0xf4>
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e7fe      	b.n	80030f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	1ad2      	subs	r2, r2, r3
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800310a:	69b8      	ldr	r0, [r7, #24]
 800310c:	f000 f8f6 	bl	80032fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <pvPortMalloc+0x178>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	4a18      	ldr	r2, [pc, #96]	; (800317c <pvPortMalloc+0x178>)
 800311c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <pvPortMalloc+0x178>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <pvPortMalloc+0x180>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d203      	bcs.n	8003132 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <pvPortMalloc+0x178>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <pvPortMalloc+0x180>)
 8003130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <pvPortMalloc+0x174>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	431a      	orrs	r2, r3
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003146:	f7ff f879 	bl	800223c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <pvPortMalloc+0x164>
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e7fe      	b.n	8003166 <pvPortMalloc+0x162>
	return pvReturn;
 8003168:	69fb      	ldr	r3, [r7, #28]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3728      	adds	r7, #40	; 0x28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20004024 	.word	0x20004024
 8003178:	20004030 	.word	0x20004030
 800317c:	20004028 	.word	0x20004028
 8003180:	2000401c 	.word	0x2000401c
 8003184:	2000402c 	.word	0x2000402c

08003188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d046      	beq.n	8003228 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800319a:	2308      	movs	r3, #8
 800319c:	425b      	negs	r3, r3
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4413      	add	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4b20      	ldr	r3, [pc, #128]	; (8003230 <vPortFree+0xa8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <vPortFree+0x42>
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e7fe      	b.n	80031c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <vPortFree+0x5e>
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	e7fe      	b.n	80031e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <vPortFree+0xa8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d019      	beq.n	8003228 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d115      	bne.n	8003228 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <vPortFree+0xa8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800320c:	f7ff f808 	bl	8002220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <vPortFree+0xac>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4413      	add	r3, r2
 800321a:	4a06      	ldr	r2, [pc, #24]	; (8003234 <vPortFree+0xac>)
 800321c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800321e:	6938      	ldr	r0, [r7, #16]
 8003220:	f000 f86c 	bl	80032fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003224:	f7ff f80a 	bl	800223c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003228:	bf00      	nop
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20004030 	.word	0x20004030
 8003234:	20004028 	.word	0x20004028

08003238 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800323e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003242:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <prvHeapInit+0xac>)
 8003246:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3307      	adds	r3, #7
 8003256:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0307 	bic.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <prvHeapInit+0xac>)
 8003268:	4413      	add	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003270:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <prvHeapInit+0xb0>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <prvHeapInit+0xb0>)
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4413      	add	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003284:	2208      	movs	r2, #8
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0307 	bic.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a15      	ldr	r2, [pc, #84]	; (80032ec <prvHeapInit+0xb4>)
 8003298:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <prvHeapInit+0xb4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <prvHeapInit+0xb4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	1ad2      	subs	r2, r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <prvHeapInit+0xb4>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <prvHeapInit+0xb8>)
 80032c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <prvHeapInit+0xbc>)
 80032ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <prvHeapInit+0xc0>)
 80032d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032d6:	601a      	str	r2, [r3, #0]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	2000041c 	.word	0x2000041c
 80032e8:	2000401c 	.word	0x2000401c
 80032ec:	20004024 	.word	0x20004024
 80032f0:	2000402c 	.word	0x2000402c
 80032f4:	20004028 	.word	0x20004028
 80032f8:	20004030 	.word	0x20004030

080032fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003304:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <prvInsertBlockIntoFreeList+0xac>)
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e002      	b.n	8003310 <prvInsertBlockIntoFreeList+0x14>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d8f7      	bhi.n	800330a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d108      	bne.n	800333e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	441a      	add	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	441a      	add	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d118      	bne.n	8003384 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <prvInsertBlockIntoFreeList+0xb0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d00d      	beq.n	800337a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e008      	b.n	800338c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <prvInsertBlockIntoFreeList+0xb0>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e003      	b.n	800338c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d002      	beq.n	800339a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000401c 	.word	0x2000401c
 80033ac:	20004024 	.word	0x20004024

080033b0 <__errno>:
 80033b0:	4b01      	ldr	r3, [pc, #4]	; (80033b8 <__errno+0x8>)
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000010 	.word	0x20000010

080033bc <__libc_init_array>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4e0d      	ldr	r6, [pc, #52]	; (80033f4 <__libc_init_array+0x38>)
 80033c0:	4c0d      	ldr	r4, [pc, #52]	; (80033f8 <__libc_init_array+0x3c>)
 80033c2:	1ba4      	subs	r4, r4, r6
 80033c4:	10a4      	asrs	r4, r4, #2
 80033c6:	2500      	movs	r5, #0
 80033c8:	42a5      	cmp	r5, r4
 80033ca:	d109      	bne.n	80033e0 <__libc_init_array+0x24>
 80033cc:	4e0b      	ldr	r6, [pc, #44]	; (80033fc <__libc_init_array+0x40>)
 80033ce:	4c0c      	ldr	r4, [pc, #48]	; (8003400 <__libc_init_array+0x44>)
 80033d0:	f000 ff74 	bl	80042bc <_init>
 80033d4:	1ba4      	subs	r4, r4, r6
 80033d6:	10a4      	asrs	r4, r4, #2
 80033d8:	2500      	movs	r5, #0
 80033da:	42a5      	cmp	r5, r4
 80033dc:	d105      	bne.n	80033ea <__libc_init_array+0x2e>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033e4:	4798      	blx	r3
 80033e6:	3501      	adds	r5, #1
 80033e8:	e7ee      	b.n	80033c8 <__libc_init_array+0xc>
 80033ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ee:	4798      	blx	r3
 80033f0:	3501      	adds	r5, #1
 80033f2:	e7f2      	b.n	80033da <__libc_init_array+0x1e>
 80033f4:	08004448 	.word	0x08004448
 80033f8:	08004448 	.word	0x08004448
 80033fc:	08004448 	.word	0x08004448
 8003400:	0800444c 	.word	0x0800444c

08003404 <memcpy>:
 8003404:	b510      	push	{r4, lr}
 8003406:	1e43      	subs	r3, r0, #1
 8003408:	440a      	add	r2, r1
 800340a:	4291      	cmp	r1, r2
 800340c:	d100      	bne.n	8003410 <memcpy+0xc>
 800340e:	bd10      	pop	{r4, pc}
 8003410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003418:	e7f7      	b.n	800340a <memcpy+0x6>

0800341a <memset>:
 800341a:	4402      	add	r2, r0
 800341c:	4603      	mov	r3, r0
 800341e:	4293      	cmp	r3, r2
 8003420:	d100      	bne.n	8003424 <memset+0xa>
 8003422:	4770      	bx	lr
 8003424:	f803 1b01 	strb.w	r1, [r3], #1
 8003428:	e7f9      	b.n	800341e <memset+0x4>
	...

0800342c <iprintf>:
 800342c:	b40f      	push	{r0, r1, r2, r3}
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <iprintf+0x2c>)
 8003430:	b513      	push	{r0, r1, r4, lr}
 8003432:	681c      	ldr	r4, [r3, #0]
 8003434:	b124      	cbz	r4, 8003440 <iprintf+0x14>
 8003436:	69a3      	ldr	r3, [r4, #24]
 8003438:	b913      	cbnz	r3, 8003440 <iprintf+0x14>
 800343a:	4620      	mov	r0, r4
 800343c:	f000 fa22 	bl	8003884 <__sinit>
 8003440:	ab05      	add	r3, sp, #20
 8003442:	9a04      	ldr	r2, [sp, #16]
 8003444:	68a1      	ldr	r1, [r4, #8]
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	4620      	mov	r0, r4
 800344a:	f000 fbdb 	bl	8003c04 <_vfiprintf_r>
 800344e:	b002      	add	sp, #8
 8003450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003454:	b004      	add	sp, #16
 8003456:	4770      	bx	lr
 8003458:	20000010 	.word	0x20000010

0800345c <_puts_r>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	460e      	mov	r6, r1
 8003460:	4605      	mov	r5, r0
 8003462:	b118      	cbz	r0, 800346c <_puts_r+0x10>
 8003464:	6983      	ldr	r3, [r0, #24]
 8003466:	b90b      	cbnz	r3, 800346c <_puts_r+0x10>
 8003468:	f000 fa0c 	bl	8003884 <__sinit>
 800346c:	69ab      	ldr	r3, [r5, #24]
 800346e:	68ac      	ldr	r4, [r5, #8]
 8003470:	b913      	cbnz	r3, 8003478 <_puts_r+0x1c>
 8003472:	4628      	mov	r0, r5
 8003474:	f000 fa06 	bl	8003884 <__sinit>
 8003478:	4b23      	ldr	r3, [pc, #140]	; (8003508 <_puts_r+0xac>)
 800347a:	429c      	cmp	r4, r3
 800347c:	d117      	bne.n	80034ae <_puts_r+0x52>
 800347e:	686c      	ldr	r4, [r5, #4]
 8003480:	89a3      	ldrh	r3, [r4, #12]
 8003482:	071b      	lsls	r3, r3, #28
 8003484:	d51d      	bpl.n	80034c2 <_puts_r+0x66>
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	b1db      	cbz	r3, 80034c2 <_puts_r+0x66>
 800348a:	3e01      	subs	r6, #1
 800348c:	68a3      	ldr	r3, [r4, #8]
 800348e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003492:	3b01      	subs	r3, #1
 8003494:	60a3      	str	r3, [r4, #8]
 8003496:	b9e9      	cbnz	r1, 80034d4 <_puts_r+0x78>
 8003498:	2b00      	cmp	r3, #0
 800349a:	da2e      	bge.n	80034fa <_puts_r+0x9e>
 800349c:	4622      	mov	r2, r4
 800349e:	210a      	movs	r1, #10
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 f83f 	bl	8003524 <__swbuf_r>
 80034a6:	3001      	adds	r0, #1
 80034a8:	d011      	beq.n	80034ce <_puts_r+0x72>
 80034aa:	200a      	movs	r0, #10
 80034ac:	e011      	b.n	80034d2 <_puts_r+0x76>
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <_puts_r+0xb0>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	d101      	bne.n	80034b8 <_puts_r+0x5c>
 80034b4:	68ac      	ldr	r4, [r5, #8]
 80034b6:	e7e3      	b.n	8003480 <_puts_r+0x24>
 80034b8:	4b15      	ldr	r3, [pc, #84]	; (8003510 <_puts_r+0xb4>)
 80034ba:	429c      	cmp	r4, r3
 80034bc:	bf08      	it	eq
 80034be:	68ec      	ldreq	r4, [r5, #12]
 80034c0:	e7de      	b.n	8003480 <_puts_r+0x24>
 80034c2:	4621      	mov	r1, r4
 80034c4:	4628      	mov	r0, r5
 80034c6:	f000 f87f 	bl	80035c8 <__swsetup_r>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d0dd      	beq.n	800348a <_puts_r+0x2e>
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da04      	bge.n	80034e2 <_puts_r+0x86>
 80034d8:	69a2      	ldr	r2, [r4, #24]
 80034da:	429a      	cmp	r2, r3
 80034dc:	dc06      	bgt.n	80034ec <_puts_r+0x90>
 80034de:	290a      	cmp	r1, #10
 80034e0:	d004      	beq.n	80034ec <_puts_r+0x90>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	6022      	str	r2, [r4, #0]
 80034e8:	7019      	strb	r1, [r3, #0]
 80034ea:	e7cf      	b.n	800348c <_puts_r+0x30>
 80034ec:	4622      	mov	r2, r4
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 f818 	bl	8003524 <__swbuf_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d1c9      	bne.n	800348c <_puts_r+0x30>
 80034f8:	e7e9      	b.n	80034ce <_puts_r+0x72>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	200a      	movs	r0, #10
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	6022      	str	r2, [r4, #0]
 8003502:	7018      	strb	r0, [r3, #0]
 8003504:	e7e5      	b.n	80034d2 <_puts_r+0x76>
 8003506:	bf00      	nop
 8003508:	080043cc 	.word	0x080043cc
 800350c:	080043ec 	.word	0x080043ec
 8003510:	080043ac 	.word	0x080043ac

08003514 <puts>:
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <puts+0xc>)
 8003516:	4601      	mov	r1, r0
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	f7ff bf9f 	b.w	800345c <_puts_r>
 800351e:	bf00      	nop
 8003520:	20000010 	.word	0x20000010

08003524 <__swbuf_r>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	460e      	mov	r6, r1
 8003528:	4614      	mov	r4, r2
 800352a:	4605      	mov	r5, r0
 800352c:	b118      	cbz	r0, 8003536 <__swbuf_r+0x12>
 800352e:	6983      	ldr	r3, [r0, #24]
 8003530:	b90b      	cbnz	r3, 8003536 <__swbuf_r+0x12>
 8003532:	f000 f9a7 	bl	8003884 <__sinit>
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <__swbuf_r+0x98>)
 8003538:	429c      	cmp	r4, r3
 800353a:	d12a      	bne.n	8003592 <__swbuf_r+0x6e>
 800353c:	686c      	ldr	r4, [r5, #4]
 800353e:	69a3      	ldr	r3, [r4, #24]
 8003540:	60a3      	str	r3, [r4, #8]
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	071a      	lsls	r2, r3, #28
 8003546:	d52e      	bpl.n	80035a6 <__swbuf_r+0x82>
 8003548:	6923      	ldr	r3, [r4, #16]
 800354a:	b363      	cbz	r3, 80035a6 <__swbuf_r+0x82>
 800354c:	6923      	ldr	r3, [r4, #16]
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	1ac0      	subs	r0, r0, r3
 8003552:	6963      	ldr	r3, [r4, #20]
 8003554:	b2f6      	uxtb	r6, r6
 8003556:	4283      	cmp	r3, r0
 8003558:	4637      	mov	r7, r6
 800355a:	dc04      	bgt.n	8003566 <__swbuf_r+0x42>
 800355c:	4621      	mov	r1, r4
 800355e:	4628      	mov	r0, r5
 8003560:	f000 f926 	bl	80037b0 <_fflush_r>
 8003564:	bb28      	cbnz	r0, 80035b2 <__swbuf_r+0x8e>
 8003566:	68a3      	ldr	r3, [r4, #8]
 8003568:	3b01      	subs	r3, #1
 800356a:	60a3      	str	r3, [r4, #8]
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	6022      	str	r2, [r4, #0]
 8003572:	701e      	strb	r6, [r3, #0]
 8003574:	6963      	ldr	r3, [r4, #20]
 8003576:	3001      	adds	r0, #1
 8003578:	4283      	cmp	r3, r0
 800357a:	d004      	beq.n	8003586 <__swbuf_r+0x62>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	07db      	lsls	r3, r3, #31
 8003580:	d519      	bpl.n	80035b6 <__swbuf_r+0x92>
 8003582:	2e0a      	cmp	r6, #10
 8003584:	d117      	bne.n	80035b6 <__swbuf_r+0x92>
 8003586:	4621      	mov	r1, r4
 8003588:	4628      	mov	r0, r5
 800358a:	f000 f911 	bl	80037b0 <_fflush_r>
 800358e:	b190      	cbz	r0, 80035b6 <__swbuf_r+0x92>
 8003590:	e00f      	b.n	80035b2 <__swbuf_r+0x8e>
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <__swbuf_r+0x9c>)
 8003594:	429c      	cmp	r4, r3
 8003596:	d101      	bne.n	800359c <__swbuf_r+0x78>
 8003598:	68ac      	ldr	r4, [r5, #8]
 800359a:	e7d0      	b.n	800353e <__swbuf_r+0x1a>
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <__swbuf_r+0xa0>)
 800359e:	429c      	cmp	r4, r3
 80035a0:	bf08      	it	eq
 80035a2:	68ec      	ldreq	r4, [r5, #12]
 80035a4:	e7cb      	b.n	800353e <__swbuf_r+0x1a>
 80035a6:	4621      	mov	r1, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	f000 f80d 	bl	80035c8 <__swsetup_r>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d0cc      	beq.n	800354c <__swbuf_r+0x28>
 80035b2:	f04f 37ff 	mov.w	r7, #4294967295
 80035b6:	4638      	mov	r0, r7
 80035b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	080043cc 	.word	0x080043cc
 80035c0:	080043ec 	.word	0x080043ec
 80035c4:	080043ac 	.word	0x080043ac

080035c8 <__swsetup_r>:
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <__swsetup_r+0xcc>)
 80035ca:	b570      	push	{r4, r5, r6, lr}
 80035cc:	681d      	ldr	r5, [r3, #0]
 80035ce:	4606      	mov	r6, r0
 80035d0:	460c      	mov	r4, r1
 80035d2:	b125      	cbz	r5, 80035de <__swsetup_r+0x16>
 80035d4:	69ab      	ldr	r3, [r5, #24]
 80035d6:	b913      	cbnz	r3, 80035de <__swsetup_r+0x16>
 80035d8:	4628      	mov	r0, r5
 80035da:	f000 f953 	bl	8003884 <__sinit>
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <__swsetup_r+0xd0>)
 80035e0:	429c      	cmp	r4, r3
 80035e2:	d10f      	bne.n	8003604 <__swsetup_r+0x3c>
 80035e4:	686c      	ldr	r4, [r5, #4]
 80035e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	0715      	lsls	r5, r2, #28
 80035ee:	d42c      	bmi.n	800364a <__swsetup_r+0x82>
 80035f0:	06d0      	lsls	r0, r2, #27
 80035f2:	d411      	bmi.n	8003618 <__swsetup_r+0x50>
 80035f4:	2209      	movs	r2, #9
 80035f6:	6032      	str	r2, [r6, #0]
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003602:	e03e      	b.n	8003682 <__swsetup_r+0xba>
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <__swsetup_r+0xd4>)
 8003606:	429c      	cmp	r4, r3
 8003608:	d101      	bne.n	800360e <__swsetup_r+0x46>
 800360a:	68ac      	ldr	r4, [r5, #8]
 800360c:	e7eb      	b.n	80035e6 <__swsetup_r+0x1e>
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <__swsetup_r+0xd8>)
 8003610:	429c      	cmp	r4, r3
 8003612:	bf08      	it	eq
 8003614:	68ec      	ldreq	r4, [r5, #12]
 8003616:	e7e6      	b.n	80035e6 <__swsetup_r+0x1e>
 8003618:	0751      	lsls	r1, r2, #29
 800361a:	d512      	bpl.n	8003642 <__swsetup_r+0x7a>
 800361c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800361e:	b141      	cbz	r1, 8003632 <__swsetup_r+0x6a>
 8003620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003624:	4299      	cmp	r1, r3
 8003626:	d002      	beq.n	800362e <__swsetup_r+0x66>
 8003628:	4630      	mov	r0, r6
 800362a:	f000 fa19 	bl	8003a60 <_free_r>
 800362e:	2300      	movs	r3, #0
 8003630:	6363      	str	r3, [r4, #52]	; 0x34
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	2300      	movs	r3, #0
 800363c:	6063      	str	r3, [r4, #4]
 800363e:	6923      	ldr	r3, [r4, #16]
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	f043 0308 	orr.w	r3, r3, #8
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	6923      	ldr	r3, [r4, #16]
 800364c:	b94b      	cbnz	r3, 8003662 <__swsetup_r+0x9a>
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003658:	d003      	beq.n	8003662 <__swsetup_r+0x9a>
 800365a:	4621      	mov	r1, r4
 800365c:	4630      	mov	r0, r6
 800365e:	f000 f9bf 	bl	80039e0 <__smakebuf_r>
 8003662:	89a2      	ldrh	r2, [r4, #12]
 8003664:	f012 0301 	ands.w	r3, r2, #1
 8003668:	d00c      	beq.n	8003684 <__swsetup_r+0xbc>
 800366a:	2300      	movs	r3, #0
 800366c:	60a3      	str	r3, [r4, #8]
 800366e:	6963      	ldr	r3, [r4, #20]
 8003670:	425b      	negs	r3, r3
 8003672:	61a3      	str	r3, [r4, #24]
 8003674:	6923      	ldr	r3, [r4, #16]
 8003676:	b953      	cbnz	r3, 800368e <__swsetup_r+0xc6>
 8003678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800367c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003680:	d1ba      	bne.n	80035f8 <__swsetup_r+0x30>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	0792      	lsls	r2, r2, #30
 8003686:	bf58      	it	pl
 8003688:	6963      	ldrpl	r3, [r4, #20]
 800368a:	60a3      	str	r3, [r4, #8]
 800368c:	e7f2      	b.n	8003674 <__swsetup_r+0xac>
 800368e:	2000      	movs	r0, #0
 8003690:	e7f7      	b.n	8003682 <__swsetup_r+0xba>
 8003692:	bf00      	nop
 8003694:	20000010 	.word	0x20000010
 8003698:	080043cc 	.word	0x080043cc
 800369c:	080043ec 	.word	0x080043ec
 80036a0:	080043ac 	.word	0x080043ac

080036a4 <__sflush_r>:
 80036a4:	898a      	ldrh	r2, [r1, #12]
 80036a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036aa:	4605      	mov	r5, r0
 80036ac:	0710      	lsls	r0, r2, #28
 80036ae:	460c      	mov	r4, r1
 80036b0:	d458      	bmi.n	8003764 <__sflush_r+0xc0>
 80036b2:	684b      	ldr	r3, [r1, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	dc05      	bgt.n	80036c4 <__sflush_r+0x20>
 80036b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	dc02      	bgt.n	80036c4 <__sflush_r+0x20>
 80036be:	2000      	movs	r0, #0
 80036c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036c6:	2e00      	cmp	r6, #0
 80036c8:	d0f9      	beq.n	80036be <__sflush_r+0x1a>
 80036ca:	2300      	movs	r3, #0
 80036cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036d0:	682f      	ldr	r7, [r5, #0]
 80036d2:	6a21      	ldr	r1, [r4, #32]
 80036d4:	602b      	str	r3, [r5, #0]
 80036d6:	d032      	beq.n	800373e <__sflush_r+0x9a>
 80036d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	075a      	lsls	r2, r3, #29
 80036de:	d505      	bpl.n	80036ec <__sflush_r+0x48>
 80036e0:	6863      	ldr	r3, [r4, #4]
 80036e2:	1ac0      	subs	r0, r0, r3
 80036e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036e6:	b10b      	cbz	r3, 80036ec <__sflush_r+0x48>
 80036e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ea:	1ac0      	subs	r0, r0, r3
 80036ec:	2300      	movs	r3, #0
 80036ee:	4602      	mov	r2, r0
 80036f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036f2:	6a21      	ldr	r1, [r4, #32]
 80036f4:	4628      	mov	r0, r5
 80036f6:	47b0      	blx	r6
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	89a3      	ldrh	r3, [r4, #12]
 80036fc:	d106      	bne.n	800370c <__sflush_r+0x68>
 80036fe:	6829      	ldr	r1, [r5, #0]
 8003700:	291d      	cmp	r1, #29
 8003702:	d848      	bhi.n	8003796 <__sflush_r+0xf2>
 8003704:	4a29      	ldr	r2, [pc, #164]	; (80037ac <__sflush_r+0x108>)
 8003706:	40ca      	lsrs	r2, r1
 8003708:	07d6      	lsls	r6, r2, #31
 800370a:	d544      	bpl.n	8003796 <__sflush_r+0xf2>
 800370c:	2200      	movs	r2, #0
 800370e:	6062      	str	r2, [r4, #4]
 8003710:	04d9      	lsls	r1, r3, #19
 8003712:	6922      	ldr	r2, [r4, #16]
 8003714:	6022      	str	r2, [r4, #0]
 8003716:	d504      	bpl.n	8003722 <__sflush_r+0x7e>
 8003718:	1c42      	adds	r2, r0, #1
 800371a:	d101      	bne.n	8003720 <__sflush_r+0x7c>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b903      	cbnz	r3, 8003722 <__sflush_r+0x7e>
 8003720:	6560      	str	r0, [r4, #84]	; 0x54
 8003722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003724:	602f      	str	r7, [r5, #0]
 8003726:	2900      	cmp	r1, #0
 8003728:	d0c9      	beq.n	80036be <__sflush_r+0x1a>
 800372a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800372e:	4299      	cmp	r1, r3
 8003730:	d002      	beq.n	8003738 <__sflush_r+0x94>
 8003732:	4628      	mov	r0, r5
 8003734:	f000 f994 	bl	8003a60 <_free_r>
 8003738:	2000      	movs	r0, #0
 800373a:	6360      	str	r0, [r4, #52]	; 0x34
 800373c:	e7c0      	b.n	80036c0 <__sflush_r+0x1c>
 800373e:	2301      	movs	r3, #1
 8003740:	4628      	mov	r0, r5
 8003742:	47b0      	blx	r6
 8003744:	1c41      	adds	r1, r0, #1
 8003746:	d1c8      	bne.n	80036da <__sflush_r+0x36>
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0c5      	beq.n	80036da <__sflush_r+0x36>
 800374e:	2b1d      	cmp	r3, #29
 8003750:	d001      	beq.n	8003756 <__sflush_r+0xb2>
 8003752:	2b16      	cmp	r3, #22
 8003754:	d101      	bne.n	800375a <__sflush_r+0xb6>
 8003756:	602f      	str	r7, [r5, #0]
 8003758:	e7b1      	b.n	80036be <__sflush_r+0x1a>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	e7ad      	b.n	80036c0 <__sflush_r+0x1c>
 8003764:	690f      	ldr	r7, [r1, #16]
 8003766:	2f00      	cmp	r7, #0
 8003768:	d0a9      	beq.n	80036be <__sflush_r+0x1a>
 800376a:	0793      	lsls	r3, r2, #30
 800376c:	680e      	ldr	r6, [r1, #0]
 800376e:	bf08      	it	eq
 8003770:	694b      	ldreq	r3, [r1, #20]
 8003772:	600f      	str	r7, [r1, #0]
 8003774:	bf18      	it	ne
 8003776:	2300      	movne	r3, #0
 8003778:	eba6 0807 	sub.w	r8, r6, r7
 800377c:	608b      	str	r3, [r1, #8]
 800377e:	f1b8 0f00 	cmp.w	r8, #0
 8003782:	dd9c      	ble.n	80036be <__sflush_r+0x1a>
 8003784:	4643      	mov	r3, r8
 8003786:	463a      	mov	r2, r7
 8003788:	6a21      	ldr	r1, [r4, #32]
 800378a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800378c:	4628      	mov	r0, r5
 800378e:	47b0      	blx	r6
 8003790:	2800      	cmp	r0, #0
 8003792:	dc06      	bgt.n	80037a2 <__sflush_r+0xfe>
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800379a:	81a3      	strh	r3, [r4, #12]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e78e      	b.n	80036c0 <__sflush_r+0x1c>
 80037a2:	4407      	add	r7, r0
 80037a4:	eba8 0800 	sub.w	r8, r8, r0
 80037a8:	e7e9      	b.n	800377e <__sflush_r+0xda>
 80037aa:	bf00      	nop
 80037ac:	20400001 	.word	0x20400001

080037b0 <_fflush_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	690b      	ldr	r3, [r1, #16]
 80037b4:	4605      	mov	r5, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	b1db      	cbz	r3, 80037f2 <_fflush_r+0x42>
 80037ba:	b118      	cbz	r0, 80037c4 <_fflush_r+0x14>
 80037bc:	6983      	ldr	r3, [r0, #24]
 80037be:	b90b      	cbnz	r3, 80037c4 <_fflush_r+0x14>
 80037c0:	f000 f860 	bl	8003884 <__sinit>
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <_fflush_r+0x48>)
 80037c6:	429c      	cmp	r4, r3
 80037c8:	d109      	bne.n	80037de <_fflush_r+0x2e>
 80037ca:	686c      	ldr	r4, [r5, #4]
 80037cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d0:	b17b      	cbz	r3, 80037f2 <_fflush_r+0x42>
 80037d2:	4621      	mov	r1, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037da:	f7ff bf63 	b.w	80036a4 <__sflush_r>
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <_fflush_r+0x4c>)
 80037e0:	429c      	cmp	r4, r3
 80037e2:	d101      	bne.n	80037e8 <_fflush_r+0x38>
 80037e4:	68ac      	ldr	r4, [r5, #8]
 80037e6:	e7f1      	b.n	80037cc <_fflush_r+0x1c>
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <_fflush_r+0x50>)
 80037ea:	429c      	cmp	r4, r3
 80037ec:	bf08      	it	eq
 80037ee:	68ec      	ldreq	r4, [r5, #12]
 80037f0:	e7ec      	b.n	80037cc <_fflush_r+0x1c>
 80037f2:	2000      	movs	r0, #0
 80037f4:	bd38      	pop	{r3, r4, r5, pc}
 80037f6:	bf00      	nop
 80037f8:	080043cc 	.word	0x080043cc
 80037fc:	080043ec 	.word	0x080043ec
 8003800:	080043ac 	.word	0x080043ac

08003804 <std>:
 8003804:	2300      	movs	r3, #0
 8003806:	b510      	push	{r4, lr}
 8003808:	4604      	mov	r4, r0
 800380a:	e9c0 3300 	strd	r3, r3, [r0]
 800380e:	6083      	str	r3, [r0, #8]
 8003810:	8181      	strh	r1, [r0, #12]
 8003812:	6643      	str	r3, [r0, #100]	; 0x64
 8003814:	81c2      	strh	r2, [r0, #14]
 8003816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800381a:	6183      	str	r3, [r0, #24]
 800381c:	4619      	mov	r1, r3
 800381e:	2208      	movs	r2, #8
 8003820:	305c      	adds	r0, #92	; 0x5c
 8003822:	f7ff fdfa 	bl	800341a <memset>
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <std+0x38>)
 8003828:	6263      	str	r3, [r4, #36]	; 0x24
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <std+0x3c>)
 800382c:	62a3      	str	r3, [r4, #40]	; 0x28
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <std+0x40>)
 8003830:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <std+0x44>)
 8003834:	6224      	str	r4, [r4, #32]
 8003836:	6323      	str	r3, [r4, #48]	; 0x30
 8003838:	bd10      	pop	{r4, pc}
 800383a:	bf00      	nop
 800383c:	08004161 	.word	0x08004161
 8003840:	08004183 	.word	0x08004183
 8003844:	080041bb 	.word	0x080041bb
 8003848:	080041df 	.word	0x080041df

0800384c <_cleanup_r>:
 800384c:	4901      	ldr	r1, [pc, #4]	; (8003854 <_cleanup_r+0x8>)
 800384e:	f000 b885 	b.w	800395c <_fwalk_reent>
 8003852:	bf00      	nop
 8003854:	080037b1 	.word	0x080037b1

08003858 <__sfmoreglue>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	1e4a      	subs	r2, r1, #1
 800385c:	2568      	movs	r5, #104	; 0x68
 800385e:	4355      	muls	r5, r2
 8003860:	460e      	mov	r6, r1
 8003862:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003866:	f000 f949 	bl	8003afc <_malloc_r>
 800386a:	4604      	mov	r4, r0
 800386c:	b140      	cbz	r0, 8003880 <__sfmoreglue+0x28>
 800386e:	2100      	movs	r1, #0
 8003870:	e9c0 1600 	strd	r1, r6, [r0]
 8003874:	300c      	adds	r0, #12
 8003876:	60a0      	str	r0, [r4, #8]
 8003878:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800387c:	f7ff fdcd 	bl	800341a <memset>
 8003880:	4620      	mov	r0, r4
 8003882:	bd70      	pop	{r4, r5, r6, pc}

08003884 <__sinit>:
 8003884:	6983      	ldr	r3, [r0, #24]
 8003886:	b510      	push	{r4, lr}
 8003888:	4604      	mov	r4, r0
 800388a:	bb33      	cbnz	r3, 80038da <__sinit+0x56>
 800388c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003890:	6503      	str	r3, [r0, #80]	; 0x50
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <__sinit+0x58>)
 8003894:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <__sinit+0x5c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6282      	str	r2, [r0, #40]	; 0x28
 800389a:	4298      	cmp	r0, r3
 800389c:	bf04      	itt	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	6183      	streq	r3, [r0, #24]
 80038a2:	f000 f81f 	bl	80038e4 <__sfp>
 80038a6:	6060      	str	r0, [r4, #4]
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 f81b 	bl	80038e4 <__sfp>
 80038ae:	60a0      	str	r0, [r4, #8]
 80038b0:	4620      	mov	r0, r4
 80038b2:	f000 f817 	bl	80038e4 <__sfp>
 80038b6:	2200      	movs	r2, #0
 80038b8:	60e0      	str	r0, [r4, #12]
 80038ba:	2104      	movs	r1, #4
 80038bc:	6860      	ldr	r0, [r4, #4]
 80038be:	f7ff ffa1 	bl	8003804 <std>
 80038c2:	2201      	movs	r2, #1
 80038c4:	2109      	movs	r1, #9
 80038c6:	68a0      	ldr	r0, [r4, #8]
 80038c8:	f7ff ff9c 	bl	8003804 <std>
 80038cc:	2202      	movs	r2, #2
 80038ce:	2112      	movs	r1, #18
 80038d0:	68e0      	ldr	r0, [r4, #12]
 80038d2:	f7ff ff97 	bl	8003804 <std>
 80038d6:	2301      	movs	r3, #1
 80038d8:	61a3      	str	r3, [r4, #24]
 80038da:	bd10      	pop	{r4, pc}
 80038dc:	080043a8 	.word	0x080043a8
 80038e0:	0800384d 	.word	0x0800384d

080038e4 <__sfp>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <__sfp+0x70>)
 80038e8:	681e      	ldr	r6, [r3, #0]
 80038ea:	69b3      	ldr	r3, [r6, #24]
 80038ec:	4607      	mov	r7, r0
 80038ee:	b913      	cbnz	r3, 80038f6 <__sfp+0x12>
 80038f0:	4630      	mov	r0, r6
 80038f2:	f7ff ffc7 	bl	8003884 <__sinit>
 80038f6:	3648      	adds	r6, #72	; 0x48
 80038f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	d503      	bpl.n	8003908 <__sfp+0x24>
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	b133      	cbz	r3, 8003912 <__sfp+0x2e>
 8003904:	6836      	ldr	r6, [r6, #0]
 8003906:	e7f7      	b.n	80038f8 <__sfp+0x14>
 8003908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800390c:	b16d      	cbz	r5, 800392a <__sfp+0x46>
 800390e:	3468      	adds	r4, #104	; 0x68
 8003910:	e7f4      	b.n	80038fc <__sfp+0x18>
 8003912:	2104      	movs	r1, #4
 8003914:	4638      	mov	r0, r7
 8003916:	f7ff ff9f 	bl	8003858 <__sfmoreglue>
 800391a:	6030      	str	r0, [r6, #0]
 800391c:	2800      	cmp	r0, #0
 800391e:	d1f1      	bne.n	8003904 <__sfp+0x20>
 8003920:	230c      	movs	r3, #12
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4604      	mov	r4, r0
 8003926:	4620      	mov	r0, r4
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <__sfp+0x74>)
 800392c:	6665      	str	r5, [r4, #100]	; 0x64
 800392e:	e9c4 5500 	strd	r5, r5, [r4]
 8003932:	60a5      	str	r5, [r4, #8]
 8003934:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003938:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800393c:	2208      	movs	r2, #8
 800393e:	4629      	mov	r1, r5
 8003940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003944:	f7ff fd69 	bl	800341a <memset>
 8003948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800394c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003950:	e7e9      	b.n	8003926 <__sfp+0x42>
 8003952:	bf00      	nop
 8003954:	080043a8 	.word	0x080043a8
 8003958:	ffff0001 	.word	0xffff0001

0800395c <_fwalk_reent>:
 800395c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003960:	4680      	mov	r8, r0
 8003962:	4689      	mov	r9, r1
 8003964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003968:	2600      	movs	r6, #0
 800396a:	b914      	cbnz	r4, 8003972 <_fwalk_reent+0x16>
 800396c:	4630      	mov	r0, r6
 800396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003972:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003976:	3f01      	subs	r7, #1
 8003978:	d501      	bpl.n	800397e <_fwalk_reent+0x22>
 800397a:	6824      	ldr	r4, [r4, #0]
 800397c:	e7f5      	b.n	800396a <_fwalk_reent+0xe>
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d907      	bls.n	8003994 <_fwalk_reent+0x38>
 8003984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003988:	3301      	adds	r3, #1
 800398a:	d003      	beq.n	8003994 <_fwalk_reent+0x38>
 800398c:	4629      	mov	r1, r5
 800398e:	4640      	mov	r0, r8
 8003990:	47c8      	blx	r9
 8003992:	4306      	orrs	r6, r0
 8003994:	3568      	adds	r5, #104	; 0x68
 8003996:	e7ee      	b.n	8003976 <_fwalk_reent+0x1a>

08003998 <__swhatbuf_r>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	460e      	mov	r6, r1
 800399c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a0:	2900      	cmp	r1, #0
 80039a2:	b096      	sub	sp, #88	; 0x58
 80039a4:	4614      	mov	r4, r2
 80039a6:	461d      	mov	r5, r3
 80039a8:	da07      	bge.n	80039ba <__swhatbuf_r+0x22>
 80039aa:	2300      	movs	r3, #0
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	89b3      	ldrh	r3, [r6, #12]
 80039b0:	061a      	lsls	r2, r3, #24
 80039b2:	d410      	bmi.n	80039d6 <__swhatbuf_r+0x3e>
 80039b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b8:	e00e      	b.n	80039d8 <__swhatbuf_r+0x40>
 80039ba:	466a      	mov	r2, sp
 80039bc:	f000 fc36 	bl	800422c <_fstat_r>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	dbf2      	blt.n	80039aa <__swhatbuf_r+0x12>
 80039c4:	9a01      	ldr	r2, [sp, #4]
 80039c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039ce:	425a      	negs	r2, r3
 80039d0:	415a      	adcs	r2, r3
 80039d2:	602a      	str	r2, [r5, #0]
 80039d4:	e7ee      	b.n	80039b4 <__swhatbuf_r+0x1c>
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	2000      	movs	r0, #0
 80039da:	6023      	str	r3, [r4, #0]
 80039dc:	b016      	add	sp, #88	; 0x58
 80039de:	bd70      	pop	{r4, r5, r6, pc}

080039e0 <__smakebuf_r>:
 80039e0:	898b      	ldrh	r3, [r1, #12]
 80039e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039e4:	079d      	lsls	r5, r3, #30
 80039e6:	4606      	mov	r6, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	d507      	bpl.n	80039fc <__smakebuf_r+0x1c>
 80039ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	6123      	str	r3, [r4, #16]
 80039f4:	2301      	movs	r3, #1
 80039f6:	6163      	str	r3, [r4, #20]
 80039f8:	b002      	add	sp, #8
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	ab01      	add	r3, sp, #4
 80039fe:	466a      	mov	r2, sp
 8003a00:	f7ff ffca 	bl	8003998 <__swhatbuf_r>
 8003a04:	9900      	ldr	r1, [sp, #0]
 8003a06:	4605      	mov	r5, r0
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f000 f877 	bl	8003afc <_malloc_r>
 8003a0e:	b948      	cbnz	r0, 8003a24 <__smakebuf_r+0x44>
 8003a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a14:	059a      	lsls	r2, r3, #22
 8003a16:	d4ef      	bmi.n	80039f8 <__smakebuf_r+0x18>
 8003a18:	f023 0303 	bic.w	r3, r3, #3
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	e7e3      	b.n	80039ec <__smakebuf_r+0xc>
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <__smakebuf_r+0x7c>)
 8003a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	6020      	str	r0, [r4, #0]
 8003a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	9b00      	ldr	r3, [sp, #0]
 8003a34:	6163      	str	r3, [r4, #20]
 8003a36:	9b01      	ldr	r3, [sp, #4]
 8003a38:	6120      	str	r0, [r4, #16]
 8003a3a:	b15b      	cbz	r3, 8003a54 <__smakebuf_r+0x74>
 8003a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a40:	4630      	mov	r0, r6
 8003a42:	f000 fc05 	bl	8004250 <_isatty_r>
 8003a46:	b128      	cbz	r0, 8003a54 <__smakebuf_r+0x74>
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	81a3      	strh	r3, [r4, #12]
 8003a54:	89a3      	ldrh	r3, [r4, #12]
 8003a56:	431d      	orrs	r5, r3
 8003a58:	81a5      	strh	r5, [r4, #12]
 8003a5a:	e7cd      	b.n	80039f8 <__smakebuf_r+0x18>
 8003a5c:	0800384d 	.word	0x0800384d

08003a60 <_free_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4605      	mov	r5, r0
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d045      	beq.n	8003af4 <_free_r+0x94>
 8003a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a6c:	1f0c      	subs	r4, r1, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfb8      	it	lt
 8003a72:	18e4      	addlt	r4, r4, r3
 8003a74:	f000 fc0e 	bl	8004294 <__malloc_lock>
 8003a78:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <_free_r+0x98>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	b933      	cbnz	r3, 8003a8e <_free_r+0x2e>
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6014      	str	r4, [r2, #0]
 8003a84:	4628      	mov	r0, r5
 8003a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a8a:	f000 bc04 	b.w	8004296 <__malloc_unlock>
 8003a8e:	42a3      	cmp	r3, r4
 8003a90:	d90c      	bls.n	8003aac <_free_r+0x4c>
 8003a92:	6821      	ldr	r1, [r4, #0]
 8003a94:	1862      	adds	r2, r4, r1
 8003a96:	4293      	cmp	r3, r2
 8003a98:	bf04      	itt	eq
 8003a9a:	681a      	ldreq	r2, [r3, #0]
 8003a9c:	685b      	ldreq	r3, [r3, #4]
 8003a9e:	6063      	str	r3, [r4, #4]
 8003aa0:	bf04      	itt	eq
 8003aa2:	1852      	addeq	r2, r2, r1
 8003aa4:	6022      	streq	r2, [r4, #0]
 8003aa6:	6004      	str	r4, [r0, #0]
 8003aa8:	e7ec      	b.n	8003a84 <_free_r+0x24>
 8003aaa:	4613      	mov	r3, r2
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	b10a      	cbz	r2, 8003ab4 <_free_r+0x54>
 8003ab0:	42a2      	cmp	r2, r4
 8003ab2:	d9fa      	bls.n	8003aaa <_free_r+0x4a>
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	1858      	adds	r0, r3, r1
 8003ab8:	42a0      	cmp	r0, r4
 8003aba:	d10b      	bne.n	8003ad4 <_free_r+0x74>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	4401      	add	r1, r0
 8003ac0:	1858      	adds	r0, r3, r1
 8003ac2:	4282      	cmp	r2, r0
 8003ac4:	6019      	str	r1, [r3, #0]
 8003ac6:	d1dd      	bne.n	8003a84 <_free_r+0x24>
 8003ac8:	6810      	ldr	r0, [r2, #0]
 8003aca:	6852      	ldr	r2, [r2, #4]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	4401      	add	r1, r0
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	e7d7      	b.n	8003a84 <_free_r+0x24>
 8003ad4:	d902      	bls.n	8003adc <_free_r+0x7c>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	e7d3      	b.n	8003a84 <_free_r+0x24>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	1821      	adds	r1, r4, r0
 8003ae0:	428a      	cmp	r2, r1
 8003ae2:	bf04      	itt	eq
 8003ae4:	6811      	ldreq	r1, [r2, #0]
 8003ae6:	6852      	ldreq	r2, [r2, #4]
 8003ae8:	6062      	str	r2, [r4, #4]
 8003aea:	bf04      	itt	eq
 8003aec:	1809      	addeq	r1, r1, r0
 8003aee:	6021      	streq	r1, [r4, #0]
 8003af0:	605c      	str	r4, [r3, #4]
 8003af2:	e7c7      	b.n	8003a84 <_free_r+0x24>
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
 8003af6:	bf00      	nop
 8003af8:	20004034 	.word	0x20004034

08003afc <_malloc_r>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	1ccd      	adds	r5, r1, #3
 8003b00:	f025 0503 	bic.w	r5, r5, #3
 8003b04:	3508      	adds	r5, #8
 8003b06:	2d0c      	cmp	r5, #12
 8003b08:	bf38      	it	cc
 8003b0a:	250c      	movcc	r5, #12
 8003b0c:	2d00      	cmp	r5, #0
 8003b0e:	4606      	mov	r6, r0
 8003b10:	db01      	blt.n	8003b16 <_malloc_r+0x1a>
 8003b12:	42a9      	cmp	r1, r5
 8003b14:	d903      	bls.n	8003b1e <_malloc_r+0x22>
 8003b16:	230c      	movs	r3, #12
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	f000 fbb9 	bl	8004294 <__malloc_lock>
 8003b22:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <_malloc_r+0xac>)
 8003b24:	6814      	ldr	r4, [r2, #0]
 8003b26:	4621      	mov	r1, r4
 8003b28:	b991      	cbnz	r1, 8003b50 <_malloc_r+0x54>
 8003b2a:	4c20      	ldr	r4, [pc, #128]	; (8003bac <_malloc_r+0xb0>)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	b91b      	cbnz	r3, 8003b38 <_malloc_r+0x3c>
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 fb05 	bl	8004140 <_sbrk_r>
 8003b36:	6020      	str	r0, [r4, #0]
 8003b38:	4629      	mov	r1, r5
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f000 fb00 	bl	8004140 <_sbrk_r>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d124      	bne.n	8003b8e <_malloc_r+0x92>
 8003b44:	230c      	movs	r3, #12
 8003b46:	6033      	str	r3, [r6, #0]
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 fba4 	bl	8004296 <__malloc_unlock>
 8003b4e:	e7e4      	b.n	8003b1a <_malloc_r+0x1e>
 8003b50:	680b      	ldr	r3, [r1, #0]
 8003b52:	1b5b      	subs	r3, r3, r5
 8003b54:	d418      	bmi.n	8003b88 <_malloc_r+0x8c>
 8003b56:	2b0b      	cmp	r3, #11
 8003b58:	d90f      	bls.n	8003b7a <_malloc_r+0x7e>
 8003b5a:	600b      	str	r3, [r1, #0]
 8003b5c:	50cd      	str	r5, [r1, r3]
 8003b5e:	18cc      	adds	r4, r1, r3
 8003b60:	4630      	mov	r0, r6
 8003b62:	f000 fb98 	bl	8004296 <__malloc_unlock>
 8003b66:	f104 000b 	add.w	r0, r4, #11
 8003b6a:	1d23      	adds	r3, r4, #4
 8003b6c:	f020 0007 	bic.w	r0, r0, #7
 8003b70:	1ac3      	subs	r3, r0, r3
 8003b72:	d0d3      	beq.n	8003b1c <_malloc_r+0x20>
 8003b74:	425a      	negs	r2, r3
 8003b76:	50e2      	str	r2, [r4, r3]
 8003b78:	e7d0      	b.n	8003b1c <_malloc_r+0x20>
 8003b7a:	428c      	cmp	r4, r1
 8003b7c:	684b      	ldr	r3, [r1, #4]
 8003b7e:	bf16      	itet	ne
 8003b80:	6063      	strne	r3, [r4, #4]
 8003b82:	6013      	streq	r3, [r2, #0]
 8003b84:	460c      	movne	r4, r1
 8003b86:	e7eb      	b.n	8003b60 <_malloc_r+0x64>
 8003b88:	460c      	mov	r4, r1
 8003b8a:	6849      	ldr	r1, [r1, #4]
 8003b8c:	e7cc      	b.n	8003b28 <_malloc_r+0x2c>
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d005      	beq.n	8003ba4 <_malloc_r+0xa8>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 fad0 	bl	8004140 <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0cf      	beq.n	8003b44 <_malloc_r+0x48>
 8003ba4:	6025      	str	r5, [r4, #0]
 8003ba6:	e7db      	b.n	8003b60 <_malloc_r+0x64>
 8003ba8:	20004034 	.word	0x20004034
 8003bac:	20004038 	.word	0x20004038

08003bb0 <__sfputc_r>:
 8003bb0:	6893      	ldr	r3, [r2, #8]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	b410      	push	{r4}
 8003bb8:	6093      	str	r3, [r2, #8]
 8003bba:	da08      	bge.n	8003bce <__sfputc_r+0x1e>
 8003bbc:	6994      	ldr	r4, [r2, #24]
 8003bbe:	42a3      	cmp	r3, r4
 8003bc0:	db01      	blt.n	8003bc6 <__sfputc_r+0x16>
 8003bc2:	290a      	cmp	r1, #10
 8003bc4:	d103      	bne.n	8003bce <__sfputc_r+0x1e>
 8003bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bca:	f7ff bcab 	b.w	8003524 <__swbuf_r>
 8003bce:	6813      	ldr	r3, [r2, #0]
 8003bd0:	1c58      	adds	r0, r3, #1
 8003bd2:	6010      	str	r0, [r2, #0]
 8003bd4:	7019      	strb	r1, [r3, #0]
 8003bd6:	4608      	mov	r0, r1
 8003bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <__sfputs_r>:
 8003bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be0:	4606      	mov	r6, r0
 8003be2:	460f      	mov	r7, r1
 8003be4:	4614      	mov	r4, r2
 8003be6:	18d5      	adds	r5, r2, r3
 8003be8:	42ac      	cmp	r4, r5
 8003bea:	d101      	bne.n	8003bf0 <__sfputs_r+0x12>
 8003bec:	2000      	movs	r0, #0
 8003bee:	e007      	b.n	8003c00 <__sfputs_r+0x22>
 8003bf0:	463a      	mov	r2, r7
 8003bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f7ff ffda 	bl	8003bb0 <__sfputc_r>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d1f3      	bne.n	8003be8 <__sfputs_r+0xa>
 8003c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c04 <_vfiprintf_r>:
 8003c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	460c      	mov	r4, r1
 8003c0a:	b09d      	sub	sp, #116	; 0x74
 8003c0c:	4617      	mov	r7, r2
 8003c0e:	461d      	mov	r5, r3
 8003c10:	4606      	mov	r6, r0
 8003c12:	b118      	cbz	r0, 8003c1c <_vfiprintf_r+0x18>
 8003c14:	6983      	ldr	r3, [r0, #24]
 8003c16:	b90b      	cbnz	r3, 8003c1c <_vfiprintf_r+0x18>
 8003c18:	f7ff fe34 	bl	8003884 <__sinit>
 8003c1c:	4b7c      	ldr	r3, [pc, #496]	; (8003e10 <_vfiprintf_r+0x20c>)
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	d158      	bne.n	8003cd4 <_vfiprintf_r+0xd0>
 8003c22:	6874      	ldr	r4, [r6, #4]
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	0718      	lsls	r0, r3, #28
 8003c28:	d55e      	bpl.n	8003ce8 <_vfiprintf_r+0xe4>
 8003c2a:	6923      	ldr	r3, [r4, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d05b      	beq.n	8003ce8 <_vfiprintf_r+0xe4>
 8003c30:	2300      	movs	r3, #0
 8003c32:	9309      	str	r3, [sp, #36]	; 0x24
 8003c34:	2320      	movs	r3, #32
 8003c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c3a:	2330      	movs	r3, #48	; 0x30
 8003c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c40:	9503      	str	r5, [sp, #12]
 8003c42:	f04f 0b01 	mov.w	fp, #1
 8003c46:	46b8      	mov	r8, r7
 8003c48:	4645      	mov	r5, r8
 8003c4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c4e:	b10b      	cbz	r3, 8003c54 <_vfiprintf_r+0x50>
 8003c50:	2b25      	cmp	r3, #37	; 0x25
 8003c52:	d154      	bne.n	8003cfe <_vfiprintf_r+0xfa>
 8003c54:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c58:	d00b      	beq.n	8003c72 <_vfiprintf_r+0x6e>
 8003c5a:	4653      	mov	r3, sl
 8003c5c:	463a      	mov	r2, r7
 8003c5e:	4621      	mov	r1, r4
 8003c60:	4630      	mov	r0, r6
 8003c62:	f7ff ffbc 	bl	8003bde <__sfputs_r>
 8003c66:	3001      	adds	r0, #1
 8003c68:	f000 80c2 	beq.w	8003df0 <_vfiprintf_r+0x1ec>
 8003c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c6e:	4453      	add	r3, sl
 8003c70:	9309      	str	r3, [sp, #36]	; 0x24
 8003c72:	f898 3000 	ldrb.w	r3, [r8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80ba 	beq.w	8003df0 <_vfiprintf_r+0x1ec>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c86:	9304      	str	r3, [sp, #16]
 8003c88:	9307      	str	r3, [sp, #28]
 8003c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c90:	46a8      	mov	r8, r5
 8003c92:	2205      	movs	r2, #5
 8003c94:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c98:	485e      	ldr	r0, [pc, #376]	; (8003e14 <_vfiprintf_r+0x210>)
 8003c9a:	f7fc fa99 	bl	80001d0 <memchr>
 8003c9e:	9b04      	ldr	r3, [sp, #16]
 8003ca0:	bb78      	cbnz	r0, 8003d02 <_vfiprintf_r+0xfe>
 8003ca2:	06d9      	lsls	r1, r3, #27
 8003ca4:	bf44      	itt	mi
 8003ca6:	2220      	movmi	r2, #32
 8003ca8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cac:	071a      	lsls	r2, r3, #28
 8003cae:	bf44      	itt	mi
 8003cb0:	222b      	movmi	r2, #43	; 0x2b
 8003cb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cb6:	782a      	ldrb	r2, [r5, #0]
 8003cb8:	2a2a      	cmp	r2, #42	; 0x2a
 8003cba:	d02a      	beq.n	8003d12 <_vfiprintf_r+0x10e>
 8003cbc:	9a07      	ldr	r2, [sp, #28]
 8003cbe:	46a8      	mov	r8, r5
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	250a      	movs	r5, #10
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cca:	3b30      	subs	r3, #48	; 0x30
 8003ccc:	2b09      	cmp	r3, #9
 8003cce:	d969      	bls.n	8003da4 <_vfiprintf_r+0x1a0>
 8003cd0:	b360      	cbz	r0, 8003d2c <_vfiprintf_r+0x128>
 8003cd2:	e024      	b.n	8003d1e <_vfiprintf_r+0x11a>
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <_vfiprintf_r+0x214>)
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d101      	bne.n	8003cde <_vfiprintf_r+0xda>
 8003cda:	68b4      	ldr	r4, [r6, #8]
 8003cdc:	e7a2      	b.n	8003c24 <_vfiprintf_r+0x20>
 8003cde:	4b4f      	ldr	r3, [pc, #316]	; (8003e1c <_vfiprintf_r+0x218>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	bf08      	it	eq
 8003ce4:	68f4      	ldreq	r4, [r6, #12]
 8003ce6:	e79d      	b.n	8003c24 <_vfiprintf_r+0x20>
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4630      	mov	r0, r6
 8003cec:	f7ff fc6c 	bl	80035c8 <__swsetup_r>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d09d      	beq.n	8003c30 <_vfiprintf_r+0x2c>
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	b01d      	add	sp, #116	; 0x74
 8003cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cfe:	46a8      	mov	r8, r5
 8003d00:	e7a2      	b.n	8003c48 <_vfiprintf_r+0x44>
 8003d02:	4a44      	ldr	r2, [pc, #272]	; (8003e14 <_vfiprintf_r+0x210>)
 8003d04:	1a80      	subs	r0, r0, r2
 8003d06:	fa0b f000 	lsl.w	r0, fp, r0
 8003d0a:	4318      	orrs	r0, r3
 8003d0c:	9004      	str	r0, [sp, #16]
 8003d0e:	4645      	mov	r5, r8
 8003d10:	e7be      	b.n	8003c90 <_vfiprintf_r+0x8c>
 8003d12:	9a03      	ldr	r2, [sp, #12]
 8003d14:	1d11      	adds	r1, r2, #4
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	9103      	str	r1, [sp, #12]
 8003d1a:	2a00      	cmp	r2, #0
 8003d1c:	db01      	blt.n	8003d22 <_vfiprintf_r+0x11e>
 8003d1e:	9207      	str	r2, [sp, #28]
 8003d20:	e004      	b.n	8003d2c <_vfiprintf_r+0x128>
 8003d22:	4252      	negs	r2, r2
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	9207      	str	r2, [sp, #28]
 8003d2a:	9304      	str	r3, [sp, #16]
 8003d2c:	f898 3000 	ldrb.w	r3, [r8]
 8003d30:	2b2e      	cmp	r3, #46	; 0x2e
 8003d32:	d10e      	bne.n	8003d52 <_vfiprintf_r+0x14e>
 8003d34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d38:	2b2a      	cmp	r3, #42	; 0x2a
 8003d3a:	d138      	bne.n	8003dae <_vfiprintf_r+0x1aa>
 8003d3c:	9b03      	ldr	r3, [sp, #12]
 8003d3e:	1d1a      	adds	r2, r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	9203      	str	r2, [sp, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bfb8      	it	lt
 8003d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d4c:	f108 0802 	add.w	r8, r8, #2
 8003d50:	9305      	str	r3, [sp, #20]
 8003d52:	4d33      	ldr	r5, [pc, #204]	; (8003e20 <_vfiprintf_r+0x21c>)
 8003d54:	f898 1000 	ldrb.w	r1, [r8]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f7fc fa38 	bl	80001d0 <memchr>
 8003d60:	b140      	cbz	r0, 8003d74 <_vfiprintf_r+0x170>
 8003d62:	2340      	movs	r3, #64	; 0x40
 8003d64:	1b40      	subs	r0, r0, r5
 8003d66:	fa03 f000 	lsl.w	r0, r3, r0
 8003d6a:	9b04      	ldr	r3, [sp, #16]
 8003d6c:	4303      	orrs	r3, r0
 8003d6e:	f108 0801 	add.w	r8, r8, #1
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	f898 1000 	ldrb.w	r1, [r8]
 8003d78:	482a      	ldr	r0, [pc, #168]	; (8003e24 <_vfiprintf_r+0x220>)
 8003d7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d7e:	2206      	movs	r2, #6
 8003d80:	f108 0701 	add.w	r7, r8, #1
 8003d84:	f7fc fa24 	bl	80001d0 <memchr>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d037      	beq.n	8003dfc <_vfiprintf_r+0x1f8>
 8003d8c:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <_vfiprintf_r+0x224>)
 8003d8e:	bb1b      	cbnz	r3, 8003dd8 <_vfiprintf_r+0x1d4>
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	3307      	adds	r3, #7
 8003d94:	f023 0307 	bic.w	r3, r3, #7
 8003d98:	3308      	adds	r3, #8
 8003d9a:	9303      	str	r3, [sp, #12]
 8003d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d9e:	444b      	add	r3, r9
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	e750      	b.n	8003c46 <_vfiprintf_r+0x42>
 8003da4:	fb05 3202 	mla	r2, r5, r2, r3
 8003da8:	2001      	movs	r0, #1
 8003daa:	4688      	mov	r8, r1
 8003dac:	e78a      	b.n	8003cc4 <_vfiprintf_r+0xc0>
 8003dae:	2300      	movs	r3, #0
 8003db0:	f108 0801 	add.w	r8, r8, #1
 8003db4:	9305      	str	r3, [sp, #20]
 8003db6:	4619      	mov	r1, r3
 8003db8:	250a      	movs	r5, #10
 8003dba:	4640      	mov	r0, r8
 8003dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc0:	3a30      	subs	r2, #48	; 0x30
 8003dc2:	2a09      	cmp	r2, #9
 8003dc4:	d903      	bls.n	8003dce <_vfiprintf_r+0x1ca>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0c3      	beq.n	8003d52 <_vfiprintf_r+0x14e>
 8003dca:	9105      	str	r1, [sp, #20]
 8003dcc:	e7c1      	b.n	8003d52 <_vfiprintf_r+0x14e>
 8003dce:	fb05 2101 	mla	r1, r5, r1, r2
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4680      	mov	r8, r0
 8003dd6:	e7f0      	b.n	8003dba <_vfiprintf_r+0x1b6>
 8003dd8:	ab03      	add	r3, sp, #12
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	4622      	mov	r2, r4
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <_vfiprintf_r+0x228>)
 8003de0:	a904      	add	r1, sp, #16
 8003de2:	4630      	mov	r0, r6
 8003de4:	f3af 8000 	nop.w
 8003de8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003dec:	4681      	mov	r9, r0
 8003dee:	d1d5      	bne.n	8003d9c <_vfiprintf_r+0x198>
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	065b      	lsls	r3, r3, #25
 8003df4:	f53f af7e 	bmi.w	8003cf4 <_vfiprintf_r+0xf0>
 8003df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dfa:	e77d      	b.n	8003cf8 <_vfiprintf_r+0xf4>
 8003dfc:	ab03      	add	r3, sp, #12
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	4622      	mov	r2, r4
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <_vfiprintf_r+0x228>)
 8003e04:	a904      	add	r1, sp, #16
 8003e06:	4630      	mov	r0, r6
 8003e08:	f000 f888 	bl	8003f1c <_printf_i>
 8003e0c:	e7ec      	b.n	8003de8 <_vfiprintf_r+0x1e4>
 8003e0e:	bf00      	nop
 8003e10:	080043cc 	.word	0x080043cc
 8003e14:	0800440c 	.word	0x0800440c
 8003e18:	080043ec 	.word	0x080043ec
 8003e1c:	080043ac 	.word	0x080043ac
 8003e20:	08004412 	.word	0x08004412
 8003e24:	08004416 	.word	0x08004416
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	08003bdf 	.word	0x08003bdf

08003e30 <_printf_common>:
 8003e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e34:	4691      	mov	r9, r2
 8003e36:	461f      	mov	r7, r3
 8003e38:	688a      	ldr	r2, [r1, #8]
 8003e3a:	690b      	ldr	r3, [r1, #16]
 8003e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bfb8      	it	lt
 8003e44:	4613      	movlt	r3, r2
 8003e46:	f8c9 3000 	str.w	r3, [r9]
 8003e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460c      	mov	r4, r1
 8003e52:	b112      	cbz	r2, 8003e5a <_printf_common+0x2a>
 8003e54:	3301      	adds	r3, #1
 8003e56:	f8c9 3000 	str.w	r3, [r9]
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	0699      	lsls	r1, r3, #26
 8003e5e:	bf42      	ittt	mi
 8003e60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e64:	3302      	addmi	r3, #2
 8003e66:	f8c9 3000 	strmi.w	r3, [r9]
 8003e6a:	6825      	ldr	r5, [r4, #0]
 8003e6c:	f015 0506 	ands.w	r5, r5, #6
 8003e70:	d107      	bne.n	8003e82 <_printf_common+0x52>
 8003e72:	f104 0a19 	add.w	sl, r4, #25
 8003e76:	68e3      	ldr	r3, [r4, #12]
 8003e78:	f8d9 2000 	ldr.w	r2, [r9]
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	42ab      	cmp	r3, r5
 8003e80:	dc28      	bgt.n	8003ed4 <_printf_common+0xa4>
 8003e82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	3300      	adds	r3, #0
 8003e8a:	bf18      	it	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	0692      	lsls	r2, r2, #26
 8003e90:	d42d      	bmi.n	8003eee <_printf_common+0xbe>
 8003e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e96:	4639      	mov	r1, r7
 8003e98:	4630      	mov	r0, r6
 8003e9a:	47c0      	blx	r8
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d020      	beq.n	8003ee2 <_printf_common+0xb2>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	68e5      	ldr	r5, [r4, #12]
 8003ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ea8:	f003 0306 	and.w	r3, r3, #6
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	bf08      	it	eq
 8003eb0:	1aad      	subeq	r5, r5, r2
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	bf0c      	ite	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	2500      	movne	r5, #0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	bfc4      	itt	gt
 8003ec2:	1a9b      	subgt	r3, r3, r2
 8003ec4:	18ed      	addgt	r5, r5, r3
 8003ec6:	f04f 0900 	mov.w	r9, #0
 8003eca:	341a      	adds	r4, #26
 8003ecc:	454d      	cmp	r5, r9
 8003ece:	d11a      	bne.n	8003f06 <_printf_common+0xd6>
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	e008      	b.n	8003ee6 <_printf_common+0xb6>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	4652      	mov	r2, sl
 8003ed8:	4639      	mov	r1, r7
 8003eda:	4630      	mov	r0, r6
 8003edc:	47c0      	blx	r8
 8003ede:	3001      	adds	r0, #1
 8003ee0:	d103      	bne.n	8003eea <_printf_common+0xba>
 8003ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eea:	3501      	adds	r5, #1
 8003eec:	e7c3      	b.n	8003e76 <_printf_common+0x46>
 8003eee:	18e1      	adds	r1, r4, r3
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	2030      	movs	r0, #48	; 0x30
 8003ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef8:	4422      	add	r2, r4
 8003efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003efe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f02:	3302      	adds	r3, #2
 8003f04:	e7c5      	b.n	8003e92 <_printf_common+0x62>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4622      	mov	r2, r4
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	47c0      	blx	r8
 8003f10:	3001      	adds	r0, #1
 8003f12:	d0e6      	beq.n	8003ee2 <_printf_common+0xb2>
 8003f14:	f109 0901 	add.w	r9, r9, #1
 8003f18:	e7d8      	b.n	8003ecc <_printf_common+0x9c>
	...

08003f1c <_printf_i>:
 8003f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f24:	460c      	mov	r4, r1
 8003f26:	7e09      	ldrb	r1, [r1, #24]
 8003f28:	b085      	sub	sp, #20
 8003f2a:	296e      	cmp	r1, #110	; 0x6e
 8003f2c:	4617      	mov	r7, r2
 8003f2e:	4606      	mov	r6, r0
 8003f30:	4698      	mov	r8, r3
 8003f32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f34:	f000 80b3 	beq.w	800409e <_printf_i+0x182>
 8003f38:	d822      	bhi.n	8003f80 <_printf_i+0x64>
 8003f3a:	2963      	cmp	r1, #99	; 0x63
 8003f3c:	d036      	beq.n	8003fac <_printf_i+0x90>
 8003f3e:	d80a      	bhi.n	8003f56 <_printf_i+0x3a>
 8003f40:	2900      	cmp	r1, #0
 8003f42:	f000 80b9 	beq.w	80040b8 <_printf_i+0x19c>
 8003f46:	2958      	cmp	r1, #88	; 0x58
 8003f48:	f000 8083 	beq.w	8004052 <_printf_i+0x136>
 8003f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f54:	e032      	b.n	8003fbc <_printf_i+0xa0>
 8003f56:	2964      	cmp	r1, #100	; 0x64
 8003f58:	d001      	beq.n	8003f5e <_printf_i+0x42>
 8003f5a:	2969      	cmp	r1, #105	; 0x69
 8003f5c:	d1f6      	bne.n	8003f4c <_printf_i+0x30>
 8003f5e:	6820      	ldr	r0, [r4, #0]
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	0605      	lsls	r5, r0, #24
 8003f64:	f103 0104 	add.w	r1, r3, #4
 8003f68:	d52a      	bpl.n	8003fc0 <_printf_i+0xa4>
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6011      	str	r1, [r2, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da03      	bge.n	8003f7a <_printf_i+0x5e>
 8003f72:	222d      	movs	r2, #45	; 0x2d
 8003f74:	425b      	negs	r3, r3
 8003f76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f7a:	486f      	ldr	r0, [pc, #444]	; (8004138 <_printf_i+0x21c>)
 8003f7c:	220a      	movs	r2, #10
 8003f7e:	e039      	b.n	8003ff4 <_printf_i+0xd8>
 8003f80:	2973      	cmp	r1, #115	; 0x73
 8003f82:	f000 809d 	beq.w	80040c0 <_printf_i+0x1a4>
 8003f86:	d808      	bhi.n	8003f9a <_printf_i+0x7e>
 8003f88:	296f      	cmp	r1, #111	; 0x6f
 8003f8a:	d020      	beq.n	8003fce <_printf_i+0xb2>
 8003f8c:	2970      	cmp	r1, #112	; 0x70
 8003f8e:	d1dd      	bne.n	8003f4c <_printf_i+0x30>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f043 0320 	orr.w	r3, r3, #32
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	e003      	b.n	8003fa2 <_printf_i+0x86>
 8003f9a:	2975      	cmp	r1, #117	; 0x75
 8003f9c:	d017      	beq.n	8003fce <_printf_i+0xb2>
 8003f9e:	2978      	cmp	r1, #120	; 0x78
 8003fa0:	d1d4      	bne.n	8003f4c <_printf_i+0x30>
 8003fa2:	2378      	movs	r3, #120	; 0x78
 8003fa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fa8:	4864      	ldr	r0, [pc, #400]	; (800413c <_printf_i+0x220>)
 8003faa:	e055      	b.n	8004058 <_printf_i+0x13c>
 8003fac:	6813      	ldr	r3, [r2, #0]
 8003fae:	1d19      	adds	r1, r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6011      	str	r1, [r2, #0]
 8003fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e08c      	b.n	80040da <_printf_i+0x1be>
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6011      	str	r1, [r2, #0]
 8003fc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fc8:	bf18      	it	ne
 8003fca:	b21b      	sxthne	r3, r3
 8003fcc:	e7cf      	b.n	8003f6e <_printf_i+0x52>
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	6825      	ldr	r5, [r4, #0]
 8003fd2:	1d18      	adds	r0, r3, #4
 8003fd4:	6010      	str	r0, [r2, #0]
 8003fd6:	0628      	lsls	r0, r5, #24
 8003fd8:	d501      	bpl.n	8003fde <_printf_i+0xc2>
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	e002      	b.n	8003fe4 <_printf_i+0xc8>
 8003fde:	0668      	lsls	r0, r5, #25
 8003fe0:	d5fb      	bpl.n	8003fda <_printf_i+0xbe>
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	4854      	ldr	r0, [pc, #336]	; (8004138 <_printf_i+0x21c>)
 8003fe6:	296f      	cmp	r1, #111	; 0x6f
 8003fe8:	bf14      	ite	ne
 8003fea:	220a      	movne	r2, #10
 8003fec:	2208      	moveq	r2, #8
 8003fee:	2100      	movs	r1, #0
 8003ff0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ff4:	6865      	ldr	r5, [r4, #4]
 8003ff6:	60a5      	str	r5, [r4, #8]
 8003ff8:	2d00      	cmp	r5, #0
 8003ffa:	f2c0 8095 	blt.w	8004128 <_printf_i+0x20c>
 8003ffe:	6821      	ldr	r1, [r4, #0]
 8004000:	f021 0104 	bic.w	r1, r1, #4
 8004004:	6021      	str	r1, [r4, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d13d      	bne.n	8004086 <_printf_i+0x16a>
 800400a:	2d00      	cmp	r5, #0
 800400c:	f040 808e 	bne.w	800412c <_printf_i+0x210>
 8004010:	4665      	mov	r5, ip
 8004012:	2a08      	cmp	r2, #8
 8004014:	d10b      	bne.n	800402e <_printf_i+0x112>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	07db      	lsls	r3, r3, #31
 800401a:	d508      	bpl.n	800402e <_printf_i+0x112>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	6862      	ldr	r2, [r4, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	bfde      	ittt	le
 8004024:	2330      	movle	r3, #48	; 0x30
 8004026:	f805 3c01 	strble.w	r3, [r5, #-1]
 800402a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800402e:	ebac 0305 	sub.w	r3, ip, r5
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	f8cd 8000 	str.w	r8, [sp]
 8004038:	463b      	mov	r3, r7
 800403a:	aa03      	add	r2, sp, #12
 800403c:	4621      	mov	r1, r4
 800403e:	4630      	mov	r0, r6
 8004040:	f7ff fef6 	bl	8003e30 <_printf_common>
 8004044:	3001      	adds	r0, #1
 8004046:	d14d      	bne.n	80040e4 <_printf_i+0x1c8>
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	b005      	add	sp, #20
 800404e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004052:	4839      	ldr	r0, [pc, #228]	; (8004138 <_printf_i+0x21c>)
 8004054:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	6821      	ldr	r1, [r4, #0]
 800405c:	1d1d      	adds	r5, r3, #4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6015      	str	r5, [r2, #0]
 8004062:	060a      	lsls	r2, r1, #24
 8004064:	d50b      	bpl.n	800407e <_printf_i+0x162>
 8004066:	07ca      	lsls	r2, r1, #31
 8004068:	bf44      	itt	mi
 800406a:	f041 0120 	orrmi.w	r1, r1, #32
 800406e:	6021      	strmi	r1, [r4, #0]
 8004070:	b91b      	cbnz	r3, 800407a <_printf_i+0x15e>
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	f022 0220 	bic.w	r2, r2, #32
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	2210      	movs	r2, #16
 800407c:	e7b7      	b.n	8003fee <_printf_i+0xd2>
 800407e:	064d      	lsls	r5, r1, #25
 8004080:	bf48      	it	mi
 8004082:	b29b      	uxthmi	r3, r3
 8004084:	e7ef      	b.n	8004066 <_printf_i+0x14a>
 8004086:	4665      	mov	r5, ip
 8004088:	fbb3 f1f2 	udiv	r1, r3, r2
 800408c:	fb02 3311 	mls	r3, r2, r1, r3
 8004090:	5cc3      	ldrb	r3, [r0, r3]
 8004092:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004096:	460b      	mov	r3, r1
 8004098:	2900      	cmp	r1, #0
 800409a:	d1f5      	bne.n	8004088 <_printf_i+0x16c>
 800409c:	e7b9      	b.n	8004012 <_printf_i+0xf6>
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	6825      	ldr	r5, [r4, #0]
 80040a2:	6961      	ldr	r1, [r4, #20]
 80040a4:	1d18      	adds	r0, r3, #4
 80040a6:	6010      	str	r0, [r2, #0]
 80040a8:	0628      	lsls	r0, r5, #24
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	d501      	bpl.n	80040b2 <_printf_i+0x196>
 80040ae:	6019      	str	r1, [r3, #0]
 80040b0:	e002      	b.n	80040b8 <_printf_i+0x19c>
 80040b2:	066a      	lsls	r2, r5, #25
 80040b4:	d5fb      	bpl.n	80040ae <_printf_i+0x192>
 80040b6:	8019      	strh	r1, [r3, #0]
 80040b8:	2300      	movs	r3, #0
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	4665      	mov	r5, ip
 80040be:	e7b9      	b.n	8004034 <_printf_i+0x118>
 80040c0:	6813      	ldr	r3, [r2, #0]
 80040c2:	1d19      	adds	r1, r3, #4
 80040c4:	6011      	str	r1, [r2, #0]
 80040c6:	681d      	ldr	r5, [r3, #0]
 80040c8:	6862      	ldr	r2, [r4, #4]
 80040ca:	2100      	movs	r1, #0
 80040cc:	4628      	mov	r0, r5
 80040ce:	f7fc f87f 	bl	80001d0 <memchr>
 80040d2:	b108      	cbz	r0, 80040d8 <_printf_i+0x1bc>
 80040d4:	1b40      	subs	r0, r0, r5
 80040d6:	6060      	str	r0, [r4, #4]
 80040d8:	6863      	ldr	r3, [r4, #4]
 80040da:	6123      	str	r3, [r4, #16]
 80040dc:	2300      	movs	r3, #0
 80040de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e2:	e7a7      	b.n	8004034 <_printf_i+0x118>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	462a      	mov	r2, r5
 80040e8:	4639      	mov	r1, r7
 80040ea:	4630      	mov	r0, r6
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d0aa      	beq.n	8004048 <_printf_i+0x12c>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	079b      	lsls	r3, r3, #30
 80040f6:	d413      	bmi.n	8004120 <_printf_i+0x204>
 80040f8:	68e0      	ldr	r0, [r4, #12]
 80040fa:	9b03      	ldr	r3, [sp, #12]
 80040fc:	4298      	cmp	r0, r3
 80040fe:	bfb8      	it	lt
 8004100:	4618      	movlt	r0, r3
 8004102:	e7a3      	b.n	800404c <_printf_i+0x130>
 8004104:	2301      	movs	r3, #1
 8004106:	464a      	mov	r2, r9
 8004108:	4639      	mov	r1, r7
 800410a:	4630      	mov	r0, r6
 800410c:	47c0      	blx	r8
 800410e:	3001      	adds	r0, #1
 8004110:	d09a      	beq.n	8004048 <_printf_i+0x12c>
 8004112:	3501      	adds	r5, #1
 8004114:	68e3      	ldr	r3, [r4, #12]
 8004116:	9a03      	ldr	r2, [sp, #12]
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	42ab      	cmp	r3, r5
 800411c:	dcf2      	bgt.n	8004104 <_printf_i+0x1e8>
 800411e:	e7eb      	b.n	80040f8 <_printf_i+0x1dc>
 8004120:	2500      	movs	r5, #0
 8004122:	f104 0919 	add.w	r9, r4, #25
 8004126:	e7f5      	b.n	8004114 <_printf_i+0x1f8>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ac      	bne.n	8004086 <_printf_i+0x16a>
 800412c:	7803      	ldrb	r3, [r0, #0]
 800412e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004132:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004136:	e76c      	b.n	8004012 <_printf_i+0xf6>
 8004138:	0800441d 	.word	0x0800441d
 800413c:	0800442e 	.word	0x0800442e

08004140 <_sbrk_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4c06      	ldr	r4, [pc, #24]	; (800415c <_sbrk_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4605      	mov	r5, r0
 8004148:	4608      	mov	r0, r1
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	f7fc fc48 	bl	80009e0 <_sbrk>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_sbrk_r+0x1a>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	b103      	cbz	r3, 800415a <_sbrk_r+0x1a>
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20004048 	.word	0x20004048

08004160 <__sread>:
 8004160:	b510      	push	{r4, lr}
 8004162:	460c      	mov	r4, r1
 8004164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004168:	f000 f896 	bl	8004298 <_read_r>
 800416c:	2800      	cmp	r0, #0
 800416e:	bfab      	itete	ge
 8004170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004172:	89a3      	ldrhlt	r3, [r4, #12]
 8004174:	181b      	addge	r3, r3, r0
 8004176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800417a:	bfac      	ite	ge
 800417c:	6563      	strge	r3, [r4, #84]	; 0x54
 800417e:	81a3      	strhlt	r3, [r4, #12]
 8004180:	bd10      	pop	{r4, pc}

08004182 <__swrite>:
 8004182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004186:	461f      	mov	r7, r3
 8004188:	898b      	ldrh	r3, [r1, #12]
 800418a:	05db      	lsls	r3, r3, #23
 800418c:	4605      	mov	r5, r0
 800418e:	460c      	mov	r4, r1
 8004190:	4616      	mov	r6, r2
 8004192:	d505      	bpl.n	80041a0 <__swrite+0x1e>
 8004194:	2302      	movs	r3, #2
 8004196:	2200      	movs	r2, #0
 8004198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419c:	f000 f868 	bl	8004270 <_lseek_r>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	4632      	mov	r2, r6
 80041ae:	463b      	mov	r3, r7
 80041b0:	4628      	mov	r0, r5
 80041b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	f000 b817 	b.w	80041e8 <_write_r>

080041ba <__sseek>:
 80041ba:	b510      	push	{r4, lr}
 80041bc:	460c      	mov	r4, r1
 80041be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c2:	f000 f855 	bl	8004270 <_lseek_r>
 80041c6:	1c43      	adds	r3, r0, #1
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	bf15      	itete	ne
 80041cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041d6:	81a3      	strheq	r3, [r4, #12]
 80041d8:	bf18      	it	ne
 80041da:	81a3      	strhne	r3, [r4, #12]
 80041dc:	bd10      	pop	{r4, pc}

080041de <__sclose>:
 80041de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e2:	f000 b813 	b.w	800420c <_close_r>
	...

080041e8 <_write_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4c07      	ldr	r4, [pc, #28]	; (8004208 <_write_r+0x20>)
 80041ec:	4605      	mov	r5, r0
 80041ee:	4608      	mov	r0, r1
 80041f0:	4611      	mov	r1, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	6022      	str	r2, [r4, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fc f9fb 	bl	80005f2 <_write>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_write_r+0x1e>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	b103      	cbz	r3, 8004206 <_write_r+0x1e>
 8004204:	602b      	str	r3, [r5, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20004048 	.word	0x20004048

0800420c <_close_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4c06      	ldr	r4, [pc, #24]	; (8004228 <_close_r+0x1c>)
 8004210:	2300      	movs	r3, #0
 8004212:	4605      	mov	r5, r0
 8004214:	4608      	mov	r0, r1
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	f7fc fbae 	bl	8000978 <_close>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_close_r+0x1a>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	b103      	cbz	r3, 8004226 <_close_r+0x1a>
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	20004048 	.word	0x20004048

0800422c <_fstat_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4c07      	ldr	r4, [pc, #28]	; (800424c <_fstat_r+0x20>)
 8004230:	2300      	movs	r3, #0
 8004232:	4605      	mov	r5, r0
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	f7fc fba9 	bl	8000990 <_fstat>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d102      	bne.n	8004248 <_fstat_r+0x1c>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	b103      	cbz	r3, 8004248 <_fstat_r+0x1c>
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	bd38      	pop	{r3, r4, r5, pc}
 800424a:	bf00      	nop
 800424c:	20004048 	.word	0x20004048

08004250 <_isatty_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4c06      	ldr	r4, [pc, #24]	; (800426c <_isatty_r+0x1c>)
 8004254:	2300      	movs	r3, #0
 8004256:	4605      	mov	r5, r0
 8004258:	4608      	mov	r0, r1
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	f7fc fba8 	bl	80009b0 <_isatty>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_isatty_r+0x1a>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	b103      	cbz	r3, 800426a <_isatty_r+0x1a>
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20004048 	.word	0x20004048

08004270 <_lseek_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4c07      	ldr	r4, [pc, #28]	; (8004290 <_lseek_r+0x20>)
 8004274:	4605      	mov	r5, r0
 8004276:	4608      	mov	r0, r1
 8004278:	4611      	mov	r1, r2
 800427a:	2200      	movs	r2, #0
 800427c:	6022      	str	r2, [r4, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f7fc fba1 	bl	80009c6 <_lseek>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_lseek_r+0x1e>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	b103      	cbz	r3, 800428e <_lseek_r+0x1e>
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20004048 	.word	0x20004048

08004294 <__malloc_lock>:
 8004294:	4770      	bx	lr

08004296 <__malloc_unlock>:
 8004296:	4770      	bx	lr

08004298 <_read_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4c07      	ldr	r4, [pc, #28]	; (80042b8 <_read_r+0x20>)
 800429c:	4605      	mov	r5, r0
 800429e:	4608      	mov	r0, r1
 80042a0:	4611      	mov	r1, r2
 80042a2:	2200      	movs	r2, #0
 80042a4:	6022      	str	r2, [r4, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7fc fb49 	bl	800093e <_read>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d102      	bne.n	80042b6 <_read_r+0x1e>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	b103      	cbz	r3, 80042b6 <_read_r+0x1e>
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	20004048 	.word	0x20004048

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
