
04_03_FreeRTOS_Mutex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c8  080043c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080043d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd4  20000074  08004444  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004048  08004444  00024048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c31d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020f1  00000000  00000000  0002c3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b0  00000000  00000000  0002e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002ed68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022143  00000000  00000000  0002f510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008bc8  00000000  00000000  00051653  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c82bf  00000000  00000000  0005a21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001224da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002688  00000000  00000000  00122558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042bc 	.word	0x080042bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080042bc 	.word	0x080042bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000090 	.word	0x20000090
 8000500:	200000e4 	.word	0x200000e4

08000504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d013      	beq.n	8000544 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800051c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	e000      	b.n	8000530 <ITM_SendChar+0x2c>
    {
      __NOP();
 800052e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_write>:

#include <stdio.h>


int _write(int file,char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
	int i=0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x2a>
	ITM_SendChar((*ptr++));
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc7 	bl	8000504 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x16>
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <Light_lamp0>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void Light_lamp0()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059a:	4809      	ldr	r0, [pc, #36]	; (80005c0 <Light_lamp0+0x30>)
 800059c:	f000 fd52 	bl	8001044 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f001 ffb0 	bl	8002508 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <Light_lamp0+0x30>)
 80005b0:	f000 fd48 	bl	8001044 <HAL_GPIO_WritePin>
	vTaskDelay(1000);
 80005b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b8:	f001 ffa6 	bl	8002508 <vTaskDelay>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40020c00 	.word	0x40020c00

080005c4 <TaskA>:
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
//	vTaskDelay(1000);
//}

void TaskA(void const * argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  if(xSemaphoreTake(Sema,1000)!=NULL)
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <TaskA+0x48>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fbfd 	bl	8001dd4 <xQueueSemaphoreTake>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <TaskA+0x36>
	  {
		  printf("Task A got Access\n");
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <TaskA+0x4c>)
 80005e2:	f003 fa5f 	bl	8003aa4 <puts>
		  Light_lamp0();
 80005e6:	f7ff ffd3 	bl	8000590 <Light_lamp0>
		  xSemaphoreGive( Sema );
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <TaskA+0x48>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	f001 faf4 	bl	8001be0 <xQueueGenericSend>
 80005f8:	e002      	b.n	8000600 <TaskA+0x3c>

	  }
	  else
	  {
		  printf("Task A failed to get Access\n");
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <TaskA+0x50>)
 80005fc:	f003 fa52 	bl	8003aa4 <puts>
	  }
	  vTaskDelay(300);
 8000600:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000604:	f001 ff80 	bl	8002508 <vTaskDelay>
	  if(xSemaphoreTake(Sema,1000)!=NULL)
 8000608:	e7e0      	b.n	80005cc <TaskA+0x8>
 800060a:	bf00      	nop
 800060c:	2000403c 	.word	0x2000403c
 8000610:	080042d4 	.word	0x080042d4
 8000614:	080042e8 	.word	0x080042e8

08000618 <TaskB>:
  }

}

void TaskB(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  if(xSemaphoreTake(Sema,1000)!=NULL)
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <TaskB+0x48>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fbd3 	bl	8001dd4 <xQueueSemaphoreTake>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00c      	beq.n	800064e <TaskB+0x36>
		  {
			  printf("Task B got Access\n");
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <TaskB+0x4c>)
 8000636:	f003 fa35 	bl	8003aa4 <puts>
			  Light_lamp0();
 800063a:	f7ff ffa9 	bl	8000590 <Light_lamp0>
			  xSemaphoreGive( Sema );
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <TaskB+0x48>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	2200      	movs	r2, #0
 8000646:	2100      	movs	r1, #0
 8000648:	f001 faca 	bl	8001be0 <xQueueGenericSend>
 800064c:	e002      	b.n	8000654 <TaskB+0x3c>

		  }
	  else
	  {
		  printf("Task B failed to get Access\n");
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <TaskB+0x50>)
 8000650:	f003 fa28 	bl	8003aa4 <puts>
	  }
	  vTaskDelay(300);
 8000654:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000658:	f001 ff56 	bl	8002508 <vTaskDelay>
	  if(xSemaphoreTake(Sema,1000)!=NULL)
 800065c:	e7e0      	b.n	8000620 <TaskB+0x8>
 800065e:	bf00      	nop
 8000660:	2000403c 	.word	0x2000403c
 8000664:	08004304 	.word	0x08004304
 8000668:	08004318 	.word	0x08004318

0800066c <main>:
  }

}

int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af02      	add	r7, sp, #8

  HAL_Init();
 8000672:	f000 f9f5 	bl	8000a60 <HAL_Init>
  SystemClock_Config();
 8000676:	f000 f829 	bl	80006cc <SystemClock_Config>
  MX_GPIO_Init();
 800067a:	f000 f885 	bl	8000788 <MX_GPIO_Init>

  xTaskCreate(TaskA,"Task a",128,NULL,1,NULL);
 800067e:	2300      	movs	r3, #0
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2301      	movs	r3, #1
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2300      	movs	r3, #0
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	490b      	ldr	r1, [pc, #44]	; (80006b8 <main+0x4c>)
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <main+0x50>)
 800068e:	f001 fe05 	bl	800229c <xTaskCreate>
  xTaskCreate(TaskB,"Task b",128,NULL,1,NULL);
 8000692:	2300      	movs	r3, #0
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2300      	movs	r3, #0
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <main+0x54>)
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0x58>)
 80006a2:	f001 fdfb 	bl	800229c <xTaskCreate>

  Sema =xSemaphoreCreateMutex();
 80006a6:	2001      	movs	r0, #1
 80006a8:	f001 fa82 	bl	8001bb0 <xQueueCreateMutex>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <main+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]

  vTaskStartScheduler();
 80006b2:	f001 ff5d 	bl	8002570 <vTaskStartScheduler>
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x4a>
 80006b8:	08004334 	.word	0x08004334
 80006bc:	080005c5 	.word	0x080005c5
 80006c0:	0800433c 	.word	0x0800433c
 80006c4:	08000619 	.word	0x08000619
 80006c8:	2000403c 	.word	0x2000403c

080006cc <SystemClock_Config>:
  {	}

}

void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 f97d 	bl	80039da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xb4>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xb4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <SystemClock_Config+0xb8>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemClock_Config+0xb8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fc9b 	bl	8001078 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000748:	f000 f870 	bl	800082c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fef6 	bl	8001558 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000772:	f000 f85b 	bl	800082c <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <MX_GPIO_Init+0xa0>)
 80007fa:	f000 fc23 	bl	8001044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0xa0>)
 8000818:	f000 fa7a 	bl	8000d10 <HAL_GPIO_Init>

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020c00 	.word	0x40020c00

0800082c <Error_Handler>:

void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000832:	e7fe      	b.n	8000832 <Error_Handler+0x6>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a11      	ldr	r2, [pc, #68]	; (8000888 <HAL_MspInit+0x54>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x54>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x54>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x54>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 fa20 	bl	8000cbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f922 	bl	8000b04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008c0:	f002 fa4a 	bl	8002d58 <xTaskGetSchedulerState>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d001      	beq.n	80008ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ca:	f002 fe2d 	bl	8003528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e00a      	b.n	80008fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e4:	f3af 8000 	nop.w
 80008e8:	4601      	mov	r1, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	60ba      	str	r2, [r7, #8]
 80008f0:	b2ca      	uxtb	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	429a      	cmp	r2, r3
 8000900:	dbf0      	blt.n	80008e4 <_read+0x12>
	}

return len;
 8000902:	687b      	ldr	r3, [r7, #4]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <_close>:
	}
	return len;
}

int _close(int file)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	return -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	605a      	str	r2, [r3, #4]
	return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_isatty>:

int _isatty(int file)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	return 1;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095a:	b480      	push	{r7}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
	return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f002 ffe4 	bl	8003970 <__errno>
 80009a8:	4602      	mov	r2, r0
 80009aa:	230c      	movs	r3, #12
 80009ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20020000 	.word	0x20020000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200002e4 	.word	0x200002e4
 80009dc:	20004048 	.word	0x20004048

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SystemInit+0x28>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <SystemInit+0x28>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SystemInit+0x28>)
 80009f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fa:	609a      	str	r2, [r3, #8]
#endif
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a1c:	480b      	ldr	r0, [pc, #44]	; (8000a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
  ldr  r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd3 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 ff9f 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fe15 	bl	800066c <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a48:	080043d0 	.word	0x080043d0
  ldr  r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a50:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000a54:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000a58:	20004048 	.word	0x20004048

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f90d 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fece 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f917 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f8ed 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20004040 	.word	0x20004040

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20004040 	.word	0x20004040

08000b44 <__NVIC_SetPriorityGrouping>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_SetPriority>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff47 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff5c 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffb0 	bl	8000c64 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e16b      	b.n	8001004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 815a 	bne.w	8000ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d00b      	beq.n	8000d6a <HAL_GPIO_Init+0x5a>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5e:	2b11      	cmp	r3, #17
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d130      	bne.n	8000dcc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0xfc>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b12      	cmp	r3, #18
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80b4 	beq.w	8000ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b5f      	ldr	r3, [pc, #380]	; (8001018 <HAL_GPIO_Init+0x308>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a5e      	ldr	r2, [pc, #376]	; (8001018 <HAL_GPIO_Init+0x308>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <HAL_GPIO_Init+0x308>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a5a      	ldr	r2, [pc, #360]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a51      	ldr	r2, [pc, #324]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x226>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a50      	ldr	r2, [pc, #320]	; (8001024 <HAL_GPIO_Init+0x314>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x222>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	; (8001028 <HAL_GPIO_Init+0x318>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x21e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <HAL_GPIO_Init+0x31c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x21a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x216>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4c      	ldr	r2, [pc, #304]	; (8001034 <HAL_GPIO_Init+0x324>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_GPIO_Init+0x328>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x20e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4a      	ldr	r2, [pc, #296]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x20a>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e00e      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f1e:	2306      	movs	r3, #6
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f36:	2300      	movs	r3, #0
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	4934      	ldr	r1, [pc, #208]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7a:	4a31      	ldr	r2, [pc, #196]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	f67f ae90 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800100c:	bf00      	nop
 800100e:	3724      	adds	r7, #36	; 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40021400 	.word	0x40021400
 8001038:	40021800 	.word	0x40021800
 800103c:	40021c00 	.word	0x40021c00
 8001040:	40013c00 	.word	0x40013c00

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e25b      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d075      	beq.n	8001182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001096:	4ba3      	ldr	r3, [pc, #652]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d00c      	beq.n	80010bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4ba0      	ldr	r3, [pc, #640]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d112      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	4b9d      	ldr	r3, [pc, #628]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ba:	d10b      	bne.n	80010d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	4b99      	ldr	r3, [pc, #612]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d05b      	beq.n	8001180 <HAL_RCC_OscConfig+0x108>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d157      	bne.n	8001180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e236      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d106      	bne.n	80010ec <HAL_RCC_OscConfig+0x74>
 80010de:	4b91      	ldr	r3, [pc, #580]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a90      	ldr	r2, [pc, #576]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e01d      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x98>
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a8a      	ldr	r2, [pc, #552]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b88      	ldr	r3, [pc, #544]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a87      	ldr	r2, [pc, #540]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e00b      	b.n	8001128 <HAL_RCC_OscConfig+0xb0>
 8001110:	4b84      	ldr	r3, [pc, #528]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a83      	ldr	r2, [pc, #524]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b81      	ldr	r3, [pc, #516]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a80      	ldr	r2, [pc, #512]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fcfc 	bl	8000b2c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001138:	f7ff fcf8 	bl	8000b2c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b64      	cmp	r3, #100	; 0x64
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1fb      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b76      	ldr	r3, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0xc0>
 8001156:	e014      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fce8 	bl	8000b2c <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fce4 	bl	8000b2c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e1e7      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	4b6c      	ldr	r3, [pc, #432]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0xe8>
 800117e:	e000      	b.n	8001182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d063      	beq.n	8001256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118e:	4b65      	ldr	r3, [pc, #404]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b62      	ldr	r3, [pc, #392]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d11c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a6:	4b5f      	ldr	r3, [pc, #380]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d116      	bne.n	80011e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d005      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d001      	beq.n	80011ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e1bb      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b56      	ldr	r3, [pc, #344]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4952      	ldr	r1, [pc, #328]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	e03a      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <HAL_RCC_OscConfig+0x2b0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fc9d 	bl	8000b2c <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fc99 	bl	8000b2c <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e19c      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4940      	ldr	r1, [pc, #256]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e015      	b.n	8001256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122a:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_RCC_OscConfig+0x2b0>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001230:	f7ff fc7c 	bl	8000b2c <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001238:	f7ff fc78 	bl	8000b2c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e17b      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d030      	beq.n	80012c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d016      	beq.n	8001298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_RCC_OscConfig+0x2b4>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff fc5c 	bl	8000b2c <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fc58 	bl	8000b2c <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e15b      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0x200>
 8001296:	e015      	b.n	80012c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x2b4>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fc45 	bl	8000b2c <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fc41 	bl	8000b2c <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e144      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80a0 	beq.w	8001412 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d121      	bne.n	8001352 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_RCC_OscConfig+0x2b8>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fc07 	bl	8000b2c <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e011      	b.n	8001346 <HAL_RCC_OscConfig+0x2ce>
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	42470000 	.word	0x42470000
 800132c:	42470e80 	.word	0x42470e80
 8001330:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001334:	f7ff fbfa 	bl	8000b2c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e0fd      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x4d4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x2f0>
 800135a:	4b7d      	ldr	r3, [pc, #500]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a7c      	ldr	r2, [pc, #496]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
 8001366:	e01c      	b.n	80013a2 <HAL_RCC_OscConfig+0x32a>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x312>
 8001370:	4b77      	ldr	r3, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a76      	ldr	r2, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
 800137c:	4b74      	ldr	r3, [pc, #464]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a73      	ldr	r2, [pc, #460]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0x32a>
 800138a:	4b71      	ldr	r3, [pc, #452]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138e:	4a70      	ldr	r2, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6713      	str	r3, [r2, #112]	; 0x70
 8001396:	4b6e      	ldr	r3, [pc, #440]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a6d      	ldr	r2, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff fbbf 	bl	8000b2c <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fbbb 	bl	8000b2c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0bc      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0ee      	beq.n	80013b2 <HAL_RCC_OscConfig+0x33a>
 80013d4:	e014      	b.n	8001400 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fba9 	bl	8000b2c <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fba5 	bl	8000b2c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0a6      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d105      	bne.n	8001412 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001406:	4b52      	ldr	r3, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800140c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8092 	beq.w	8001540 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d05c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d141      	bne.n	80014b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0x4dc>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fb79 	bl	8000b2c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fb75 	bl	8000b2c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e078      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69da      	ldr	r2, [r3, #28]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	019b      	lsls	r3, r3, #6
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	3b01      	subs	r3, #1
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	061b      	lsls	r3, r3, #24
 8001480:	4933      	ldr	r1, [pc, #204]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_RCC_OscConfig+0x4dc>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fb4e 	bl	8000b2c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff fb4a 	bl	8000b2c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e04d      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x41c>
 80014b2:	e045      	b.n	8001540 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_RCC_OscConfig+0x4dc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb37 	bl	8000b2c <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb33 	bl	8000b2c <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e036      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x44a>
 80014e0:	e02e      	b.n	8001540 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e029      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d11c      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d115      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001516:	4013      	ands	r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	d10d      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000
 8001550:	40023800 	.word	0x40023800
 8001554:	42470060 	.word	0x42470060

08001558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0cc      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800156c:	4b68      	ldr	r3, [pc, #416]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d90c      	bls.n	8001594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157a:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d044      	beq.n	8001678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d119      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e067      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f023 0203 	bic.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4934      	ldr	r1, [pc, #208]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	4313      	orrs	r3, r2
 8001646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001648:	f7ff fa70 	bl	8000b2c <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164e:	e00a      	b.n	8001666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff fa6c 	bl	8000b2c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e04f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 020c 	and.w	r2, r3, #12
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	429a      	cmp	r2, r3
 8001676:	d1eb      	bne.n	8001650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d20c      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4601      	mov	r1, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	fa21 f303 	lsr.w	r3, r1, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f9d0 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00
 8001714:	40023800 	.word	0x40023800
 8001718:	0800434c 	.word	0x0800434c
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_GetSysClockFreq+0x158>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b04      	cmp	r3, #4
 8001744:	d007      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x32>
 8001746:	2b08      	cmp	r3, #8
 8001748:	d008      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x38>
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 808d 	bne.w	800186a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001752:	60bb      	str	r3, [r7, #8]
       break;
 8001754:	e08c      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_RCC_GetSysClockFreq+0x160>)
 8001758:	60bb      	str	r3, [r7, #8]
      break;
 800175a:	e089      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_GetSysClockFreq+0x158>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b45      	ldr	r3, [pc, #276]	; (800187c <HAL_RCC_GetSysClockFreq+0x158>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <HAL_RCC_GetSysClockFreq+0x158>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	f04f 0400 	mov.w	r4, #0
 800177c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	ea03 0501 	and.w	r5, r3, r1
 8001788:	ea04 0602 	and.w	r6, r4, r2
 800178c:	4a3d      	ldr	r2, [pc, #244]	; (8001884 <HAL_RCC_GetSysClockFreq+0x160>)
 800178e:	fb02 f106 	mul.w	r1, r2, r6
 8001792:	2200      	movs	r2, #0
 8001794:	fb02 f205 	mul.w	r2, r2, r5
 8001798:	440a      	add	r2, r1
 800179a:	493a      	ldr	r1, [pc, #232]	; (8001884 <HAL_RCC_GetSysClockFreq+0x160>)
 800179c:	fba5 0101 	umull	r0, r1, r5, r1
 80017a0:	1853      	adds	r3, r2, r1
 80017a2:	4619      	mov	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f04f 0400 	mov.w	r4, #0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4623      	mov	r3, r4
 80017ae:	f7fe fd0f 	bl	80001d0 <__aeabi_uldivmod>
 80017b2:	4603      	mov	r3, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e049      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b30      	ldr	r3, [pc, #192]	; (800187c <HAL_RCC_GetSysClockFreq+0x158>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	f04f 0400 	mov.w	r4, #0
 80017c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	ea03 0501 	and.w	r5, r3, r1
 80017d0:	ea04 0602 	and.w	r6, r4, r2
 80017d4:	4629      	mov	r1, r5
 80017d6:	4632      	mov	r2, r6
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f04f 0400 	mov.w	r4, #0
 80017e0:	0154      	lsls	r4, r2, #5
 80017e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017e6:	014b      	lsls	r3, r1, #5
 80017e8:	4619      	mov	r1, r3
 80017ea:	4622      	mov	r2, r4
 80017ec:	1b49      	subs	r1, r1, r5
 80017ee:	eb62 0206 	sbc.w	r2, r2, r6
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	f04f 0400 	mov.w	r4, #0
 80017fa:	0194      	lsls	r4, r2, #6
 80017fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001800:	018b      	lsls	r3, r1, #6
 8001802:	1a5b      	subs	r3, r3, r1
 8001804:	eb64 0402 	sbc.w	r4, r4, r2
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	00e2      	lsls	r2, r4, #3
 8001812:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001816:	00d9      	lsls	r1, r3, #3
 8001818:	460b      	mov	r3, r1
 800181a:	4614      	mov	r4, r2
 800181c:	195b      	adds	r3, r3, r5
 800181e:	eb44 0406 	adc.w	r4, r4, r6
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	02a2      	lsls	r2, r4, #10
 800182c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001830:	0299      	lsls	r1, r3, #10
 8001832:	460b      	mov	r3, r1
 8001834:	4614      	mov	r4, r2
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f04f 0400 	mov.w	r4, #0
 8001840:	461a      	mov	r2, r3
 8001842:	4623      	mov	r3, r4
 8001844:	f7fe fcc4 	bl	80001d0 <__aeabi_uldivmod>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_GetSysClockFreq+0x158>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	3301      	adds	r3, #1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	60bb      	str	r3, [r7, #8]
      break;
 8001868:	e002      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_RCC_GetSysClockFreq+0x15c>)
 800186c:	60bb      	str	r3, [r7, #8]
      break;
 800186e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001870:	68bb      	ldr	r3, [r7, #8]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	00f42400 	.word	0x00f42400
 8001884:	017d7840 	.word	0x017d7840

08001888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 0208 	add.w	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f103 0208 	add.w	r2, r3, #8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f103 0208 	add.w	r2, r3, #8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d103      	bne.n	800194a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e00c      	b.n	8001964 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3308      	adds	r3, #8
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e002      	b.n	8001958 <vListInsert+0x2e>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	429a      	cmp	r2, r3
 8001962:	d2f6      	bcs.n	8001952 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6892      	ldr	r2, [r2, #8]
 80019b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6852      	ldr	r2, [r2, #4]
 80019bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d103      	bne.n	80019d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1e5a      	subs	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a08:	f383 8811 	msr	BASEPRI, r3
 8001a0c:	f3bf 8f6f 	isb	sy
 8001a10:	f3bf 8f4f 	dsb	sy
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	e7fe      	b.n	8001a16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001a18:	f001 fcf8 	bl	800340c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	441a      	add	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	441a      	add	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	22ff      	movs	r2, #255	; 0xff
 8001a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	22ff      	movs	r2, #255	; 0xff
 8001a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d114      	bne.n	8001a98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01a      	beq.n	8001aac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3310      	adds	r3, #16
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 ffb6 	bl	80029ec <xTaskRemoveFromEventList>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d012      	beq.n	8001aac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <xQueueGenericReset+0xcc>)
 8001a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f3bf 8f4f 	dsb	sy
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	e009      	b.n	8001aac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fef3 	bl	8001888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3324      	adds	r3, #36	; 0x24
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff feee 	bl	8001888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001aac:	f001 fcdc 	bl	8003468 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000ed04 	.word	0xe000ed04

08001ac0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	4613      	mov	r3, r2
 8001acc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <xQueueGenericCreate+0x28>
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	e7fe      	b.n	8001ae6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e004      	b.n	8001afe <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3348      	adds	r3, #72	; 0x48
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fd5e 	bl	80035c4 <pvPortMalloc>
 8001b08:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d011      	beq.n	8001b34 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3348      	adds	r3, #72	; 0x48
 8001b18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b22:	79fa      	ldrb	r2, [r7, #7]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	68b9      	ldr	r1, [r7, #8]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f805 	bl	8001b3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001b34:	69bb      	ldr	r3, [r7, #24]
	}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3720      	adds	r7, #32
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e002      	b.n	8001b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	69b8      	ldr	r0, [r7, #24]
 8001b70:	f7ff ff3e 	bl	80019f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00e      	beq.n	8001ba8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f81c 	bl	8001be0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	6939      	ldr	r1, [r7, #16]
 8001bc8:	6978      	ldr	r0, [r7, #20]
 8001bca:	f7ff ff79 	bl	8001ac0 <xQueueGenericCreate>
 8001bce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff ffd3 	bl	8001b7c <prvInitialiseMutex>

		return xNewQueue;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
	}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	; 0x38
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <xQueueGenericSend+0x30>
 8001bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c0e:	e7fe      	b.n	8001c0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <xQueueGenericSend+0x3e>
 8001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <xQueueGenericSend+0x42>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <xQueueGenericSend+0x44>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <xQueueGenericSend+0x5c>
 8001c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2c:	f383 8811 	msr	BASEPRI, r3
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	e7fe      	b.n	8001c3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d103      	bne.n	8001c4a <xQueueGenericSend+0x6a>
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <xQueueGenericSend+0x6e>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <xQueueGenericSend+0x70>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <xQueueGenericSend+0x88>
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	623b      	str	r3, [r7, #32]
 8001c66:	e7fe      	b.n	8001c66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c68:	f001 f876 	bl	8002d58 <xTaskGetSchedulerState>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <xQueueGenericSend+0x98>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <xQueueGenericSend+0x9c>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <xQueueGenericSend+0x9e>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <xQueueGenericSend+0xb6>
 8001c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	61fb      	str	r3, [r7, #28]
 8001c94:	e7fe      	b.n	8001c94 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c96:	f001 fbb9 	bl	800340c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d302      	bcc.n	8001cac <xQueueGenericSend+0xcc>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d129      	bne.n	8001d00 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cb2:	f000 f9af 	bl	8002014 <prvCopyDataToQueue>
 8001cb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	3324      	adds	r3, #36	; 0x24
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fe91 	bl	80029ec <xTaskRemoveFromEventList>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <xQueueGenericSend+0x1f0>)
 8001cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	f3bf 8f4f 	dsb	sy
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	e00a      	b.n	8001cf8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <xQueueGenericSend+0x1f0>)
 8001cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001cf8:	f001 fbb6 	bl	8003468 <vPortExitCritical>
				return pdPASS;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e063      	b.n	8001dc8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d103      	bne.n	8001d0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d06:	f001 fbaf 	bl	8003468 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e05c      	b.n	8001dc8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fec9 	bl	8002ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d22:	f001 fba1 	bl	8003468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d26:	f000 fc81 	bl	800262c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d2a:	f001 fb6f 	bl	800340c <vPortEnterCritical>
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3a:	d103      	bne.n	8001d44 <xQueueGenericSend+0x164>
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d103      	bne.n	8001d5a <xQueueGenericSend+0x17a>
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d5a:	f001 fb85 	bl	8003468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d5e:	1d3a      	adds	r2, r7, #4
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 feb8 	bl	8002adc <xTaskCheckForTimeOut>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d124      	bne.n	8001dbc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d74:	f000 fa20 	bl	80021b8 <prvIsQueueFull>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d018      	beq.n	8001db0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	3310      	adds	r3, #16
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fe0c 	bl	80029a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d8e:	f000 f9ab 	bl	80020e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d92:	f000 fc59 	bl	8002648 <xTaskResumeAll>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f47f af7c 	bne.w	8001c96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <xQueueGenericSend+0x1f0>)
 8001da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	e772      	b.n	8001c96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001db2:	f000 f999 	bl	80020e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001db6:	f000 fc47 	bl	8002648 <xTaskResumeAll>
 8001dba:	e76c      	b.n	8001c96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dbe:	f000 f993 	bl	80020e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001dc2:	f000 fc41 	bl	8002648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001dc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3738      	adds	r7, #56	; 0x38
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	e000ed04 	.word	0xe000ed04

08001dd4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <xQueueSemaphoreTake+0x30>
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	e7fe      	b.n	8001e02 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <xQueueSemaphoreTake+0x4c>
 8001e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e10:	f383 8811 	msr	BASEPRI, r3
 8001e14:	f3bf 8f6f 	isb	sy
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e7fe      	b.n	8001e1e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e20:	f000 ff9a 	bl	8002d58 <xTaskGetSchedulerState>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <xQueueSemaphoreTake+0x5c>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <xQueueSemaphoreTake+0x60>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <xQueueSemaphoreTake+0x62>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <xQueueSemaphoreTake+0x7a>
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e7fe      	b.n	8001e4c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e4e:	f001 fadd 	bl	800340c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d024      	beq.n	8001ea8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001e6e:	f001 f92d 	bl	80030cc <pvTaskIncrementMutexHeldCount>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00f      	beq.n	8001ea0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	3310      	adds	r3, #16
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fdb1 	bl	80029ec <xTaskRemoveFromEventList>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <xQueueSemaphoreTake+0x20c>)
 8001e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001ea0:	f001 fae2 	bl	8003468 <vPortExitCritical>
				return pdPASS;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e096      	b.n	8001fd6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d110      	bne.n	8001ed0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <xQueueSemaphoreTake+0xf4>
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e7fe      	b.n	8001ec6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8001ec8:	f001 face 	bl	8003468 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e082      	b.n	8001fd6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fde8 	bl	8002ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ee4:	f001 fac0 	bl	8003468 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ee8:	f000 fba0 	bl	800262c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001eec:	f001 fa8e 	bl	800340c <vPortEnterCritical>
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ef6:	b25b      	sxtb	r3, r3
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d103      	bne.n	8001f06 <xQueueSemaphoreTake+0x132>
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f12:	d103      	bne.n	8001f1c <xQueueSemaphoreTake+0x148>
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f1c:	f001 faa4 	bl	8003468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f20:	463a      	mov	r2, r7
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fdd7 	bl	8002adc <xTaskCheckForTimeOut>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d132      	bne.n	8001f9a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f36:	f000 f929 	bl	800218c <prvIsQueueEmpty>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d026      	beq.n	8001f8e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8001f48:	f001 fa60 	bl	800340c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 ff1f 	bl	8002d94 <xTaskPriorityInherit>
 8001f56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001f58:	f001 fa86 	bl	8003468 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5e:	3324      	adds	r3, #36	; 0x24
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fd1d 	bl	80029a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f6c:	f000 f8bc 	bl	80020e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f70:	f000 fb6a 	bl	8002648 <xTaskResumeAll>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f47f af69 	bne.w	8001e4e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <xQueueSemaphoreTake+0x20c>)
 8001f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	e75f      	b.n	8001e4e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f90:	f000 f8aa 	bl	80020e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f94:	f000 fb58 	bl	8002648 <xTaskResumeAll>
 8001f98:	e759      	b.n	8001e4e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f9c:	f000 f8a4 	bl	80020e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fa0:	f000 fb52 	bl	8002648 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fa6:	f000 f8f1 	bl	800218c <prvIsQueueEmpty>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f43f af4e 	beq.w	8001e4e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001fb8:	f001 fa28 	bl	800340c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fbe:	f000 f811 	bl	8001fe4 <prvGetDisinheritPriorityAfterTimeout>
 8001fc2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 ffe6 	bl	8002f9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001fd0:	f001 fa4a 	bl	8003468 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001fd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3738      	adds	r7, #56	; 0x38
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000ed04 	.word	0xe000ed04

08001fe4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e001      	b.n	8002006 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002006:	68fb      	ldr	r3, [r7, #12]
	}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002028:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d14d      	bne.n	80020d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 ff28 	bl	8002e94 <xTaskPriorityDisinherit>
 8002044:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e043      	b.n	80020d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d119      	bne.n	8002088 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6858      	ldr	r0, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	461a      	mov	r2, r3
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	f001 fcb0 	bl	80039c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	441a      	add	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	429a      	cmp	r2, r3
 800207c:	d32b      	bcc.n	80020d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	e026      	b.n	80020d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68d8      	ldr	r0, [r3, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	461a      	mov	r2, r3
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	f001 fc96 	bl	80039c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	425b      	negs	r3, r3
 80020a2:	441a      	add	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	425b      	negs	r3, r3
 80020be:	441a      	add	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d105      	bne.n	80020d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80020de:	697b      	ldr	r3, [r7, #20]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80020f0:	f001 f98c 	bl	800340c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020fc:	e011      	b.n	8002122 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3324      	adds	r3, #36	; 0x24
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fc6e 	bl	80029ec <xTaskRemoveFromEventList>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002116:	f000 fd41 	bl	8002b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	3b01      	subs	r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002126:	2b00      	cmp	r3, #0
 8002128:	dce9      	bgt.n	80020fe <prvUnlockQueue+0x16>
 800212a:	e000      	b.n	800212e <prvUnlockQueue+0x46>
					break;
 800212c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	22ff      	movs	r2, #255	; 0xff
 8002132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002136:	f001 f997 	bl	8003468 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800213a:	f001 f967 	bl	800340c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002144:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002146:	e011      	b.n	800216c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3310      	adds	r3, #16
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fc49 	bl	80029ec <xTaskRemoveFromEventList>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002160:	f000 fd1c 	bl	8002b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002164:	7bbb      	ldrb	r3, [r7, #14]
 8002166:	3b01      	subs	r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800216c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002170:	2b00      	cmp	r3, #0
 8002172:	dce9      	bgt.n	8002148 <prvUnlockQueue+0x60>
 8002174:	e000      	b.n	8002178 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002176:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002180:	f001 f972 	bl	8003468 <vPortExitCritical>
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002194:	f001 f93a 	bl	800340c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e001      	b.n	80021aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021aa:	f001 f95d 	bl	8003468 <vPortExitCritical>

	return xReturn;
 80021ae:	68fb      	ldr	r3, [r7, #12]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021c0:	f001 f924 	bl	800340c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d102      	bne.n	80021d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e001      	b.n	80021da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021da:	f001 f945 	bl	8003468 <vPortExitCritical>

	return xReturn;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af04      	add	r7, sp, #16
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d109      	bne.n	8002210 <xTaskCreateStatic+0x28>
 80021fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	e7fe      	b.n	800220e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <xTaskCreateStatic+0x42>
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	e7fe      	b.n	8002228 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800222a:	2354      	movs	r3, #84	; 0x54
 800222c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b54      	cmp	r3, #84	; 0x54
 8002232:	d009      	beq.n	8002248 <xTaskCreateStatic+0x60>
 8002234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	e7fe      	b.n	8002246 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002248:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	2b00      	cmp	r3, #0
 800224e:	d01e      	beq.n	800228e <xTaskCreateStatic+0xa6>
 8002250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01b      	beq.n	800228e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	2202      	movs	r2, #2
 8002264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002268:	2300      	movs	r3, #0
 800226a:	9303      	str	r3, [sp, #12]
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f850 	bl	8002326 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002286:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002288:	f000 f8d4 	bl	8002434 <prvAddNewTaskToReadyList>
 800228c:	e001      	b.n	8002292 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002292:	697b      	ldr	r3, [r7, #20]
	}
 8002294:	4618      	mov	r0, r3
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af04      	add	r7, sp, #16
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	4613      	mov	r3, r2
 80022aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f001 f987 	bl	80035c4 <pvPortMalloc>
 80022b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00e      	beq.n	80022dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022be:	2054      	movs	r0, #84	; 0x54
 80022c0:	f001 f980 	bl	80035c4 <pvPortMalloc>
 80022c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
 80022d2:	e005      	b.n	80022e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022d4:	6978      	ldr	r0, [r7, #20]
 80022d6:	f001 fa37 	bl	8003748 <vPortFree>
 80022da:	e001      	b.n	80022e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d017      	beq.n	8002316 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	2300      	movs	r3, #0
 80022f2:	9303      	str	r3, [sp, #12]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f80e 	bl	8002326 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800230a:	69f8      	ldr	r0, [r7, #28]
 800230c:	f000 f892 	bl	8002434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002310:	2301      	movs	r3, #1
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	e002      	b.n	800231c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800231c:	69bb      	ldr	r3, [r7, #24]
	}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b088      	sub	sp, #32
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800233e:	3b01      	subs	r3, #1
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f023 0307 	bic.w	r3, r3, #7
 800234c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <prvInitialiseNewTask+0x46>
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e7fe      	b.n	800236a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01f      	beq.n	80023b2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e012      	b.n	800239e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	7819      	ldrb	r1, [r3, #0]
 8002380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	3334      	adds	r3, #52	; 0x34
 8002388:	460a      	mov	r2, r1
 800238a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d9e9      	bls.n	8002378 <prvInitialiseNewTask+0x52>
 80023a4:	e000      	b.n	80023a8 <prvInitialiseNewTask+0x82>
			{
				break;
 80023a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b0:	e003      	b.n	80023ba <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023bc:	2b06      	cmp	r3, #6
 80023be:	d901      	bls.n	80023c4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023c0:	2306      	movs	r3, #6
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	2200      	movs	r2, #0
 80023d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	3304      	adds	r3, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fa74 	bl	80018c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	3318      	adds	r3, #24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fa6f 	bl	80018c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	f1c3 0207 	rsb	r2, r3, #7
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	2200      	movs	r2, #0
 8002404:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	69b8      	ldr	r0, [r7, #24]
 8002414:	f000 fed4 	bl	80031c0 <pxPortInitialiseStack>
 8002418:	4602      	mov	r2, r0
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800243c:	f000 ffe6 	bl	800340c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <prvAddNewTaskToReadyList+0xb8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a29      	ldr	r2, [pc, #164]	; (80024ec <prvAddNewTaskToReadyList+0xb8>)
 8002448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002452:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <prvAddNewTaskToReadyList+0xb8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d110      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002460:	f000 fbc0 	bl	8002be4 <prvInitialiseTaskLists>
 8002464:	e00d      	b.n	8002482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <prvAddNewTaskToReadyList+0xc0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d802      	bhi.n	8002482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800247c:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 800248a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2201      	movs	r2, #1
 8002492:	409a      	lsls	r2, r3
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <prvAddNewTaskToReadyList+0xcc>)
 80024ac:	441a      	add	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7ff fa14 	bl	80018e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024ba:	f000 ffd5 	bl	8003468 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <prvAddNewTaskToReadyList+0xc0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00e      	beq.n	80024e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <prvAddNewTaskToReadyList+0xbc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <prvAddNewTaskToReadyList+0xd0>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200003e8 	.word	0x200003e8
 80024f0:	200002e8 	.word	0x200002e8
 80024f4:	200003f4 	.word	0x200003f4
 80024f8:	20000404 	.word	0x20000404
 80024fc:	200003f0 	.word	0x200003f0
 8002500:	200002ec 	.word	0x200002ec
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d016      	beq.n	8002548 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <vTaskDelay+0x60>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <vTaskDelay+0x2e>
 8002522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	e7fe      	b.n	8002534 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002536:	f000 f879 	bl	800262c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800253a:	2100      	movs	r1, #0
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fdd9 	bl	80030f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002542:	f000 f881 	bl	8002648 <xTaskResumeAll>
 8002546:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <vTaskDelay+0x64>)
 8002550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000410 	.word	0x20000410
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800257e:	463a      	mov	r2, r7
 8002580:	1d39      	adds	r1, r7, #4
 8002582:	f107 0308 	add.w	r3, r7, #8
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffa2 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800258c:	6839      	ldr	r1, [r7, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	9202      	str	r2, [sp, #8]
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	460a      	mov	r2, r1
 800259e:	491d      	ldr	r1, [pc, #116]	; (8002614 <vTaskStartScheduler+0xa4>)
 80025a0:	481d      	ldr	r0, [pc, #116]	; (8002618 <vTaskStartScheduler+0xa8>)
 80025a2:	f7ff fe21 	bl	80021e8 <xTaskCreateStatic>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <vTaskStartScheduler+0xac>)
 80025aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <vTaskStartScheduler+0xac>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80025b4:	2301      	movs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e001      	b.n	80025be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d115      	bne.n	80025f0 <vTaskStartScheduler+0x80>
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <vTaskStartScheduler+0xb0>)
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <vTaskStartScheduler+0xb4>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <vTaskStartScheduler+0xb8>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025ea:	f000 fe71 	bl	80032d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025ee:	e00d      	b.n	800260c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f6:	d109      	bne.n	800260c <vTaskStartScheduler+0x9c>
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	e7fe      	b.n	800260a <vTaskStartScheduler+0x9a>
}
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08004344 	.word	0x08004344
 8002618:	08002bb5 	.word	0x08002bb5
 800261c:	2000040c 	.word	0x2000040c
 8002620:	20000408 	.word	0x20000408
 8002624:	200003f4 	.word	0x200003f4
 8002628:	200003ec 	.word	0x200003ec

0800262c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <vTaskSuspendAll+0x18>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a03      	ldr	r2, [pc, #12]	; (8002644 <vTaskSuspendAll+0x18>)
 8002638:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000410 	.word	0x20000410

08002648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <xTaskResumeAll+0x114>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <xTaskResumeAll+0x2a>
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	e7fe      	b.n	8002670 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002672:	f000 fecb 	bl	800340c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <xTaskResumeAll+0x114>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	4a37      	ldr	r2, [pc, #220]	; (800275c <xTaskResumeAll+0x114>)
 800267e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <xTaskResumeAll+0x114>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d161      	bne.n	800274c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <xTaskResumeAll+0x118>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05d      	beq.n	800274c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002690:	e02e      	b.n	80026f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <xTaskResumeAll+0x11c>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3318      	adds	r3, #24
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f97c 	bl	800199c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff f977 	bl	800199c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <xTaskResumeAll+0x120>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <xTaskResumeAll+0x120>)
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <xTaskResumeAll+0x124>)
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3304      	adds	r3, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4610      	mov	r0, r2
 80026d8:	f7ff f903 	bl	80018e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <xTaskResumeAll+0x128>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <xTaskResumeAll+0x12c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <xTaskResumeAll+0x11c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1cc      	bne.n	8002692 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026fe:	f000 fb0b 	bl	8002d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <xTaskResumeAll+0x130>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800270e:	f000 f837 	bl	8002780 <xTaskIncrementTick>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002718:	4b16      	ldr	r3, [pc, #88]	; (8002774 <xTaskResumeAll+0x12c>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3b01      	subs	r3, #1
 8002722:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f1      	bne.n	800270e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800272a:	4b13      	ldr	r3, [pc, #76]	; (8002778 <xTaskResumeAll+0x130>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <xTaskResumeAll+0x12c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002738:	2301      	movs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <xTaskResumeAll+0x134>)
 800273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800274c:	f000 fe8c 	bl	8003468 <vPortExitCritical>

	return xAlreadyYielded;
 8002750:	68bb      	ldr	r3, [r7, #8]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000410 	.word	0x20000410
 8002760:	200003e8 	.word	0x200003e8
 8002764:	200003a8 	.word	0x200003a8
 8002768:	200003f0 	.word	0x200003f0
 800276c:	200002ec 	.word	0x200002ec
 8002770:	200002e8 	.word	0x200002e8
 8002774:	200003fc 	.word	0x200003fc
 8002778:	200003f8 	.word	0x200003f8
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800278a:	4b4e      	ldr	r3, [pc, #312]	; (80028c4 <xTaskIncrementTick+0x144>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 8087 	bne.w	80028a2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <xTaskIncrementTick+0x148>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800279c:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <xTaskIncrementTick+0x148>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11f      	bne.n	80027e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80027a8:	4b48      	ldr	r3, [pc, #288]	; (80028cc <xTaskIncrementTick+0x14c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <xTaskIncrementTick+0x46>
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	e7fe      	b.n	80027c4 <xTaskIncrementTick+0x44>
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <xTaskIncrementTick+0x14c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <xTaskIncrementTick+0x150>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a3e      	ldr	r2, [pc, #248]	; (80028cc <xTaskIncrementTick+0x14c>)
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <xTaskIncrementTick+0x150>)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <xTaskIncrementTick+0x154>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	4a3c      	ldr	r2, [pc, #240]	; (80028d4 <xTaskIncrementTick+0x154>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	f000 fa98 	bl	8002d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <xTaskIncrementTick+0x158>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d348      	bcc.n	8002884 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f2:	4b36      	ldr	r3, [pc, #216]	; (80028cc <xTaskIncrementTick+0x14c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d104      	bne.n	8002806 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <xTaskIncrementTick+0x158>)
 80027fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002802:	601a      	str	r2, [r3, #0]
					break;
 8002804:	e03e      	b.n	8002884 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <xTaskIncrementTick+0x14c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	d203      	bcs.n	8002826 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <xTaskIncrementTick+0x158>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002824:	e02e      	b.n	8002884 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3304      	adds	r3, #4
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f8b6 	bl	800199c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3318      	adds	r3, #24
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff f8ad 	bl	800199c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <xTaskIncrementTick+0x15c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	4a22      	ldr	r2, [pc, #136]	; (80028dc <xTaskIncrementTick+0x15c>)
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <xTaskIncrementTick+0x160>)
 8002862:	441a      	add	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f7ff f839 	bl	80018e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <xTaskIncrementTick+0x164>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	429a      	cmp	r2, r3
 800287c:	d3b9      	bcc.n	80027f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800287e:	2301      	movs	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002882:	e7b6      	b.n	80027f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <xTaskIncrementTick+0x164>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	4915      	ldr	r1, [pc, #84]	; (80028e0 <xTaskIncrementTick+0x160>)
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d907      	bls.n	80028ac <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e004      	b.n	80028ac <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <xTaskIncrementTick+0x168>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <xTaskIncrementTick+0x168>)
 80028aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <xTaskIncrementTick+0x16c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80028b4:	2301      	movs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80028b8:	697b      	ldr	r3, [r7, #20]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000410 	.word	0x20000410
 80028c8:	200003ec 	.word	0x200003ec
 80028cc:	200003a0 	.word	0x200003a0
 80028d0:	200003a4 	.word	0x200003a4
 80028d4:	20000400 	.word	0x20000400
 80028d8:	20000408 	.word	0x20000408
 80028dc:	200003f0 	.word	0x200003f0
 80028e0:	200002ec 	.word	0x200002ec
 80028e4:	200002e8 	.word	0x200002e8
 80028e8:	200003f8 	.word	0x200003f8
 80028ec:	200003fc 	.word	0x200003fc

080028f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <vTaskSwitchContext+0xa0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <vTaskSwitchContext+0xa4>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002904:	e03e      	b.n	8002984 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002906:	4b23      	ldr	r3, [pc, #140]	; (8002994 <vTaskSwitchContext+0xa4>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800290c:	4b22      	ldr	r3, [pc, #136]	; (8002998 <vTaskSwitchContext+0xa8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800291a:	7afb      	ldrb	r3, [r7, #11]
 800291c:	f1c3 031f 	rsb	r3, r3, #31
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	491e      	ldr	r1, [pc, #120]	; (800299c <vTaskSwitchContext+0xac>)
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	e7fe      	b.n	8002948 <vTaskSwitchContext+0x58>
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4a11      	ldr	r2, [pc, #68]	; (800299c <vTaskSwitchContext+0xac>)
 8002956:	4413      	add	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	3308      	adds	r3, #8
 800296c:	429a      	cmp	r2, r3
 800296e:	d104      	bne.n	800297a <vTaskSwitchContext+0x8a>
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <vTaskSwitchContext+0xb0>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	20000410 	.word	0x20000410
 8002994:	200003fc 	.word	0x200003fc
 8002998:	200003f0 	.word	0x200003f0
 800299c:	200002ec 	.word	0x200002ec
 80029a0:	200002e8 	.word	0x200002e8

080029a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <vTaskPlaceOnEventList+0x24>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e7fe      	b.n	80029c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <vTaskPlaceOnEventList+0x44>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3318      	adds	r3, #24
 80029ce:	4619      	mov	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fe ffaa 	bl	800192a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029d6:	2101      	movs	r1, #1
 80029d8:	6838      	ldr	r0, [r7, #0]
 80029da:	f000 fb8b 	bl	80030f4 <prvAddCurrentTaskToDelayedList>
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200002e8 	.word	0x200002e8

080029ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <xTaskRemoveFromEventList+0x2a>
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e7fe      	b.n	8002a14 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	3318      	adds	r3, #24
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe ffbe 	bl	800199c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <xTaskRemoveFromEventList+0xac>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11c      	bne.n	8002a62 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe ffb5 	bl	800199c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	2201      	movs	r2, #1
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <xTaskRemoveFromEventList+0xb0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <xTaskRemoveFromEventList+0xb0>)
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <xTaskRemoveFromEventList+0xb4>)
 8002a52:	441a      	add	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7fe ff41 	bl	80018e2 <vListInsertEnd>
 8002a60:	e005      	b.n	8002a6e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3318      	adds	r3, #24
 8002a66:	4619      	mov	r1, r3
 8002a68:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <xTaskRemoveFromEventList+0xb8>)
 8002a6a:	f7fe ff3a 	bl	80018e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <xTaskRemoveFromEventList+0xbc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d905      	bls.n	8002a88 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <xTaskRemoveFromEventList+0xc0>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e001      	b.n	8002a8c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002a8c:	697b      	ldr	r3, [r7, #20]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000410 	.word	0x20000410
 8002a9c:	200003f0 	.word	0x200003f0
 8002aa0:	200002ec 	.word	0x200002ec
 8002aa4:	200003a8 	.word	0x200003a8
 8002aa8:	200002e8 	.word	0x200002e8
 8002aac:	200003fc 	.word	0x200003fc

08002ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <vTaskInternalSetTimeOutState+0x24>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <vTaskInternalSetTimeOutState+0x28>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	605a      	str	r2, [r3, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	20000400 	.word	0x20000400
 8002ad8:	200003ec 	.word	0x200003ec

08002adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <xTaskCheckForTimeOut+0x24>
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	e7fe      	b.n	8002afe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <xTaskCheckForTimeOut+0x3e>
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e7fe      	b.n	8002b18 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002b1a:	f000 fc77 	bl	800340c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <xTaskCheckForTimeOut+0xb8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d102      	bne.n	8002b3e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e023      	b.n	8002b86 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <xTaskCheckForTimeOut+0xbc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d007      	beq.n	8002b5a <xTaskCheckForTimeOut+0x7e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d302      	bcc.n	8002b5a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	e015      	b.n	8002b86 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d20b      	bcs.n	8002b7c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1ad2      	subs	r2, r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff9d 	bl	8002ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e004      	b.n	8002b86 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002b86:	f000 fc6f 	bl	8003468 <vPortExitCritical>

	return xReturn;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200003ec 	.word	0x200003ec
 8002b98:	20000400 	.word	0x20000400

08002b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <vTaskMissedYield+0x14>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	200003fc 	.word	0x200003fc

08002bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002bbc:	f000 f852 	bl	8002c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <prvIdleTask+0x28>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d9f9      	bls.n	8002bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <prvIdleTask+0x2c>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002bd8:	e7f0      	b.n	8002bbc <prvIdleTask+0x8>
 8002bda:	bf00      	nop
 8002bdc:	200002ec 	.word	0x200002ec
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	e00c      	b.n	8002c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <prvInitialiseTaskLists+0x60>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fe42 	bl	8001888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3301      	adds	r3, #1
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d9ef      	bls.n	8002bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <prvInitialiseTaskLists+0x64>)
 8002c12:	f7fe fe39 	bl	8001888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c16:	480d      	ldr	r0, [pc, #52]	; (8002c4c <prvInitialiseTaskLists+0x68>)
 8002c18:	f7fe fe36 	bl	8001888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <prvInitialiseTaskLists+0x6c>)
 8002c1e:	f7fe fe33 	bl	8001888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c22:	480c      	ldr	r0, [pc, #48]	; (8002c54 <prvInitialiseTaskLists+0x70>)
 8002c24:	f7fe fe30 	bl	8001888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <prvInitialiseTaskLists+0x74>)
 8002c2a:	f7fe fe2d 	bl	8001888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <prvInitialiseTaskLists+0x78>)
 8002c30:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <prvInitialiseTaskLists+0x64>)
 8002c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <prvInitialiseTaskLists+0x7c>)
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <prvInitialiseTaskLists+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200002ec 	.word	0x200002ec
 8002c48:	20000378 	.word	0x20000378
 8002c4c:	2000038c 	.word	0x2000038c
 8002c50:	200003a8 	.word	0x200003a8
 8002c54:	200003bc 	.word	0x200003bc
 8002c58:	200003d4 	.word	0x200003d4
 8002c5c:	200003a0 	.word	0x200003a0
 8002c60:	200003a4 	.word	0x200003a4

08002c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c6a:	e019      	b.n	8002ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c6c:	f000 fbce 	bl	800340c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <prvCheckTasksWaitingTermination+0x4c>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fe8d 	bl	800199c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <prvCheckTasksWaitingTermination+0x50>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <prvCheckTasksWaitingTermination+0x50>)
 8002c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <prvCheckTasksWaitingTermination+0x54>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <prvCheckTasksWaitingTermination+0x54>)
 8002c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c96:	f000 fbe7 	bl	8003468 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f80e 	bl	8002cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <prvCheckTasksWaitingTermination+0x54>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e1      	bne.n	8002c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200003bc 	.word	0x200003bc
 8002cb4:	200003e8 	.word	0x200003e8
 8002cb8:	200003d0 	.word	0x200003d0

08002cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fd38 	bl	8003748 <vPortFree>
				vPortFree( pxTCB );
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fd35 	bl	8003748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002cde:	e017      	b.n	8002d10 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d103      	bne.n	8002cf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fd2c 	bl	8003748 <vPortFree>
	}
 8002cf0:	e00e      	b.n	8002d10 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d009      	beq.n	8002d10 <prvDeleteTCB+0x54>
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e7fe      	b.n	8002d0e <prvDeleteTCB+0x52>
	}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <prvResetNextTaskUnblockTime+0x38>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <prvResetNextTaskUnblockTime+0x3c>)
 8002d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d30:	e008      	b.n	8002d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <prvResetNextTaskUnblockTime+0x38>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <prvResetNextTaskUnblockTime+0x3c>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	200003a0 	.word	0x200003a0
 8002d54:	20000408 	.word	0x20000408

08002d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <xTaskGetSchedulerState+0x34>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d66:	2301      	movs	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	e008      	b.n	8002d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <xTaskGetSchedulerState+0x38>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d74:	2302      	movs	r3, #2
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	e001      	b.n	8002d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d7e:	687b      	ldr	r3, [r7, #4]
	}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	200003f4 	.word	0x200003f4
 8002d90:	20000410 	.word	0x20000410

08002d94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d069      	beq.n	8002e7e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <xTaskPriorityInherit+0xf4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d259      	bcs.n	8002e6c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db06      	blt.n	8002dce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc0:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <xTaskPriorityInherit+0xf4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	f1c3 0207 	rsb	r2, r3, #7
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6959      	ldr	r1, [r3, #20]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <xTaskPriorityInherit+0xf8>)
 8002de0:	4413      	add	r3, r2
 8002de2:	4299      	cmp	r1, r3
 8002de4:	d13a      	bne.n	8002e5c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fdd6 	bl	800199c <uxListRemove>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d115      	bne.n	8002e22 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfa:	4924      	ldr	r1, [pc, #144]	; (8002e8c <xTaskPriorityInherit+0xf8>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xTaskPriorityInherit+0x8e>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	2201      	movs	r2, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <xTaskPriorityInherit+0xfc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <xTaskPriorityInherit+0xfc>)
 8002e20:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <xTaskPriorityInherit+0xf4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	2201      	movs	r2, #1
 8002e32:	409a      	lsls	r2, r3
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <xTaskPriorityInherit+0xfc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <xTaskPriorityInherit+0xfc>)
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <xTaskPriorityInherit+0xf8>)
 8002e4c:	441a      	add	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7fe fd44 	bl	80018e2 <vListInsertEnd>
 8002e5a:	e004      	b.n	8002e66 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <xTaskPriorityInherit+0xf4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	e008      	b.n	8002e7e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <xTaskPriorityInherit+0xf4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d201      	bcs.n	8002e7e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	200002e8 	.word	0x200002e8
 8002e8c:	200002ec 	.word	0x200002ec
 8002e90:	200003f0 	.word	0x200003f0

08002e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d06c      	beq.n	8002f84 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002eaa:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <xTaskPriorityDisinherit+0xfc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d009      	beq.n	8002ec8 <xTaskPriorityDisinherit+0x34>
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e7fe      	b.n	8002ec6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <xTaskPriorityDisinherit+0x50>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	e7fe      	b.n	8002ee2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d044      	beq.n	8002f84 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d140      	bne.n	8002f84 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fd48 	bl	800199c <uxListRemove>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d115      	bne.n	8002f3e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	491f      	ldr	r1, [pc, #124]	; (8002f94 <xTaskPriorityDisinherit+0x100>)
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xTaskPriorityDisinherit+0xaa>
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <xTaskPriorityDisinherit+0x104>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <xTaskPriorityDisinherit+0x104>)
 8002f3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f1c3 0207 	rsb	r2, r3, #7
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	2201      	movs	r2, #1
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <xTaskPriorityDisinherit+0x104>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <xTaskPriorityDisinherit+0x104>)
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <xTaskPriorityDisinherit+0x100>)
 8002f72:	441a      	add	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f7fe fcb1 	bl	80018e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f84:	697b      	ldr	r3, [r7, #20]
	}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200002e8 	.word	0x200002e8
 8002f94:	200002ec 	.word	0x200002ec
 8002f98:	200003f0 	.word	0x200003f0

08002f9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8081 	beq.w	80030b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	e7fe      	b.n	8002fd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d902      	bls.n	8002fe2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e002      	b.n	8002fe8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d062      	beq.n	80030b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d15d      	bne.n	80030b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	429a      	cmp	r2, r3
 8003004:	d109      	bne.n	800301a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	e7fe      	b.n	8003018 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	db04      	blt.n	8003038 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f1c3 0207 	rsb	r2, r3, #7
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6959      	ldr	r1, [r3, #20]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003048:	4413      	add	r3, r2
 800304a:	4299      	cmp	r1, r3
 800304c:	d134      	bne.n	80030b8 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3304      	adds	r3, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fca2 	bl	800199c <uxListRemove>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d115      	bne.n	800308a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	4918      	ldr	r1, [pc, #96]	; (80030c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2201      	movs	r2, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4013      	ands	r3, r2
 8003086:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003088:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	2201      	movs	r2, #1
 8003090:	409a      	lsls	r2, r3
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4a06      	ldr	r2, [pc, #24]	; (80030c4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80030aa:	441a      	add	r2, r3
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f7fe fc15 	bl	80018e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030b8:	bf00      	nop
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200002e8 	.word	0x200002e8
 80030c4:	200002ec 	.word	0x200002ec
 80030c8:	200003f0 	.word	0x200003f0

080030cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030de:	3201      	adds	r2, #1
 80030e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80030e2:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80030e4:	681b      	ldr	r3, [r3, #0]
	}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	200002e8 	.word	0x200002e8

080030f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3304      	adds	r3, #4
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fc46 	bl	800199c <uxListRemove>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	2201      	movs	r2, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4013      	ands	r3, r2
 800312a:	4a20      	ldr	r2, [pc, #128]	; (80031ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800312c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d10a      	bne.n	800314c <prvAddCurrentTaskToDelayedList+0x58>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	481a      	ldr	r0, [pc, #104]	; (80031b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003146:	f7fe fbcc 	bl	80018e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800314a:	e026      	b.n	800319a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d209      	bcs.n	8003178 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3304      	adds	r3, #4
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7fe fbda 	bl	800192a <vListInsert>
}
 8003176:	e010      	b.n	800319a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3304      	adds	r3, #4
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f7fe fbd0 	bl	800192a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	d202      	bcs.n	800319a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003194:	4a09      	ldr	r2, [pc, #36]	; (80031bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	6013      	str	r3, [r2, #0]
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200003ec 	.word	0x200003ec
 80031a8:	200002e8 	.word	0x200002e8
 80031ac:	200003f0 	.word	0x200003f0
 80031b0:	200003d4 	.word	0x200003d4
 80031b4:	200003a4 	.word	0x200003a4
 80031b8:	200003a0 	.word	0x200003a0
 80031bc:	20000408 	.word	0x20000408

080031c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3b04      	subs	r3, #4
 80031d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3b04      	subs	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f023 0201 	bic.w	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3b04      	subs	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031f0:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <pxPortInitialiseStack+0x64>)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3b14      	subs	r3, #20
 80031fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3b04      	subs	r3, #4
 8003206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f06f 0202 	mvn.w	r2, #2
 800320e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3b20      	subs	r3, #32
 8003214:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003216:	68fb      	ldr	r3, [r7, #12]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	08003229 	.word	0x08003229

08003228 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <prvTaskExitError+0x50>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	d009      	beq.n	8003250 <prvTaskExitError+0x28>
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e7fe      	b.n	800324e <prvTaskExitError+0x26>
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003262:	bf00      	nop
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0fc      	beq.n	8003264 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	2000000c 	.word	0x2000000c
 800327c:	00000000 	.word	0x00000000

08003280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <pxCurrentTCBConst2>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	6808      	ldr	r0, [r1, #0]
 8003286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328a:	f380 8809 	msr	PSP, r0
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f380 8811 	msr	BASEPRI, r0
 800329a:	4770      	bx	lr
 800329c:	f3af 8000 	nop.w

080032a0 <pxCurrentTCBConst2>:
 80032a0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop

080032a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <prvPortStartFirstTask+0x24>)
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	6800      	ldr	r0, [r0, #0]
 80032ae:	f380 8808 	msr	MSP, r0
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f380 8814 	msr	CONTROL, r0
 80032ba:	b662      	cpsie	i
 80032bc:	b661      	cpsie	f
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	df00      	svc	0
 80032c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032ca:	bf00      	nop
 80032cc:	e000ed08 	.word	0xe000ed08

080032d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <xPortStartScheduler+0x118>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a44      	ldr	r2, [pc, #272]	; (80033ec <xPortStartScheduler+0x11c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d109      	bne.n	80032f4 <xPortStartScheduler+0x24>
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	e7fe      	b.n	80032f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032f4:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <xPortStartScheduler+0x118>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3d      	ldr	r2, [pc, #244]	; (80033f0 <xPortStartScheduler+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d109      	bne.n	8003312 <xPortStartScheduler+0x42>
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e7fe      	b.n	8003310 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <xPortStartScheduler+0x124>)
 8003314:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <xPortStartScheduler+0x128>)
 8003338:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800333a:	4b30      	ldr	r3, [pc, #192]	; (80033fc <xPortStartScheduler+0x12c>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003340:	e009      	b.n	8003356 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <xPortStartScheduler+0x12c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3b01      	subs	r3, #1
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <xPortStartScheduler+0x12c>)
 800334a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d0ef      	beq.n	8003342 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <xPortStartScheduler+0x12c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1c3 0307 	rsb	r3, r3, #7
 800336a:	2b04      	cmp	r3, #4
 800336c:	d009      	beq.n	8003382 <xPortStartScheduler+0xb2>
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	e7fe      	b.n	8003380 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003382:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <xPortStartScheduler+0x12c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <xPortStartScheduler+0x12c>)
 800338a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <xPortStartScheduler+0x12c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <xPortStartScheduler+0x12c>)
 8003396:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <xPortStartScheduler+0x130>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a16      	ldr	r2, [pc, #88]	; (8003400 <xPortStartScheduler+0x130>)
 80033a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <xPortStartScheduler+0x130>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a13      	ldr	r2, [pc, #76]	; (8003400 <xPortStartScheduler+0x130>)
 80033b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033b8:	f000 f8d6 	bl	8003568 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <xPortStartScheduler+0x134>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033c2:	f000 f8f5 	bl	80035b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <xPortStartScheduler+0x138>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <xPortStartScheduler+0x138>)
 80033cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80033d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033d2:	f7ff ff69 	bl	80032a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033d6:	f7ff fa8b 	bl	80028f0 <vTaskSwitchContext>
	prvTaskExitError();
 80033da:	f7ff ff25 	bl	8003228 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	e000ed00 	.word	0xe000ed00
 80033ec:	410fc271 	.word	0x410fc271
 80033f0:	410fc270 	.word	0x410fc270
 80033f4:	e000e400 	.word	0xe000e400
 80033f8:	20000414 	.word	0x20000414
 80033fc:	20000418 	.word	0x20000418
 8003400:	e000ed20 	.word	0xe000ed20
 8003404:	2000000c 	.word	0x2000000c
 8003408:	e000ef34 	.word	0xe000ef34

0800340c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <vPortEnterCritical+0x54>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <vPortEnterCritical+0x54>)
 800342c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <vPortEnterCritical+0x54>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10e      	bne.n	8003454 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <vPortEnterCritical+0x58>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <vPortEnterCritical+0x48>
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	e7fe      	b.n	8003452 <vPortEnterCritical+0x46>
	}
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	2000000c 	.word	0x2000000c
 8003464:	e000ed04 	.word	0xe000ed04

08003468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <vPortExitCritical+0x4c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <vPortExitCritical+0x22>
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	e7fe      	b.n	8003488 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <vPortExitCritical+0x4c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3b01      	subs	r3, #1
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <vPortExitCritical+0x4c>)
 8003492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <vPortExitCritical+0x4c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d104      	bne.n	80034a6 <vPortExitCritical+0x3e>
 800349c:	2300      	movs	r3, #0
 800349e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c
	...

080034c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034c0:	f3ef 8009 	mrs	r0, PSP
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <pxCurrentTCBConst>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	f01e 0f10 	tst.w	lr, #16
 80034d0:	bf08      	it	eq
 80034d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034da:	6010      	str	r0, [r2, #0]
 80034dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034e4:	f380 8811 	msr	BASEPRI, r0
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f7ff f9fe 	bl	80028f0 <vTaskSwitchContext>
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f380 8811 	msr	BASEPRI, r0
 80034fc:	bc09      	pop	{r0, r3}
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	6808      	ldr	r0, [r1, #0]
 8003502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003506:	f01e 0f10 	tst.w	lr, #16
 800350a:	bf08      	it	eq
 800350c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003510:	f380 8809 	msr	PSP, r0
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	f3af 8000 	nop.w

08003520 <pxCurrentTCBConst>:
 8003520:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop

08003528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003540:	f7ff f91e 	bl	8002780 <xTaskIncrementTick>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <xPortSysTickHandler+0x3c>)
 800354c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <vPortSetupTimerInterrupt+0x34>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <vPortSetupTimerInterrupt+0x38>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <vPortSetupTimerInterrupt+0x3c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <vPortSetupTimerInterrupt+0x40>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	4a09      	ldr	r2, [pc, #36]	; (80035ac <vPortSetupTimerInterrupt+0x44>)
 8003586:	3b01      	subs	r3, #1
 8003588:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <vPortSetupTimerInterrupt+0x34>)
 800358c:	2207      	movs	r2, #7
 800358e:	601a      	str	r2, [r3, #0]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000e010 	.word	0xe000e010
 80035a0:	e000e018 	.word	0xe000e018
 80035a4:	20000000 	.word	0x20000000
 80035a8:	10624dd3 	.word	0x10624dd3
 80035ac:	e000e014 	.word	0xe000e014

080035b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80035c0 <vPortEnableVFP+0x10>
 80035b4:	6801      	ldr	r1, [r0, #0]
 80035b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035ba:	6001      	str	r1, [r0, #0]
 80035bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035be:	bf00      	nop
 80035c0:	e000ed88 	.word	0xe000ed88

080035c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035d0:	f7ff f82c 	bl	800262c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <pvPortMalloc+0x170>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80035dc:	f000 f90c 	bl	80037f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80035e0:	4b55      	ldr	r3, [pc, #340]	; (8003738 <pvPortMalloc+0x174>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 808c 	bne.w	8003706 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01c      	beq.n	800362e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80035f4:	2208      	movs	r2, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	2b00      	cmp	r3, #0
 8003604:	d013      	beq.n	800362e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f023 0307 	bic.w	r3, r3, #7
 800360c:	3308      	adds	r3, #8
 800360e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <pvPortMalloc+0x6a>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e7fe      	b.n	800362c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d068      	beq.n	8003706 <pvPortMalloc+0x142>
 8003634:	4b41      	ldr	r3, [pc, #260]	; (800373c <pvPortMalloc+0x178>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d863      	bhi.n	8003706 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800363e:	4b40      	ldr	r3, [pc, #256]	; (8003740 <pvPortMalloc+0x17c>)
 8003640:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003642:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <pvPortMalloc+0x17c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003648:	e004      	b.n	8003654 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d903      	bls.n	8003666 <pvPortMalloc+0xa2>
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f1      	bne.n	800364a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <pvPortMalloc+0x170>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	429a      	cmp	r2, r3
 800366e:	d04a      	beq.n	8003706 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2208      	movs	r2, #8
 8003676:	4413      	add	r3, r2
 8003678:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	1ad2      	subs	r2, r2, r3
 800368a:	2308      	movs	r3, #8
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	429a      	cmp	r2, r3
 8003690:	d91e      	bls.n	80036d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <pvPortMalloc+0xf4>
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e7fe      	b.n	80036b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad2      	subs	r2, r2, r3
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036ca:	69b8      	ldr	r0, [r7, #24]
 80036cc:	f000 f8f6 	bl	80038bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <pvPortMalloc+0x178>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	4a18      	ldr	r2, [pc, #96]	; (800373c <pvPortMalloc+0x178>)
 80036dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <pvPortMalloc+0x178>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <pvPortMalloc+0x180>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d203      	bcs.n	80036f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <pvPortMalloc+0x178>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a15      	ldr	r2, [pc, #84]	; (8003744 <pvPortMalloc+0x180>)
 80036f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <pvPortMalloc+0x174>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003706:	f7fe ff9f 	bl	8002648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <pvPortMalloc+0x164>
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e7fe      	b.n	8003726 <pvPortMalloc+0x162>
	return pvReturn;
 8003728:	69fb      	ldr	r3, [r7, #28]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3728      	adds	r7, #40	; 0x28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20004024 	.word	0x20004024
 8003738:	20004030 	.word	0x20004030
 800373c:	20004028 	.word	0x20004028
 8003740:	2000401c 	.word	0x2000401c
 8003744:	2000402c 	.word	0x2000402c

08003748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d046      	beq.n	80037e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800375a:	2308      	movs	r3, #8
 800375c:	425b      	negs	r3, r3
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4413      	add	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <vPortFree+0xa8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <vPortFree+0x42>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e7fe      	b.n	8003788 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <vPortFree+0x5e>
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	e7fe      	b.n	80037a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <vPortFree+0xa8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d019      	beq.n	80037e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d115      	bne.n	80037e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <vPortFree+0xa8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80037cc:	f7fe ff2e 	bl	800262c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <vPortFree+0xac>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4413      	add	r3, r2
 80037da:	4a06      	ldr	r2, [pc, #24]	; (80037f4 <vPortFree+0xac>)
 80037dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037de:	6938      	ldr	r0, [r7, #16]
 80037e0:	f000 f86c 	bl	80038bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80037e4:	f7fe ff30 	bl	8002648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80037e8:	bf00      	nop
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20004030 	.word	0x20004030
 80037f4:	20004028 	.word	0x20004028

080037f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003802:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <prvHeapInit+0xac>)
 8003806:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3307      	adds	r3, #7
 8003816:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0307 	bic.w	r3, r3, #7
 800381e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <prvHeapInit+0xac>)
 8003828:	4413      	add	r3, r2
 800382a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003830:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <prvHeapInit+0xb0>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <prvHeapInit+0xb0>)
 8003838:	2200      	movs	r2, #0
 800383a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	4413      	add	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003844:	2208      	movs	r2, #8
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <prvHeapInit+0xb4>)
 8003858:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <prvHeapInit+0xb4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <prvHeapInit+0xb4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	1ad2      	subs	r2, r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <prvHeapInit+0xb4>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <prvHeapInit+0xb8>)
 8003886:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <prvHeapInit+0xbc>)
 800388e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <prvHeapInit+0xc0>)
 8003892:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003896:	601a      	str	r2, [r3, #0]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	2000041c 	.word	0x2000041c
 80038a8:	2000401c 	.word	0x2000401c
 80038ac:	20004024 	.word	0x20004024
 80038b0:	2000402c 	.word	0x2000402c
 80038b4:	20004028 	.word	0x20004028
 80038b8:	20004030 	.word	0x20004030

080038bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <prvInsertBlockIntoFreeList+0xac>)
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e002      	b.n	80038d0 <prvInsertBlockIntoFreeList+0x14>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d8f7      	bhi.n	80038ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d108      	bne.n	80038fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	441a      	add	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	441a      	add	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d118      	bne.n	8003944 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <prvInsertBlockIntoFreeList+0xb0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d00d      	beq.n	800393a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	441a      	add	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e008      	b.n	800394c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <prvInsertBlockIntoFreeList+0xb0>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e003      	b.n	800394c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d002      	beq.n	800395a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	2000401c 	.word	0x2000401c
 800396c:	20004024 	.word	0x20004024

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000010 	.word	0x20000010

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4e0d      	ldr	r6, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1ba4      	subs	r4, r4, r6
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2500      	movs	r5, #0
 8003988:	42a5      	cmp	r5, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4e0b      	ldr	r6, [pc, #44]	; (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	; (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 fc94 	bl	80042bc <_init>
 8003994:	1ba4      	subs	r4, r4, r6
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2500      	movs	r5, #0
 800399a:	42a5      	cmp	r5, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a4:	4798      	blx	r3
 80039a6:	3501      	adds	r5, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039ae:	4798      	blx	r3
 80039b0:	3501      	adds	r5, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	080043c8 	.word	0x080043c8
 80039b8:	080043c8 	.word	0x080043c8
 80039bc:	080043c8 	.word	0x080043c8
 80039c0:	080043cc 	.word	0x080043cc

080039c4 <memcpy>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	1e43      	subs	r3, r0, #1
 80039c8:	440a      	add	r2, r1
 80039ca:	4291      	cmp	r1, r2
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xc>
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039d8:	e7f7      	b.n	80039ca <memcpy+0x6>

080039da <memset>:
 80039da:	4402      	add	r2, r0
 80039dc:	4603      	mov	r3, r0
 80039de:	4293      	cmp	r3, r2
 80039e0:	d100      	bne.n	80039e4 <memset+0xa>
 80039e2:	4770      	bx	lr
 80039e4:	f803 1b01 	strb.w	r1, [r3], #1
 80039e8:	e7f9      	b.n	80039de <memset+0x4>
	...

080039ec <_puts_r>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	460e      	mov	r6, r1
 80039f0:	4605      	mov	r5, r0
 80039f2:	b118      	cbz	r0, 80039fc <_puts_r+0x10>
 80039f4:	6983      	ldr	r3, [r0, #24]
 80039f6:	b90b      	cbnz	r3, 80039fc <_puts_r+0x10>
 80039f8:	f000 fa0c 	bl	8003e14 <__sinit>
 80039fc:	69ab      	ldr	r3, [r5, #24]
 80039fe:	68ac      	ldr	r4, [r5, #8]
 8003a00:	b913      	cbnz	r3, 8003a08 <_puts_r+0x1c>
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 fa06 	bl	8003e14 <__sinit>
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <_puts_r+0xac>)
 8003a0a:	429c      	cmp	r4, r3
 8003a0c:	d117      	bne.n	8003a3e <_puts_r+0x52>
 8003a0e:	686c      	ldr	r4, [r5, #4]
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	071b      	lsls	r3, r3, #28
 8003a14:	d51d      	bpl.n	8003a52 <_puts_r+0x66>
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	b1db      	cbz	r3, 8003a52 <_puts_r+0x66>
 8003a1a:	3e01      	subs	r6, #1
 8003a1c:	68a3      	ldr	r3, [r4, #8]
 8003a1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60a3      	str	r3, [r4, #8]
 8003a26:	b9e9      	cbnz	r1, 8003a64 <_puts_r+0x78>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da2e      	bge.n	8003a8a <_puts_r+0x9e>
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	210a      	movs	r1, #10
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 f83f 	bl	8003ab4 <__swbuf_r>
 8003a36:	3001      	adds	r0, #1
 8003a38:	d011      	beq.n	8003a5e <_puts_r+0x72>
 8003a3a:	200a      	movs	r0, #10
 8003a3c:	e011      	b.n	8003a62 <_puts_r+0x76>
 8003a3e:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <_puts_r+0xb0>)
 8003a40:	429c      	cmp	r4, r3
 8003a42:	d101      	bne.n	8003a48 <_puts_r+0x5c>
 8003a44:	68ac      	ldr	r4, [r5, #8]
 8003a46:	e7e3      	b.n	8003a10 <_puts_r+0x24>
 8003a48:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_puts_r+0xb4>)
 8003a4a:	429c      	cmp	r4, r3
 8003a4c:	bf08      	it	eq
 8003a4e:	68ec      	ldreq	r4, [r5, #12]
 8003a50:	e7de      	b.n	8003a10 <_puts_r+0x24>
 8003a52:	4621      	mov	r1, r4
 8003a54:	4628      	mov	r0, r5
 8003a56:	f000 f87f 	bl	8003b58 <__swsetup_r>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d0dd      	beq.n	8003a1a <_puts_r+0x2e>
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	da04      	bge.n	8003a72 <_puts_r+0x86>
 8003a68:	69a2      	ldr	r2, [r4, #24]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	dc06      	bgt.n	8003a7c <_puts_r+0x90>
 8003a6e:	290a      	cmp	r1, #10
 8003a70:	d004      	beq.n	8003a7c <_puts_r+0x90>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	6022      	str	r2, [r4, #0]
 8003a78:	7019      	strb	r1, [r3, #0]
 8003a7a:	e7cf      	b.n	8003a1c <_puts_r+0x30>
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f000 f818 	bl	8003ab4 <__swbuf_r>
 8003a84:	3001      	adds	r0, #1
 8003a86:	d1c9      	bne.n	8003a1c <_puts_r+0x30>
 8003a88:	e7e9      	b.n	8003a5e <_puts_r+0x72>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	200a      	movs	r0, #10
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	6022      	str	r2, [r4, #0]
 8003a92:	7018      	strb	r0, [r3, #0]
 8003a94:	e7e5      	b.n	8003a62 <_puts_r+0x76>
 8003a96:	bf00      	nop
 8003a98:	08004380 	.word	0x08004380
 8003a9c:	080043a0 	.word	0x080043a0
 8003aa0:	08004360 	.word	0x08004360

08003aa4 <puts>:
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <puts+0xc>)
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f7ff bf9f 	b.w	80039ec <_puts_r>
 8003aae:	bf00      	nop
 8003ab0:	20000010 	.word	0x20000010

08003ab4 <__swbuf_r>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	460e      	mov	r6, r1
 8003ab8:	4614      	mov	r4, r2
 8003aba:	4605      	mov	r5, r0
 8003abc:	b118      	cbz	r0, 8003ac6 <__swbuf_r+0x12>
 8003abe:	6983      	ldr	r3, [r0, #24]
 8003ac0:	b90b      	cbnz	r3, 8003ac6 <__swbuf_r+0x12>
 8003ac2:	f000 f9a7 	bl	8003e14 <__sinit>
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <__swbuf_r+0x98>)
 8003ac8:	429c      	cmp	r4, r3
 8003aca:	d12a      	bne.n	8003b22 <__swbuf_r+0x6e>
 8003acc:	686c      	ldr	r4, [r5, #4]
 8003ace:	69a3      	ldr	r3, [r4, #24]
 8003ad0:	60a3      	str	r3, [r4, #8]
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	071a      	lsls	r2, r3, #28
 8003ad6:	d52e      	bpl.n	8003b36 <__swbuf_r+0x82>
 8003ad8:	6923      	ldr	r3, [r4, #16]
 8003ada:	b363      	cbz	r3, 8003b36 <__swbuf_r+0x82>
 8003adc:	6923      	ldr	r3, [r4, #16]
 8003ade:	6820      	ldr	r0, [r4, #0]
 8003ae0:	1ac0      	subs	r0, r0, r3
 8003ae2:	6963      	ldr	r3, [r4, #20]
 8003ae4:	b2f6      	uxtb	r6, r6
 8003ae6:	4283      	cmp	r3, r0
 8003ae8:	4637      	mov	r7, r6
 8003aea:	dc04      	bgt.n	8003af6 <__swbuf_r+0x42>
 8003aec:	4621      	mov	r1, r4
 8003aee:	4628      	mov	r0, r5
 8003af0:	f000 f926 	bl	8003d40 <_fflush_r>
 8003af4:	bb28      	cbnz	r0, 8003b42 <__swbuf_r+0x8e>
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60a3      	str	r3, [r4, #8]
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	6022      	str	r2, [r4, #0]
 8003b02:	701e      	strb	r6, [r3, #0]
 8003b04:	6963      	ldr	r3, [r4, #20]
 8003b06:	3001      	adds	r0, #1
 8003b08:	4283      	cmp	r3, r0
 8003b0a:	d004      	beq.n	8003b16 <__swbuf_r+0x62>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	07db      	lsls	r3, r3, #31
 8003b10:	d519      	bpl.n	8003b46 <__swbuf_r+0x92>
 8003b12:	2e0a      	cmp	r6, #10
 8003b14:	d117      	bne.n	8003b46 <__swbuf_r+0x92>
 8003b16:	4621      	mov	r1, r4
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 f911 	bl	8003d40 <_fflush_r>
 8003b1e:	b190      	cbz	r0, 8003b46 <__swbuf_r+0x92>
 8003b20:	e00f      	b.n	8003b42 <__swbuf_r+0x8e>
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <__swbuf_r+0x9c>)
 8003b24:	429c      	cmp	r4, r3
 8003b26:	d101      	bne.n	8003b2c <__swbuf_r+0x78>
 8003b28:	68ac      	ldr	r4, [r5, #8]
 8003b2a:	e7d0      	b.n	8003ace <__swbuf_r+0x1a>
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <__swbuf_r+0xa0>)
 8003b2e:	429c      	cmp	r4, r3
 8003b30:	bf08      	it	eq
 8003b32:	68ec      	ldreq	r4, [r5, #12]
 8003b34:	e7cb      	b.n	8003ace <__swbuf_r+0x1a>
 8003b36:	4621      	mov	r1, r4
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f000 f80d 	bl	8003b58 <__swsetup_r>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d0cc      	beq.n	8003adc <__swbuf_r+0x28>
 8003b42:	f04f 37ff 	mov.w	r7, #4294967295
 8003b46:	4638      	mov	r0, r7
 8003b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08004380 	.word	0x08004380
 8003b50:	080043a0 	.word	0x080043a0
 8003b54:	08004360 	.word	0x08004360

08003b58 <__swsetup_r>:
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <__swsetup_r+0xcc>)
 8003b5a:	b570      	push	{r4, r5, r6, lr}
 8003b5c:	681d      	ldr	r5, [r3, #0]
 8003b5e:	4606      	mov	r6, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	b125      	cbz	r5, 8003b6e <__swsetup_r+0x16>
 8003b64:	69ab      	ldr	r3, [r5, #24]
 8003b66:	b913      	cbnz	r3, 8003b6e <__swsetup_r+0x16>
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f000 f953 	bl	8003e14 <__sinit>
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <__swsetup_r+0xd0>)
 8003b70:	429c      	cmp	r4, r3
 8003b72:	d10f      	bne.n	8003b94 <__swsetup_r+0x3c>
 8003b74:	686c      	ldr	r4, [r5, #4]
 8003b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	0715      	lsls	r5, r2, #28
 8003b7e:	d42c      	bmi.n	8003bda <__swsetup_r+0x82>
 8003b80:	06d0      	lsls	r0, r2, #27
 8003b82:	d411      	bmi.n	8003ba8 <__swsetup_r+0x50>
 8003b84:	2209      	movs	r2, #9
 8003b86:	6032      	str	r2, [r6, #0]
 8003b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8c:	81a3      	strh	r3, [r4, #12]
 8003b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b92:	e03e      	b.n	8003c12 <__swsetup_r+0xba>
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <__swsetup_r+0xd4>)
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d101      	bne.n	8003b9e <__swsetup_r+0x46>
 8003b9a:	68ac      	ldr	r4, [r5, #8]
 8003b9c:	e7eb      	b.n	8003b76 <__swsetup_r+0x1e>
 8003b9e:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <__swsetup_r+0xd8>)
 8003ba0:	429c      	cmp	r4, r3
 8003ba2:	bf08      	it	eq
 8003ba4:	68ec      	ldreq	r4, [r5, #12]
 8003ba6:	e7e6      	b.n	8003b76 <__swsetup_r+0x1e>
 8003ba8:	0751      	lsls	r1, r2, #29
 8003baa:	d512      	bpl.n	8003bd2 <__swsetup_r+0x7a>
 8003bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bae:	b141      	cbz	r1, 8003bc2 <__swsetup_r+0x6a>
 8003bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bb4:	4299      	cmp	r1, r3
 8003bb6:	d002      	beq.n	8003bbe <__swsetup_r+0x66>
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 fa19 	bl	8003ff0 <_free_r>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8003bc2:	89a3      	ldrh	r3, [r4, #12]
 8003bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	6063      	str	r3, [r4, #4]
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	b94b      	cbnz	r3, 8003bf2 <__swsetup_r+0x9a>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be8:	d003      	beq.n	8003bf2 <__swsetup_r+0x9a>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4630      	mov	r0, r6
 8003bee:	f000 f9bf 	bl	8003f70 <__smakebuf_r>
 8003bf2:	89a2      	ldrh	r2, [r4, #12]
 8003bf4:	f012 0301 	ands.w	r3, r2, #1
 8003bf8:	d00c      	beq.n	8003c14 <__swsetup_r+0xbc>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60a3      	str	r3, [r4, #8]
 8003bfe:	6963      	ldr	r3, [r4, #20]
 8003c00:	425b      	negs	r3, r3
 8003c02:	61a3      	str	r3, [r4, #24]
 8003c04:	6923      	ldr	r3, [r4, #16]
 8003c06:	b953      	cbnz	r3, 8003c1e <__swsetup_r+0xc6>
 8003c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c10:	d1ba      	bne.n	8003b88 <__swsetup_r+0x30>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	0792      	lsls	r2, r2, #30
 8003c16:	bf58      	it	pl
 8003c18:	6963      	ldrpl	r3, [r4, #20]
 8003c1a:	60a3      	str	r3, [r4, #8]
 8003c1c:	e7f2      	b.n	8003c04 <__swsetup_r+0xac>
 8003c1e:	2000      	movs	r0, #0
 8003c20:	e7f7      	b.n	8003c12 <__swsetup_r+0xba>
 8003c22:	bf00      	nop
 8003c24:	20000010 	.word	0x20000010
 8003c28:	08004380 	.word	0x08004380
 8003c2c:	080043a0 	.word	0x080043a0
 8003c30:	08004360 	.word	0x08004360

08003c34 <__sflush_r>:
 8003c34:	898a      	ldrh	r2, [r1, #12]
 8003c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	0710      	lsls	r0, r2, #28
 8003c3e:	460c      	mov	r4, r1
 8003c40:	d458      	bmi.n	8003cf4 <__sflush_r+0xc0>
 8003c42:	684b      	ldr	r3, [r1, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	dc05      	bgt.n	8003c54 <__sflush_r+0x20>
 8003c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	dc02      	bgt.n	8003c54 <__sflush_r+0x20>
 8003c4e:	2000      	movs	r0, #0
 8003c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c56:	2e00      	cmp	r6, #0
 8003c58:	d0f9      	beq.n	8003c4e <__sflush_r+0x1a>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c60:	682f      	ldr	r7, [r5, #0]
 8003c62:	6a21      	ldr	r1, [r4, #32]
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	d032      	beq.n	8003cce <__sflush_r+0x9a>
 8003c68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	075a      	lsls	r2, r3, #29
 8003c6e:	d505      	bpl.n	8003c7c <__sflush_r+0x48>
 8003c70:	6863      	ldr	r3, [r4, #4]
 8003c72:	1ac0      	subs	r0, r0, r3
 8003c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c76:	b10b      	cbz	r3, 8003c7c <__sflush_r+0x48>
 8003c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c7a:	1ac0      	subs	r0, r0, r3
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c82:	6a21      	ldr	r1, [r4, #32]
 8003c84:	4628      	mov	r0, r5
 8003c86:	47b0      	blx	r6
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	d106      	bne.n	8003c9c <__sflush_r+0x68>
 8003c8e:	6829      	ldr	r1, [r5, #0]
 8003c90:	291d      	cmp	r1, #29
 8003c92:	d848      	bhi.n	8003d26 <__sflush_r+0xf2>
 8003c94:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <__sflush_r+0x108>)
 8003c96:	40ca      	lsrs	r2, r1
 8003c98:	07d6      	lsls	r6, r2, #31
 8003c9a:	d544      	bpl.n	8003d26 <__sflush_r+0xf2>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	6062      	str	r2, [r4, #4]
 8003ca0:	04d9      	lsls	r1, r3, #19
 8003ca2:	6922      	ldr	r2, [r4, #16]
 8003ca4:	6022      	str	r2, [r4, #0]
 8003ca6:	d504      	bpl.n	8003cb2 <__sflush_r+0x7e>
 8003ca8:	1c42      	adds	r2, r0, #1
 8003caa:	d101      	bne.n	8003cb0 <__sflush_r+0x7c>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	b903      	cbnz	r3, 8003cb2 <__sflush_r+0x7e>
 8003cb0:	6560      	str	r0, [r4, #84]	; 0x54
 8003cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cb4:	602f      	str	r7, [r5, #0]
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	d0c9      	beq.n	8003c4e <__sflush_r+0x1a>
 8003cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cbe:	4299      	cmp	r1, r3
 8003cc0:	d002      	beq.n	8003cc8 <__sflush_r+0x94>
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 f994 	bl	8003ff0 <_free_r>
 8003cc8:	2000      	movs	r0, #0
 8003cca:	6360      	str	r0, [r4, #52]	; 0x34
 8003ccc:	e7c0      	b.n	8003c50 <__sflush_r+0x1c>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b0      	blx	r6
 8003cd4:	1c41      	adds	r1, r0, #1
 8003cd6:	d1c8      	bne.n	8003c6a <__sflush_r+0x36>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0c5      	beq.n	8003c6a <__sflush_r+0x36>
 8003cde:	2b1d      	cmp	r3, #29
 8003ce0:	d001      	beq.n	8003ce6 <__sflush_r+0xb2>
 8003ce2:	2b16      	cmp	r3, #22
 8003ce4:	d101      	bne.n	8003cea <__sflush_r+0xb6>
 8003ce6:	602f      	str	r7, [r5, #0]
 8003ce8:	e7b1      	b.n	8003c4e <__sflush_r+0x1a>
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf0:	81a3      	strh	r3, [r4, #12]
 8003cf2:	e7ad      	b.n	8003c50 <__sflush_r+0x1c>
 8003cf4:	690f      	ldr	r7, [r1, #16]
 8003cf6:	2f00      	cmp	r7, #0
 8003cf8:	d0a9      	beq.n	8003c4e <__sflush_r+0x1a>
 8003cfa:	0793      	lsls	r3, r2, #30
 8003cfc:	680e      	ldr	r6, [r1, #0]
 8003cfe:	bf08      	it	eq
 8003d00:	694b      	ldreq	r3, [r1, #20]
 8003d02:	600f      	str	r7, [r1, #0]
 8003d04:	bf18      	it	ne
 8003d06:	2300      	movne	r3, #0
 8003d08:	eba6 0807 	sub.w	r8, r6, r7
 8003d0c:	608b      	str	r3, [r1, #8]
 8003d0e:	f1b8 0f00 	cmp.w	r8, #0
 8003d12:	dd9c      	ble.n	8003c4e <__sflush_r+0x1a>
 8003d14:	4643      	mov	r3, r8
 8003d16:	463a      	mov	r2, r7
 8003d18:	6a21      	ldr	r1, [r4, #32]
 8003d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	47b0      	blx	r6
 8003d20:	2800      	cmp	r0, #0
 8003d22:	dc06      	bgt.n	8003d32 <__sflush_r+0xfe>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	e78e      	b.n	8003c50 <__sflush_r+0x1c>
 8003d32:	4407      	add	r7, r0
 8003d34:	eba8 0800 	sub.w	r8, r8, r0
 8003d38:	e7e9      	b.n	8003d0e <__sflush_r+0xda>
 8003d3a:	bf00      	nop
 8003d3c:	20400001 	.word	0x20400001

08003d40 <_fflush_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	690b      	ldr	r3, [r1, #16]
 8003d44:	4605      	mov	r5, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	b1db      	cbz	r3, 8003d82 <_fflush_r+0x42>
 8003d4a:	b118      	cbz	r0, 8003d54 <_fflush_r+0x14>
 8003d4c:	6983      	ldr	r3, [r0, #24]
 8003d4e:	b90b      	cbnz	r3, 8003d54 <_fflush_r+0x14>
 8003d50:	f000 f860 	bl	8003e14 <__sinit>
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <_fflush_r+0x48>)
 8003d56:	429c      	cmp	r4, r3
 8003d58:	d109      	bne.n	8003d6e <_fflush_r+0x2e>
 8003d5a:	686c      	ldr	r4, [r5, #4]
 8003d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d60:	b17b      	cbz	r3, 8003d82 <_fflush_r+0x42>
 8003d62:	4621      	mov	r1, r4
 8003d64:	4628      	mov	r0, r5
 8003d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d6a:	f7ff bf63 	b.w	8003c34 <__sflush_r>
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <_fflush_r+0x4c>)
 8003d70:	429c      	cmp	r4, r3
 8003d72:	d101      	bne.n	8003d78 <_fflush_r+0x38>
 8003d74:	68ac      	ldr	r4, [r5, #8]
 8003d76:	e7f1      	b.n	8003d5c <_fflush_r+0x1c>
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <_fflush_r+0x50>)
 8003d7a:	429c      	cmp	r4, r3
 8003d7c:	bf08      	it	eq
 8003d7e:	68ec      	ldreq	r4, [r5, #12]
 8003d80:	e7ec      	b.n	8003d5c <_fflush_r+0x1c>
 8003d82:	2000      	movs	r0, #0
 8003d84:	bd38      	pop	{r3, r4, r5, pc}
 8003d86:	bf00      	nop
 8003d88:	08004380 	.word	0x08004380
 8003d8c:	080043a0 	.word	0x080043a0
 8003d90:	08004360 	.word	0x08004360

08003d94 <std>:
 8003d94:	2300      	movs	r3, #0
 8003d96:	b510      	push	{r4, lr}
 8003d98:	4604      	mov	r4, r0
 8003d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d9e:	6083      	str	r3, [r0, #8]
 8003da0:	8181      	strh	r1, [r0, #12]
 8003da2:	6643      	str	r3, [r0, #100]	; 0x64
 8003da4:	81c2      	strh	r2, [r0, #14]
 8003da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003daa:	6183      	str	r3, [r0, #24]
 8003dac:	4619      	mov	r1, r3
 8003dae:	2208      	movs	r2, #8
 8003db0:	305c      	adds	r0, #92	; 0x5c
 8003db2:	f7ff fe12 	bl	80039da <memset>
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <std+0x38>)
 8003db8:	6263      	str	r3, [r4, #36]	; 0x24
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <std+0x3c>)
 8003dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <std+0x40>)
 8003dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <std+0x44>)
 8003dc4:	6224      	str	r4, [r4, #32]
 8003dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	bf00      	nop
 8003dcc:	08004161 	.word	0x08004161
 8003dd0:	08004183 	.word	0x08004183
 8003dd4:	080041bb 	.word	0x080041bb
 8003dd8:	080041df 	.word	0x080041df

08003ddc <_cleanup_r>:
 8003ddc:	4901      	ldr	r1, [pc, #4]	; (8003de4 <_cleanup_r+0x8>)
 8003dde:	f000 b885 	b.w	8003eec <_fwalk_reent>
 8003de2:	bf00      	nop
 8003de4:	08003d41 	.word	0x08003d41

08003de8 <__sfmoreglue>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	1e4a      	subs	r2, r1, #1
 8003dec:	2568      	movs	r5, #104	; 0x68
 8003dee:	4355      	muls	r5, r2
 8003df0:	460e      	mov	r6, r1
 8003df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003df6:	f000 f949 	bl	800408c <_malloc_r>
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	b140      	cbz	r0, 8003e10 <__sfmoreglue+0x28>
 8003dfe:	2100      	movs	r1, #0
 8003e00:	e9c0 1600 	strd	r1, r6, [r0]
 8003e04:	300c      	adds	r0, #12
 8003e06:	60a0      	str	r0, [r4, #8]
 8003e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e0c:	f7ff fde5 	bl	80039da <memset>
 8003e10:	4620      	mov	r0, r4
 8003e12:	bd70      	pop	{r4, r5, r6, pc}

08003e14 <__sinit>:
 8003e14:	6983      	ldr	r3, [r0, #24]
 8003e16:	b510      	push	{r4, lr}
 8003e18:	4604      	mov	r4, r0
 8003e1a:	bb33      	cbnz	r3, 8003e6a <__sinit+0x56>
 8003e1c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003e20:	6503      	str	r3, [r0, #80]	; 0x50
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <__sinit+0x58>)
 8003e24:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <__sinit+0x5c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6282      	str	r2, [r0, #40]	; 0x28
 8003e2a:	4298      	cmp	r0, r3
 8003e2c:	bf04      	itt	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	6183      	streq	r3, [r0, #24]
 8003e32:	f000 f81f 	bl	8003e74 <__sfp>
 8003e36:	6060      	str	r0, [r4, #4]
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 f81b 	bl	8003e74 <__sfp>
 8003e3e:	60a0      	str	r0, [r4, #8]
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 f817 	bl	8003e74 <__sfp>
 8003e46:	2200      	movs	r2, #0
 8003e48:	60e0      	str	r0, [r4, #12]
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	6860      	ldr	r0, [r4, #4]
 8003e4e:	f7ff ffa1 	bl	8003d94 <std>
 8003e52:	2201      	movs	r2, #1
 8003e54:	2109      	movs	r1, #9
 8003e56:	68a0      	ldr	r0, [r4, #8]
 8003e58:	f7ff ff9c 	bl	8003d94 <std>
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	2112      	movs	r1, #18
 8003e60:	68e0      	ldr	r0, [r4, #12]
 8003e62:	f7ff ff97 	bl	8003d94 <std>
 8003e66:	2301      	movs	r3, #1
 8003e68:	61a3      	str	r3, [r4, #24]
 8003e6a:	bd10      	pop	{r4, pc}
 8003e6c:	0800435c 	.word	0x0800435c
 8003e70:	08003ddd 	.word	0x08003ddd

08003e74 <__sfp>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <__sfp+0x70>)
 8003e78:	681e      	ldr	r6, [r3, #0]
 8003e7a:	69b3      	ldr	r3, [r6, #24]
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	b913      	cbnz	r3, 8003e86 <__sfp+0x12>
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff ffc7 	bl	8003e14 <__sinit>
 8003e86:	3648      	adds	r6, #72	; 0x48
 8003e88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	d503      	bpl.n	8003e98 <__sfp+0x24>
 8003e90:	6833      	ldr	r3, [r6, #0]
 8003e92:	b133      	cbz	r3, 8003ea2 <__sfp+0x2e>
 8003e94:	6836      	ldr	r6, [r6, #0]
 8003e96:	e7f7      	b.n	8003e88 <__sfp+0x14>
 8003e98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e9c:	b16d      	cbz	r5, 8003eba <__sfp+0x46>
 8003e9e:	3468      	adds	r4, #104	; 0x68
 8003ea0:	e7f4      	b.n	8003e8c <__sfp+0x18>
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7ff ff9f 	bl	8003de8 <__sfmoreglue>
 8003eaa:	6030      	str	r0, [r6, #0]
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d1f1      	bne.n	8003e94 <__sfp+0x20>
 8003eb0:	230c      	movs	r3, #12
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <__sfp+0x74>)
 8003ebc:	6665      	str	r5, [r4, #100]	; 0x64
 8003ebe:	e9c4 5500 	strd	r5, r5, [r4]
 8003ec2:	60a5      	str	r5, [r4, #8]
 8003ec4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003ec8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ed4:	f7ff fd81 	bl	80039da <memset>
 8003ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ee0:	e7e9      	b.n	8003eb6 <__sfp+0x42>
 8003ee2:	bf00      	nop
 8003ee4:	0800435c 	.word	0x0800435c
 8003ee8:	ffff0001 	.word	0xffff0001

08003eec <_fwalk_reent>:
 8003eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	4689      	mov	r9, r1
 8003ef4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ef8:	2600      	movs	r6, #0
 8003efa:	b914      	cbnz	r4, 8003f02 <_fwalk_reent+0x16>
 8003efc:	4630      	mov	r0, r6
 8003efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f02:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003f06:	3f01      	subs	r7, #1
 8003f08:	d501      	bpl.n	8003f0e <_fwalk_reent+0x22>
 8003f0a:	6824      	ldr	r4, [r4, #0]
 8003f0c:	e7f5      	b.n	8003efa <_fwalk_reent+0xe>
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d907      	bls.n	8003f24 <_fwalk_reent+0x38>
 8003f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	d003      	beq.n	8003f24 <_fwalk_reent+0x38>
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4640      	mov	r0, r8
 8003f20:	47c8      	blx	r9
 8003f22:	4306      	orrs	r6, r0
 8003f24:	3568      	adds	r5, #104	; 0x68
 8003f26:	e7ee      	b.n	8003f06 <_fwalk_reent+0x1a>

08003f28 <__swhatbuf_r>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	460e      	mov	r6, r1
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	2900      	cmp	r1, #0
 8003f32:	b096      	sub	sp, #88	; 0x58
 8003f34:	4614      	mov	r4, r2
 8003f36:	461d      	mov	r5, r3
 8003f38:	da07      	bge.n	8003f4a <__swhatbuf_r+0x22>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	602b      	str	r3, [r5, #0]
 8003f3e:	89b3      	ldrh	r3, [r6, #12]
 8003f40:	061a      	lsls	r2, r3, #24
 8003f42:	d410      	bmi.n	8003f66 <__swhatbuf_r+0x3e>
 8003f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f48:	e00e      	b.n	8003f68 <__swhatbuf_r+0x40>
 8003f4a:	466a      	mov	r2, sp
 8003f4c:	f000 f96e 	bl	800422c <_fstat_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	dbf2      	blt.n	8003f3a <__swhatbuf_r+0x12>
 8003f54:	9a01      	ldr	r2, [sp, #4]
 8003f56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f5e:	425a      	negs	r2, r3
 8003f60:	415a      	adcs	r2, r3
 8003f62:	602a      	str	r2, [r5, #0]
 8003f64:	e7ee      	b.n	8003f44 <__swhatbuf_r+0x1c>
 8003f66:	2340      	movs	r3, #64	; 0x40
 8003f68:	2000      	movs	r0, #0
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	b016      	add	sp, #88	; 0x58
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}

08003f70 <__smakebuf_r>:
 8003f70:	898b      	ldrh	r3, [r1, #12]
 8003f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f74:	079d      	lsls	r5, r3, #30
 8003f76:	4606      	mov	r6, r0
 8003f78:	460c      	mov	r4, r1
 8003f7a:	d507      	bpl.n	8003f8c <__smakebuf_r+0x1c>
 8003f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	6123      	str	r3, [r4, #16]
 8003f84:	2301      	movs	r3, #1
 8003f86:	6163      	str	r3, [r4, #20]
 8003f88:	b002      	add	sp, #8
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	ab01      	add	r3, sp, #4
 8003f8e:	466a      	mov	r2, sp
 8003f90:	f7ff ffca 	bl	8003f28 <__swhatbuf_r>
 8003f94:	9900      	ldr	r1, [sp, #0]
 8003f96:	4605      	mov	r5, r0
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f000 f877 	bl	800408c <_malloc_r>
 8003f9e:	b948      	cbnz	r0, 8003fb4 <__smakebuf_r+0x44>
 8003fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa4:	059a      	lsls	r2, r3, #22
 8003fa6:	d4ef      	bmi.n	8003f88 <__smakebuf_r+0x18>
 8003fa8:	f023 0303 	bic.w	r3, r3, #3
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	e7e3      	b.n	8003f7c <__smakebuf_r+0xc>
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <__smakebuf_r+0x7c>)
 8003fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	6020      	str	r0, [r4, #0]
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc0:	81a3      	strh	r3, [r4, #12]
 8003fc2:	9b00      	ldr	r3, [sp, #0]
 8003fc4:	6163      	str	r3, [r4, #20]
 8003fc6:	9b01      	ldr	r3, [sp, #4]
 8003fc8:	6120      	str	r0, [r4, #16]
 8003fca:	b15b      	cbz	r3, 8003fe4 <__smakebuf_r+0x74>
 8003fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 f93d 	bl	8004250 <_isatty_r>
 8003fd6:	b128      	cbz	r0, 8003fe4 <__smakebuf_r+0x74>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	431d      	orrs	r5, r3
 8003fe8:	81a5      	strh	r5, [r4, #12]
 8003fea:	e7cd      	b.n	8003f88 <__smakebuf_r+0x18>
 8003fec:	08003ddd 	.word	0x08003ddd

08003ff0 <_free_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	d045      	beq.n	8004084 <_free_r+0x94>
 8003ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ffc:	1f0c      	subs	r4, r1, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bfb8      	it	lt
 8004002:	18e4      	addlt	r4, r4, r3
 8004004:	f000 f946 	bl	8004294 <__malloc_lock>
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <_free_r+0x98>)
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	4610      	mov	r0, r2
 800400e:	b933      	cbnz	r3, 800401e <_free_r+0x2e>
 8004010:	6063      	str	r3, [r4, #4]
 8004012:	6014      	str	r4, [r2, #0]
 8004014:	4628      	mov	r0, r5
 8004016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800401a:	f000 b93c 	b.w	8004296 <__malloc_unlock>
 800401e:	42a3      	cmp	r3, r4
 8004020:	d90c      	bls.n	800403c <_free_r+0x4c>
 8004022:	6821      	ldr	r1, [r4, #0]
 8004024:	1862      	adds	r2, r4, r1
 8004026:	4293      	cmp	r3, r2
 8004028:	bf04      	itt	eq
 800402a:	681a      	ldreq	r2, [r3, #0]
 800402c:	685b      	ldreq	r3, [r3, #4]
 800402e:	6063      	str	r3, [r4, #4]
 8004030:	bf04      	itt	eq
 8004032:	1852      	addeq	r2, r2, r1
 8004034:	6022      	streq	r2, [r4, #0]
 8004036:	6004      	str	r4, [r0, #0]
 8004038:	e7ec      	b.n	8004014 <_free_r+0x24>
 800403a:	4613      	mov	r3, r2
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	b10a      	cbz	r2, 8004044 <_free_r+0x54>
 8004040:	42a2      	cmp	r2, r4
 8004042:	d9fa      	bls.n	800403a <_free_r+0x4a>
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	1858      	adds	r0, r3, r1
 8004048:	42a0      	cmp	r0, r4
 800404a:	d10b      	bne.n	8004064 <_free_r+0x74>
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	4401      	add	r1, r0
 8004050:	1858      	adds	r0, r3, r1
 8004052:	4282      	cmp	r2, r0
 8004054:	6019      	str	r1, [r3, #0]
 8004056:	d1dd      	bne.n	8004014 <_free_r+0x24>
 8004058:	6810      	ldr	r0, [r2, #0]
 800405a:	6852      	ldr	r2, [r2, #4]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	4401      	add	r1, r0
 8004060:	6019      	str	r1, [r3, #0]
 8004062:	e7d7      	b.n	8004014 <_free_r+0x24>
 8004064:	d902      	bls.n	800406c <_free_r+0x7c>
 8004066:	230c      	movs	r3, #12
 8004068:	602b      	str	r3, [r5, #0]
 800406a:	e7d3      	b.n	8004014 <_free_r+0x24>
 800406c:	6820      	ldr	r0, [r4, #0]
 800406e:	1821      	adds	r1, r4, r0
 8004070:	428a      	cmp	r2, r1
 8004072:	bf04      	itt	eq
 8004074:	6811      	ldreq	r1, [r2, #0]
 8004076:	6852      	ldreq	r2, [r2, #4]
 8004078:	6062      	str	r2, [r4, #4]
 800407a:	bf04      	itt	eq
 800407c:	1809      	addeq	r1, r1, r0
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	605c      	str	r4, [r3, #4]
 8004082:	e7c7      	b.n	8004014 <_free_r+0x24>
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	bf00      	nop
 8004088:	20004034 	.word	0x20004034

0800408c <_malloc_r>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	1ccd      	adds	r5, r1, #3
 8004090:	f025 0503 	bic.w	r5, r5, #3
 8004094:	3508      	adds	r5, #8
 8004096:	2d0c      	cmp	r5, #12
 8004098:	bf38      	it	cc
 800409a:	250c      	movcc	r5, #12
 800409c:	2d00      	cmp	r5, #0
 800409e:	4606      	mov	r6, r0
 80040a0:	db01      	blt.n	80040a6 <_malloc_r+0x1a>
 80040a2:	42a9      	cmp	r1, r5
 80040a4:	d903      	bls.n	80040ae <_malloc_r+0x22>
 80040a6:	230c      	movs	r3, #12
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	2000      	movs	r0, #0
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
 80040ae:	f000 f8f1 	bl	8004294 <__malloc_lock>
 80040b2:	4a21      	ldr	r2, [pc, #132]	; (8004138 <_malloc_r+0xac>)
 80040b4:	6814      	ldr	r4, [r2, #0]
 80040b6:	4621      	mov	r1, r4
 80040b8:	b991      	cbnz	r1, 80040e0 <_malloc_r+0x54>
 80040ba:	4c20      	ldr	r4, [pc, #128]	; (800413c <_malloc_r+0xb0>)
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	b91b      	cbnz	r3, 80040c8 <_malloc_r+0x3c>
 80040c0:	4630      	mov	r0, r6
 80040c2:	f000 f83d 	bl	8004140 <_sbrk_r>
 80040c6:	6020      	str	r0, [r4, #0]
 80040c8:	4629      	mov	r1, r5
 80040ca:	4630      	mov	r0, r6
 80040cc:	f000 f838 	bl	8004140 <_sbrk_r>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d124      	bne.n	800411e <_malloc_r+0x92>
 80040d4:	230c      	movs	r3, #12
 80040d6:	6033      	str	r3, [r6, #0]
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f8dc 	bl	8004296 <__malloc_unlock>
 80040de:	e7e4      	b.n	80040aa <_malloc_r+0x1e>
 80040e0:	680b      	ldr	r3, [r1, #0]
 80040e2:	1b5b      	subs	r3, r3, r5
 80040e4:	d418      	bmi.n	8004118 <_malloc_r+0x8c>
 80040e6:	2b0b      	cmp	r3, #11
 80040e8:	d90f      	bls.n	800410a <_malloc_r+0x7e>
 80040ea:	600b      	str	r3, [r1, #0]
 80040ec:	50cd      	str	r5, [r1, r3]
 80040ee:	18cc      	adds	r4, r1, r3
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 f8d0 	bl	8004296 <__malloc_unlock>
 80040f6:	f104 000b 	add.w	r0, r4, #11
 80040fa:	1d23      	adds	r3, r4, #4
 80040fc:	f020 0007 	bic.w	r0, r0, #7
 8004100:	1ac3      	subs	r3, r0, r3
 8004102:	d0d3      	beq.n	80040ac <_malloc_r+0x20>
 8004104:	425a      	negs	r2, r3
 8004106:	50e2      	str	r2, [r4, r3]
 8004108:	e7d0      	b.n	80040ac <_malloc_r+0x20>
 800410a:	428c      	cmp	r4, r1
 800410c:	684b      	ldr	r3, [r1, #4]
 800410e:	bf16      	itet	ne
 8004110:	6063      	strne	r3, [r4, #4]
 8004112:	6013      	streq	r3, [r2, #0]
 8004114:	460c      	movne	r4, r1
 8004116:	e7eb      	b.n	80040f0 <_malloc_r+0x64>
 8004118:	460c      	mov	r4, r1
 800411a:	6849      	ldr	r1, [r1, #4]
 800411c:	e7cc      	b.n	80040b8 <_malloc_r+0x2c>
 800411e:	1cc4      	adds	r4, r0, #3
 8004120:	f024 0403 	bic.w	r4, r4, #3
 8004124:	42a0      	cmp	r0, r4
 8004126:	d005      	beq.n	8004134 <_malloc_r+0xa8>
 8004128:	1a21      	subs	r1, r4, r0
 800412a:	4630      	mov	r0, r6
 800412c:	f000 f808 	bl	8004140 <_sbrk_r>
 8004130:	3001      	adds	r0, #1
 8004132:	d0cf      	beq.n	80040d4 <_malloc_r+0x48>
 8004134:	6025      	str	r5, [r4, #0]
 8004136:	e7db      	b.n	80040f0 <_malloc_r+0x64>
 8004138:	20004034 	.word	0x20004034
 800413c:	20004038 	.word	0x20004038

08004140 <_sbrk_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4c06      	ldr	r4, [pc, #24]	; (800415c <_sbrk_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4605      	mov	r5, r0
 8004148:	4608      	mov	r0, r1
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	f7fc fc12 	bl	8000974 <_sbrk>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_sbrk_r+0x1a>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	b103      	cbz	r3, 800415a <_sbrk_r+0x1a>
 8004158:	602b      	str	r3, [r5, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20004044 	.word	0x20004044

08004160 <__sread>:
 8004160:	b510      	push	{r4, lr}
 8004162:	460c      	mov	r4, r1
 8004164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004168:	f000 f896 	bl	8004298 <_read_r>
 800416c:	2800      	cmp	r0, #0
 800416e:	bfab      	itete	ge
 8004170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004172:	89a3      	ldrhlt	r3, [r4, #12]
 8004174:	181b      	addge	r3, r3, r0
 8004176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800417a:	bfac      	ite	ge
 800417c:	6563      	strge	r3, [r4, #84]	; 0x54
 800417e:	81a3      	strhlt	r3, [r4, #12]
 8004180:	bd10      	pop	{r4, pc}

08004182 <__swrite>:
 8004182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004186:	461f      	mov	r7, r3
 8004188:	898b      	ldrh	r3, [r1, #12]
 800418a:	05db      	lsls	r3, r3, #23
 800418c:	4605      	mov	r5, r0
 800418e:	460c      	mov	r4, r1
 8004190:	4616      	mov	r6, r2
 8004192:	d505      	bpl.n	80041a0 <__swrite+0x1e>
 8004194:	2302      	movs	r3, #2
 8004196:	2200      	movs	r2, #0
 8004198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419c:	f000 f868 	bl	8004270 <_lseek_r>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041aa:	81a3      	strh	r3, [r4, #12]
 80041ac:	4632      	mov	r2, r6
 80041ae:	463b      	mov	r3, r7
 80041b0:	4628      	mov	r0, r5
 80041b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	f000 b817 	b.w	80041e8 <_write_r>

080041ba <__sseek>:
 80041ba:	b510      	push	{r4, lr}
 80041bc:	460c      	mov	r4, r1
 80041be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c2:	f000 f855 	bl	8004270 <_lseek_r>
 80041c6:	1c43      	adds	r3, r0, #1
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	bf15      	itete	ne
 80041cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041d6:	81a3      	strheq	r3, [r4, #12]
 80041d8:	bf18      	it	ne
 80041da:	81a3      	strhne	r3, [r4, #12]
 80041dc:	bd10      	pop	{r4, pc}

080041de <__sclose>:
 80041de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e2:	f000 b813 	b.w	800420c <_close_r>
	...

080041e8 <_write_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4c07      	ldr	r4, [pc, #28]	; (8004208 <_write_r+0x20>)
 80041ec:	4605      	mov	r5, r0
 80041ee:	4608      	mov	r0, r1
 80041f0:	4611      	mov	r1, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	6022      	str	r2, [r4, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fc f9ab 	bl	8000552 <_write>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_write_r+0x1e>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	b103      	cbz	r3, 8004206 <_write_r+0x1e>
 8004204:	602b      	str	r3, [r5, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20004044 	.word	0x20004044

0800420c <_close_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4c06      	ldr	r4, [pc, #24]	; (8004228 <_close_r+0x1c>)
 8004210:	2300      	movs	r3, #0
 8004212:	4605      	mov	r5, r0
 8004214:	4608      	mov	r0, r1
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	f7fc fb78 	bl	800090c <_close>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_close_r+0x1a>
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	b103      	cbz	r3, 8004226 <_close_r+0x1a>
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	20004044 	.word	0x20004044

0800422c <_fstat_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4c07      	ldr	r4, [pc, #28]	; (800424c <_fstat_r+0x20>)
 8004230:	2300      	movs	r3, #0
 8004232:	4605      	mov	r5, r0
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	f7fc fb73 	bl	8000924 <_fstat>
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d102      	bne.n	8004248 <_fstat_r+0x1c>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	b103      	cbz	r3, 8004248 <_fstat_r+0x1c>
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	bd38      	pop	{r3, r4, r5, pc}
 800424a:	bf00      	nop
 800424c:	20004044 	.word	0x20004044

08004250 <_isatty_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4c06      	ldr	r4, [pc, #24]	; (800426c <_isatty_r+0x1c>)
 8004254:	2300      	movs	r3, #0
 8004256:	4605      	mov	r5, r0
 8004258:	4608      	mov	r0, r1
 800425a:	6023      	str	r3, [r4, #0]
 800425c:	f7fc fb72 	bl	8000944 <_isatty>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_isatty_r+0x1a>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	b103      	cbz	r3, 800426a <_isatty_r+0x1a>
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20004044 	.word	0x20004044

08004270 <_lseek_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4c07      	ldr	r4, [pc, #28]	; (8004290 <_lseek_r+0x20>)
 8004274:	4605      	mov	r5, r0
 8004276:	4608      	mov	r0, r1
 8004278:	4611      	mov	r1, r2
 800427a:	2200      	movs	r2, #0
 800427c:	6022      	str	r2, [r4, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f7fc fb6b 	bl	800095a <_lseek>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_lseek_r+0x1e>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	b103      	cbz	r3, 800428e <_lseek_r+0x1e>
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20004044 	.word	0x20004044

08004294 <__malloc_lock>:
 8004294:	4770      	bx	lr

08004296 <__malloc_unlock>:
 8004296:	4770      	bx	lr

08004298 <_read_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4c07      	ldr	r4, [pc, #28]	; (80042b8 <_read_r+0x20>)
 800429c:	4605      	mov	r5, r0
 800429e:	4608      	mov	r0, r1
 80042a0:	4611      	mov	r1, r2
 80042a2:	2200      	movs	r2, #0
 80042a4:	6022      	str	r2, [r4, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7fc fb13 	bl	80008d2 <_read>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d102      	bne.n	80042b6 <_read_r+0x1e>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	b103      	cbz	r3, 80042b6 <_read_r+0x1e>
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	20004044 	.word	0x20004044

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
