
01_3_FreeRTOS_Priorities.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd0  08004cd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd8  08004cd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004570  20000074  08004d54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045e4  08004d54  000245e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd1d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023b8  00000000  00000000  0002ddc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  00030180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  00030b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022221  00000000  00000000  00031398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096b0  00000000  00000000  000535b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c81df  00000000  00000000  0005cc69  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a60  00000000  00000000  00124ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bb8 	.word	0x08004bb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004bb8 	.word	0x08004bb8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000090 	.word	0x20000090
 8000500:	200000e4 	.word	0x200000e4

08000504 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetTimerTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetTimerTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	200002e4 	.word	0x200002e4
 8000534:	20000338 	.word	0x20000338

08000538 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000540:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000544:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b00      	cmp	r3, #0
 800054e:	d013      	beq.n	8000578 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000550:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000554:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000558:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00b      	beq.n	8000578 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000560:	e000      	b.n	8000564 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000562:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000564:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800056e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <_write>:

#include <stdio.h>


int _write(int file,char *ptr, int len)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b086      	sub	sp, #24
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
	int i=0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	e009      	b.n	80005b0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	60ba      	str	r2, [r7, #8]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffc7 	bl	8000538 <ITM_SendChar>
	for(i=0;i<len;i++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf1      	blt.n	800059c <_write+0x16>
	return len;
 80005b8:	687b      	ldr	r3, [r7, #4]

}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <vBlueLedControllerTask>:
#define RED    GPIO_PIN_14
#define BLUE   GPIO_PIN_15

//#define pdMS_TO_TICKS(500)
void  vBlueLedControllerTask(void *pvParameters)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	int i;

	while(1)
	{
				printf("Blue\n");
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <vBlueLedControllerTask+0x38>)
 80005ce:	f003 fee7 	bl	80043a0 <puts>
				HAL_GPIO_WritePin(GPIOD,BLUE,1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <vBlueLedControllerTask+0x3c>)
 80005da:	f000 fdb7 	bl	800114c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f002 f8e9 	bl	80027b8 <vTaskDelay>
				HAL_GPIO_WritePin(GPIOD,BLUE,0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <vBlueLedControllerTask+0x3c>)
 80005ee:	f000 fdad 	bl	800114c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 80005f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f6:	f002 f8df 	bl	80027b8 <vTaskDelay>
				printf("Blue\n");
 80005fa:	e7e7      	b.n	80005cc <vBlueLedControllerTask+0x8>
 80005fc:	08004bd0 	.word	0x08004bd0
 8000600:	40020c00 	.word	0x40020c00

08000604 <vRedLedControllerTask>:
	}
}


void  vRedLedControllerTask(void *pvParameters)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{

		printf("Red\n");
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <vRedLedControllerTask+0x38>)
 800060e:	f003 fec7 	bl	80043a0 <puts>


				HAL_GPIO_WritePin(GPIOD,RED,1);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <vRedLedControllerTask+0x3c>)
 800061a:	f000 fd97 	bl	800114c <HAL_GPIO_WritePin>
				vTaskDelay( 500);
 800061e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000622:	f002 f8c9 	bl	80027b8 <vTaskDelay>

				HAL_GPIO_WritePin(GPIOD,RED,0);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <vRedLedControllerTask+0x3c>)
 800062e:	f000 fd8d 	bl	800114c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 8000632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000636:	f002 f8bf 	bl	80027b8 <vTaskDelay>
		printf("Red\n");
 800063a:	e7e7      	b.n	800060c <vRedLedControllerTask+0x8>
 800063c:	08004bd8 	.word	0x08004bd8
 8000640:	40020c00 	.word	0x40020c00

08000644 <vOrangeLedControllerTask>:
	}
}


void  vOrangeLedControllerTask(void *pvParameters)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		printf("Orange\n");
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <vOrangeLedControllerTask+0x38>)
 800064e:	f003 fea7 	bl	80043a0 <puts>

				HAL_GPIO_WritePin(GPIOD,ORANGE,1);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <vOrangeLedControllerTask+0x3c>)
 800065a:	f000 fd77 	bl	800114c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 800065e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000662:	f002 f8a9 	bl	80027b8 <vTaskDelay>

				HAL_GPIO_WritePin(GPIOD,ORANGE,0);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <vOrangeLedControllerTask+0x3c>)
 800066e:	f000 fd6d 	bl	800114c <HAL_GPIO_WritePin>
		vTaskDelay( 500 );
 8000672:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000676:	f002 f89f 	bl	80027b8 <vTaskDelay>
		printf("Orange\n");
 800067a:	e7e7      	b.n	800064c <vOrangeLedControllerTask+0x8>
 800067c:	08004bdc 	.word	0x08004bdc
 8000680:	40020c00 	.word	0x40020c00

08000684 <vGreenLedControllerTask>:
	}
}


void  vGreenLedControllerTask(void *pvParameters)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		printf("Green\n");
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <vGreenLedControllerTask+0x5c>)
 800068e:	f003 fe87 	bl	80043a0 <puts>

		vTaskPrioritySet( xHandle1, 1 );
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <vGreenLedControllerTask+0x60>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f002 f8c1 	bl	8002820 <vTaskPrioritySet>
		vTaskPrioritySet( xHandle2, 2 );
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <vGreenLedControllerTask+0x64>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f8bb 	bl	8002820 <vTaskPrioritySet>
		vTaskPrioritySet( xHandle3, 3 );
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <vGreenLedControllerTask+0x68>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2103      	movs	r1, #3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f8b5 	bl	8002820 <vTaskPrioritySet>

				HAL_GPIO_WritePin(GPIOD,GREEN,1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <vGreenLedControllerTask+0x6c>)
 80006be:	f000 fd45 	bl	800114c <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 80006c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c6:	f002 f877 	bl	80027b8 <vTaskDelay>

				HAL_GPIO_WritePin(GPIOD,GREEN,0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <vGreenLedControllerTask+0x6c>)
 80006d2:	f000 fd3b 	bl	800114c <HAL_GPIO_WritePin>
			vTaskDelay( 500 );
 80006d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006da:	f002 f86d 	bl	80027b8 <vTaskDelay>
		printf("Green\n");
 80006de:	e7d5      	b.n	800068c <vGreenLedControllerTask+0x8>
 80006e0:	08004be4 	.word	0x08004be4
 80006e4:	20004590 	.word	0x20004590
 80006e8:	2000458c 	.word	0x2000458c
 80006ec:	20004598 	.word	0x20004598
 80006f0:	40020c00 	.word	0x40020c00

080006f4 <main>:

	}
}

int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af02      	add	r7, sp, #8
  HAL_Init();
 80006fa:	f000 fa35 	bl	8000b68 <HAL_Init>

  SystemClock_Config();
 80006fe:	f000 f845 	bl	800078c <SystemClock_Config>

  MX_GPIO_Init();
 8000702:	f000 f8a1 	bl	8000848 <MX_GPIO_Init>
  xTaskCreate(vBlueLedControllerTask,
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <main+0x68>)
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	2301      	movs	r3, #1
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	4913      	ldr	r1, [pc, #76]	; (8000760 <main+0x6c>)
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <main+0x70>)
 8000716:	f001 ff19 	bl	800254c <xTaskCreate>
  								NULL,
  								1,
  								&xHandle1
  								);

  	xTaskCreate(vRedLedControllerTask,
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <main+0x74>)
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	4911      	ldr	r1, [pc, #68]	; (800076c <main+0x78>)
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <main+0x7c>)
 800072a:	f001 ff0f 	bl	800254c <xTaskCreate>
  								);




  	xTaskCreate(vOrangeLedControllerTask,
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0x80>)
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	2301      	movs	r3, #1
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2300      	movs	r3, #0
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	490f      	ldr	r1, [pc, #60]	; (8000778 <main+0x84>)
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <main+0x88>)
 800073e:	f001 ff05 	bl	800254c <xTaskCreate>
  								NULL,
  								1,
								&xHandle3
  								);

  	 xTaskCreate(vGreenLedControllerTask,
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <main+0x8c>)
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2304      	movs	r3, #4
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2300      	movs	r3, #0
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	490d      	ldr	r1, [pc, #52]	; (8000784 <main+0x90>)
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <main+0x94>)
 8000752:	f001 fefb 	bl	800254c <xTaskCreate>
  								NULL,
  								4,
								&xHandle4
  								);

     vTaskStartScheduler();
 8000756:	f002 f90b 	bl	8002970 <vTaskStartScheduler>



  while (1)
 800075a:	e7fe      	b.n	800075a <main+0x66>
 800075c:	20004590 	.word	0x20004590
 8000760:	08004bec 	.word	0x08004bec
 8000764:	080005c5 	.word	0x080005c5
 8000768:	2000458c 	.word	0x2000458c
 800076c:	08004c00 	.word	0x08004c00
 8000770:	08000605 	.word	0x08000605
 8000774:	20004598 	.word	0x20004598
 8000778:	08004c14 	.word	0x08004c14
 800077c:	08000645 	.word	0x08000645
 8000780:	20004594 	.word	0x20004594
 8000784:	08004c2c 	.word	0x08004c2c
 8000788:	08000685 	.word	0x08000685

0800078c <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fd9b 	bl	80042d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <SystemClock_Config+0xb4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <SystemClock_Config+0xb4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <SystemClock_Config+0xb4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <SystemClock_Config+0xb8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <SystemClock_Config+0xb8>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <SystemClock_Config+0xb8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fcbf 	bl	8001180 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000808:	f000 f894 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f000 ff1a 	bl	8001660 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000832:	f000 f87f 	bl	8000934 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_GPIO_Init+0xe0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a30      	ldr	r2, [pc, #192]	; (8000928 <MX_GPIO_Init+0xe0>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <MX_GPIO_Init+0xe0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <MX_GPIO_Init+0xe0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a29      	ldr	r2, [pc, #164]	; (8000928 <MX_GPIO_Init+0xe0>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <MX_GPIO_Init+0xe0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_GPIO_Init+0xe0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a22      	ldr	r2, [pc, #136]	; (8000928 <MX_GPIO_Init+0xe0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_GPIO_Init+0xe0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_GPIO_Init+0xe0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_GPIO_Init+0xe0>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_GPIO_Init+0xe0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2102      	movs	r1, #2
 80008d2:	4816      	ldr	r0, [pc, #88]	; (800092c <MX_GPIO_Init+0xe4>)
 80008d4:	f000 fc3a 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_GPIO_Init+0xe8>)
 80008e0:	f000 fc34 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_GPIO_Init+0xe4>)
 80008fc:	f000 fa8c 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000900:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_GPIO_Init+0xe8>)
 800091a:	f000 fa7d 	bl	8000e18 <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	; 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00

08000934 <Error_Handler>:


void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093a:	e7fe      	b.n	800093a <Error_Handler+0x6>

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_MspInit+0x54>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_MspInit+0x54>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fa20 	bl	8000dc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f922 	bl	8000c0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009c8:	f002 fc06 	bl	80031d8 <xTaskGetSchedulerState>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d001      	beq.n	80009d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009d2:	f003 f9e9 	bl	8003da8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}

080009da <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	e00a      	b.n	8000a02 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ec:	f3af 8000 	nop.w
 80009f0:	4601      	mov	r1, r0
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	60ba      	str	r2, [r7, #8]
 80009f8:	b2ca      	uxtb	r2, r1
 80009fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	3301      	adds	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dbf0      	blt.n	80009ec <_read+0x12>
	}

return len;
 8000a0a:	687b      	ldr	r3, [r7, #4]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_isatty>:

int _isatty(int file)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	return 1;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f003 fbde 	bl	800426c <__errno>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20020000 	.word	0x20020000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	20000738 	.word	0x20000738
 8000ae4:	200045e8 	.word	0x200045e8

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <SystemInit+0x28>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <SystemInit+0x28>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SystemInit+0x28>)
 8000afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b02:	609a      	str	r2, [r3, #8]
#endif
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b1a:	e003      	b.n	8000b24 <LoopCopyDataInit>

08000b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b22:	3104      	adds	r1, #4

08000b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b2c:	d3f6      	bcc.n	8000b1c <CopyDataInit>
  ldr  r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b30:	e002      	b.n	8000b38 <LoopFillZerobss>

08000b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b34:	f842 3b04 	str.w	r3, [r2], #4

08000b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b3c:	d3f9      	bcc.n	8000b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ffd3 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f003 fb99 	bl	8004278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fdd5 	bl	80006f4 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b50:	08004ce0 	.word	0x08004ce0
  ldr  r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b58:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b5c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b60:	200045e4 	.word	0x200045e4

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f90d 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fece 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f917 	bl	8000dfe <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f8ed 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	2000459c 	.word	0x2000459c

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	2000459c 	.word	0x2000459c

08000c4c <__NVIC_SetPriorityGrouping>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5c 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e16b      	b.n	800110c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 815a 	bne.w	8001106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d00b      	beq.n	8000e72 <HAL_GPIO_Init+0x5a>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d007      	beq.n	8000e72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e66:	2b11      	cmp	r3, #17
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b12      	cmp	r3, #18
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0xfc>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b12      	cmp	r3, #18
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80b4 	beq.w	8001106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	; (8001120 <HAL_GPIO_Init+0x308>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a5e      	ldr	r2, [pc, #376]	; (8001120 <HAL_GPIO_Init+0x308>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b5c      	ldr	r3, [pc, #368]	; (8001120 <HAL_GPIO_Init+0x308>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a5a      	ldr	r2, [pc, #360]	; (8001124 <HAL_GPIO_Init+0x30c>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a51      	ldr	r2, [pc, #324]	; (8001128 <HAL_GPIO_Init+0x310>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d02b      	beq.n	800103e <HAL_GPIO_Init+0x226>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a50      	ldr	r2, [pc, #320]	; (800112c <HAL_GPIO_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d025      	beq.n	800103a <HAL_GPIO_Init+0x222>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4f      	ldr	r2, [pc, #316]	; (8001130 <HAL_GPIO_Init+0x318>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x21e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4e      	ldr	r2, [pc, #312]	; (8001134 <HAL_GPIO_Init+0x31c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d019      	beq.n	8001032 <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4d      	ldr	r2, [pc, #308]	; (8001138 <HAL_GPIO_Init+0x320>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4c      	ldr	r2, [pc, #304]	; (800113c <HAL_GPIO_Init+0x324>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <HAL_GPIO_Init+0x328>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x20a>
 800101e:	2307      	movs	r3, #7
 8001020:	e00e      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001022:	2308      	movs	r3, #8
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001026:	2306      	movs	r3, #6
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x228>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x228>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4934      	ldr	r1, [pc, #208]	; (8001124 <HAL_GPIO_Init+0x30c>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_GPIO_Init+0x330>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <HAL_GPIO_Init+0x330>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_GPIO_Init+0x330>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x330>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_GPIO_Init+0x330>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_GPIO_Init+0x330>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_GPIO_Init+0x330>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_GPIO_Init+0x330>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae90 	bls.w	8000e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	3724      	adds	r7, #36	; 0x24
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e25b      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d075      	beq.n	800128a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119e:	4ba3      	ldr	r3, [pc, #652]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d00c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	4ba0      	ldr	r3, [pc, #640]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d112      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b9d      	ldr	r3, [pc, #628]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c2:	d10b      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4b99      	ldr	r3, [pc, #612]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d05b      	beq.n	8001288 <HAL_RCC_OscConfig+0x108>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d157      	bne.n	8001288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e236      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d106      	bne.n	80011f4 <HAL_RCC_OscConfig+0x74>
 80011e6:	4b91      	ldr	r3, [pc, #580]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a90      	ldr	r2, [pc, #576]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b8b      	ldr	r3, [pc, #556]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a8a      	ldr	r2, [pc, #552]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b88      	ldr	r3, [pc, #544]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a87      	ldr	r2, [pc, #540]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 8001218:	4b84      	ldr	r3, [pc, #528]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a83      	ldr	r2, [pc, #524]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b81      	ldr	r3, [pc, #516]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a80      	ldr	r2, [pc, #512]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fcfc 	bl	8000c34 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcf8 	bl	8000c34 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1fb      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b76      	ldr	r3, [pc, #472]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xc0>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fce8 	bl	8000c34 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fce4 	bl	8000c34 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1e7      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0xe8>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a2:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b5c      	ldr	r3, [pc, #368]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e1bb      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b56      	ldr	r3, [pc, #344]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4952      	ldr	r1, [pc, #328]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e03a      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <HAL_RCC_OscConfig+0x2b0>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fc9d 	bl	8000c34 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc99 	bl	8000c34 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e19c      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4940      	ldr	r1, [pc, #256]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_RCC_OscConfig+0x2b0>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fc7c 	bl	8000c34 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fc78 	bl	8000c34 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e17b      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d030      	beq.n	80013cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d016      	beq.n	80013a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_RCC_OscConfig+0x2b4>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001378:	f7ff fc5c 	bl	8000c34 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fc58 	bl	8000c34 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e15b      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 8001394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x200>
 800139e:	e015      	b.n	80013cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x2b4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fc45 	bl	8000c34 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc41 	bl	8000c34 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e144      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80a0 	beq.w	800151a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10f      	bne.n	800140a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_RCC_OscConfig+0x2b8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d121      	bne.n	800145a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_RCC_OscConfig+0x2b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_RCC_OscConfig+0x2b8>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fc07 	bl	8000c34 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e011      	b.n	800144e <HAL_RCC_OscConfig+0x2ce>
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	42470000 	.word	0x42470000
 8001434:	42470e80 	.word	0x42470e80
 8001438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143c:	f7ff fbfa 	bl	8000c34 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0fd      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b81      	ldr	r3, [pc, #516]	; (8001654 <HAL_RCC_OscConfig+0x4d4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x2f0>
 8001462:	4b7d      	ldr	r3, [pc, #500]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
 800146e:	e01c      	b.n	80014aa <HAL_RCC_OscConfig+0x32a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d10c      	bne.n	8001492 <HAL_RCC_OscConfig+0x312>
 8001478:	4b77      	ldr	r3, [pc, #476]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	4a76      	ldr	r2, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6713      	str	r3, [r2, #112]	; 0x70
 8001484:	4b74      	ldr	r3, [pc, #464]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a73      	ldr	r2, [pc, #460]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	e00b      	b.n	80014aa <HAL_RCC_OscConfig+0x32a>
 8001492:	4b71      	ldr	r3, [pc, #452]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a70      	ldr	r2, [pc, #448]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a6d      	ldr	r2, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d015      	beq.n	80014de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fbbf 	bl	8000c34 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff fbbb 	bl	8000c34 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0bc      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0ee      	beq.n	80014ba <HAL_RCC_OscConfig+0x33a>
 80014dc:	e014      	b.n	8001508 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fba9 	bl	8000c34 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fba5 	bl	8000c34 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e0a6      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1ee      	bne.n	80014e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d105      	bne.n	800151a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150e:	4b52      	ldr	r3, [pc, #328]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a51      	ldr	r2, [pc, #324]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8092 	beq.w	8001648 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d05c      	beq.n	80015ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d141      	bne.n	80015bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b48      	ldr	r3, [pc, #288]	; (800165c <HAL_RCC_OscConfig+0x4dc>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fb79 	bl	8000c34 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fb75 	bl	8000c34 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e078      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	019b      	lsls	r3, r3, #6
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	3b01      	subs	r3, #1
 800157e:	041b      	lsls	r3, r3, #16
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	061b      	lsls	r3, r3, #24
 8001588:	4933      	ldr	r1, [pc, #204]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <HAL_RCC_OscConfig+0x4dc>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb4e 	bl	8000c34 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb4a 	bl	8000c34 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e04d      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x41c>
 80015ba:	e045      	b.n	8001648 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RCC_OscConfig+0x4dc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb37 	bl	8000c34 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb33 	bl	8000c34 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e036      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x44a>
 80015e8:	e02e      	b.n	8001648 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e029      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_RCC_OscConfig+0x4d8>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	429a      	cmp	r2, r3
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d115      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800161e:	4013      	ands	r3, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001624:	4293      	cmp	r3, r2
 8001626:	d10d      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d106      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	40023800 	.word	0x40023800
 800165c:	42470060 	.word	0x42470060

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cc      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e067      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4934      	ldr	r1, [pc, #208]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa70 	bl	8000c34 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa6c 	bl	8000c34 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4601      	mov	r1, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	fa21 f303 	lsr.w	r3, r1, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f9d0 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00
 800181c:	40023800 	.word	0x40023800
 8001820:	08004c5c 	.word	0x08004c5c
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001842:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b04      	cmp	r3, #4
 800184c:	d007      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x32>
 800184e:	2b08      	cmp	r3, #8
 8001850:	d008      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x38>
 8001852:	2b00      	cmp	r3, #0
 8001854:	f040 808d 	bne.w	8001972 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <HAL_RCC_GetSysClockFreq+0x15c>)
 800185a:	60bb      	str	r3, [r7, #8]
       break;
 800185c:	e08c      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185e:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001860:	60bb      	str	r3, [r7, #8]
      break;
 8001862:	e089      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800186c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d023      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4b42      	ldr	r3, [pc, #264]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	f04f 0400 	mov.w	r4, #0
 8001884:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	ea03 0501 	and.w	r5, r3, r1
 8001890:	ea04 0602 	and.w	r6, r4, r2
 8001894:	4a3d      	ldr	r2, [pc, #244]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 8001896:	fb02 f106 	mul.w	r1, r2, r6
 800189a:	2200      	movs	r2, #0
 800189c:	fb02 f205 	mul.w	r2, r2, r5
 80018a0:	440a      	add	r2, r1
 80018a2:	493a      	ldr	r1, [pc, #232]	; (800198c <HAL_RCC_GetSysClockFreq+0x160>)
 80018a4:	fba5 0101 	umull	r0, r1, r5, r1
 80018a8:	1853      	adds	r3, r2, r1
 80018aa:	4619      	mov	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4623      	mov	r3, r4
 80018b6:	f7fe fc8b 	bl	80001d0 <__aeabi_uldivmod>
 80018ba:	4603      	mov	r3, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e049      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	f04f 0400 	mov.w	r4, #0
 80018cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	ea03 0501 	and.w	r5, r3, r1
 80018d8:	ea04 0602 	and.w	r6, r4, r2
 80018dc:	4629      	mov	r1, r5
 80018de:	4632      	mov	r2, r6
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	0154      	lsls	r4, r2, #5
 80018ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ee:	014b      	lsls	r3, r1, #5
 80018f0:	4619      	mov	r1, r3
 80018f2:	4622      	mov	r2, r4
 80018f4:	1b49      	subs	r1, r1, r5
 80018f6:	eb62 0206 	sbc.w	r2, r2, r6
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	f04f 0400 	mov.w	r4, #0
 8001902:	0194      	lsls	r4, r2, #6
 8001904:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001908:	018b      	lsls	r3, r1, #6
 800190a:	1a5b      	subs	r3, r3, r1
 800190c:	eb64 0402 	sbc.w	r4, r4, r2
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	00e2      	lsls	r2, r4, #3
 800191a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800191e:	00d9      	lsls	r1, r3, #3
 8001920:	460b      	mov	r3, r1
 8001922:	4614      	mov	r4, r2
 8001924:	195b      	adds	r3, r3, r5
 8001926:	eb44 0406 	adc.w	r4, r4, r6
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	02a2      	lsls	r2, r4, #10
 8001934:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001938:	0299      	lsls	r1, r3, #10
 800193a:	460b      	mov	r3, r1
 800193c:	4614      	mov	r4, r2
 800193e:	4618      	mov	r0, r3
 8001940:	4621      	mov	r1, r4
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f04f 0400 	mov.w	r4, #0
 8001948:	461a      	mov	r2, r3
 800194a:	4623      	mov	r3, r4
 800194c:	f7fe fc40 	bl	80001d0 <__aeabi_uldivmod>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_GetSysClockFreq+0x158>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	3301      	adds	r3, #1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	60bb      	str	r3, [r7, #8]
      break;
 8001970:	e002      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001974:	60bb      	str	r3, [r7, #8]
      break;
 8001976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001978:	68bb      	ldr	r3, [r7, #8]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400
 800198c:	017d7840 	.word	0x017d7840

08001990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f103 0208 	add.w	r2, r3, #8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f103 0208 	add.w	r2, r3, #8
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f103 0208 	add.w	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d103      	bne.n	8001a52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e00c      	b.n	8001a6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3308      	adds	r3, #8
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e002      	b.n	8001a60 <vListInsert+0x2e>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d2f6      	bcs.n	8001a5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6892      	ldr	r2, [r2, #8]
 8001aba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6852      	ldr	r2, [r2, #4]
 8001ac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d103      	bne.n	8001ad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	1e5a      	subs	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b10:	f383 8811 	msr	BASEPRI, r3
 8001b14:	f3bf 8f6f 	isb	sy
 8001b18:	f3bf 8f4f 	dsb	sy
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	e7fe      	b.n	8001b1e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001b20:	f002 f8b4 	bl	8003c8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	441a      	add	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	3b01      	subs	r3, #1
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	441a      	add	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	; 0xff
 8001b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d114      	bne.n	8001ba0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01a      	beq.n	8001bb4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3310      	adds	r3, #16
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 f972 	bl	8002e6c <xTaskRemoveFromEventList>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d012      	beq.n	8001bb4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <xQueueGenericReset+0xcc>)
 8001b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f3bf 8f4f 	dsb	sy
 8001b9a:	f3bf 8f6f 	isb	sy
 8001b9e:	e009      	b.n	8001bb4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3310      	adds	r3, #16
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fef3 	bl	8001990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3324      	adds	r3, #36	; 0x24
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff feee 	bl	8001990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001bb4:	f002 f898 	bl	8003ce8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000ed04 	.word	0xe000ed04

08001bc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	; 0x38
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <xQueueGenericCreateStatic+0x28>
 8001bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bee:	e7fe      	b.n	8001bee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <xQueueGenericCreateStatic+0x42>
 8001bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfa:	f383 8811 	msr	BASEPRI, r3
 8001bfe:	f3bf 8f6f 	isb	sy
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	e7fe      	b.n	8001c08 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <xQueueGenericCreateStatic+0x4e>
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <xQueueGenericCreateStatic+0x52>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <xQueueGenericCreateStatic+0x54>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <xQueueGenericCreateStatic+0x6c>
 8001c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c24:	f383 8811 	msr	BASEPRI, r3
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	623b      	str	r3, [r7, #32]
 8001c32:	e7fe      	b.n	8001c32 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <xQueueGenericCreateStatic+0x78>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <xQueueGenericCreateStatic+0x7c>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <xQueueGenericCreateStatic+0x7e>
 8001c44:	2300      	movs	r3, #0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <xQueueGenericCreateStatic+0x96>
 8001c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4e:	f383 8811 	msr	BASEPRI, r3
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	e7fe      	b.n	8001c5c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c5e:	2348      	movs	r3, #72	; 0x48
 8001c60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b48      	cmp	r3, #72	; 0x48
 8001c66:	d009      	beq.n	8001c7c <xQueueGenericCreateStatic+0xb4>
 8001c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	e7fe      	b.n	8001c7a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001c7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00d      	beq.n	8001ca4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f805 	bl	8001cae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3730      	adds	r7, #48	; 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e002      	b.n	8001cd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001cdc:	2101      	movs	r1, #1
 8001cde:	69b8      	ldr	r0, [r7, #24]
 8001ce0:	f7ff ff0a 	bl	8001af8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	; 0x38
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <xQueueGenericSend+0x30>
 8001d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0c:	f383 8811 	msr	BASEPRI, r3
 8001d10:	f3bf 8f6f 	isb	sy
 8001d14:	f3bf 8f4f 	dsb	sy
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d1a:	e7fe      	b.n	8001d1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <xQueueGenericSend+0x3e>
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <xQueueGenericSend+0x42>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <xQueueGenericSend+0x44>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <xQueueGenericSend+0x5c>
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	e7fe      	b.n	8001d46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d103      	bne.n	8001d56 <xQueueGenericSend+0x6a>
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <xQueueGenericSend+0x6e>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <xQueueGenericSend+0x70>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <xQueueGenericSend+0x88>
 8001d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d64:	f383 8811 	msr	BASEPRI, r3
 8001d68:	f3bf 8f6f 	isb	sy
 8001d6c:	f3bf 8f4f 	dsb	sy
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	e7fe      	b.n	8001d72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d74:	f001 fa30 	bl	80031d8 <xTaskGetSchedulerState>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <xQueueGenericSend+0x98>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <xQueueGenericSend+0x9c>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <xQueueGenericSend+0x9e>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <xQueueGenericSend+0xb6>
 8001d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e7fe      	b.n	8001da0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001da2:	f001 ff73 	bl	8003c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d302      	bcc.n	8001db8 <xQueueGenericSend+0xcc>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d129      	bne.n	8001e0c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dbe:	f000 f9ff 	bl	80021c0 <prvCopyDataToQueue>
 8001dc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d010      	beq.n	8001dee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	3324      	adds	r3, #36	; 0x24
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 f84b 	bl	8002e6c <xTaskRemoveFromEventList>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <xQueueGenericSend+0x1f0>)
 8001dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	e00a      	b.n	8001e04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001df4:	4b39      	ldr	r3, [pc, #228]	; (8001edc <xQueueGenericSend+0x1f0>)
 8001df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e04:	f001 ff70 	bl	8003ce8 <vPortExitCritical>
				return pdPASS;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e063      	b.n	8001ed4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e12:	f001 ff69 	bl	8003ce8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e05c      	b.n	8001ed4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d106      	bne.n	8001e2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4618      	mov	r0, r3
 8001e26:	f001 f883 	bl	8002f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e2e:	f001 ff5b 	bl	8003ce8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e32:	f000 fe01 	bl	8002a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e36:	f001 ff29 	bl	8003c8c <vPortEnterCritical>
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d103      	bne.n	8001e50 <xQueueGenericSend+0x164>
 8001e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d103      	bne.n	8001e66 <xQueueGenericSend+0x17a>
 8001e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e66:	f001 ff3f 	bl	8003ce8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e6a:	1d3a      	adds	r2, r7, #4
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f872 	bl	8002f5c <xTaskCheckForTimeOut>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d124      	bne.n	8001ec8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e80:	f000 fa96 	bl	80023b0 <prvIsQueueFull>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d018      	beq.n	8001ebc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 ff9c 	bl	8002dd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e9a:	f000 fa21 	bl	80022e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e9e:	f000 fdd9 	bl	8002a54 <xTaskResumeAll>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f47f af7c 	bne.w	8001da2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <xQueueGenericSend+0x1f0>)
 8001eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f3bf 8f4f 	dsb	sy
 8001eb6:	f3bf 8f6f 	isb	sy
 8001eba:	e772      	b.n	8001da2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ebe:	f000 fa0f 	bl	80022e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ec2:	f000 fdc7 	bl	8002a54 <xTaskResumeAll>
 8001ec6:	e76c      	b.n	8001da2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eca:	f000 fa09 	bl	80022e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ece:	f000 fdc1 	bl	8002a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3738      	adds	r7, #56	; 0x38
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	e000ed04 	.word	0xe000ed04

08001ee0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08e      	sub	sp, #56	; 0x38
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <xQueueGenericSendFromISR+0x2c>
 8001ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e7fe      	b.n	8001f0a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <xQueueGenericSendFromISR+0x3a>
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <xQueueGenericSendFromISR+0x3e>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <xQueueGenericSendFromISR+0x40>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <xQueueGenericSendFromISR+0x58>
 8001f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
 8001f34:	623b      	str	r3, [r7, #32]
 8001f36:	e7fe      	b.n	8001f36 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d103      	bne.n	8001f46 <xQueueGenericSendFromISR+0x66>
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <xQueueGenericSendFromISR+0x6a>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <xQueueGenericSendFromISR+0x6c>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <xQueueGenericSendFromISR+0x84>
 8001f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e7fe      	b.n	8001f62 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f64:	f001 ff6e 	bl	8003e44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f68:	f3ef 8211 	mrs	r2, BASEPRI
 8001f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f70:	f383 8811 	msr	BASEPRI, r3
 8001f74:	f3bf 8f6f 	isb	sy
 8001f78:	f3bf 8f4f 	dsb	sy
 8001f7c:	61ba      	str	r2, [r7, #24]
 8001f7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d302      	bcc.n	8001f96 <xQueueGenericSendFromISR+0xb6>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d12c      	bne.n	8001ff0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fa6:	f000 f90b 	bl	80021c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001faa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d112      	bne.n	8001fda <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbe:	3324      	adds	r3, #36	; 0x24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 ff53 	bl	8002e6c <xTaskRemoveFromEventList>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e007      	b.n	8001fea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001fea:	2301      	movs	r3, #1
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001fee:	e001      	b.n	8001ff4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002000:	4618      	mov	r0, r3
 8002002:	3738      	adds	r7, #56	; 0x38
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	; 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <xQueueReceive+0x2e>
	__asm volatile
 8002022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002026:	f383 8811 	msr	BASEPRI, r3
 800202a:	f3bf 8f6f 	isb	sy
 800202e:	f3bf 8f4f 	dsb	sy
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	e7fe      	b.n	8002034 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <xQueueReceive+0x3c>
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <xQueueReceive+0x40>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <xQueueReceive+0x42>
 8002048:	2300      	movs	r3, #0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <xQueueReceive+0x5a>
 800204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	e7fe      	b.n	8002060 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002062:	f001 f8b9 	bl	80031d8 <xTaskGetSchedulerState>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <xQueueReceive+0x6a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <xQueueReceive+0x6e>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <xQueueReceive+0x70>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <xQueueReceive+0x88>
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e7fe      	b.n	800208e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002090:	f001 fdfc 	bl	8003c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002098:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01f      	beq.n	80020e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020a4:	f000 f8f6 	bl	8002294 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00f      	beq.n	80020d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	3310      	adds	r3, #16
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fed5 	bl	8002e6c <xTaskRemoveFromEventList>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020c8:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <xQueueReceive+0x1b4>)
 80020ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020d8:	f001 fe06 	bl	8003ce8 <vPortExitCritical>
				return pdPASS;
 80020dc:	2301      	movs	r3, #1
 80020de:	e069      	b.n	80021b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020e6:	f001 fdff 	bl	8003ce8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e062      	b.n	80021b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 ff19 	bl	8002f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020fe:	2301      	movs	r3, #1
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002102:	f001 fdf1 	bl	8003ce8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002106:	f000 fc97 	bl	8002a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800210a:	f001 fdbf 	bl	8003c8c <vPortEnterCritical>
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002114:	b25b      	sxtb	r3, r3
 8002116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211a:	d103      	bne.n	8002124 <xQueueReceive+0x11c>
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800212a:	b25b      	sxtb	r3, r3
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d103      	bne.n	800213a <xQueueReceive+0x132>
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800213a:	f001 fdd5 	bl	8003ce8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800213e:	1d3a      	adds	r2, r7, #4
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 ff08 	bl	8002f5c <xTaskCheckForTimeOut>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d123      	bne.n	800219a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002154:	f000 f916 	bl	8002384 <prvIsQueueEmpty>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d017      	beq.n	800218e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	3324      	adds	r3, #36	; 0x24
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fe32 	bl	8002dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800216c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800216e:	f000 f8b7 	bl	80022e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002172:	f000 fc6f 	bl	8002a54 <xTaskResumeAll>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d189      	bne.n	8002090 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <xQueueReceive+0x1b4>)
 800217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	e780      	b.n	8002090 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800218e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002190:	f000 f8a6 	bl	80022e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002194:	f000 fc5e 	bl	8002a54 <xTaskResumeAll>
 8002198:	e77a      	b.n	8002090 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800219a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800219c:	f000 f8a0 	bl	80022e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021a0:	f000 fc58 	bl	8002a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a6:	f000 f8ed 	bl	8002384 <prvIsQueueEmpty>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f43f af6f 	beq.w	8002090 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3730      	adds	r7, #48	; 0x30
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	e000ed04 	.word	0xe000ed04

080021c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d14d      	bne.n	8002282 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 f812 	bl	8003214 <xTaskPriorityDisinherit>
 80021f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	e043      	b.n	8002282 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d119      	bne.n	8002234 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6858      	ldr	r0, [r3, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	461a      	mov	r2, r3
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	f002 f858 	bl	80042c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	441a      	add	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d32b      	bcc.n	8002282 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	e026      	b.n	8002282 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68d8      	ldr	r0, [r3, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	461a      	mov	r2, r3
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	f002 f83e 	bl	80042c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	425b      	negs	r3, r3
 800224e:	441a      	add	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	425b      	negs	r3, r3
 800226a:	441a      	add	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d105      	bne.n	8002282 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	3b01      	subs	r3, #1
 8002280:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800228a:	697b      	ldr	r3, [r7, #20]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d018      	beq.n	80022d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	441a      	add	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d303      	bcc.n	80022c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68d9      	ldr	r1, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	461a      	mov	r2, r3
 80022d2:	6838      	ldr	r0, [r7, #0]
 80022d4:	f001 fff4 	bl	80042c0 <memcpy>
	}
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022e8:	f001 fcd0 	bl	8003c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022f4:	e011      	b.n	800231a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3324      	adds	r3, #36	; 0x24
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fdb2 	bl	8002e6c <xTaskRemoveFromEventList>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800230e:	f000 fe85 	bl	800301c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	3b01      	subs	r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	dce9      	bgt.n	80022f6 <prvUnlockQueue+0x16>
 8002322:	e000      	b.n	8002326 <prvUnlockQueue+0x46>
					break;
 8002324:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800232e:	f001 fcdb 	bl	8003ce8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002332:	f001 fcab 	bl	8003c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800233c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800233e:	e011      	b.n	8002364 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3310      	adds	r3, #16
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd8d 	bl	8002e6c <xTaskRemoveFromEventList>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002358:	f000 fe60 	bl	800301c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800235c:	7bbb      	ldrb	r3, [r7, #14]
 800235e:	3b01      	subs	r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002368:	2b00      	cmp	r3, #0
 800236a:	dce9      	bgt.n	8002340 <prvUnlockQueue+0x60>
 800236c:	e000      	b.n	8002370 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800236e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	22ff      	movs	r2, #255	; 0xff
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002378:	f001 fcb6 	bl	8003ce8 <vPortExitCritical>
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800238c:	f001 fc7e 	bl	8003c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002398:	2301      	movs	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e001      	b.n	80023a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023a2:	f001 fca1 	bl	8003ce8 <vPortExitCritical>

	return xReturn;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023b8:	f001 fc68 	bl	8003c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d102      	bne.n	80023ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e001      	b.n	80023d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023d2:	f001 fc89 	bl	8003ce8 <vPortExitCritical>

	return xReturn;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e014      	b.n	800241a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023f0:	4a0e      	ldr	r2, [pc, #56]	; (800242c <vQueueAddToRegistry+0x4c>)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <vQueueAddToRegistry+0x4c>)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <vQueueAddToRegistry+0x4c>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002412:	e005      	b.n	8002420 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3301      	adds	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b07      	cmp	r3, #7
 800241e:	d9e7      	bls.n	80023f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	200045a0 	.word	0x200045a0

08002430 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002440:	f001 fc24 	bl	8003c8c <vPortEnterCritical>
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800244a:	b25b      	sxtb	r3, r3
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d103      	bne.n	800245a <vQueueWaitForMessageRestricted+0x2a>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002460:	b25b      	sxtb	r3, r3
 8002462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002466:	d103      	bne.n	8002470 <vQueueWaitForMessageRestricted+0x40>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002470:	f001 fc3a 	bl	8003ce8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3324      	adds	r3, #36	; 0x24
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fcc7 	bl	8002e18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff28 	bl	80022e0 <prvUnlockQueue>
	}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af04      	add	r7, sp, #16
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <xTaskCreateStatic+0x28>
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	623b      	str	r3, [r7, #32]
 80024be:	e7fe      	b.n	80024be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <xTaskCreateStatic+0x42>
 80024c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ca:	f383 8811 	msr	BASEPRI, r3
 80024ce:	f3bf 8f6f 	isb	sy
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	e7fe      	b.n	80024d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80024da:	2354      	movs	r3, #84	; 0x54
 80024dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b54      	cmp	r3, #84	; 0x54
 80024e2:	d009      	beq.n	80024f8 <xTaskCreateStatic+0x60>
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	e7fe      	b.n	80024f6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80024f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01e      	beq.n	800253e <xTaskCreateStatic+0xa6>
 8002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01b      	beq.n	800253e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800250e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002518:	2300      	movs	r3, #0
 800251a:	9303      	str	r3, [sp, #12]
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f850 	bl	80025d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002538:	f000 f8d4 	bl	80026e4 <prvAddNewTaskToReadyList>
 800253c:	e001      	b.n	8002542 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002542:	697b      	ldr	r3, [r7, #20]
	}
 8002544:	4618      	mov	r0, r3
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af04      	add	r7, sp, #16
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f001 fcad 	bl	8003ec0 <pvPortMalloc>
 8002566:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800256e:	2054      	movs	r0, #84	; 0x54
 8002570:	f001 fca6 	bl	8003ec0 <pvPortMalloc>
 8002574:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
 8002582:	e005      	b.n	8002590 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002584:	6978      	ldr	r0, [r7, #20]
 8002586:	f001 fd5d 	bl	8004044 <vPortFree>
 800258a:	e001      	b.n	8002590 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d017      	beq.n	80025c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800259e:	88fa      	ldrh	r2, [r7, #6]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9303      	str	r3, [sp, #12]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	9302      	str	r3, [sp, #8]
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f80e 	bl	80025d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025ba:	69f8      	ldr	r0, [r7, #28]
 80025bc:	f000 f892 	bl	80026e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025c0:	2301      	movs	r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e002      	b.n	80025cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025cc:	69bb      	ldr	r3, [r7, #24]
	}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b088      	sub	sp, #32
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ee:	3b01      	subs	r3, #1
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f023 0307 	bic.w	r3, r3, #7
 80025fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <prvInitialiseNewTask+0x46>
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e7fe      	b.n	800261a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01f      	beq.n	8002662 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e012      	b.n	800264e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	7819      	ldrb	r1, [r3, #0]
 8002630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	3334      	adds	r3, #52	; 0x34
 8002638:	460a      	mov	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	3301      	adds	r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d9e9      	bls.n	8002628 <prvInitialiseNewTask+0x52>
 8002654:	e000      	b.n	8002658 <prvInitialiseNewTask+0x82>
			{
				break;
 8002656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002660:	e003      	b.n	800266a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	2b06      	cmp	r3, #6
 800266e:	d901      	bls.n	8002674 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002670:	2306      	movs	r3, #6
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	2200      	movs	r2, #0
 8002684:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	3304      	adds	r3, #4
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f9a0 	bl	80019d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	3318      	adds	r3, #24
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f99b 	bl	80019d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	f1c3 0207 	rsb	r2, r3, #7
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	2200      	movs	r2, #0
 80026b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	69b8      	ldr	r0, [r7, #24]
 80026c4:	f001 f9be 	bl	8003a44 <pxPortInitialiseStack>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026da:	bf00      	nop
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026ec:	f001 face 	bl	8003c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <prvAddNewTaskToReadyList+0xb8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <prvAddNewTaskToReadyList+0xb8>)
 80026f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <prvAddNewTaskToReadyList+0xbc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002702:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <prvAddNewTaskToReadyList+0xbc>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <prvAddNewTaskToReadyList+0xb8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d110      	bne.n	8002732 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002710:	f000 fca8 	bl	8003064 <prvInitialiseTaskLists>
 8002714:	e00d      	b.n	8002732 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <prvAddNewTaskToReadyList+0xc0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <prvAddNewTaskToReadyList+0xbc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	429a      	cmp	r2, r3
 800272a:	d802      	bhi.n	8002732 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <prvAddNewTaskToReadyList+0xbc>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <prvAddNewTaskToReadyList+0xc4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3301      	adds	r3, #1
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <prvAddNewTaskToReadyList+0xc4>)
 800273a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	2201      	movs	r2, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <prvAddNewTaskToReadyList+0xc8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	4a18      	ldr	r2, [pc, #96]	; (80027ac <prvAddNewTaskToReadyList+0xc8>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <prvAddNewTaskToReadyList+0xcc>)
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f7ff f940 	bl	80019ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800276a:	f001 fabd 	bl	8003ce8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <prvAddNewTaskToReadyList+0xc0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00e      	beq.n	8002794 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <prvAddNewTaskToReadyList+0xbc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	429a      	cmp	r2, r3
 8002782:	d207      	bcs.n	8002794 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <prvAddNewTaskToReadyList+0xd0>)
 8002786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000083c 	.word	0x2000083c
 80027a0:	2000073c 	.word	0x2000073c
 80027a4:	20000848 	.word	0x20000848
 80027a8:	20000858 	.word	0x20000858
 80027ac:	20000844 	.word	0x20000844
 80027b0:	20000740 	.word	0x20000740
 80027b4:	e000ed04 	.word	0xe000ed04

080027b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <vTaskDelay+0x60>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <vTaskDelay+0x2e>
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	e7fe      	b.n	80027e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80027e6:	f000 f927 	bl	8002a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027ea:	2100      	movs	r1, #0
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fd95 	bl	800331c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80027f2:	f000 f92f 	bl	8002a54 <xTaskResumeAll>
 80027f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d107      	bne.n	800280e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <vTaskDelay+0x64>)
 8002800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000864 	.word	0x20000864
 800281c:	e000ed04 	.word	0xe000ed04

08002820 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d909      	bls.n	8002848 <vTaskPrioritySet+0x28>
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e7fe      	b.n	8002846 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b06      	cmp	r3, #6
 800284c:	d901      	bls.n	8002852 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800284e:	2306      	movs	r3, #6
 8002850:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8002852:	f001 fa1b 	bl	8003c8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <vTaskPrioritySet+0x42>
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <vTaskPrioritySet+0x140>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e000      	b.n	8002864 <vTaskPrioritySet+0x44>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d06f      	beq.n	8002954 <vTaskPrioritySet+0x134>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d90d      	bls.n	8002898 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 800287c:	4b38      	ldr	r3, [pc, #224]	; (8002960 <vTaskPrioritySet+0x140>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	429a      	cmp	r2, r3
 8002884:	d00f      	beq.n	80028a6 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <vTaskPrioritySet+0x140>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d309      	bcc.n	80028a6 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8002892:	2301      	movs	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e006      	b.n	80028a6 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <vTaskPrioritySet+0x140>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d101      	bne.n	80028a6 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d102      	bne.n	80028be <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db04      	blt.n	80028d6 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f1c3 0207 	rsb	r2, r3, #7
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6959      	ldr	r1, [r3, #20]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <vTaskPrioritySet+0x144>)
 80028e6:	4413      	add	r3, r2
 80028e8:	4299      	cmp	r1, r3
 80028ea:	d128      	bne.n	800293e <vTaskPrioritySet+0x11e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff f8d7 	bl	8001aa4 <uxListRemove>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <vTaskPrioritySet+0xf0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80028fc:	2201      	movs	r2, #1
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43da      	mvns	r2, r3
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <vTaskPrioritySet+0x148>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4013      	ands	r3, r2
 800290c:	4a16      	ldr	r2, [pc, #88]	; (8002968 <vTaskPrioritySet+0x148>)
 800290e:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	2201      	movs	r2, #1
 8002916:	409a      	lsls	r2, r3
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <vTaskPrioritySet+0x148>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <vTaskPrioritySet+0x148>)
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <vTaskPrioritySet+0x144>)
 8002930:	441a      	add	r2, r3
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	3304      	adds	r3, #4
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f7ff f856 	bl	80019ea <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <vTaskPrioritySet+0x134>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <vTaskPrioritySet+0x14c>)
 8002946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002954:	f001 f9c8 	bl	8003ce8 <vPortExitCritical>
	}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000073c 	.word	0x2000073c
 8002964:	20000740 	.word	0x20000740
 8002968:	20000844 	.word	0x20000844
 800296c:	e000ed04 	.word	0xe000ed04

08002970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800297e:	463a      	mov	r2, r7
 8002980:	1d39      	adds	r1, r7, #4
 8002982:	f107 0308 	add.w	r3, r7, #8
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fda2 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	9202      	str	r2, [sp, #8]
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2300      	movs	r3, #0
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	460a      	mov	r2, r1
 800299e:	4920      	ldr	r1, [pc, #128]	; (8002a20 <vTaskStartScheduler+0xb0>)
 80029a0:	4820      	ldr	r0, [pc, #128]	; (8002a24 <vTaskStartScheduler+0xb4>)
 80029a2:	f7ff fd79 	bl	8002498 <xTaskCreateStatic>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <vTaskStartScheduler+0xb8>)
 80029aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80029ac:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <vTaskStartScheduler+0xb8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80029b4:	2301      	movs	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e001      	b.n	80029be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d102      	bne.n	80029ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80029c4:	f000 fd10 	bl	80033e8 <xTimerCreateTimerTask>
 80029c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d115      	bne.n	80029fc <vTaskStartScheduler+0x8c>
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <vTaskStartScheduler+0xbc>)
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <vTaskStartScheduler+0xc0>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <vTaskStartScheduler+0xc4>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80029f6:	f001 f8ab 	bl	8003b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80029fa:	e00d      	b.n	8002a18 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d109      	bne.n	8002a18 <vTaskStartScheduler+0xa8>
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e7fe      	b.n	8002a16 <vTaskStartScheduler+0xa6>
}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	08004c44 	.word	0x08004c44
 8002a24:	08003035 	.word	0x08003035
 8002a28:	20000860 	.word	0x20000860
 8002a2c:	2000085c 	.word	0x2000085c
 8002a30:	20000848 	.word	0x20000848
 8002a34:	20000840 	.word	0x20000840

08002a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <vTaskSuspendAll+0x18>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	4a03      	ldr	r2, [pc, #12]	; (8002a50 <vTaskSuspendAll+0x18>)
 8002a44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	20000864 	.word	0x20000864

08002a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <xTaskResumeAll+0x114>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <xTaskResumeAll+0x2a>
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	e7fe      	b.n	8002a7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a7e:	f001 f905 	bl	8003c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a82:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <xTaskResumeAll+0x114>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	4a37      	ldr	r2, [pc, #220]	; (8002b68 <xTaskResumeAll+0x114>)
 8002a8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <xTaskResumeAll+0x114>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d161      	bne.n	8002b58 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <xTaskResumeAll+0x118>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05d      	beq.n	8002b58 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a9c:	e02e      	b.n	8002afc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <xTaskResumeAll+0x11c>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fffa 	bl	8001aa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fff5 	bl	8001aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	2201      	movs	r2, #1
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <xTaskResumeAll+0x120>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <xTaskResumeAll+0x120>)
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4a27      	ldr	r2, [pc, #156]	; (8002b78 <xTaskResumeAll+0x124>)
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f7fe ff81 	bl	80019ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <xTaskResumeAll+0x128>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <xTaskResumeAll+0x12c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <xTaskResumeAll+0x11c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1cc      	bne.n	8002a9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b0a:	f000 fb45 	bl	8003198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <xTaskResumeAll+0x130>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b1a:	f000 f847 	bl	8002bac <xTaskIncrementTick>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <xTaskResumeAll+0x12c>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f1      	bne.n	8002b1a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <xTaskResumeAll+0x130>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <xTaskResumeAll+0x12c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b44:	2301      	movs	r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <xTaskResumeAll+0x134>)
 8002b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b58:	f001 f8c6 	bl	8003ce8 <vPortExitCritical>

	return xAlreadyYielded;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000864 	.word	0x20000864
 8002b6c:	2000083c 	.word	0x2000083c
 8002b70:	200007fc 	.word	0x200007fc
 8002b74:	20000844 	.word	0x20000844
 8002b78:	20000740 	.word	0x20000740
 8002b7c:	2000073c 	.word	0x2000073c
 8002b80:	20000850 	.word	0x20000850
 8002b84:	2000084c 	.word	0x2000084c
 8002b88:	e000ed04 	.word	0xe000ed04

08002b8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <xTaskGetTickCount+0x1c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002b98:	687b      	ldr	r3, [r7, #4]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000840 	.word	0x20000840

08002bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bb6:	4b4e      	ldr	r3, [pc, #312]	; (8002cf0 <xTaskIncrementTick+0x144>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8087 	bne.w	8002cce <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <xTaskIncrementTick+0x148>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <xTaskIncrementTick+0x148>)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d11f      	bne.n	8002c14 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002bd4:	4b48      	ldr	r3, [pc, #288]	; (8002cf8 <xTaskIncrementTick+0x14c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <xTaskIncrementTick+0x46>
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	e7fe      	b.n	8002bf0 <xTaskIncrementTick+0x44>
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <xTaskIncrementTick+0x14c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <xTaskIncrementTick+0x150>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <xTaskIncrementTick+0x14c>)
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <xTaskIncrementTick+0x150>)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <xTaskIncrementTick+0x154>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a3c      	ldr	r2, [pc, #240]	; (8002d00 <xTaskIncrementTick+0x154>)
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	f000 fac2 	bl	8003198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <xTaskIncrementTick+0x158>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d348      	bcc.n	8002cb0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <xTaskIncrementTick+0x14c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <xTaskIncrementTick+0x158>)
 8002c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2e:	601a      	str	r2, [r3, #0]
					break;
 8002c30:	e03e      	b.n	8002cb0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c32:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <xTaskIncrementTick+0x14c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d203      	bcs.n	8002c52 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c4a:	4a2e      	ldr	r2, [pc, #184]	; (8002d04 <xTaskIncrementTick+0x158>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c50:	e02e      	b.n	8002cb0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3304      	adds	r3, #4
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ff24 	bl	8001aa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	3318      	adds	r3, #24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe ff1b 	bl	8001aa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <xTaskIncrementTick+0x15c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <xTaskIncrementTick+0x15c>)
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <xTaskIncrementTick+0x160>)
 8002c8e:	441a      	add	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f7fe fea7 	bl	80019ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <xTaskIncrementTick+0x164>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3b9      	bcc.n	8002c1e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cae:	e7b6      	b.n	8002c1e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <xTaskIncrementTick+0x164>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	4915      	ldr	r1, [pc, #84]	; (8002d0c <xTaskIncrementTick+0x160>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d907      	bls.n	8002cd8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e004      	b.n	8002cd8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <xTaskIncrementTick+0x168>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <xTaskIncrementTick+0x168>)
 8002cd6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <xTaskIncrementTick+0x16c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002ce4:	697b      	ldr	r3, [r7, #20]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000864 	.word	0x20000864
 8002cf4:	20000840 	.word	0x20000840
 8002cf8:	200007f4 	.word	0x200007f4
 8002cfc:	200007f8 	.word	0x200007f8
 8002d00:	20000854 	.word	0x20000854
 8002d04:	2000085c 	.word	0x2000085c
 8002d08:	20000844 	.word	0x20000844
 8002d0c:	20000740 	.word	0x20000740
 8002d10:	2000073c 	.word	0x2000073c
 8002d14:	2000084c 	.word	0x2000084c
 8002d18:	20000850 	.word	0x20000850

08002d1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <vTaskSwitchContext+0xa0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d2a:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <vTaskSwitchContext+0xa4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d30:	e03e      	b.n	8002db0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002d32:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <vTaskSwitchContext+0xa4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <vTaskSwitchContext+0xa8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002d46:	7afb      	ldrb	r3, [r7, #11]
 8002d48:	f1c3 031f 	rsb	r3, r3, #31
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	491e      	ldr	r1, [pc, #120]	; (8002dc8 <vTaskSwitchContext+0xac>)
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	e7fe      	b.n	8002d74 <vTaskSwitchContext+0x58>
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <vTaskSwitchContext+0xac>)
 8002d82:	4413      	add	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	3308      	adds	r3, #8
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d104      	bne.n	8002da6 <vTaskSwitchContext+0x8a>
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <vTaskSwitchContext+0xb0>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	20000864 	.word	0x20000864
 8002dc0:	20000850 	.word	0x20000850
 8002dc4:	20000844 	.word	0x20000844
 8002dc8:	20000740 	.word	0x20000740
 8002dcc:	2000073c 	.word	0x2000073c

08002dd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <vTaskPlaceOnEventList+0x24>
 8002de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e7fe      	b.n	8002df2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <vTaskPlaceOnEventList+0x44>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3318      	adds	r3, #24
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fe fe18 	bl	8001a32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e02:	2101      	movs	r1, #1
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	f000 fa89 	bl	800331c <prvAddCurrentTaskToDelayedList>
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000073c 	.word	0x2000073c

08002e18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <vTaskPlaceOnEventListRestricted+0x26>
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e7fe      	b.n	8002e3c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <vTaskPlaceOnEventListRestricted+0x50>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3318      	adds	r3, #24
 8002e44:	4619      	mov	r1, r3
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7fe fdcf 	bl	80019ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	68b8      	ldr	r0, [r7, #8]
 8002e5c:	f000 fa5e 	bl	800331c <prvAddCurrentTaskToDelayedList>
	}
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000073c 	.word	0x2000073c

08002e6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <xTaskRemoveFromEventList+0x2a>
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e7fe      	b.n	8002e94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	3318      	adds	r3, #24
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fe02 	bl	8001aa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <xTaskRemoveFromEventList+0xac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11c      	bne.n	8002ee2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fdf9 	bl	8001aa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <xTaskRemoveFromEventList+0xb0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <xTaskRemoveFromEventList+0xb0>)
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <xTaskRemoveFromEventList+0xb4>)
 8002ed2:	441a      	add	r2, r3
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7fe fd85 	bl	80019ea <vListInsertEnd>
 8002ee0:	e005      	b.n	8002eee <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	3318      	adds	r3, #24
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	480e      	ldr	r0, [pc, #56]	; (8002f24 <xTaskRemoveFromEventList+0xb8>)
 8002eea:	f7fe fd7e 	bl	80019ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <xTaskRemoveFromEventList+0xbc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d905      	bls.n	8002f08 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <xTaskRemoveFromEventList+0xc0>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e001      	b.n	8002f0c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f0c:	697b      	ldr	r3, [r7, #20]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000864 	.word	0x20000864
 8002f1c:	20000844 	.word	0x20000844
 8002f20:	20000740 	.word	0x20000740
 8002f24:	200007fc 	.word	0x200007fc
 8002f28:	2000073c 	.word	0x2000073c
 8002f2c:	20000850 	.word	0x20000850

08002f30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <vTaskInternalSetTimeOutState+0x24>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <vTaskInternalSetTimeOutState+0x28>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	605a      	str	r2, [r3, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	20000854 	.word	0x20000854
 8002f58:	20000840 	.word	0x20000840

08002f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <xTaskCheckForTimeOut+0x24>
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e7fe      	b.n	8002f7e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <xTaskCheckForTimeOut+0x3e>
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e7fe      	b.n	8002f98 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002f9a:	f000 fe77 	bl	8003c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <xTaskCheckForTimeOut+0xb8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d102      	bne.n	8002fbe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	e023      	b.n	8003006 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <xTaskCheckForTimeOut+0xbc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d007      	beq.n	8002fda <xTaskCheckForTimeOut+0x7e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	e015      	b.n	8003006 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d20b      	bcs.n	8002ffc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad2      	subs	r2, r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff9d 	bl	8002f30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e004      	b.n	8003006 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003002:	2301      	movs	r3, #1
 8003004:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003006:	f000 fe6f 	bl	8003ce8 <vPortExitCritical>

	return xReturn;
 800300a:	69fb      	ldr	r3, [r7, #28]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000840 	.word	0x20000840
 8003018:	20000854 	.word	0x20000854

0800301c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <vTaskMissedYield+0x14>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	20000850 	.word	0x20000850

08003034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800303c:	f000 f852 	bl	80030e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <prvIdleTask+0x28>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d9f9      	bls.n	800303c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <prvIdleTask+0x2c>)
 800304a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003058:	e7f0      	b.n	800303c <prvIdleTask+0x8>
 800305a:	bf00      	nop
 800305c:	20000740 	.word	0x20000740
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	e00c      	b.n	800308a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <prvInitialiseTaskLists+0x60>)
 800307c:	4413      	add	r3, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fc86 	bl	8001990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d9ef      	bls.n	8003070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003090:	480d      	ldr	r0, [pc, #52]	; (80030c8 <prvInitialiseTaskLists+0x64>)
 8003092:	f7fe fc7d 	bl	8001990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003096:	480d      	ldr	r0, [pc, #52]	; (80030cc <prvInitialiseTaskLists+0x68>)
 8003098:	f7fe fc7a 	bl	8001990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800309c:	480c      	ldr	r0, [pc, #48]	; (80030d0 <prvInitialiseTaskLists+0x6c>)
 800309e:	f7fe fc77 	bl	8001990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80030a2:	480c      	ldr	r0, [pc, #48]	; (80030d4 <prvInitialiseTaskLists+0x70>)
 80030a4:	f7fe fc74 	bl	8001990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80030a8:	480b      	ldr	r0, [pc, #44]	; (80030d8 <prvInitialiseTaskLists+0x74>)
 80030aa:	f7fe fc71 	bl	8001990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <prvInitialiseTaskLists+0x78>)
 80030b0:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <prvInitialiseTaskLists+0x64>)
 80030b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <prvInitialiseTaskLists+0x7c>)
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <prvInitialiseTaskLists+0x68>)
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000740 	.word	0x20000740
 80030c8:	200007cc 	.word	0x200007cc
 80030cc:	200007e0 	.word	0x200007e0
 80030d0:	200007fc 	.word	0x200007fc
 80030d4:	20000810 	.word	0x20000810
 80030d8:	20000828 	.word	0x20000828
 80030dc:	200007f4 	.word	0x200007f4
 80030e0:	200007f8 	.word	0x200007f8

080030e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030ea:	e019      	b.n	8003120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030ec:	f000 fdce 	bl	8003c8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <prvCheckTasksWaitingTermination+0x4c>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fcd1 	bl	8001aa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <prvCheckTasksWaitingTermination+0x50>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3b01      	subs	r3, #1
 8003108:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <prvCheckTasksWaitingTermination+0x50>)
 800310a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <prvCheckTasksWaitingTermination+0x54>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3b01      	subs	r3, #1
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <prvCheckTasksWaitingTermination+0x54>)
 8003114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003116:	f000 fde7 	bl	8003ce8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f80e 	bl	800313c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <prvCheckTasksWaitingTermination+0x54>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e1      	bne.n	80030ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000810 	.word	0x20000810
 8003134:	2000083c 	.word	0x2000083c
 8003138:	20000824 	.word	0x20000824

0800313c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4618      	mov	r0, r3
 8003154:	f000 ff76 	bl	8004044 <vPortFree>
				vPortFree( pxTCB );
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 ff73 	bl	8004044 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800315e:	e017      	b.n	8003190 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003166:	2b01      	cmp	r3, #1
 8003168:	d103      	bne.n	8003172 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 ff6a 	bl	8004044 <vPortFree>
	}
 8003170:	e00e      	b.n	8003190 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003178:	2b02      	cmp	r3, #2
 800317a:	d009      	beq.n	8003190 <prvDeleteTCB+0x54>
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	e7fe      	b.n	800318e <prvDeleteTCB+0x52>
	}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <prvResetNextTaskUnblockTime+0x38>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <prvResetNextTaskUnblockTime+0x3c>)
 80031aa:	f04f 32ff 	mov.w	r2, #4294967295
 80031ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031b0:	e008      	b.n	80031c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <prvResetNextTaskUnblockTime+0x38>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <prvResetNextTaskUnblockTime+0x3c>)
 80031c2:	6013      	str	r3, [r2, #0]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	200007f4 	.word	0x200007f4
 80031d4:	2000085c 	.word	0x2000085c

080031d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <xTaskGetSchedulerState+0x34>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031e6:	2301      	movs	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	e008      	b.n	80031fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <xTaskGetSchedulerState+0x38>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80031f4:	2302      	movs	r3, #2
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	e001      	b.n	80031fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80031fa:	2300      	movs	r3, #0
 80031fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80031fe:	687b      	ldr	r3, [r7, #4]
	}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000848 	.word	0x20000848
 8003210:	20000864 	.word	0x20000864

08003214 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d06c      	beq.n	8003304 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <xTaskPriorityDisinherit+0xfc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d009      	beq.n	8003248 <xTaskPriorityDisinherit+0x34>
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e7fe      	b.n	8003246 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <xTaskPriorityDisinherit+0x50>
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	e7fe      	b.n	8003262 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	429a      	cmp	r2, r3
 8003278:	d044      	beq.n	8003304 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327e:	2b00      	cmp	r3, #0
 8003280:	d140      	bne.n	8003304 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3304      	adds	r3, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fc0c 	bl	8001aa4 <uxListRemove>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d115      	bne.n	80032be <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003296:	491f      	ldr	r1, [pc, #124]	; (8003314 <xTaskPriorityDisinherit+0x100>)
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xTaskPriorityDisinherit+0xaa>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	2201      	movs	r2, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <xTaskPriorityDisinherit+0x104>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4013      	ands	r3, r2
 80032ba:	4a17      	ldr	r2, [pc, #92]	; (8003318 <xTaskPriorityDisinherit+0x104>)
 80032bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	f1c3 0207 	rsb	r2, r3, #7
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	2201      	movs	r2, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <xTaskPriorityDisinherit+0x104>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <xTaskPriorityDisinherit+0x104>)
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4a08      	ldr	r2, [pc, #32]	; (8003314 <xTaskPriorityDisinherit+0x100>)
 80032f2:	441a      	add	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f7fe fb75 	bl	80019ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003300:	2301      	movs	r3, #1
 8003302:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003304:	697b      	ldr	r3, [r7, #20]
	}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000073c 	.word	0x2000073c
 8003314:	20000740 	.word	0x20000740
 8003318:	20000844 	.word	0x20000844

0800331c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3304      	adds	r3, #4
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fbb6 	bl	8001aa4 <uxListRemove>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10b      	bne.n	8003356 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2201      	movs	r2, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4013      	ands	r3, r2
 8003352:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003354:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d10a      	bne.n	8003374 <prvAddCurrentTaskToDelayedList+0x58>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003364:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3304      	adds	r3, #4
 800336a:	4619      	mov	r1, r3
 800336c:	481a      	ldr	r0, [pc, #104]	; (80033d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800336e:	f7fe fb3c 	bl	80019ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003372:	e026      	b.n	80033c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d209      	bcs.n	80033a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800338c:	4b13      	ldr	r3, [pc, #76]	; (80033dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3304      	adds	r3, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4610      	mov	r0, r2
 800339a:	f7fe fb4a 	bl	8001a32 <vListInsert>
}
 800339e:	e010      	b.n	80033c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe fb40 	bl	8001a32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d202      	bcs.n	80033c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033bc:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6013      	str	r3, [r2, #0]
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000840 	.word	0x20000840
 80033d0:	2000073c 	.word	0x2000073c
 80033d4:	20000844 	.word	0x20000844
 80033d8:	20000828 	.word	0x20000828
 80033dc:	200007f8 	.word	0x200007f8
 80033e0:	200007f4 	.word	0x200007f4
 80033e4:	2000085c 	.word	0x2000085c

080033e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80033f2:	f000 fae7 	bl	80039c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <xTimerCreateTimerTask+0x80>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d021      	beq.n	8003442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003406:	1d3a      	adds	r2, r7, #4
 8003408:	f107 0108 	add.w	r1, r7, #8
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f877 	bl	8000504 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	9202      	str	r2, [sp, #8]
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	460a      	mov	r2, r1
 8003428:	4910      	ldr	r1, [pc, #64]	; (800346c <xTimerCreateTimerTask+0x84>)
 800342a:	4811      	ldr	r0, [pc, #68]	; (8003470 <xTimerCreateTimerTask+0x88>)
 800342c:	f7ff f834 	bl	8002498 <xTaskCreateStatic>
 8003430:	4602      	mov	r2, r0
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <xTimerCreateTimerTask+0x8c>)
 8003434:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <xTimerCreateTimerTask+0x8c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800343e:	2301      	movs	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <xTimerCreateTimerTask+0x74>
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e7fe      	b.n	800345a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800345c:	697b      	ldr	r3, [r7, #20]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000898 	.word	0x20000898
 800346c:	08004c4c 	.word	0x08004c4c
 8003470:	080035a9 	.word	0x080035a9
 8003474:	2000089c 	.word	0x2000089c

08003478 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <xTimerGenericCommand+0x2c>
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	e7fe      	b.n	80034a2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <xTimerGenericCommand+0x94>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d02a      	beq.n	8003502 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	dc18      	bgt.n	80034f0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034be:	f7ff fe8b 	bl	80031d8 <xTaskGetSchedulerState>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d109      	bne.n	80034dc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034c8:	4b10      	ldr	r3, [pc, #64]	; (800350c <xTimerGenericCommand+0x94>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	f107 0114 	add.w	r1, r7, #20
 80034d0:	2300      	movs	r3, #0
 80034d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d4:	f7fe fc0a 	bl	8001cec <xQueueGenericSend>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24
 80034da:	e012      	b.n	8003502 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <xTimerGenericCommand+0x94>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	f107 0114 	add.w	r1, r7, #20
 80034e4:	2300      	movs	r3, #0
 80034e6:	2200      	movs	r2, #0
 80034e8:	f7fe fc00 	bl	8001cec <xQueueGenericSend>
 80034ec:	6278      	str	r0, [r7, #36]	; 0x24
 80034ee:	e008      	b.n	8003502 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <xTimerGenericCommand+0x94>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	f107 0114 	add.w	r1, r7, #20
 80034f8:	2300      	movs	r3, #0
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	f7fe fcf0 	bl	8001ee0 <xQueueGenericSendFromISR>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000898 	.word	0x20000898

08003510 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <prvProcessExpiredTimer+0x94>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3304      	adds	r3, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fabb 	bl	8001aa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d021      	beq.n	8003580 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	699a      	ldr	r2, [r3, #24]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	6978      	ldr	r0, [r7, #20]
 800354a:	f000 f8d1 	bl	80036f0 <prvInsertTimerInActiveList>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01e      	beq.n	8003592 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	2100      	movs	r1, #0
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff8a 	bl	8003478 <xTimerGenericCommand>
 8003564:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d112      	bne.n	8003592 <prvProcessExpiredTimer+0x82>
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e7fe      	b.n	800357e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	b2da      	uxtb	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	4798      	blx	r3
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000890 	.word	0x20000890

080035a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f857 	bl	8003668 <prvGetNextExpireTime>
 80035ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4619      	mov	r1, r3
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f803 	bl	80035cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035c6:	f000 f8d5 	bl	8003774 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035ca:	e7f1      	b.n	80035b0 <prvTimerTask+0x8>

080035cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035d6:	f7ff fa2f 	bl	8002a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035da:	f107 0308 	add.w	r3, r7, #8
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f866 	bl	80036b0 <prvSampleTimeNow>
 80035e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d130      	bne.n	800364e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <prvProcessTimerOrBlockTask+0x3c>
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d806      	bhi.n	8003608 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035fa:	f7ff fa2b 	bl	8002a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ff85 	bl	8003510 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003606:	e024      	b.n	8003652 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <prvProcessTimerOrBlockTask+0x90>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <prvProcessTimerOrBlockTask+0x50>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <prvProcessTimerOrBlockTask+0x52>
 800361c:	2300      	movs	r3, #0
 800361e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <prvProcessTimerOrBlockTask+0x94>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4619      	mov	r1, r3
 800362e:	f7fe feff 	bl	8002430 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003632:	f7ff fa0f 	bl	8002a54 <xTaskResumeAll>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <prvProcessTimerOrBlockTask+0x98>)
 800363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	f3bf 8f6f 	isb	sy
}
 800364c:	e001      	b.n	8003652 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800364e:	f7ff fa01 	bl	8002a54 <xTaskResumeAll>
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000894 	.word	0x20000894
 8003660:	20000898 	.word	0x20000898
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <prvGetNextExpireTime+0x44>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <prvGetNextExpireTime+0x16>
 800367a:	2201      	movs	r2, #1
 800367c:	e000      	b.n	8003680 <prvGetNextExpireTime+0x18>
 800367e:	2200      	movs	r2, #0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800368c:	4b07      	ldr	r3, [pc, #28]	; (80036ac <prvGetNextExpireTime+0x44>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e001      	b.n	800369c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800369c:	68fb      	ldr	r3, [r7, #12]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000890 	.word	0x20000890

080036b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036b8:	f7ff fa68 	bl	8002b8c <xTaskGetTickCount>
 80036bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <prvSampleTimeNow+0x3c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d205      	bcs.n	80036d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036c8:	f000 f918 	bl	80038fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e002      	b.n	80036da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <prvSampleTimeNow+0x3c>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200008a0 	.word	0x200008a0

080036f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	429a      	cmp	r2, r3
 8003714:	d812      	bhi.n	800373c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d302      	bcc.n	800372a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e01b      	b.n	8003762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <prvInsertTimerInActiveList+0x7c>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3304      	adds	r3, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f7fe f97c 	bl	8001a32 <vListInsert>
 800373a:	e012      	b.n	8003762 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d206      	bcs.n	8003752 <prvInsertTimerInActiveList+0x62>
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800374c:	2301      	movs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e007      	b.n	8003762 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <prvInsertTimerInActiveList+0x80>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3304      	adds	r3, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f7fe f968 	bl	8001a32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003762:	697b      	ldr	r3, [r7, #20]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000894 	.word	0x20000894
 8003770:	20000890 	.word	0x20000890

08003774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	; 0x30
 8003778:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800377a:	e0ac      	b.n	80038d6 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f2c0 80a8 	blt.w	80038d4 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	3304      	adds	r3, #4
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe f985 	bl	8001aa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff87 	bl	80036b0 <prvSampleTimeNow>
 80037a2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	f200 8095 	bhi.w	80038d6 <prvProcessReceivedCommands+0x162>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <prvProcessReceivedCommands+0x40>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037dd 	.word	0x080037dd
 80037c0:	0800384f 	.word	0x0800384f
 80037c4:	08003863 	.word	0x08003863
 80037c8:	080038ab 	.word	0x080038ab
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037dd 	.word	0x080037dd
 80037d4:	0800384f 	.word	0x0800384f
 80037d8:	08003863 	.word	0x08003863
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	18d1      	adds	r1, r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a3a      	ldr	r2, [r7, #32]
 80037fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037fc:	f7ff ff78 	bl	80036f0 <prvInsertTimerInActiveList>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d067      	beq.n	80038d6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800380c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05c      	beq.n	80038d6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	441a      	add	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2300      	movs	r3, #0
 800382a:	2100      	movs	r1, #0
 800382c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800382e:	f7ff fe23 	bl	8003478 <xTimerGenericCommand>
 8003832:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d14d      	bne.n	80038d6 <prvProcessReceivedCommands+0x162>
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e7fe      	b.n	800384c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	b2da      	uxtb	r2, r3
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8003860:	e039      	b.n	80038d6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	b2da      	uxtb	r2, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d109      	bne.n	8003896 <prvProcessReceivedCommands+0x122>
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e7fe      	b.n	8003894 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	18d1      	adds	r1, r2, r3
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	6a3a      	ldr	r2, [r7, #32]
 80038a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a4:	f7ff ff24 	bl	80036f0 <prvInsertTimerInActiveList>
					break;
 80038a8:	e015      	b.n	80038d6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80038b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ba:	f000 fbc3 	bl	8004044 <vPortFree>
 80038be:	e00a      	b.n	80038d6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80038d2:	e000      	b.n	80038d6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80038d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <prvProcessReceivedCommands+0x184>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f107 0108 	add.w	r1, r7, #8
 80038de:	2200      	movs	r2, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fb91 	bl	8002008 <xQueueReceive>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f47f af47 	bne.w	800377c <prvProcessReceivedCommands+0x8>
	}
}
 80038ee:	bf00      	nop
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000898 	.word	0x20000898

080038fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003902:	e047      	b.n	8003994 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <prvSwitchTimerLists+0xc0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800390e:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <prvSwitchTimerLists+0xc0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe f8c1 	bl	8001aa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02d      	beq.n	8003994 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	429a      	cmp	r2, r3
 8003948:	d90e      	bls.n	8003968 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003956:	4b19      	ldr	r3, [pc, #100]	; (80039bc <prvSwitchTimerLists+0xc0>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3304      	adds	r3, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f7fe f866 	bl	8001a32 <vListInsert>
 8003966:	e015      	b.n	8003994 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	2100      	movs	r1, #0
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff fd80 	bl	8003478 <xTimerGenericCommand>
 8003978:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <prvSwitchTimerLists+0x98>
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	e7fe      	b.n	8003992 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <prvSwitchTimerLists+0xc0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1b2      	bne.n	8003904 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <prvSwitchTimerLists+0xc0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <prvSwitchTimerLists+0xc4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <prvSwitchTimerLists+0xc0>)
 80039aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80039ac:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <prvSwitchTimerLists+0xc4>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6013      	str	r3, [r2, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000890 	.word	0x20000890
 80039c0:	20000894 	.word	0x20000894

080039c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80039ca:	f000 f95f 	bl	8003c8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <prvCheckForValidListAndQueue+0x60>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d120      	bne.n	8003a18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80039d6:	4814      	ldr	r0, [pc, #80]	; (8003a28 <prvCheckForValidListAndQueue+0x64>)
 80039d8:	f7fd ffda 	bl	8001990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80039dc:	4813      	ldr	r0, [pc, #76]	; (8003a2c <prvCheckForValidListAndQueue+0x68>)
 80039de:	f7fd ffd7 	bl	8001990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <prvCheckForValidListAndQueue+0x6c>)
 80039e4:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <prvCheckForValidListAndQueue+0x64>)
 80039e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <prvCheckForValidListAndQueue+0x70>)
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <prvCheckForValidListAndQueue+0x68>)
 80039ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <prvCheckForValidListAndQueue+0x74>)
 80039f4:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <prvCheckForValidListAndQueue+0x78>)
 80039f6:	210c      	movs	r1, #12
 80039f8:	200a      	movs	r0, #10
 80039fa:	f7fe f8e5 	bl	8001bc8 <xQueueGenericCreateStatic>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <prvCheckForValidListAndQueue+0x60>)
 8003a02:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <prvCheckForValidListAndQueue+0x60>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <prvCheckForValidListAndQueue+0x60>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	490b      	ldr	r1, [pc, #44]	; (8003a40 <prvCheckForValidListAndQueue+0x7c>)
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fce4 	bl	80023e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a18:	f000 f966 	bl	8003ce8 <vPortExitCritical>
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000898 	.word	0x20000898
 8003a28:	20000868 	.word	0x20000868
 8003a2c:	2000087c 	.word	0x2000087c
 8003a30:	20000890 	.word	0x20000890
 8003a34:	20000894 	.word	0x20000894
 8003a38:	2000091c 	.word	0x2000091c
 8003a3c:	200008a4 	.word	0x200008a4
 8003a40:	08004c54 	.word	0x08004c54

08003a44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3b04      	subs	r3, #4
 8003a54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b04      	subs	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3b04      	subs	r3, #4
 8003a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <pxPortInitialiseStack+0x64>)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3b14      	subs	r3, #20
 8003a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3b04      	subs	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f06f 0202 	mvn.w	r2, #2
 8003a92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3b20      	subs	r3, #32
 8003a98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	08003aad 	.word	0x08003aad

08003aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <prvTaskExitError+0x50>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d009      	beq.n	8003ad4 <prvTaskExitError+0x28>
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	e7fe      	b.n	8003ad2 <prvTaskExitError+0x26>
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ae6:	bf00      	nop
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0fc      	beq.n	8003ae8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	2000000c 	.word	0x2000000c

08003b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <pxCurrentTCBConst2>)
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	6808      	ldr	r0, [r1, #0]
 8003b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0a:	f380 8809 	msr	PSP, r0
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f04f 0000 	mov.w	r0, #0
 8003b16:	f380 8811 	msr	BASEPRI, r0
 8003b1a:	4770      	bx	lr
 8003b1c:	f3af 8000 	nop.w

08003b20 <pxCurrentTCBConst2>:
 8003b20:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop

08003b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003b28:	4808      	ldr	r0, [pc, #32]	; (8003b4c <prvPortStartFirstTask+0x24>)
 8003b2a:	6800      	ldr	r0, [r0, #0]
 8003b2c:	6800      	ldr	r0, [r0, #0]
 8003b2e:	f380 8808 	msr	MSP, r0
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f380 8814 	msr	CONTROL, r0
 8003b3a:	b662      	cpsie	i
 8003b3c:	b661      	cpsie	f
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	df00      	svc	0
 8003b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b4a:	bf00      	nop
 8003b4c:	e000ed08 	.word	0xe000ed08

08003b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b56:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <xPortStartScheduler+0x118>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a44      	ldr	r2, [pc, #272]	; (8003c6c <xPortStartScheduler+0x11c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d109      	bne.n	8003b74 <xPortStartScheduler+0x24>
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e7fe      	b.n	8003b72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b74:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <xPortStartScheduler+0x118>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3d      	ldr	r2, [pc, #244]	; (8003c70 <xPortStartScheduler+0x120>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d109      	bne.n	8003b92 <xPortStartScheduler+0x42>
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e7fe      	b.n	8003b90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b92:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <xPortStartScheduler+0x124>)
 8003b94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	22ff      	movs	r2, #255	; 0xff
 8003ba2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <xPortStartScheduler+0x128>)
 8003bb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bba:	4b30      	ldr	r3, [pc, #192]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bc0:	e009      	b.n	8003bd6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	4a2c      	ldr	r2, [pc, #176]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003bca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b80      	cmp	r3, #128	; 0x80
 8003be0:	d0ef      	beq.n	8003bc2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1c3 0307 	rsb	r3, r3, #7
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d009      	beq.n	8003c02 <xPortStartScheduler+0xb2>
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	e7fe      	b.n	8003c00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003c0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c14:	4a19      	ldr	r2, [pc, #100]	; (8003c7c <xPortStartScheduler+0x12c>)
 8003c16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c20:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <xPortStartScheduler+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <xPortStartScheduler+0x130>)
 8003c26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <xPortStartScheduler+0x130>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <xPortStartScheduler+0x130>)
 8003c32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c38:	f000 f8d6 	bl	8003de8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <xPortStartScheduler+0x134>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c42:	f000 f8f5 	bl	8003e30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <xPortStartScheduler+0x138>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <xPortStartScheduler+0x138>)
 8003c4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c52:	f7ff ff69 	bl	8003b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c56:	f7ff f861 	bl	8002d1c <vTaskSwitchContext>
	prvTaskExitError();
 8003c5a:	f7ff ff27 	bl	8003aac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	e000ed00 	.word	0xe000ed00
 8003c6c:	410fc271 	.word	0x410fc271
 8003c70:	410fc270 	.word	0x410fc270
 8003c74:	e000e400 	.word	0xe000e400
 8003c78:	20000964 	.word	0x20000964
 8003c7c:	20000968 	.word	0x20000968
 8003c80:	e000ed20 	.word	0xe000ed20
 8003c84:	2000000c 	.word	0x2000000c
 8003c88:	e000ef34 	.word	0xe000ef34

08003c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <vPortEnterCritical+0x54>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <vPortEnterCritical+0x54>)
 8003cac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <vPortEnterCritical+0x54>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10e      	bne.n	8003cd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <vPortEnterCritical+0x58>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <vPortEnterCritical+0x48>
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	e7fe      	b.n	8003cd2 <vPortEnterCritical+0x46>
	}
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	2000000c 	.word	0x2000000c
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <vPortExitCritical+0x4c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <vPortExitCritical+0x22>
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	e7fe      	b.n	8003d08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <vPortExitCritical+0x4c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <vPortExitCritical+0x4c>)
 8003d12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <vPortExitCritical+0x4c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <vPortExitCritical+0x3e>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	2000000c 	.word	0x2000000c
	...

08003d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d40:	f3ef 8009 	mrs	r0, PSP
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <pxCurrentTCBConst>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	f01e 0f10 	tst.w	lr, #16
 8003d50:	bf08      	it	eq
 8003d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5a:	6010      	str	r0, [r2, #0]
 8003d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d64:	f380 8811 	msr	BASEPRI, r0
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f7fe ffd4 	bl	8002d1c <vTaskSwitchContext>
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f380 8811 	msr	BASEPRI, r0
 8003d7c:	bc09      	pop	{r0, r3}
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	6808      	ldr	r0, [r1, #0]
 8003d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d86:	f01e 0f10 	tst.w	lr, #16
 8003d8a:	bf08      	it	eq
 8003d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d90:	f380 8809 	msr	PSP, r0
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	f3af 8000 	nop.w

08003da0 <pxCurrentTCBConst>:
 8003da0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003dc0:	f7fe fef4 	bl	8002bac <xTaskIncrementTick>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <xPortSysTickHandler+0x3c>)
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <vPortSetupTimerInterrupt+0x34>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <vPortSetupTimerInterrupt+0x38>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <vPortSetupTimerInterrupt+0x3c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <vPortSetupTimerInterrupt+0x40>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <vPortSetupTimerInterrupt+0x44>)
 8003e06:	3b01      	subs	r3, #1
 8003e08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <vPortSetupTimerInterrupt+0x34>)
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	601a      	str	r2, [r3, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000e010 	.word	0xe000e010
 8003e20:	e000e018 	.word	0xe000e018
 8003e24:	20000000 	.word	0x20000000
 8003e28:	10624dd3 	.word	0x10624dd3
 8003e2c:	e000e014 	.word	0xe000e014

08003e30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e40 <vPortEnableVFP+0x10>
 8003e34:	6801      	ldr	r1, [r0, #0]
 8003e36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e3a:	6001      	str	r1, [r0, #0]
 8003e3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e3e:	bf00      	nop
 8003e40:	e000ed88 	.word	0xe000ed88

08003e44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e4a:	f3ef 8305 	mrs	r3, IPSR
 8003e4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	d913      	bls.n	8003e7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e56:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <vPortValidateInterruptPriority+0x6c>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e60:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <vPortValidateInterruptPriority+0x70>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	7afa      	ldrb	r2, [r7, #11]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d209      	bcs.n	8003e7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	e7fe      	b.n	8003e7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <vPortValidateInterruptPriority+0x74>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <vPortValidateInterruptPriority+0x78>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d909      	bls.n	8003ea2 <vPortValidateInterruptPriority+0x5e>
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	e7fe      	b.n	8003ea0 <vPortValidateInterruptPriority+0x5c>
	}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	e000e3f0 	.word	0xe000e3f0
 8003eb4:	20000964 	.word	0x20000964
 8003eb8:	e000ed0c 	.word	0xe000ed0c
 8003ebc:	20000968 	.word	0x20000968

08003ec0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ecc:	f7fe fdb4 	bl	8002a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ed0:	4b57      	ldr	r3, [pc, #348]	; (8004030 <pvPortMalloc+0x170>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ed8:	f000 f90c 	bl	80040f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003edc:	4b55      	ldr	r3, [pc, #340]	; (8004034 <pvPortMalloc+0x174>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 808c 	bne.w	8004002 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01c      	beq.n	8003f2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d013      	beq.n	8003f2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f023 0307 	bic.w	r3, r3, #7
 8003f08:	3308      	adds	r3, #8
 8003f0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <pvPortMalloc+0x6a>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e7fe      	b.n	8003f28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d068      	beq.n	8004002 <pvPortMalloc+0x142>
 8003f30:	4b41      	ldr	r3, [pc, #260]	; (8004038 <pvPortMalloc+0x178>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d863      	bhi.n	8004002 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f3a:	4b40      	ldr	r3, [pc, #256]	; (800403c <pvPortMalloc+0x17c>)
 8003f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <pvPortMalloc+0x17c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f44:	e004      	b.n	8003f50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d903      	bls.n	8003f62 <pvPortMalloc+0xa2>
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f1      	bne.n	8003f46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f62:	4b33      	ldr	r3, [pc, #204]	; (8004030 <pvPortMalloc+0x170>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d04a      	beq.n	8004002 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2208      	movs	r2, #8
 8003f72:	4413      	add	r3, r2
 8003f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1ad2      	subs	r2, r2, r3
 8003f86:	2308      	movs	r3, #8
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d91e      	bls.n	8003fcc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <pvPortMalloc+0xf4>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	e7fe      	b.n	8003fb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	1ad2      	subs	r2, r2, r3
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fc6:	69b8      	ldr	r0, [r7, #24]
 8003fc8:	f000 f8f6 	bl	80041b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <pvPortMalloc+0x178>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	4a18      	ldr	r2, [pc, #96]	; (8004038 <pvPortMalloc+0x178>)
 8003fd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <pvPortMalloc+0x178>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <pvPortMalloc+0x180>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d203      	bcs.n	8003fee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fe6:	4b14      	ldr	r3, [pc, #80]	; (8004038 <pvPortMalloc+0x178>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a15      	ldr	r2, [pc, #84]	; (8004040 <pvPortMalloc+0x180>)
 8003fec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <pvPortMalloc+0x174>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004002:	f7fe fd27 	bl	8002a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <pvPortMalloc+0x164>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e7fe      	b.n	8004022 <pvPortMalloc+0x162>
	return pvReturn;
 8004024:	69fb      	ldr	r3, [r7, #28]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3728      	adds	r7, #40	; 0x28
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20004574 	.word	0x20004574
 8004034:	20004580 	.word	0x20004580
 8004038:	20004578 	.word	0x20004578
 800403c:	2000456c 	.word	0x2000456c
 8004040:	2000457c 	.word	0x2000457c

08004044 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d046      	beq.n	80040e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004056:	2308      	movs	r3, #8
 8004058:	425b      	negs	r3, r3
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4413      	add	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <vPortFree+0xa8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <vPortFree+0x42>
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e7fe      	b.n	8004084 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <vPortFree+0x5e>
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	e7fe      	b.n	80040a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <vPortFree+0xa8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d019      	beq.n	80040e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d115      	bne.n	80040e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <vPortFree+0xa8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	401a      	ands	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040c8:	f7fe fcb6 	bl	8002a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <vPortFree+0xac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4413      	add	r3, r2
 80040d6:	4a06      	ldr	r2, [pc, #24]	; (80040f0 <vPortFree+0xac>)
 80040d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040da:	6938      	ldr	r0, [r7, #16]
 80040dc:	f000 f86c 	bl	80041b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80040e0:	f7fe fcb8 	bl	8002a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040e4:	bf00      	nop
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20004580 	.word	0x20004580
 80040f0:	20004578 	.word	0x20004578

080040f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80040fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <prvHeapInit+0xac>)
 8004102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3307      	adds	r3, #7
 8004112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0307 	bic.w	r3, r3, #7
 800411a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <prvHeapInit+0xac>)
 8004124:	4413      	add	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <prvHeapInit+0xb0>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004132:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <prvHeapInit+0xb0>)
 8004134:	2200      	movs	r2, #0
 8004136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004140:	2208      	movs	r2, #8
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <prvHeapInit+0xb4>)
 8004154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <prvHeapInit+0xb4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2200      	movs	r2, #0
 800415c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <prvHeapInit+0xb4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <prvHeapInit+0xb4>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <prvHeapInit+0xb8>)
 8004182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <prvHeapInit+0xbc>)
 800418a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <prvHeapInit+0xc0>)
 800418e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004192:	601a      	str	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	2000096c 	.word	0x2000096c
 80041a4:	2000456c 	.word	0x2000456c
 80041a8:	20004574 	.word	0x20004574
 80041ac:	2000457c 	.word	0x2000457c
 80041b0:	20004578 	.word	0x20004578
 80041b4:	20004580 	.word	0x20004580

080041b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041c0:	4b28      	ldr	r3, [pc, #160]	; (8004264 <prvInsertBlockIntoFreeList+0xac>)
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e002      	b.n	80041cc <prvInsertBlockIntoFreeList+0x14>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d8f7      	bhi.n	80041c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4413      	add	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d108      	bne.n	80041fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	441a      	add	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d118      	bne.n	8004240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b15      	ldr	r3, [pc, #84]	; (8004268 <prvInsertBlockIntoFreeList+0xb0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d00d      	beq.n	8004236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	441a      	add	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e008      	b.n	8004248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <prvInsertBlockIntoFreeList+0xb0>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	e003      	b.n	8004248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d002      	beq.n	8004256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	2000456c 	.word	0x2000456c
 8004268:	20004574 	.word	0x20004574

0800426c <__errno>:
 800426c:	4b01      	ldr	r3, [pc, #4]	; (8004274 <__errno+0x8>)
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000010 	.word	0x20000010

08004278 <__libc_init_array>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	4e0d      	ldr	r6, [pc, #52]	; (80042b0 <__libc_init_array+0x38>)
 800427c:	4c0d      	ldr	r4, [pc, #52]	; (80042b4 <__libc_init_array+0x3c>)
 800427e:	1ba4      	subs	r4, r4, r6
 8004280:	10a4      	asrs	r4, r4, #2
 8004282:	2500      	movs	r5, #0
 8004284:	42a5      	cmp	r5, r4
 8004286:	d109      	bne.n	800429c <__libc_init_array+0x24>
 8004288:	4e0b      	ldr	r6, [pc, #44]	; (80042b8 <__libc_init_array+0x40>)
 800428a:	4c0c      	ldr	r4, [pc, #48]	; (80042bc <__libc_init_array+0x44>)
 800428c:	f000 fc94 	bl	8004bb8 <_init>
 8004290:	1ba4      	subs	r4, r4, r6
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	2500      	movs	r5, #0
 8004296:	42a5      	cmp	r5, r4
 8004298:	d105      	bne.n	80042a6 <__libc_init_array+0x2e>
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042a0:	4798      	blx	r3
 80042a2:	3501      	adds	r5, #1
 80042a4:	e7ee      	b.n	8004284 <__libc_init_array+0xc>
 80042a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042aa:	4798      	blx	r3
 80042ac:	3501      	adds	r5, #1
 80042ae:	e7f2      	b.n	8004296 <__libc_init_array+0x1e>
 80042b0:	08004cd8 	.word	0x08004cd8
 80042b4:	08004cd8 	.word	0x08004cd8
 80042b8:	08004cd8 	.word	0x08004cd8
 80042bc:	08004cdc 	.word	0x08004cdc

080042c0 <memcpy>:
 80042c0:	b510      	push	{r4, lr}
 80042c2:	1e43      	subs	r3, r0, #1
 80042c4:	440a      	add	r2, r1
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d100      	bne.n	80042cc <memcpy+0xc>
 80042ca:	bd10      	pop	{r4, pc}
 80042cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042d4:	e7f7      	b.n	80042c6 <memcpy+0x6>

080042d6 <memset>:
 80042d6:	4402      	add	r2, r0
 80042d8:	4603      	mov	r3, r0
 80042da:	4293      	cmp	r3, r2
 80042dc:	d100      	bne.n	80042e0 <memset+0xa>
 80042de:	4770      	bx	lr
 80042e0:	f803 1b01 	strb.w	r1, [r3], #1
 80042e4:	e7f9      	b.n	80042da <memset+0x4>
	...

080042e8 <_puts_r>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	460e      	mov	r6, r1
 80042ec:	4605      	mov	r5, r0
 80042ee:	b118      	cbz	r0, 80042f8 <_puts_r+0x10>
 80042f0:	6983      	ldr	r3, [r0, #24]
 80042f2:	b90b      	cbnz	r3, 80042f8 <_puts_r+0x10>
 80042f4:	f000 fa0c 	bl	8004710 <__sinit>
 80042f8:	69ab      	ldr	r3, [r5, #24]
 80042fa:	68ac      	ldr	r4, [r5, #8]
 80042fc:	b913      	cbnz	r3, 8004304 <_puts_r+0x1c>
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 fa06 	bl	8004710 <__sinit>
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <_puts_r+0xac>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d117      	bne.n	800433a <_puts_r+0x52>
 800430a:	686c      	ldr	r4, [r5, #4]
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	071b      	lsls	r3, r3, #28
 8004310:	d51d      	bpl.n	800434e <_puts_r+0x66>
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	b1db      	cbz	r3, 800434e <_puts_r+0x66>
 8004316:	3e01      	subs	r6, #1
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800431e:	3b01      	subs	r3, #1
 8004320:	60a3      	str	r3, [r4, #8]
 8004322:	b9e9      	cbnz	r1, 8004360 <_puts_r+0x78>
 8004324:	2b00      	cmp	r3, #0
 8004326:	da2e      	bge.n	8004386 <_puts_r+0x9e>
 8004328:	4622      	mov	r2, r4
 800432a:	210a      	movs	r1, #10
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f83f 	bl	80043b0 <__swbuf_r>
 8004332:	3001      	adds	r0, #1
 8004334:	d011      	beq.n	800435a <_puts_r+0x72>
 8004336:	200a      	movs	r0, #10
 8004338:	e011      	b.n	800435e <_puts_r+0x76>
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <_puts_r+0xb0>)
 800433c:	429c      	cmp	r4, r3
 800433e:	d101      	bne.n	8004344 <_puts_r+0x5c>
 8004340:	68ac      	ldr	r4, [r5, #8]
 8004342:	e7e3      	b.n	800430c <_puts_r+0x24>
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <_puts_r+0xb4>)
 8004346:	429c      	cmp	r4, r3
 8004348:	bf08      	it	eq
 800434a:	68ec      	ldreq	r4, [r5, #12]
 800434c:	e7de      	b.n	800430c <_puts_r+0x24>
 800434e:	4621      	mov	r1, r4
 8004350:	4628      	mov	r0, r5
 8004352:	f000 f87f 	bl	8004454 <__swsetup_r>
 8004356:	2800      	cmp	r0, #0
 8004358:	d0dd      	beq.n	8004316 <_puts_r+0x2e>
 800435a:	f04f 30ff 	mov.w	r0, #4294967295
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	2b00      	cmp	r3, #0
 8004362:	da04      	bge.n	800436e <_puts_r+0x86>
 8004364:	69a2      	ldr	r2, [r4, #24]
 8004366:	429a      	cmp	r2, r3
 8004368:	dc06      	bgt.n	8004378 <_puts_r+0x90>
 800436a:	290a      	cmp	r1, #10
 800436c:	d004      	beq.n	8004378 <_puts_r+0x90>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	6022      	str	r2, [r4, #0]
 8004374:	7019      	strb	r1, [r3, #0]
 8004376:	e7cf      	b.n	8004318 <_puts_r+0x30>
 8004378:	4622      	mov	r2, r4
 800437a:	4628      	mov	r0, r5
 800437c:	f000 f818 	bl	80043b0 <__swbuf_r>
 8004380:	3001      	adds	r0, #1
 8004382:	d1c9      	bne.n	8004318 <_puts_r+0x30>
 8004384:	e7e9      	b.n	800435a <_puts_r+0x72>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	200a      	movs	r0, #10
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	6022      	str	r2, [r4, #0]
 800438e:	7018      	strb	r0, [r3, #0]
 8004390:	e7e5      	b.n	800435e <_puts_r+0x76>
 8004392:	bf00      	nop
 8004394:	08004c90 	.word	0x08004c90
 8004398:	08004cb0 	.word	0x08004cb0
 800439c:	08004c70 	.word	0x08004c70

080043a0 <puts>:
 80043a0:	4b02      	ldr	r3, [pc, #8]	; (80043ac <puts+0xc>)
 80043a2:	4601      	mov	r1, r0
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f7ff bf9f 	b.w	80042e8 <_puts_r>
 80043aa:	bf00      	nop
 80043ac:	20000010 	.word	0x20000010

080043b0 <__swbuf_r>:
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b2:	460e      	mov	r6, r1
 80043b4:	4614      	mov	r4, r2
 80043b6:	4605      	mov	r5, r0
 80043b8:	b118      	cbz	r0, 80043c2 <__swbuf_r+0x12>
 80043ba:	6983      	ldr	r3, [r0, #24]
 80043bc:	b90b      	cbnz	r3, 80043c2 <__swbuf_r+0x12>
 80043be:	f000 f9a7 	bl	8004710 <__sinit>
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <__swbuf_r+0x98>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	d12a      	bne.n	800441e <__swbuf_r+0x6e>
 80043c8:	686c      	ldr	r4, [r5, #4]
 80043ca:	69a3      	ldr	r3, [r4, #24]
 80043cc:	60a3      	str	r3, [r4, #8]
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	071a      	lsls	r2, r3, #28
 80043d2:	d52e      	bpl.n	8004432 <__swbuf_r+0x82>
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	b363      	cbz	r3, 8004432 <__swbuf_r+0x82>
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	6820      	ldr	r0, [r4, #0]
 80043dc:	1ac0      	subs	r0, r0, r3
 80043de:	6963      	ldr	r3, [r4, #20]
 80043e0:	b2f6      	uxtb	r6, r6
 80043e2:	4283      	cmp	r3, r0
 80043e4:	4637      	mov	r7, r6
 80043e6:	dc04      	bgt.n	80043f2 <__swbuf_r+0x42>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 f926 	bl	800463c <_fflush_r>
 80043f0:	bb28      	cbnz	r0, 800443e <__swbuf_r+0x8e>
 80043f2:	68a3      	ldr	r3, [r4, #8]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	60a3      	str	r3, [r4, #8]
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	6022      	str	r2, [r4, #0]
 80043fe:	701e      	strb	r6, [r3, #0]
 8004400:	6963      	ldr	r3, [r4, #20]
 8004402:	3001      	adds	r0, #1
 8004404:	4283      	cmp	r3, r0
 8004406:	d004      	beq.n	8004412 <__swbuf_r+0x62>
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	07db      	lsls	r3, r3, #31
 800440c:	d519      	bpl.n	8004442 <__swbuf_r+0x92>
 800440e:	2e0a      	cmp	r6, #10
 8004410:	d117      	bne.n	8004442 <__swbuf_r+0x92>
 8004412:	4621      	mov	r1, r4
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f911 	bl	800463c <_fflush_r>
 800441a:	b190      	cbz	r0, 8004442 <__swbuf_r+0x92>
 800441c:	e00f      	b.n	800443e <__swbuf_r+0x8e>
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <__swbuf_r+0x9c>)
 8004420:	429c      	cmp	r4, r3
 8004422:	d101      	bne.n	8004428 <__swbuf_r+0x78>
 8004424:	68ac      	ldr	r4, [r5, #8]
 8004426:	e7d0      	b.n	80043ca <__swbuf_r+0x1a>
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <__swbuf_r+0xa0>)
 800442a:	429c      	cmp	r4, r3
 800442c:	bf08      	it	eq
 800442e:	68ec      	ldreq	r4, [r5, #12]
 8004430:	e7cb      	b.n	80043ca <__swbuf_r+0x1a>
 8004432:	4621      	mov	r1, r4
 8004434:	4628      	mov	r0, r5
 8004436:	f000 f80d 	bl	8004454 <__swsetup_r>
 800443a:	2800      	cmp	r0, #0
 800443c:	d0cc      	beq.n	80043d8 <__swbuf_r+0x28>
 800443e:	f04f 37ff 	mov.w	r7, #4294967295
 8004442:	4638      	mov	r0, r7
 8004444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004446:	bf00      	nop
 8004448:	08004c90 	.word	0x08004c90
 800444c:	08004cb0 	.word	0x08004cb0
 8004450:	08004c70 	.word	0x08004c70

08004454 <__swsetup_r>:
 8004454:	4b32      	ldr	r3, [pc, #200]	; (8004520 <__swsetup_r+0xcc>)
 8004456:	b570      	push	{r4, r5, r6, lr}
 8004458:	681d      	ldr	r5, [r3, #0]
 800445a:	4606      	mov	r6, r0
 800445c:	460c      	mov	r4, r1
 800445e:	b125      	cbz	r5, 800446a <__swsetup_r+0x16>
 8004460:	69ab      	ldr	r3, [r5, #24]
 8004462:	b913      	cbnz	r3, 800446a <__swsetup_r+0x16>
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f953 	bl	8004710 <__sinit>
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <__swsetup_r+0xd0>)
 800446c:	429c      	cmp	r4, r3
 800446e:	d10f      	bne.n	8004490 <__swsetup_r+0x3c>
 8004470:	686c      	ldr	r4, [r5, #4]
 8004472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004476:	b29a      	uxth	r2, r3
 8004478:	0715      	lsls	r5, r2, #28
 800447a:	d42c      	bmi.n	80044d6 <__swsetup_r+0x82>
 800447c:	06d0      	lsls	r0, r2, #27
 800447e:	d411      	bmi.n	80044a4 <__swsetup_r+0x50>
 8004480:	2209      	movs	r2, #9
 8004482:	6032      	str	r2, [r6, #0]
 8004484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	f04f 30ff 	mov.w	r0, #4294967295
 800448e:	e03e      	b.n	800450e <__swsetup_r+0xba>
 8004490:	4b25      	ldr	r3, [pc, #148]	; (8004528 <__swsetup_r+0xd4>)
 8004492:	429c      	cmp	r4, r3
 8004494:	d101      	bne.n	800449a <__swsetup_r+0x46>
 8004496:	68ac      	ldr	r4, [r5, #8]
 8004498:	e7eb      	b.n	8004472 <__swsetup_r+0x1e>
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <__swsetup_r+0xd8>)
 800449c:	429c      	cmp	r4, r3
 800449e:	bf08      	it	eq
 80044a0:	68ec      	ldreq	r4, [r5, #12]
 80044a2:	e7e6      	b.n	8004472 <__swsetup_r+0x1e>
 80044a4:	0751      	lsls	r1, r2, #29
 80044a6:	d512      	bpl.n	80044ce <__swsetup_r+0x7a>
 80044a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044aa:	b141      	cbz	r1, 80044be <__swsetup_r+0x6a>
 80044ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044b0:	4299      	cmp	r1, r3
 80044b2:	d002      	beq.n	80044ba <__swsetup_r+0x66>
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 fa19 	bl	80048ec <_free_r>
 80044ba:	2300      	movs	r3, #0
 80044bc:	6363      	str	r3, [r4, #52]	; 0x34
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044c4:	81a3      	strh	r3, [r4, #12]
 80044c6:	2300      	movs	r3, #0
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f043 0308 	orr.w	r3, r3, #8
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	6923      	ldr	r3, [r4, #16]
 80044d8:	b94b      	cbnz	r3, 80044ee <__swsetup_r+0x9a>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e4:	d003      	beq.n	80044ee <__swsetup_r+0x9a>
 80044e6:	4621      	mov	r1, r4
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 f9bf 	bl	800486c <__smakebuf_r>
 80044ee:	89a2      	ldrh	r2, [r4, #12]
 80044f0:	f012 0301 	ands.w	r3, r2, #1
 80044f4:	d00c      	beq.n	8004510 <__swsetup_r+0xbc>
 80044f6:	2300      	movs	r3, #0
 80044f8:	60a3      	str	r3, [r4, #8]
 80044fa:	6963      	ldr	r3, [r4, #20]
 80044fc:	425b      	negs	r3, r3
 80044fe:	61a3      	str	r3, [r4, #24]
 8004500:	6923      	ldr	r3, [r4, #16]
 8004502:	b953      	cbnz	r3, 800451a <__swsetup_r+0xc6>
 8004504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004508:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800450c:	d1ba      	bne.n	8004484 <__swsetup_r+0x30>
 800450e:	bd70      	pop	{r4, r5, r6, pc}
 8004510:	0792      	lsls	r2, r2, #30
 8004512:	bf58      	it	pl
 8004514:	6963      	ldrpl	r3, [r4, #20]
 8004516:	60a3      	str	r3, [r4, #8]
 8004518:	e7f2      	b.n	8004500 <__swsetup_r+0xac>
 800451a:	2000      	movs	r0, #0
 800451c:	e7f7      	b.n	800450e <__swsetup_r+0xba>
 800451e:	bf00      	nop
 8004520:	20000010 	.word	0x20000010
 8004524:	08004c90 	.word	0x08004c90
 8004528:	08004cb0 	.word	0x08004cb0
 800452c:	08004c70 	.word	0x08004c70

08004530 <__sflush_r>:
 8004530:	898a      	ldrh	r2, [r1, #12]
 8004532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	4605      	mov	r5, r0
 8004538:	0710      	lsls	r0, r2, #28
 800453a:	460c      	mov	r4, r1
 800453c:	d458      	bmi.n	80045f0 <__sflush_r+0xc0>
 800453e:	684b      	ldr	r3, [r1, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	dc05      	bgt.n	8004550 <__sflush_r+0x20>
 8004544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	dc02      	bgt.n	8004550 <__sflush_r+0x20>
 800454a:	2000      	movs	r0, #0
 800454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004552:	2e00      	cmp	r6, #0
 8004554:	d0f9      	beq.n	800454a <__sflush_r+0x1a>
 8004556:	2300      	movs	r3, #0
 8004558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800455c:	682f      	ldr	r7, [r5, #0]
 800455e:	6a21      	ldr	r1, [r4, #32]
 8004560:	602b      	str	r3, [r5, #0]
 8004562:	d032      	beq.n	80045ca <__sflush_r+0x9a>
 8004564:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004566:	89a3      	ldrh	r3, [r4, #12]
 8004568:	075a      	lsls	r2, r3, #29
 800456a:	d505      	bpl.n	8004578 <__sflush_r+0x48>
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	1ac0      	subs	r0, r0, r3
 8004570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004572:	b10b      	cbz	r3, 8004578 <__sflush_r+0x48>
 8004574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004576:	1ac0      	subs	r0, r0, r3
 8004578:	2300      	movs	r3, #0
 800457a:	4602      	mov	r2, r0
 800457c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800457e:	6a21      	ldr	r1, [r4, #32]
 8004580:	4628      	mov	r0, r5
 8004582:	47b0      	blx	r6
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	d106      	bne.n	8004598 <__sflush_r+0x68>
 800458a:	6829      	ldr	r1, [r5, #0]
 800458c:	291d      	cmp	r1, #29
 800458e:	d848      	bhi.n	8004622 <__sflush_r+0xf2>
 8004590:	4a29      	ldr	r2, [pc, #164]	; (8004638 <__sflush_r+0x108>)
 8004592:	40ca      	lsrs	r2, r1
 8004594:	07d6      	lsls	r6, r2, #31
 8004596:	d544      	bpl.n	8004622 <__sflush_r+0xf2>
 8004598:	2200      	movs	r2, #0
 800459a:	6062      	str	r2, [r4, #4]
 800459c:	04d9      	lsls	r1, r3, #19
 800459e:	6922      	ldr	r2, [r4, #16]
 80045a0:	6022      	str	r2, [r4, #0]
 80045a2:	d504      	bpl.n	80045ae <__sflush_r+0x7e>
 80045a4:	1c42      	adds	r2, r0, #1
 80045a6:	d101      	bne.n	80045ac <__sflush_r+0x7c>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b903      	cbnz	r3, 80045ae <__sflush_r+0x7e>
 80045ac:	6560      	str	r0, [r4, #84]	; 0x54
 80045ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045b0:	602f      	str	r7, [r5, #0]
 80045b2:	2900      	cmp	r1, #0
 80045b4:	d0c9      	beq.n	800454a <__sflush_r+0x1a>
 80045b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045ba:	4299      	cmp	r1, r3
 80045bc:	d002      	beq.n	80045c4 <__sflush_r+0x94>
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f994 	bl	80048ec <_free_r>
 80045c4:	2000      	movs	r0, #0
 80045c6:	6360      	str	r0, [r4, #52]	; 0x34
 80045c8:	e7c0      	b.n	800454c <__sflush_r+0x1c>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4628      	mov	r0, r5
 80045ce:	47b0      	blx	r6
 80045d0:	1c41      	adds	r1, r0, #1
 80045d2:	d1c8      	bne.n	8004566 <__sflush_r+0x36>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0c5      	beq.n	8004566 <__sflush_r+0x36>
 80045da:	2b1d      	cmp	r3, #29
 80045dc:	d001      	beq.n	80045e2 <__sflush_r+0xb2>
 80045de:	2b16      	cmp	r3, #22
 80045e0:	d101      	bne.n	80045e6 <__sflush_r+0xb6>
 80045e2:	602f      	str	r7, [r5, #0]
 80045e4:	e7b1      	b.n	800454a <__sflush_r+0x1a>
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	e7ad      	b.n	800454c <__sflush_r+0x1c>
 80045f0:	690f      	ldr	r7, [r1, #16]
 80045f2:	2f00      	cmp	r7, #0
 80045f4:	d0a9      	beq.n	800454a <__sflush_r+0x1a>
 80045f6:	0793      	lsls	r3, r2, #30
 80045f8:	680e      	ldr	r6, [r1, #0]
 80045fa:	bf08      	it	eq
 80045fc:	694b      	ldreq	r3, [r1, #20]
 80045fe:	600f      	str	r7, [r1, #0]
 8004600:	bf18      	it	ne
 8004602:	2300      	movne	r3, #0
 8004604:	eba6 0807 	sub.w	r8, r6, r7
 8004608:	608b      	str	r3, [r1, #8]
 800460a:	f1b8 0f00 	cmp.w	r8, #0
 800460e:	dd9c      	ble.n	800454a <__sflush_r+0x1a>
 8004610:	4643      	mov	r3, r8
 8004612:	463a      	mov	r2, r7
 8004614:	6a21      	ldr	r1, [r4, #32]
 8004616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004618:	4628      	mov	r0, r5
 800461a:	47b0      	blx	r6
 800461c:	2800      	cmp	r0, #0
 800461e:	dc06      	bgt.n	800462e <__sflush_r+0xfe>
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004626:	81a3      	strh	r3, [r4, #12]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	e78e      	b.n	800454c <__sflush_r+0x1c>
 800462e:	4407      	add	r7, r0
 8004630:	eba8 0800 	sub.w	r8, r8, r0
 8004634:	e7e9      	b.n	800460a <__sflush_r+0xda>
 8004636:	bf00      	nop
 8004638:	20400001 	.word	0x20400001

0800463c <_fflush_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	690b      	ldr	r3, [r1, #16]
 8004640:	4605      	mov	r5, r0
 8004642:	460c      	mov	r4, r1
 8004644:	b1db      	cbz	r3, 800467e <_fflush_r+0x42>
 8004646:	b118      	cbz	r0, 8004650 <_fflush_r+0x14>
 8004648:	6983      	ldr	r3, [r0, #24]
 800464a:	b90b      	cbnz	r3, 8004650 <_fflush_r+0x14>
 800464c:	f000 f860 	bl	8004710 <__sinit>
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <_fflush_r+0x48>)
 8004652:	429c      	cmp	r4, r3
 8004654:	d109      	bne.n	800466a <_fflush_r+0x2e>
 8004656:	686c      	ldr	r4, [r5, #4]
 8004658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800465c:	b17b      	cbz	r3, 800467e <_fflush_r+0x42>
 800465e:	4621      	mov	r1, r4
 8004660:	4628      	mov	r0, r5
 8004662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004666:	f7ff bf63 	b.w	8004530 <__sflush_r>
 800466a:	4b07      	ldr	r3, [pc, #28]	; (8004688 <_fflush_r+0x4c>)
 800466c:	429c      	cmp	r4, r3
 800466e:	d101      	bne.n	8004674 <_fflush_r+0x38>
 8004670:	68ac      	ldr	r4, [r5, #8]
 8004672:	e7f1      	b.n	8004658 <_fflush_r+0x1c>
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <_fflush_r+0x50>)
 8004676:	429c      	cmp	r4, r3
 8004678:	bf08      	it	eq
 800467a:	68ec      	ldreq	r4, [r5, #12]
 800467c:	e7ec      	b.n	8004658 <_fflush_r+0x1c>
 800467e:	2000      	movs	r0, #0
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	bf00      	nop
 8004684:	08004c90 	.word	0x08004c90
 8004688:	08004cb0 	.word	0x08004cb0
 800468c:	08004c70 	.word	0x08004c70

08004690 <std>:
 8004690:	2300      	movs	r3, #0
 8004692:	b510      	push	{r4, lr}
 8004694:	4604      	mov	r4, r0
 8004696:	e9c0 3300 	strd	r3, r3, [r0]
 800469a:	6083      	str	r3, [r0, #8]
 800469c:	8181      	strh	r1, [r0, #12]
 800469e:	6643      	str	r3, [r0, #100]	; 0x64
 80046a0:	81c2      	strh	r2, [r0, #14]
 80046a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046a6:	6183      	str	r3, [r0, #24]
 80046a8:	4619      	mov	r1, r3
 80046aa:	2208      	movs	r2, #8
 80046ac:	305c      	adds	r0, #92	; 0x5c
 80046ae:	f7ff fe12 	bl	80042d6 <memset>
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <std+0x38>)
 80046b4:	6263      	str	r3, [r4, #36]	; 0x24
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <std+0x3c>)
 80046b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <std+0x40>)
 80046bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <std+0x44>)
 80046c0:	6224      	str	r4, [r4, #32]
 80046c2:	6323      	str	r3, [r4, #48]	; 0x30
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	bf00      	nop
 80046c8:	08004a5d 	.word	0x08004a5d
 80046cc:	08004a7f 	.word	0x08004a7f
 80046d0:	08004ab7 	.word	0x08004ab7
 80046d4:	08004adb 	.word	0x08004adb

080046d8 <_cleanup_r>:
 80046d8:	4901      	ldr	r1, [pc, #4]	; (80046e0 <_cleanup_r+0x8>)
 80046da:	f000 b885 	b.w	80047e8 <_fwalk_reent>
 80046de:	bf00      	nop
 80046e0:	0800463d 	.word	0x0800463d

080046e4 <__sfmoreglue>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	1e4a      	subs	r2, r1, #1
 80046e8:	2568      	movs	r5, #104	; 0x68
 80046ea:	4355      	muls	r5, r2
 80046ec:	460e      	mov	r6, r1
 80046ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046f2:	f000 f949 	bl	8004988 <_malloc_r>
 80046f6:	4604      	mov	r4, r0
 80046f8:	b140      	cbz	r0, 800470c <__sfmoreglue+0x28>
 80046fa:	2100      	movs	r1, #0
 80046fc:	e9c0 1600 	strd	r1, r6, [r0]
 8004700:	300c      	adds	r0, #12
 8004702:	60a0      	str	r0, [r4, #8]
 8004704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004708:	f7ff fde5 	bl	80042d6 <memset>
 800470c:	4620      	mov	r0, r4
 800470e:	bd70      	pop	{r4, r5, r6, pc}

08004710 <__sinit>:
 8004710:	6983      	ldr	r3, [r0, #24]
 8004712:	b510      	push	{r4, lr}
 8004714:	4604      	mov	r4, r0
 8004716:	bb33      	cbnz	r3, 8004766 <__sinit+0x56>
 8004718:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800471c:	6503      	str	r3, [r0, #80]	; 0x50
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <__sinit+0x58>)
 8004720:	4a12      	ldr	r2, [pc, #72]	; (800476c <__sinit+0x5c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6282      	str	r2, [r0, #40]	; 0x28
 8004726:	4298      	cmp	r0, r3
 8004728:	bf04      	itt	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	6183      	streq	r3, [r0, #24]
 800472e:	f000 f81f 	bl	8004770 <__sfp>
 8004732:	6060      	str	r0, [r4, #4]
 8004734:	4620      	mov	r0, r4
 8004736:	f000 f81b 	bl	8004770 <__sfp>
 800473a:	60a0      	str	r0, [r4, #8]
 800473c:	4620      	mov	r0, r4
 800473e:	f000 f817 	bl	8004770 <__sfp>
 8004742:	2200      	movs	r2, #0
 8004744:	60e0      	str	r0, [r4, #12]
 8004746:	2104      	movs	r1, #4
 8004748:	6860      	ldr	r0, [r4, #4]
 800474a:	f7ff ffa1 	bl	8004690 <std>
 800474e:	2201      	movs	r2, #1
 8004750:	2109      	movs	r1, #9
 8004752:	68a0      	ldr	r0, [r4, #8]
 8004754:	f7ff ff9c 	bl	8004690 <std>
 8004758:	2202      	movs	r2, #2
 800475a:	2112      	movs	r1, #18
 800475c:	68e0      	ldr	r0, [r4, #12]
 800475e:	f7ff ff97 	bl	8004690 <std>
 8004762:	2301      	movs	r3, #1
 8004764:	61a3      	str	r3, [r4, #24]
 8004766:	bd10      	pop	{r4, pc}
 8004768:	08004c6c 	.word	0x08004c6c
 800476c:	080046d9 	.word	0x080046d9

08004770 <__sfp>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <__sfp+0x70>)
 8004774:	681e      	ldr	r6, [r3, #0]
 8004776:	69b3      	ldr	r3, [r6, #24]
 8004778:	4607      	mov	r7, r0
 800477a:	b913      	cbnz	r3, 8004782 <__sfp+0x12>
 800477c:	4630      	mov	r0, r6
 800477e:	f7ff ffc7 	bl	8004710 <__sinit>
 8004782:	3648      	adds	r6, #72	; 0x48
 8004784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004788:	3b01      	subs	r3, #1
 800478a:	d503      	bpl.n	8004794 <__sfp+0x24>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	b133      	cbz	r3, 800479e <__sfp+0x2e>
 8004790:	6836      	ldr	r6, [r6, #0]
 8004792:	e7f7      	b.n	8004784 <__sfp+0x14>
 8004794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004798:	b16d      	cbz	r5, 80047b6 <__sfp+0x46>
 800479a:	3468      	adds	r4, #104	; 0x68
 800479c:	e7f4      	b.n	8004788 <__sfp+0x18>
 800479e:	2104      	movs	r1, #4
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ff9f 	bl	80046e4 <__sfmoreglue>
 80047a6:	6030      	str	r0, [r6, #0]
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d1f1      	bne.n	8004790 <__sfp+0x20>
 80047ac:	230c      	movs	r3, #12
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	4604      	mov	r4, r0
 80047b2:	4620      	mov	r0, r4
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <__sfp+0x74>)
 80047b8:	6665      	str	r5, [r4, #100]	; 0x64
 80047ba:	e9c4 5500 	strd	r5, r5, [r4]
 80047be:	60a5      	str	r5, [r4, #8]
 80047c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80047c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80047c8:	2208      	movs	r2, #8
 80047ca:	4629      	mov	r1, r5
 80047cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047d0:	f7ff fd81 	bl	80042d6 <memset>
 80047d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047dc:	e7e9      	b.n	80047b2 <__sfp+0x42>
 80047de:	bf00      	nop
 80047e0:	08004c6c 	.word	0x08004c6c
 80047e4:	ffff0001 	.word	0xffff0001

080047e8 <_fwalk_reent>:
 80047e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ec:	4680      	mov	r8, r0
 80047ee:	4689      	mov	r9, r1
 80047f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047f4:	2600      	movs	r6, #0
 80047f6:	b914      	cbnz	r4, 80047fe <_fwalk_reent+0x16>
 80047f8:	4630      	mov	r0, r6
 80047fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004802:	3f01      	subs	r7, #1
 8004804:	d501      	bpl.n	800480a <_fwalk_reent+0x22>
 8004806:	6824      	ldr	r4, [r4, #0]
 8004808:	e7f5      	b.n	80047f6 <_fwalk_reent+0xe>
 800480a:	89ab      	ldrh	r3, [r5, #12]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d907      	bls.n	8004820 <_fwalk_reent+0x38>
 8004810:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004814:	3301      	adds	r3, #1
 8004816:	d003      	beq.n	8004820 <_fwalk_reent+0x38>
 8004818:	4629      	mov	r1, r5
 800481a:	4640      	mov	r0, r8
 800481c:	47c8      	blx	r9
 800481e:	4306      	orrs	r6, r0
 8004820:	3568      	adds	r5, #104	; 0x68
 8004822:	e7ee      	b.n	8004802 <_fwalk_reent+0x1a>

08004824 <__swhatbuf_r>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	460e      	mov	r6, r1
 8004828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482c:	2900      	cmp	r1, #0
 800482e:	b096      	sub	sp, #88	; 0x58
 8004830:	4614      	mov	r4, r2
 8004832:	461d      	mov	r5, r3
 8004834:	da07      	bge.n	8004846 <__swhatbuf_r+0x22>
 8004836:	2300      	movs	r3, #0
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	89b3      	ldrh	r3, [r6, #12]
 800483c:	061a      	lsls	r2, r3, #24
 800483e:	d410      	bmi.n	8004862 <__swhatbuf_r+0x3e>
 8004840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004844:	e00e      	b.n	8004864 <__swhatbuf_r+0x40>
 8004846:	466a      	mov	r2, sp
 8004848:	f000 f96e 	bl	8004b28 <_fstat_r>
 800484c:	2800      	cmp	r0, #0
 800484e:	dbf2      	blt.n	8004836 <__swhatbuf_r+0x12>
 8004850:	9a01      	ldr	r2, [sp, #4]
 8004852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800485a:	425a      	negs	r2, r3
 800485c:	415a      	adcs	r2, r3
 800485e:	602a      	str	r2, [r5, #0]
 8004860:	e7ee      	b.n	8004840 <__swhatbuf_r+0x1c>
 8004862:	2340      	movs	r3, #64	; 0x40
 8004864:	2000      	movs	r0, #0
 8004866:	6023      	str	r3, [r4, #0]
 8004868:	b016      	add	sp, #88	; 0x58
 800486a:	bd70      	pop	{r4, r5, r6, pc}

0800486c <__smakebuf_r>:
 800486c:	898b      	ldrh	r3, [r1, #12]
 800486e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004870:	079d      	lsls	r5, r3, #30
 8004872:	4606      	mov	r6, r0
 8004874:	460c      	mov	r4, r1
 8004876:	d507      	bpl.n	8004888 <__smakebuf_r+0x1c>
 8004878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	6123      	str	r3, [r4, #16]
 8004880:	2301      	movs	r3, #1
 8004882:	6163      	str	r3, [r4, #20]
 8004884:	b002      	add	sp, #8
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	ab01      	add	r3, sp, #4
 800488a:	466a      	mov	r2, sp
 800488c:	f7ff ffca 	bl	8004824 <__swhatbuf_r>
 8004890:	9900      	ldr	r1, [sp, #0]
 8004892:	4605      	mov	r5, r0
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f877 	bl	8004988 <_malloc_r>
 800489a:	b948      	cbnz	r0, 80048b0 <__smakebuf_r+0x44>
 800489c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a0:	059a      	lsls	r2, r3, #22
 80048a2:	d4ef      	bmi.n	8004884 <__smakebuf_r+0x18>
 80048a4:	f023 0303 	bic.w	r3, r3, #3
 80048a8:	f043 0302 	orr.w	r3, r3, #2
 80048ac:	81a3      	strh	r3, [r4, #12]
 80048ae:	e7e3      	b.n	8004878 <__smakebuf_r+0xc>
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <__smakebuf_r+0x7c>)
 80048b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	6020      	str	r0, [r4, #0]
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	9b00      	ldr	r3, [sp, #0]
 80048c0:	6163      	str	r3, [r4, #20]
 80048c2:	9b01      	ldr	r3, [sp, #4]
 80048c4:	6120      	str	r0, [r4, #16]
 80048c6:	b15b      	cbz	r3, 80048e0 <__smakebuf_r+0x74>
 80048c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048cc:	4630      	mov	r0, r6
 80048ce:	f000 f93d 	bl	8004b4c <_isatty_r>
 80048d2:	b128      	cbz	r0, 80048e0 <__smakebuf_r+0x74>
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	431d      	orrs	r5, r3
 80048e4:	81a5      	strh	r5, [r4, #12]
 80048e6:	e7cd      	b.n	8004884 <__smakebuf_r+0x18>
 80048e8:	080046d9 	.word	0x080046d9

080048ec <_free_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4605      	mov	r5, r0
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d045      	beq.n	8004980 <_free_r+0x94>
 80048f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f8:	1f0c      	subs	r4, r1, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bfb8      	it	lt
 80048fe:	18e4      	addlt	r4, r4, r3
 8004900:	f000 f946 	bl	8004b90 <__malloc_lock>
 8004904:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <_free_r+0x98>)
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	4610      	mov	r0, r2
 800490a:	b933      	cbnz	r3, 800491a <_free_r+0x2e>
 800490c:	6063      	str	r3, [r4, #4]
 800490e:	6014      	str	r4, [r2, #0]
 8004910:	4628      	mov	r0, r5
 8004912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004916:	f000 b93c 	b.w	8004b92 <__malloc_unlock>
 800491a:	42a3      	cmp	r3, r4
 800491c:	d90c      	bls.n	8004938 <_free_r+0x4c>
 800491e:	6821      	ldr	r1, [r4, #0]
 8004920:	1862      	adds	r2, r4, r1
 8004922:	4293      	cmp	r3, r2
 8004924:	bf04      	itt	eq
 8004926:	681a      	ldreq	r2, [r3, #0]
 8004928:	685b      	ldreq	r3, [r3, #4]
 800492a:	6063      	str	r3, [r4, #4]
 800492c:	bf04      	itt	eq
 800492e:	1852      	addeq	r2, r2, r1
 8004930:	6022      	streq	r2, [r4, #0]
 8004932:	6004      	str	r4, [r0, #0]
 8004934:	e7ec      	b.n	8004910 <_free_r+0x24>
 8004936:	4613      	mov	r3, r2
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	b10a      	cbz	r2, 8004940 <_free_r+0x54>
 800493c:	42a2      	cmp	r2, r4
 800493e:	d9fa      	bls.n	8004936 <_free_r+0x4a>
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	1858      	adds	r0, r3, r1
 8004944:	42a0      	cmp	r0, r4
 8004946:	d10b      	bne.n	8004960 <_free_r+0x74>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	4401      	add	r1, r0
 800494c:	1858      	adds	r0, r3, r1
 800494e:	4282      	cmp	r2, r0
 8004950:	6019      	str	r1, [r3, #0]
 8004952:	d1dd      	bne.n	8004910 <_free_r+0x24>
 8004954:	6810      	ldr	r0, [r2, #0]
 8004956:	6852      	ldr	r2, [r2, #4]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	4401      	add	r1, r0
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	e7d7      	b.n	8004910 <_free_r+0x24>
 8004960:	d902      	bls.n	8004968 <_free_r+0x7c>
 8004962:	230c      	movs	r3, #12
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	e7d3      	b.n	8004910 <_free_r+0x24>
 8004968:	6820      	ldr	r0, [r4, #0]
 800496a:	1821      	adds	r1, r4, r0
 800496c:	428a      	cmp	r2, r1
 800496e:	bf04      	itt	eq
 8004970:	6811      	ldreq	r1, [r2, #0]
 8004972:	6852      	ldreq	r2, [r2, #4]
 8004974:	6062      	str	r2, [r4, #4]
 8004976:	bf04      	itt	eq
 8004978:	1809      	addeq	r1, r1, r0
 800497a:	6021      	streq	r1, [r4, #0]
 800497c:	605c      	str	r4, [r3, #4]
 800497e:	e7c7      	b.n	8004910 <_free_r+0x24>
 8004980:	bd38      	pop	{r3, r4, r5, pc}
 8004982:	bf00      	nop
 8004984:	20004584 	.word	0x20004584

08004988 <_malloc_r>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	1ccd      	adds	r5, r1, #3
 800498c:	f025 0503 	bic.w	r5, r5, #3
 8004990:	3508      	adds	r5, #8
 8004992:	2d0c      	cmp	r5, #12
 8004994:	bf38      	it	cc
 8004996:	250c      	movcc	r5, #12
 8004998:	2d00      	cmp	r5, #0
 800499a:	4606      	mov	r6, r0
 800499c:	db01      	blt.n	80049a2 <_malloc_r+0x1a>
 800499e:	42a9      	cmp	r1, r5
 80049a0:	d903      	bls.n	80049aa <_malloc_r+0x22>
 80049a2:	230c      	movs	r3, #12
 80049a4:	6033      	str	r3, [r6, #0]
 80049a6:	2000      	movs	r0, #0
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
 80049aa:	f000 f8f1 	bl	8004b90 <__malloc_lock>
 80049ae:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <_malloc_r+0xac>)
 80049b0:	6814      	ldr	r4, [r2, #0]
 80049b2:	4621      	mov	r1, r4
 80049b4:	b991      	cbnz	r1, 80049dc <_malloc_r+0x54>
 80049b6:	4c20      	ldr	r4, [pc, #128]	; (8004a38 <_malloc_r+0xb0>)
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	b91b      	cbnz	r3, 80049c4 <_malloc_r+0x3c>
 80049bc:	4630      	mov	r0, r6
 80049be:	f000 f83d 	bl	8004a3c <_sbrk_r>
 80049c2:	6020      	str	r0, [r4, #0]
 80049c4:	4629      	mov	r1, r5
 80049c6:	4630      	mov	r0, r6
 80049c8:	f000 f838 	bl	8004a3c <_sbrk_r>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d124      	bne.n	8004a1a <_malloc_r+0x92>
 80049d0:	230c      	movs	r3, #12
 80049d2:	6033      	str	r3, [r6, #0]
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 f8dc 	bl	8004b92 <__malloc_unlock>
 80049da:	e7e4      	b.n	80049a6 <_malloc_r+0x1e>
 80049dc:	680b      	ldr	r3, [r1, #0]
 80049de:	1b5b      	subs	r3, r3, r5
 80049e0:	d418      	bmi.n	8004a14 <_malloc_r+0x8c>
 80049e2:	2b0b      	cmp	r3, #11
 80049e4:	d90f      	bls.n	8004a06 <_malloc_r+0x7e>
 80049e6:	600b      	str	r3, [r1, #0]
 80049e8:	50cd      	str	r5, [r1, r3]
 80049ea:	18cc      	adds	r4, r1, r3
 80049ec:	4630      	mov	r0, r6
 80049ee:	f000 f8d0 	bl	8004b92 <__malloc_unlock>
 80049f2:	f104 000b 	add.w	r0, r4, #11
 80049f6:	1d23      	adds	r3, r4, #4
 80049f8:	f020 0007 	bic.w	r0, r0, #7
 80049fc:	1ac3      	subs	r3, r0, r3
 80049fe:	d0d3      	beq.n	80049a8 <_malloc_r+0x20>
 8004a00:	425a      	negs	r2, r3
 8004a02:	50e2      	str	r2, [r4, r3]
 8004a04:	e7d0      	b.n	80049a8 <_malloc_r+0x20>
 8004a06:	428c      	cmp	r4, r1
 8004a08:	684b      	ldr	r3, [r1, #4]
 8004a0a:	bf16      	itet	ne
 8004a0c:	6063      	strne	r3, [r4, #4]
 8004a0e:	6013      	streq	r3, [r2, #0]
 8004a10:	460c      	movne	r4, r1
 8004a12:	e7eb      	b.n	80049ec <_malloc_r+0x64>
 8004a14:	460c      	mov	r4, r1
 8004a16:	6849      	ldr	r1, [r1, #4]
 8004a18:	e7cc      	b.n	80049b4 <_malloc_r+0x2c>
 8004a1a:	1cc4      	adds	r4, r0, #3
 8004a1c:	f024 0403 	bic.w	r4, r4, #3
 8004a20:	42a0      	cmp	r0, r4
 8004a22:	d005      	beq.n	8004a30 <_malloc_r+0xa8>
 8004a24:	1a21      	subs	r1, r4, r0
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f808 	bl	8004a3c <_sbrk_r>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d0cf      	beq.n	80049d0 <_malloc_r+0x48>
 8004a30:	6025      	str	r5, [r4, #0]
 8004a32:	e7db      	b.n	80049ec <_malloc_r+0x64>
 8004a34:	20004584 	.word	0x20004584
 8004a38:	20004588 	.word	0x20004588

08004a3c <_sbrk_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4c06      	ldr	r4, [pc, #24]	; (8004a58 <_sbrk_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4605      	mov	r5, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	f7fc f818 	bl	8000a7c <_sbrk>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_sbrk_r+0x1a>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_sbrk_r+0x1a>
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	200045e0 	.word	0x200045e0

08004a5c <__sread>:
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	460c      	mov	r4, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	f000 f896 	bl	8004b94 <_read_r>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	bfab      	itete	ge
 8004a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a70:	181b      	addge	r3, r3, r0
 8004a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a76:	bfac      	ite	ge
 8004a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a7a:	81a3      	strhlt	r3, [r4, #12]
 8004a7c:	bd10      	pop	{r4, pc}

08004a7e <__swrite>:
 8004a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a82:	461f      	mov	r7, r3
 8004a84:	898b      	ldrh	r3, [r1, #12]
 8004a86:	05db      	lsls	r3, r3, #23
 8004a88:	4605      	mov	r5, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	4616      	mov	r6, r2
 8004a8e:	d505      	bpl.n	8004a9c <__swrite+0x1e>
 8004a90:	2302      	movs	r3, #2
 8004a92:	2200      	movs	r2, #0
 8004a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a98:	f000 f868 	bl	8004b6c <_lseek_r>
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	463b      	mov	r3, r7
 8004aac:	4628      	mov	r0, r5
 8004aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab2:	f000 b817 	b.w	8004ae4 <_write_r>

08004ab6 <__sseek>:
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	460c      	mov	r4, r1
 8004aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004abe:	f000 f855 	bl	8004b6c <_lseek_r>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	bf15      	itete	ne
 8004ac8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004aca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ad2:	81a3      	strheq	r3, [r4, #12]
 8004ad4:	bf18      	it	ne
 8004ad6:	81a3      	strhne	r3, [r4, #12]
 8004ad8:	bd10      	pop	{r4, pc}

08004ada <__sclose>:
 8004ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ade:	f000 b813 	b.w	8004b08 <_close_r>
	...

08004ae4 <_write_r>:
 8004ae4:	b538      	push	{r3, r4, r5, lr}
 8004ae6:	4c07      	ldr	r4, [pc, #28]	; (8004b04 <_write_r+0x20>)
 8004ae8:	4605      	mov	r5, r0
 8004aea:	4608      	mov	r0, r1
 8004aec:	4611      	mov	r1, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7fb fd47 	bl	8000586 <_write>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_write_r+0x1e>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_write_r+0x1e>
 8004b00:	602b      	str	r3, [r5, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	200045e0 	.word	0x200045e0

08004b08 <_close_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4c06      	ldr	r4, [pc, #24]	; (8004b24 <_close_r+0x1c>)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4605      	mov	r5, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	f7fb ff7e 	bl	8000a14 <_close>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d102      	bne.n	8004b22 <_close_r+0x1a>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	b103      	cbz	r3, 8004b22 <_close_r+0x1a>
 8004b20:	602b      	str	r3, [r5, #0]
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	200045e0 	.word	0x200045e0

08004b28 <_fstat_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4c07      	ldr	r4, [pc, #28]	; (8004b48 <_fstat_r+0x20>)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4605      	mov	r5, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	f7fb ff79 	bl	8000a2c <_fstat>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d102      	bne.n	8004b44 <_fstat_r+0x1c>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	b103      	cbz	r3, 8004b44 <_fstat_r+0x1c>
 8004b42:	602b      	str	r3, [r5, #0]
 8004b44:	bd38      	pop	{r3, r4, r5, pc}
 8004b46:	bf00      	nop
 8004b48:	200045e0 	.word	0x200045e0

08004b4c <_isatty_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4c06      	ldr	r4, [pc, #24]	; (8004b68 <_isatty_r+0x1c>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4605      	mov	r5, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	f7fb ff78 	bl	8000a4c <_isatty>
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	d102      	bne.n	8004b66 <_isatty_r+0x1a>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	b103      	cbz	r3, 8004b66 <_isatty_r+0x1a>
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	bd38      	pop	{r3, r4, r5, pc}
 8004b68:	200045e0 	.word	0x200045e0

08004b6c <_lseek_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4c07      	ldr	r4, [pc, #28]	; (8004b8c <_lseek_r+0x20>)
 8004b70:	4605      	mov	r5, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fb ff71 	bl	8000a62 <_lseek>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_lseek_r+0x1e>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_lseek_r+0x1e>
 8004b88:	602b      	str	r3, [r5, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	200045e0 	.word	0x200045e0

08004b90 <__malloc_lock>:
 8004b90:	4770      	bx	lr

08004b92 <__malloc_unlock>:
 8004b92:	4770      	bx	lr

08004b94 <_read_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4c07      	ldr	r4, [pc, #28]	; (8004bb4 <_read_r+0x20>)
 8004b98:	4605      	mov	r5, r0
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	6022      	str	r2, [r4, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7fb ff19 	bl	80009da <_read>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_read_r+0x1e>
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_read_r+0x1e>
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	200045e0 	.word	0x200045e0

08004bb8 <_init>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

08004bc4 <_fini>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr
