
05_FreeRTOS_Event_Group_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003784  08003784  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800378c  0800378c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd4  20000074  08003808  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004048  08003808  00024048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acab  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eb6  00000000  00000000  0002ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  0002cc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  0002d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002205d  00000000  00000000  0002da80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007cc3  00000000  00000000  0004fadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7e9e  00000000  00000000  000577a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f63e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002234  00000000  00000000  0011f6bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003664 	.word	0x08003664

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003664 	.word	0x08003664

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000090 	.word	0x20000090
 8000500:	200000e4 	.word	0x200000e4

08000504 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000510:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d013      	beq.n	8000544 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800051c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000520:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000524:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	e000      	b.n	8000530 <ITM_SendChar+0x2c>
    {
      __NOP();
 800052e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800053a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_write>:
#include "semphr.h"
#include "event_groups.h"
#include <stdio.h>

int _write(int file,char *ptr, int len)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	60b9      	str	r1, [r7, #8]
 800055c:	607a      	str	r2, [r7, #4]
	int i=0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x2a>
	ITM_SendChar((*ptr++));
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffc7 	bl	8000504 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x16>
	return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <TaskA>:
#define BIT_0 ( 1 << 0 )
#define BIT_4 ( 1 << 4 )

EventGroupHandle_t Eventhandle;
void TaskA(void const * argument)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	EventBits_t uxBits;

  for(;;)
  {
		uxBits = xEventGroupSetBits(Eventhandle, BIT_0 | BIT_4 );
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <TaskA+0x20>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2111      	movs	r1, #17
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f878 	bl	8001694 <xEventGroupSetBits>
 80005a4:	60f8      	str	r0, [r7, #12]
		vTaskDelay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f001 fb95 	bl	8001cd8 <vTaskDelay>
		uxBits = xEventGroupSetBits(Eventhandle, BIT_0 | BIT_4 );
 80005ae:	e7f3      	b.n	8000598 <TaskA+0x8>
 80005b0:	2000403c 	.word	0x2000403c

080005b4 <TaskB>:
  }
}

void TaskB(void const * argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	6078      	str	r0, [r7, #4]
	EventBits_t var1;
  for(;;)
  {
	  var1 = xEventGroupWaitBits( Eventhandle,BIT_0 | BIT_4 ,pdTRUE,pdTRUE,100 );
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <TaskB+0x8c>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	2111      	movs	r1, #17
 80005ca:	f000 ff99 	bl	8001500 <xEventGroupWaitBits>
 80005ce:	60f8      	str	r0, [r7, #12]

	  if( ( var1 & ( BIT_0 | BIT_4 ) ) == ( BIT_0 | BIT_4 ) )
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f003 0311 	and.w	r3, r3, #17
 80005d6:	2b11      	cmp	r3, #17
 80005d8:	d107      	bne.n	80005ea <TaskB+0x36>
	  {
	  /* xEventGroupWaitBits() returned because both bits were set. */
		  printf("Both Bits were SET\n");
 80005da:	481a      	ldr	r0, [pc, #104]	; (8000644 <TaskB+0x90>)
 80005dc:	f002 fc36 	bl	8002e4c <puts>
		  vTaskDelay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f001 fb78 	bl	8001cd8 <vTaskDelay>
 80005e8:	e020      	b.n	800062c <TaskB+0x78>
	  }
	  else if( ( var1 & BIT_0 ) != 0 )
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d007      	beq.n	8000604 <TaskB+0x50>
	  {
	  /* xEventGroupWaitBits() returned because just BIT_0 was set. */
		  printf("Bit 0 was SET\n");
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <TaskB+0x94>)
 80005f6:	f002 fc29 	bl	8002e4c <puts>
		  vTaskDelay(1000);
 80005fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fe:	f001 fb6b 	bl	8001cd8 <vTaskDelay>
 8000602:	e013      	b.n	800062c <TaskB+0x78>
	  }
	  else if( ( var1 & BIT_4 ) != 0 )
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f003 0310 	and.w	r3, r3, #16
 800060a:	2b00      	cmp	r3, #0
 800060c:	d007      	beq.n	800061e <TaskB+0x6a>
	  {
		  printf("Bit 4 was SET\n");
 800060e:	480f      	ldr	r0, [pc, #60]	; (800064c <TaskB+0x98>)
 8000610:	f002 fc1c 	bl	8002e4c <puts>
		  vTaskDelay(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f001 fb5e 	bl	8001cd8 <vTaskDelay>
 800061c:	e006      	b.n	800062c <TaskB+0x78>
	  }
	  else
	  {

		  printf("Nither was SET\n");
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <TaskB+0x9c>)
 8000620:	f002 fc14 	bl	8002e4c <puts>
		  vTaskDelay(1000);
 8000624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000628:	f001 fb56 	bl	8001cd8 <vTaskDelay>
	  }
	  vEventGroupDelete(  Eventhandle );
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <TaskB+0x8c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f001 f8b8 	bl	80017a6 <vEventGroupDelete>
	  printf("Event Deleted Successful \n");
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <TaskB+0xa0>)
 8000638:	f002 fc08 	bl	8002e4c <puts>
	  var1 = xEventGroupWaitBits( Eventhandle,BIT_0 | BIT_4 ,pdTRUE,pdTRUE,100 );
 800063c:	e7be      	b.n	80005bc <TaskB+0x8>
 800063e:	bf00      	nop
 8000640:	2000403c 	.word	0x2000403c
 8000644:	0800367c 	.word	0x0800367c
 8000648:	08003690 	.word	0x08003690
 800064c:	080036a0 	.word	0x080036a0
 8000650:	080036b0 	.word	0x080036b0
 8000654:	080036c0 	.word	0x080036c0

08000658 <main>:
  }
}


int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af02      	add	r7, sp, #8

  HAL_Init();
 800065e:	f000 f9d5 	bl	8000a0c <HAL_Init>

  SystemClock_Config();
 8000662:	f000 f833 	bl	80006cc <SystemClock_Config>

  MX_GPIO_Init();
 8000666:	f000 f88f 	bl	8000788 <MX_GPIO_Init>

  Eventhandle=xEventGroupCreate();
 800066a:	f000 ff2f 	bl	80014cc <xEventGroupCreate>
 800066e:	4602      	mov	r2, r0
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <main+0x5c>)
 8000672:	601a      	str	r2, [r3, #0]
  if(Eventhandle==NULL)
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <main+0x5c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <main+0x2c>
  {
	  printf("Event is not created\n");
 800067c:	480e      	ldr	r0, [pc, #56]	; (80006b8 <main+0x60>)
 800067e:	f002 fbe5 	bl	8002e4c <puts>
 8000682:	e013      	b.n	80006ac <main+0x54>
  }
  else
  {
	   xTaskCreate(TaskA," Sender",128,NULL,3,NULL);
 8000684:	2300      	movs	r3, #0
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	2303      	movs	r3, #3
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	490a      	ldr	r1, [pc, #40]	; (80006bc <main+0x64>)
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <main+0x68>)
 8000694:	f001 f9eb 	bl	8001a6e <xTaskCreate>
	   xTaskCreate(TaskB," Receiver1",128,NULL,2,NULL);
 8000698:	2300      	movs	r3, #0
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2302      	movs	r3, #2
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <main+0x6c>)
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <main+0x70>)
 80006a8:	f001 f9e1 	bl	8001a6e <xTaskCreate>
  }

  vTaskStartScheduler();
 80006ac:	f001 fb48 	bl	8001d40 <vTaskStartScheduler>
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x58>
 80006b2:	bf00      	nop
 80006b4:	2000403c 	.word	0x2000403c
 80006b8:	080036dc 	.word	0x080036dc
 80006bc:	080036f4 	.word	0x080036f4
 80006c0:	08000591 	.word	0x08000591
 80006c4:	080036fc 	.word	0x080036fc
 80006c8:	080005b5 	.word	0x080005b5

080006cc <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fb52 	bl	8002d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xb4>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xb4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <SystemClock_Config+0xb8>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemClock_Config+0xb8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fabd 	bl	8000cbc <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000748:	f000 f846 	bl	80007d8 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fd18 	bl	800119c <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000772:	f000 f831 	bl	80007d8 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_GPIO_Init+0x4c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <MX_GPIO_Init+0x4c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_GPIO_Init+0x4c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_GPIO_Init+0x4c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <MX_GPIO_Init+0x4c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_GPIO_Init+0x4c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <Error_Handler>:

void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
  __disable_irq();
  while (1)
 80007de:	e7fe      	b.n	80007de <Error_Handler+0x6>

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <HAL_MspInit+0x54>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	; 0x44
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x54>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <HAL_MspInit+0x54>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <HAL_MspInit+0x54>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	210f      	movs	r1, #15
 8000822:	f06f 0001 	mvn.w	r0, #1
 8000826:	f000 fa20 	bl	8000c6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f922 	bl	8000ab0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800086c:	f001 fdee 	bl	800244c <xTaskGetSchedulerState>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d001      	beq.n	800087a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000876:	f002 f837 	bl	80028e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}

0800087e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	e00a      	b.n	80008a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000890:	f3af 8000 	nop.w
 8000894:	4601      	mov	r1, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	60ba      	str	r2, [r7, #8]
 800089c:	b2ca      	uxtb	r2, r1
 800089e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3301      	adds	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbf0      	blt.n	8000890 <_read+0x12>
	}

return len;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	return -1;
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e0:	605a      	str	r2, [r3, #4]
	return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_isatty>:

int _isatty(int file)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	return 1;
 80008f8:	2301      	movs	r3, #1
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
	return 0;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <_sbrk+0x5c>)
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <_sbrk+0x60>)
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <_sbrk+0x64>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <_sbrk+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	d207      	bcs.n	8000960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000950:	f002 f9ee 	bl	8002d30 <__errno>
 8000954:	4602      	mov	r2, r0
 8000956:	230c      	movs	r3, #12
 8000958:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	e009      	b.n	8000974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_sbrk+0x64>)
 8000970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20020000 	.word	0x20020000
 8000980:	00000400 	.word	0x00000400
 8000984:	200002e4 	.word	0x200002e4
 8000988:	20004048 	.word	0x20004048

0800098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <SystemInit+0x28>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <SystemInit+0x28>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SystemInit+0x28>)
 80009a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009a6:	609a      	str	r2, [r3, #8]
#endif
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009be:	e003      	b.n	80009c8 <LoopCopyDataInit>

080009c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009c6:	3104      	adds	r1, #4

080009c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009d0:	d3f6      	bcc.n	80009c0 <CopyDataInit>
  ldr  r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009d4:	e002      	b.n	80009dc <LoopFillZerobss>

080009d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009d8:	f842 3b04 	str.w	r3, [r2], #4

080009dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009e0:	d3f9      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009e2:	f7ff ffd3 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f002 f9a9 	bl	8002d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fe35 	bl	8000658 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009f4:	08003794 	.word	0x08003794
  ldr  r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009fc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000a00:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000a04:	20004048 	.word	0x20004048

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f90d 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fece 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f917 	bl	8000ca2 <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f8ed 	bl	8000c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20004040 	.word	0x20004040

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20004040 	.word	0x20004040

08000af0 <__NVIC_SetPriorityGrouping>:
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_SetPriority>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff47 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7c:	f7ff ff5c 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	6978      	ldr	r0, [r7, #20]
 8000c88:	f7ff ff8e 	bl	8000ba8 <NVIC_EncodePriority>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffb0 	bl	8000c10 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e25b      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d075      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cda:	4ba3      	ldr	r3, [pc, #652]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d00c      	beq.n	8000d00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ce6:	4ba0      	ldr	r3, [pc, #640]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	d112      	bne.n	8000d18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cf2:	4b9d      	ldr	r3, [pc, #628]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cfe:	d10b      	bne.n	8000d18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	4b99      	ldr	r3, [pc, #612]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d05b      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x108>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d157      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e236      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d20:	d106      	bne.n	8000d30 <HAL_RCC_OscConfig+0x74>
 8000d22:	4b91      	ldr	r3, [pc, #580]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a90      	ldr	r2, [pc, #576]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e01d      	b.n	8000d6c <HAL_RCC_OscConfig+0xb0>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d38:	d10c      	bne.n	8000d54 <HAL_RCC_OscConfig+0x98>
 8000d3a:	4b8b      	ldr	r3, [pc, #556]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a8a      	ldr	r2, [pc, #552]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b88      	ldr	r3, [pc, #544]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a87      	ldr	r2, [pc, #540]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e00b      	b.n	8000d6c <HAL_RCC_OscConfig+0xb0>
 8000d54:	4b84      	ldr	r3, [pc, #528]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a83      	ldr	r2, [pc, #524]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b81      	ldr	r3, [pc, #516]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a80      	ldr	r2, [pc, #512]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d013      	beq.n	8000d9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff feb0 	bl	8000ad8 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff feac 	bl	8000ad8 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	; 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e1fb      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0xc0>
 8000d9a:	e014      	b.n	8000dc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fe9c 	bl	8000ad8 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fe98 	bl	8000ad8 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e1e7      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db6:	4b6c      	ldr	r3, [pc, #432]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0xe8>
 8000dc2:	e000      	b.n	8000dc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d063      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dd2:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dde:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d11c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dea:	4b5f      	ldr	r3, [pc, #380]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d116      	bne.n	8000e24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df6:	4b5c      	ldr	r3, [pc, #368]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_RCC_OscConfig+0x152>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d001      	beq.n	8000e0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e1bb      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0e:	4b56      	ldr	r3, [pc, #344]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	4952      	ldr	r1, [pc, #328]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e22:	e03a      	b.n	8000e9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d020      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <HAL_RCC_OscConfig+0x2b0>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e32:	f7ff fe51 	bl	8000ad8 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fe4d 	bl	8000ad8 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e19c      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4940      	ldr	r1, [pc, #256]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	e015      	b.n	8000e9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e6e:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <HAL_RCC_OscConfig+0x2b0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e74:	f7ff fe30 	bl	8000ad8 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fe2c 	bl	8000ad8 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e17b      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d030      	beq.n	8000f08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d016      	beq.n	8000edc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fe10 	bl	8000ad8 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fe0c 	bl	8000ad8 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e15b      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0x200>
 8000eda:	e015      	b.n	8000f08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_RCC_OscConfig+0x2b4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fdf9 	bl	8000ad8 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eea:	f7ff fdf5 	bl	8000ad8 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e144      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80a0 	beq.w	8001056 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f34:	6413      	str	r3, [r2, #64]	; 0x40
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_RCC_OscConfig+0x2ac>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f42:	2301      	movs	r3, #1
 8000f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_RCC_OscConfig+0x2b8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d121      	bne.n	8000f96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f52:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_RCC_OscConfig+0x2b8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_RCC_OscConfig+0x2b8>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fdbb 	bl	8000ad8 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f64:	e011      	b.n	8000f8a <HAL_RCC_OscConfig+0x2ce>
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	42470000 	.word	0x42470000
 8000f70:	42470e80 	.word	0x42470e80
 8000f74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f78:	f7ff fdae 	bl	8000ad8 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e0fd      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8a:	4b81      	ldr	r3, [pc, #516]	; (8001190 <HAL_RCC_OscConfig+0x4d4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d106      	bne.n	8000fac <HAL_RCC_OscConfig+0x2f0>
 8000f9e:	4b7d      	ldr	r3, [pc, #500]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa2:	4a7c      	ldr	r2, [pc, #496]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8000faa:	e01c      	b.n	8000fe6 <HAL_RCC_OscConfig+0x32a>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b05      	cmp	r3, #5
 8000fb2:	d10c      	bne.n	8000fce <HAL_RCC_OscConfig+0x312>
 8000fb4:	4b77      	ldr	r3, [pc, #476]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb8:	4a76      	ldr	r2, [pc, #472]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc0:	4b74      	ldr	r3, [pc, #464]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc4:	4a73      	ldr	r2, [pc, #460]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6713      	str	r3, [r2, #112]	; 0x70
 8000fcc:	e00b      	b.n	8000fe6 <HAL_RCC_OscConfig+0x32a>
 8000fce:	4b71      	ldr	r3, [pc, #452]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd2:	4a70      	ldr	r2, [pc, #448]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8000fda:	4b6e      	ldr	r3, [pc, #440]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fde:	4a6d      	ldr	r2, [pc, #436]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fee:	f7ff fd73 	bl	8000ad8 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fd6f 	bl	8000ad8 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f241 3288 	movw	r2, #5000	; 0x1388
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e0bc      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100c:	4b61      	ldr	r3, [pc, #388]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 800100e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0ee      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x33a>
 8001018:	e014      	b.n	8001044 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101a:	f7ff fd5d 	bl	8000ad8 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001020:	e00a      	b.n	8001038 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001022:	f7ff fd59 	bl	8000ad8 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001030:	4293      	cmp	r3, r2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e0a6      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001038:	4b56      	ldr	r3, [pc, #344]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 800103a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ee      	bne.n	8001022 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d105      	bne.n	8001056 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800104a:	4b52      	ldr	r3, [pc, #328]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a51      	ldr	r2, [pc, #324]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8001050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8092 	beq.w	8001184 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001060:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	2b08      	cmp	r3, #8
 800106a:	d05c      	beq.n	8001126 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d141      	bne.n	80010f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001074:	4b48      	ldr	r3, [pc, #288]	; (8001198 <HAL_RCC_OscConfig+0x4dc>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff fd2d 	bl	8000ad8 <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff fd29 	bl	8000ad8 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e078      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001094:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f0      	bne.n	8001082 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69da      	ldr	r2, [r3, #28]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	019b      	lsls	r3, r3, #6
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	085b      	lsrs	r3, r3, #1
 80010b8:	3b01      	subs	r3, #1
 80010ba:	041b      	lsls	r3, r3, #16
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c2:	061b      	lsls	r3, r3, #24
 80010c4:	4933      	ldr	r1, [pc, #204]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ca:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_RCC_OscConfig+0x4dc>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fd02 	bl	8000ad8 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d8:	f7ff fcfe 	bl	8000ad8 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e04d      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x41c>
 80010f6:	e045      	b.n	8001184 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_RCC_OscConfig+0x4dc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fceb 	bl	8000ad8 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001106:	f7ff fce7 	bl	8000ad8 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e036      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f0      	bne.n	8001106 <HAL_RCC_OscConfig+0x44a>
 8001124:	e02e      	b.n	8001184 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e029      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_RCC_OscConfig+0x4d8>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	429a      	cmp	r2, r3
 8001144:	d11c      	bne.n	8001180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001150:	429a      	cmp	r2, r3
 8001152:	d115      	bne.n	8001180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800115a:	4013      	ands	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001160:	4293      	cmp	r3, r2
 8001162:	d10d      	bne.n	8001180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800116e:	429a      	cmp	r2, r3
 8001170:	d106      	bne.n	8001180 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000
 8001194:	40023800 	.word	0x40023800
 8001198:	42470060 	.word	0x42470060

0800119c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0cc      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011b0:	4b68      	ldr	r3, [pc, #416]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d90c      	bls.n	80011d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b65      	ldr	r3, [pc, #404]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b63      	ldr	r3, [pc, #396]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0b8      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a58      	ldr	r2, [pc, #352]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001208:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a52      	ldr	r2, [pc, #328]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001214:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	494d      	ldr	r1, [pc, #308]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	4313      	orrs	r3, r2
 8001224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d044      	beq.n	80012bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d107      	bne.n	800124a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d119      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e07f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d003      	beq.n	800125a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001256:	2b03      	cmp	r3, #3
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125a:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e06f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e067      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 0203 	bic.w	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4934      	ldr	r1, [pc, #208]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	4313      	orrs	r3, r2
 800128a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800128c:	f7ff fc24 	bl	8000ad8 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	e00a      	b.n	80012aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001294:	f7ff fc20 	bl	8000ad8 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e04f      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 020c 	and.w	r2, r3, #12
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d1eb      	bne.n	8001294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d20c      	bcs.n	80012e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e032      	b.n	800134a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4916      	ldr	r1, [pc, #88]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	490e      	ldr	r1, [pc, #56]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001322:	f000 f821 	bl	8001368 <HAL_RCC_GetSysClockFreq>
 8001326:	4601      	mov	r1, r0
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	fa21 f303 	lsr.w	r3, r1, r3
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_RCC_ClockConfig+0x1c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fb84 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00
 8001358:	40023800 	.word	0x40023800
 800135c:	08003710 	.word	0x08003710
 8001360:	20000000 	.word	0x20000000
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800137e:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d007      	beq.n	800139a <HAL_RCC_GetSysClockFreq+0x32>
 800138a:	2b08      	cmp	r3, #8
 800138c:	d008      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0x38>
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 808d 	bne.w	80014ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001394:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001396:	60bb      	str	r3, [r7, #8]
       break;
 8001398:	e08c      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800139a:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800139c:	60bb      	str	r3, [r7, #8]
      break;
 800139e:	e089      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013aa:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d023      	beq.n	80013fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b6:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	099b      	lsrs	r3, r3, #6
 80013bc:	f04f 0400 	mov.w	r4, #0
 80013c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	ea03 0501 	and.w	r5, r3, r1
 80013cc:	ea04 0602 	and.w	r6, r4, r2
 80013d0:	4a3d      	ldr	r2, [pc, #244]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80013d2:	fb02 f106 	mul.w	r1, r2, r6
 80013d6:	2200      	movs	r2, #0
 80013d8:	fb02 f205 	mul.w	r2, r2, r5
 80013dc:	440a      	add	r2, r1
 80013de:	493a      	ldr	r1, [pc, #232]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80013e0:	fba5 0101 	umull	r0, r1, r5, r1
 80013e4:	1853      	adds	r3, r2, r1
 80013e6:	4619      	mov	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 0400 	mov.w	r4, #0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4623      	mov	r3, r4
 80013f2:	f7fe feed 	bl	80001d0 <__aeabi_uldivmod>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e049      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fe:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	099b      	lsrs	r3, r3, #6
 8001404:	f04f 0400 	mov.w	r4, #0
 8001408:	f240 11ff 	movw	r1, #511	; 0x1ff
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	ea03 0501 	and.w	r5, r3, r1
 8001414:	ea04 0602 	and.w	r6, r4, r2
 8001418:	4629      	mov	r1, r5
 800141a:	4632      	mov	r2, r6
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	f04f 0400 	mov.w	r4, #0
 8001424:	0154      	lsls	r4, r2, #5
 8001426:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800142a:	014b      	lsls	r3, r1, #5
 800142c:	4619      	mov	r1, r3
 800142e:	4622      	mov	r2, r4
 8001430:	1b49      	subs	r1, r1, r5
 8001432:	eb62 0206 	sbc.w	r2, r2, r6
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f04f 0400 	mov.w	r4, #0
 800143e:	0194      	lsls	r4, r2, #6
 8001440:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001444:	018b      	lsls	r3, r1, #6
 8001446:	1a5b      	subs	r3, r3, r1
 8001448:	eb64 0402 	sbc.w	r4, r4, r2
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	00e2      	lsls	r2, r4, #3
 8001456:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800145a:	00d9      	lsls	r1, r3, #3
 800145c:	460b      	mov	r3, r1
 800145e:	4614      	mov	r4, r2
 8001460:	195b      	adds	r3, r3, r5
 8001462:	eb44 0406 	adc.w	r4, r4, r6
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	02a2      	lsls	r2, r4, #10
 8001470:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001474:	0299      	lsls	r1, r3, #10
 8001476:	460b      	mov	r3, r1
 8001478:	4614      	mov	r4, r2
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f04f 0400 	mov.w	r4, #0
 8001484:	461a      	mov	r2, r3
 8001486:	4623      	mov	r3, r4
 8001488:	f7fe fea2 	bl	80001d0 <__aeabi_uldivmod>
 800148c:	4603      	mov	r3, r0
 800148e:	460c      	mov	r4, r1
 8001490:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	0c1b      	lsrs	r3, r3, #16
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	3301      	adds	r3, #1
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	60bb      	str	r3, [r7, #8]
      break;
 80014ac:	e002      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80014b0:	60bb      	str	r3, [r7, #8]
      break;
 80014b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014b4:	68bb      	ldr	r3, [r7, #8]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	00f42400 	.word	0x00f42400
 80014c8:	017d7840 	.word	0x017d7840

080014cc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80014d2:	201c      	movs	r0, #28
 80014d4:	f001 fa56 	bl	8002984 <pvPortMalloc>
 80014d8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00a      	beq.n	80014f6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3304      	adds	r3, #4
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f9b1 	bl	8001852 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80014f6:	687b      	ldr	r3, [r7, #4]
	}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b090      	sub	sp, #64	; 0x40
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001524:	f383 8811 	msr	BASEPRI, r3
 8001528:	f3bf 8f6f 	isb	sy
 800152c:	f3bf 8f4f 	dsb	sy
 8001530:	623b      	str	r3, [r7, #32]
 8001532:	e7fe      	b.n	8001532 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <xEventGroupWaitBits+0x52>
 800153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	e7fe      	b.n	8001550 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <xEventGroupWaitBits+0x6c>
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	e7fe      	b.n	800156a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800156c:	f000 ff6e 	bl	800244c <xTaskGetSchedulerState>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <xEventGroupWaitBits+0x7c>
 8001576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <xEventGroupWaitBits+0x80>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <xEventGroupWaitBits+0x82>
 8001580:	2300      	movs	r3, #0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <xEventGroupWaitBits+0x9a>
 8001586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158a:	f383 8811 	msr	BASEPRI, r3
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f3bf 8f4f 	dsb	sy
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e7fe      	b.n	8001598 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800159a:	f000 fc2f 	bl	8001dfc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800159e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015aa:	f000 f930 	bl	800180e <prvTestWaitCondition>
 80015ae:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00e      	beq.n	80015d4 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d028      	beq.n	8001616 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80015c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	401a      	ands	r2, r3
 80015ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e020      	b.n	8001616 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80015d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d104      	bne.n	80015e4 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80015de:	2301      	movs	r3, #1
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
 80015e2:	e018      	b.n	8001616 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80015ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80015f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8001600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001602:	1d18      	adds	r0, r3, #4
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001608:	4313      	orrs	r3, r2
 800160a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800160c:	4619      	mov	r1, r3
 800160e:	f000 fdb1 	bl	8002174 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8001616:	f000 fbff 	bl	8001e18 <xTaskResumeAll>
 800161a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800161c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800161e:	2b00      	cmp	r3, #0
 8001620:	d031      	beq.n	8001686 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	2b00      	cmp	r3, #0
 8001626:	d107      	bne.n	8001638 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <xEventGroupWaitBits+0x190>)
 800162a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8001638:	f000 ff26 	bl	8002488 <uxTaskResetEventItemValue>
 800163c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800163e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d11a      	bne.n	800167e <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8001648:	f001 f8c0 	bl	80027cc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800164c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001658:	f000 f8d9 	bl	800180e <prvTestWaitCondition>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	43db      	mvns	r3, r3
 8001670:	401a      	ands	r2, r3
 8001672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001674:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8001676:	2301      	movs	r3, #1
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800167a:	f001 f8d5 	bl	8002828 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800167e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8001686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001688:	4618      	mov	r0, r3
 800168a:	3740      	adds	r7, #64	; 0x40
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	e000ed04 	.word	0xe000ed04

08001694 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	; 0x38
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <xEventGroupSetBits+0x30>
 80016b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b4:	f383 8811 	msr	BASEPRI, r3
 80016b8:	f3bf 8f6f 	isb	sy
 80016bc:	f3bf 8f4f 	dsb	sy
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	e7fe      	b.n	80016c2 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <xEventGroupSetBits+0x4e>
 80016ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e7fe      	b.n	80016e0 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	3304      	adds	r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3308      	adds	r3, #8
 80016ec:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80016ee:	f000 fb85 	bl	8001dfc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	431a      	orrs	r2, r3
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8001704:	e03c      	b.n	8001780 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800171c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001724:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d108      	bne.n	8001742 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00b      	beq.n	8001754 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 800173c:	2301      	movs	r3, #1
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001740:	e008      	b.n	8001754 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	429a      	cmp	r2, r3
 800174e:	d101      	bne.n	8001754 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8001750:	2301      	movs	r3, #1
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	2b00      	cmp	r3, #0
 8001758:	d010      	beq.n	800177c <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8001764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001774:	4619      	mov	r1, r3
 8001776:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001778:	f000 fd36 	bl	80021e8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8001780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	429a      	cmp	r2, r3
 8001786:	d1be      	bne.n	8001706 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178e:	43db      	mvns	r3, r3
 8001790:	401a      	ands	r2, r3
 8001792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001794:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8001796:	f000 fb3f 	bl	8001e18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	681b      	ldr	r3, [r3, #0]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3738      	adds	r7, #56	; 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3304      	adds	r3, #4
 80017b6:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 80017b8:	f000 fb20 	bl	8001dfc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80017bc:	e016      	b.n	80017ec <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3308      	adds	r3, #8
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d109      	bne.n	80017de <vEventGroupDelete+0x38>
 80017ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	f3bf 8f6f 	isb	sy
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e7fe      	b.n	80017dc <vEventGroupDelete+0x36>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fcfe 	bl	80021e8 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e4      	bne.n	80017be <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	7e1b      	ldrb	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <vEventGroupDelete+0x5c>
			{
				vPortFree( pxEventBits );
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f001 f983 	bl	8002b08 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8001802:	f000 fb09 	bl	8001e18 <xTaskResumeAll>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800180e:	b480      	push	{r7}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00a      	beq.n	8001844 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800182e:	2301      	movs	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e007      	b.n	8001844 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4013      	ands	r3, r2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	429a      	cmp	r2, r3
 800183e:	d101      	bne.n	8001844 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8001844:	697b      	ldr	r3, [r7, #20]
}
 8001846:	4618      	mov	r0, r3
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f103 0208 	add.w	r2, r3, #8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f04f 32ff 	mov.w	r2, #4294967295
 800186a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f103 0208 	add.w	r2, r3, #8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f103 0208 	add.w	r2, r3, #8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	601a      	str	r2, [r3, #0]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190a:	d103      	bne.n	8001914 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e00c      	b.n	800192e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3308      	adds	r3, #8
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e002      	b.n	8001922 <vListInsert+0x2e>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	429a      	cmp	r2, r3
 800192c:	d2f6      	bcs.n	800191c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6892      	ldr	r2, [r2, #8]
 800197c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6852      	ldr	r2, [r2, #4]
 8001986:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	d103      	bne.n	800199a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b08e      	sub	sp, #56	; 0x38
 80019be:	af04      	add	r7, sp, #16
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <xTaskCreateStatic+0x28>
 80019ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d2:	f383 8811 	msr	BASEPRI, r3
 80019d6:	f3bf 8f6f 	isb	sy
 80019da:	f3bf 8f4f 	dsb	sy
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	e7fe      	b.n	80019e0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <xTaskCreateStatic+0x42>
 80019e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ec:	f383 8811 	msr	BASEPRI, r3
 80019f0:	f3bf 8f6f 	isb	sy
 80019f4:	f3bf 8f4f 	dsb	sy
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e7fe      	b.n	80019fa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80019fc:	2354      	movs	r3, #84	; 0x54
 80019fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b54      	cmp	r3, #84	; 0x54
 8001a04:	d009      	beq.n	8001a1a <xTaskCreateStatic+0x60>
 8001a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	e7fe      	b.n	8001a18 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001a1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01e      	beq.n	8001a60 <xTaskCreateStatic+0xa6>
 8001a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 f850 	bl	8001af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5a:	f000 f8d3 	bl	8001c04 <prvAddNewTaskToReadyList>
 8001a5e:	e001      	b.n	8001a64 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001a64:	697b      	ldr	r3, [r7, #20]
	}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b08c      	sub	sp, #48	; 0x30
 8001a72:	af04      	add	r7, sp, #16
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 ff7e 	bl	8002984 <pvPortMalloc>
 8001a88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001a90:	2054      	movs	r0, #84	; 0x54
 8001a92:	f000 ff77 	bl	8002984 <pvPortMalloc>
 8001a96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa4:	e005      	b.n	8001ab2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f001 f82e 	bl	8002b08 <vPortFree>
 8001aac:	e001      	b.n	8001ab2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d017      	beq.n	8001ae8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9303      	str	r3, [sp, #12]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f80e 	bl	8001af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001adc:	69f8      	ldr	r0, [r7, #28]
 8001ade:	f000 f891 	bl	8001c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	e002      	b.n	8001aee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001aee:	69bb      	ldr	r3, [r7, #24]
	}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b10:	3b01      	subs	r3, #1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f023 0307 	bic.w	r3, r3, #7
 8001b1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <prvInitialiseNewTask+0x46>
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e7fe      	b.n	8001b3c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01f      	beq.n	8001b84 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	e012      	b.n	8001b70 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	7819      	ldrb	r1, [r3, #0]
 8001b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	3334      	adds	r3, #52	; 0x34
 8001b5a:	460a      	mov	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d9e9      	bls.n	8001b4a <prvInitialiseNewTask+0x52>
 8001b76:	e000      	b.n	8001b7a <prvInitialiseNewTask+0x82>
			{
				break;
 8001b78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b82:	e003      	b.n	8001b8c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d901      	bls.n	8001b96 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b92:	2306      	movs	r3, #6
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	3304      	adds	r3, #4
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe70 	bl	8001892 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	3318      	adds	r3, #24
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fe6b 	bl	8001892 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	f1c3 0207 	rsb	r2, r3, #7
 8001bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	68f9      	ldr	r1, [r7, #12]
 8001be4:	69b8      	ldr	r0, [r7, #24]
 8001be6:	f000 fccd 	bl	8002584 <pxPortInitialiseStack>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c0c:	f000 fdde 	bl	80027cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <prvAddNewTaskToReadyList+0xb8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <prvAddNewTaskToReadyList+0xb8>)
 8001c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c22:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <prvAddNewTaskToReadyList+0xb8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d110      	bne.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c30:	f000 fb52 	bl	80022d8 <prvInitialiseTaskLists>
 8001c34:	e00d      	b.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <prvAddNewTaskToReadyList+0xc0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d802      	bhi.n	8001c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <prvAddNewTaskToReadyList+0xc4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <prvAddNewTaskToReadyList+0xc4>)
 8001c5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	2201      	movs	r2, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <prvAddNewTaskToReadyList+0xc8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <prvAddNewTaskToReadyList+0xc8>)
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <prvAddNewTaskToReadyList+0xcc>)
 8001c7c:	441a      	add	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4610      	mov	r0, r2
 8001c86:	f7ff fe11 	bl	80018ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c8a:	f000 fdcd 	bl	8002828 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <prvAddNewTaskToReadyList+0xc0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00e      	beq.n	8001cb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <prvAddNewTaskToReadyList+0xbc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <prvAddNewTaskToReadyList+0xd0>)
 8001ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f3bf 8f4f 	dsb	sy
 8001cb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200003e8 	.word	0x200003e8
 8001cc0:	200002e8 	.word	0x200002e8
 8001cc4:	200003f4 	.word	0x200003f4
 8001cc8:	20000404 	.word	0x20000404
 8001ccc:	200003f0 	.word	0x200003f0
 8001cd0:	200002ec 	.word	0x200002ec
 8001cd4:	e000ed04 	.word	0xe000ed04

08001cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d016      	beq.n	8001d18 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <vTaskDelay+0x60>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <vTaskDelay+0x2e>
 8001cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	e7fe      	b.n	8001d04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001d06:	f000 f879 	bl	8001dfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fbd3 	bl	80024b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001d12:	f000 f881 	bl	8001e18 <xTaskResumeAll>
 8001d16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d107      	bne.n	8001d2e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <vTaskDelay+0x64>)
 8001d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000410 	.word	0x20000410
 8001d3c:	e000ed04 	.word	0xe000ed04

08001d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d4e:	463a      	mov	r2, r7
 8001d50:	1d39      	adds	r1, r7, #4
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbba 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	9202      	str	r2, [sp, #8]
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	491d      	ldr	r1, [pc, #116]	; (8001de4 <vTaskStartScheduler+0xa4>)
 8001d70:	481d      	ldr	r0, [pc, #116]	; (8001de8 <vTaskStartScheduler+0xa8>)
 8001d72:	f7ff fe22 	bl	80019ba <xTaskCreateStatic>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <vTaskStartScheduler+0xac>)
 8001d7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <vTaskStartScheduler+0xac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001d84:	2301      	movs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e001      	b.n	8001d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d115      	bne.n	8001dc0 <vTaskStartScheduler+0x80>
 8001d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d98:	f383 8811 	msr	BASEPRI, r3
 8001d9c:	f3bf 8f6f 	isb	sy
 8001da0:	f3bf 8f4f 	dsb	sy
 8001da4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <vTaskStartScheduler+0xb0>)
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <vTaskStartScheduler+0xb4>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <vTaskStartScheduler+0xb8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001dba:	f000 fc69 	bl	8002690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001dbe:	e00d      	b.n	8001ddc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc6:	d109      	bne.n	8001ddc <vTaskStartScheduler+0x9c>
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	e7fe      	b.n	8001dda <vTaskStartScheduler+0x9a>
}
 8001ddc:	bf00      	nop
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	08003708 	.word	0x08003708
 8001de8:	080022a9 	.word	0x080022a9
 8001dec:	2000040c 	.word	0x2000040c
 8001df0:	20000408 	.word	0x20000408
 8001df4:	200003f4 	.word	0x200003f4
 8001df8:	200003ec 	.word	0x200003ec

08001dfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <vTaskSuspendAll+0x18>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <vTaskSuspendAll+0x18>)
 8001e08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	20000410 	.word	0x20000410

08001e18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e26:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <xTaskResumeAll+0x114>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <xTaskResumeAll+0x2a>
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	e7fe      	b.n	8001e40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e42:	f000 fcc3 	bl	80027cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <xTaskResumeAll+0x114>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <xTaskResumeAll+0x114>)
 8001e4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <xTaskResumeAll+0x114>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d161      	bne.n	8001f1c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <xTaskResumeAll+0x118>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05d      	beq.n	8001f1c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e60:	e02e      	b.n	8001ec0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e62:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <xTaskResumeAll+0x11c>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3318      	adds	r3, #24
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fd79 	bl	8001966 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3304      	adds	r3, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fd74 	bl	8001966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <xTaskResumeAll+0x120>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <xTaskResumeAll+0x120>)
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <xTaskResumeAll+0x124>)
 8001e9e:	441a      	add	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7ff fd00 	bl	80018ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <xTaskResumeAll+0x128>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <xTaskResumeAll+0x12c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <xTaskResumeAll+0x11c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1cc      	bne.n	8001e62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ece:	f000 fa9d 	bl	800240c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <xTaskResumeAll+0x130>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ede:	f000 f837 	bl	8001f50 <xTaskIncrementTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <xTaskResumeAll+0x12c>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f1      	bne.n	8001ede <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <xTaskResumeAll+0x130>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <xTaskResumeAll+0x12c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <xTaskResumeAll+0x134>)
 8001f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f1c:	f000 fc84 	bl	8002828 <vPortExitCritical>

	return xAlreadyYielded;
 8001f20:	68bb      	ldr	r3, [r7, #8]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000410 	.word	0x20000410
 8001f30:	200003e8 	.word	0x200003e8
 8001f34:	200003a8 	.word	0x200003a8
 8001f38:	200003f0 	.word	0x200003f0
 8001f3c:	200002ec 	.word	0x200002ec
 8001f40:	200002e8 	.word	0x200002e8
 8001f44:	200003fc 	.word	0x200003fc
 8001f48:	200003f8 	.word	0x200003f8
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <xTaskIncrementTick+0x144>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 8087 	bne.w	8002072 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <xTaskIncrementTick+0x148>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	; (8002098 <xTaskIncrementTick+0x148>)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11f      	bne.n	8001fb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <xTaskIncrementTick+0x14c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <xTaskIncrementTick+0x46>
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	e7fe      	b.n	8001f94 <xTaskIncrementTick+0x44>
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <xTaskIncrementTick+0x14c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <xTaskIncrementTick+0x150>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3e      	ldr	r2, [pc, #248]	; (800209c <xTaskIncrementTick+0x14c>)
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <xTaskIncrementTick+0x150>)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <xTaskIncrementTick+0x154>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	4a3c      	ldr	r2, [pc, #240]	; (80020a4 <xTaskIncrementTick+0x154>)
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	f000 fa2a 	bl	800240c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <xTaskIncrementTick+0x158>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d348      	bcc.n	8002054 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <xTaskIncrementTick+0x14c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <xTaskIncrementTick+0x158>)
 8001fce:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd2:	601a      	str	r2, [r3, #0]
					break;
 8001fd4:	e03e      	b.n	8002054 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <xTaskIncrementTick+0x14c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d203      	bcs.n	8001ff6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001fee:	4a2e      	ldr	r2, [pc, #184]	; (80020a8 <xTaskIncrementTick+0x158>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ff4:	e02e      	b.n	8002054 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fcb3 	bl	8001966 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3318      	adds	r3, #24
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fcaa 	bl	8001966 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	2201      	movs	r2, #1
 8002018:	409a      	lsls	r2, r3
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <xTaskIncrementTick+0x15c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <xTaskIncrementTick+0x15c>)
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <xTaskIncrementTick+0x160>)
 8002032:	441a      	add	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3304      	adds	r3, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f7ff fc36 	bl	80018ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <xTaskIncrementTick+0x164>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	429a      	cmp	r2, r3
 800204c:	d3b9      	bcc.n	8001fc2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800204e:	2301      	movs	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002052:	e7b6      	b.n	8001fc2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <xTaskIncrementTick+0x164>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	4915      	ldr	r1, [pc, #84]	; (80020b0 <xTaskIncrementTick+0x160>)
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d907      	bls.n	800207c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800206c:	2301      	movs	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e004      	b.n	800207c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <xTaskIncrementTick+0x168>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <xTaskIncrementTick+0x168>)
 800207a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <xTaskIncrementTick+0x16c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002084:	2301      	movs	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002088:	697b      	ldr	r3, [r7, #20]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000410 	.word	0x20000410
 8002098:	200003ec 	.word	0x200003ec
 800209c:	200003a0 	.word	0x200003a0
 80020a0:	200003a4 	.word	0x200003a4
 80020a4:	20000400 	.word	0x20000400
 80020a8:	20000408 	.word	0x20000408
 80020ac:	200003f0 	.word	0x200003f0
 80020b0:	200002ec 	.word	0x200002ec
 80020b4:	200002e8 	.word	0x200002e8
 80020b8:	200003f8 	.word	0x200003f8
 80020bc:	200003fc 	.word	0x200003fc

080020c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <vTaskSwitchContext+0xa0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <vTaskSwitchContext+0xa4>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80020d4:	e03e      	b.n	8002154 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <vTaskSwitchContext+0xa4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <vTaskSwitchContext+0xa8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	f1c3 031f 	rsb	r3, r3, #31
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	491e      	ldr	r1, [pc, #120]	; (800216c <vTaskSwitchContext+0xac>)
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210a:	f383 8811 	msr	BASEPRI, r3
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	e7fe      	b.n	8002118 <vTaskSwitchContext+0x58>
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <vTaskSwitchContext+0xac>)
 8002126:	4413      	add	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3308      	adds	r3, #8
 800213c:	429a      	cmp	r2, r3
 800213e:	d104      	bne.n	800214a <vTaskSwitchContext+0x8a>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <vTaskSwitchContext+0xb0>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	20000410 	.word	0x20000410
 8002164:	200003fc 	.word	0x200003fc
 8002168:	200003f0 	.word	0x200003f0
 800216c:	200002ec 	.word	0x200002ec
 8002170:	200002e8 	.word	0x200002e8

08002174 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <vTaskPlaceOnUnorderedEventList+0x26>
 8002186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e7fe      	b.n	8002198 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <vTaskPlaceOnUnorderedEventList+0x42>
 80021a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	e7fe      	b.n	80021b4 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <vTaskPlaceOnUnorderedEventList+0x70>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021c0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <vTaskPlaceOnUnorderedEventList+0x70>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3318      	adds	r3, #24
 80021c8:	4619      	mov	r1, r3
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff fb6e 	bl	80018ac <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80021d0:	2101      	movs	r1, #1
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f970 	bl	80024b8 <prvAddCurrentTaskToDelayedList>
}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000410 	.word	0x20000410
 80021e4:	200002e8 	.word	0x200002e8

080021e8 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <vTaskRemoveFromUnorderedEventList+0xac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <vTaskRemoveFromUnorderedEventList+0x26>
 80021fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e7fe      	b.n	800220c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <vTaskRemoveFromUnorderedEventList+0x50>
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	e7fe      	b.n	8002236 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fb94 	bl	8001966 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3304      	adds	r3, #4
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fb8f 	bl	8001966 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	2201      	movs	r2, #1
 800224e:	409a      	lsls	r2, r3
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4a0d      	ldr	r2, [pc, #52]	; (800229c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8002268:	441a      	add	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3304      	adds	r3, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f7ff fb1b 	bl	80018ac <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	429a      	cmp	r2, r3
 8002282:	d902      	bls.n	800228a <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8002286:	2201      	movs	r2, #1
 8002288:	601a      	str	r2, [r3, #0]
	}
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000410 	.word	0x20000410
 8002298:	200003f0 	.word	0x200003f0
 800229c:	200002ec 	.word	0x200002ec
 80022a0:	200002e8 	.word	0x200002e8
 80022a4:	200003fc 	.word	0x200003fc

080022a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80022b0:	f000 f852 	bl	8002358 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <prvIdleTask+0x28>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d9f9      	bls.n	80022b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <prvIdleTask+0x2c>)
 80022be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80022cc:	e7f0      	b.n	80022b0 <prvIdleTask+0x8>
 80022ce:	bf00      	nop
 80022d0:	200002ec 	.word	0x200002ec
 80022d4:	e000ed04 	.word	0xe000ed04

080022d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	e00c      	b.n	80022fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <prvInitialiseTaskLists+0x60>)
 80022f0:	4413      	add	r3, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff faad 	bl	8001852 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3301      	adds	r3, #1
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b06      	cmp	r3, #6
 8002302:	d9ef      	bls.n	80022e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <prvInitialiseTaskLists+0x64>)
 8002306:	f7ff faa4 	bl	8001852 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <prvInitialiseTaskLists+0x68>)
 800230c:	f7ff faa1 	bl	8001852 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <prvInitialiseTaskLists+0x6c>)
 8002312:	f7ff fa9e 	bl	8001852 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002316:	480c      	ldr	r0, [pc, #48]	; (8002348 <prvInitialiseTaskLists+0x70>)
 8002318:	f7ff fa9b 	bl	8001852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <prvInitialiseTaskLists+0x74>)
 800231e:	f7ff fa98 	bl	8001852 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <prvInitialiseTaskLists+0x78>)
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <prvInitialiseTaskLists+0x64>)
 8002326:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <prvInitialiseTaskLists+0x7c>)
 800232a:	4a05      	ldr	r2, [pc, #20]	; (8002340 <prvInitialiseTaskLists+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200002ec 	.word	0x200002ec
 800233c:	20000378 	.word	0x20000378
 8002340:	2000038c 	.word	0x2000038c
 8002344:	200003a8 	.word	0x200003a8
 8002348:	200003bc 	.word	0x200003bc
 800234c:	200003d4 	.word	0x200003d4
 8002350:	200003a0 	.word	0x200003a0
 8002354:	200003a4 	.word	0x200003a4

08002358 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800235e:	e019      	b.n	8002394 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002360:	f000 fa34 	bl	80027cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <prvCheckTasksWaitingTermination+0x4c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff faf8 	bl	8001966 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <prvCheckTasksWaitingTermination+0x50>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3b01      	subs	r3, #1
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <prvCheckTasksWaitingTermination+0x50>)
 800237e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <prvCheckTasksWaitingTermination+0x54>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3b01      	subs	r3, #1
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <prvCheckTasksWaitingTermination+0x54>)
 8002388:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800238a:	f000 fa4d 	bl	8002828 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f80e 	bl	80023b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <prvCheckTasksWaitingTermination+0x54>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e1      	bne.n	8002360 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200003bc 	.word	0x200003bc
 80023a8:	200003e8 	.word	0x200003e8
 80023ac:	200003d0 	.word	0x200003d0

080023b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d108      	bne.n	80023d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fb9e 	bl	8002b08 <vPortFree>
				vPortFree( pxTCB );
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fb9b 	bl	8002b08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80023d2:	e017      	b.n	8002404 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d103      	bne.n	80023e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fb92 	bl	8002b08 <vPortFree>
	}
 80023e4:	e00e      	b.n	8002404 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d009      	beq.n	8002404 <prvDeleteTCB+0x54>
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e7fe      	b.n	8002402 <prvDeleteTCB+0x52>
	}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <prvResetNextTaskUnblockTime+0x38>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d104      	bne.n	8002426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <prvResetNextTaskUnblockTime+0x3c>)
 800241e:	f04f 32ff 	mov.w	r2, #4294967295
 8002422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002424:	e008      	b.n	8002438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <prvResetNextTaskUnblockTime+0x38>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <prvResetNextTaskUnblockTime+0x3c>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	200003a0 	.word	0x200003a0
 8002448:	20000408 	.word	0x20000408

0800244c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <xTaskGetSchedulerState+0x34>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800245a:	2301      	movs	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	e008      	b.n	8002472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <xTaskGetSchedulerState+0x38>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002468:	2302      	movs	r3, #2
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	e001      	b.n	8002472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002472:	687b      	ldr	r3, [r7, #4]
	}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200003f4 	.word	0x200003f4
 8002484:	20000410 	.word	0x20000410

08002488 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <uxTaskResetEventItemValue+0x2c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <uxTaskResetEventItemValue+0x2c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <uxTaskResetEventItemValue+0x2c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1c2 0207 	rsb	r2, r2, #7
 80024a4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	200002e8 	.word	0x200002e8

080024b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3304      	adds	r3, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fa49 	bl	8001966 <uxListRemove>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10b      	bne.n	80024f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4013      	ands	r3, r2
 80024ee:	4a20      	ldr	r2, [pc, #128]	; (8002570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d10a      	bne.n	8002510 <prvAddCurrentTaskToDelayedList+0x58>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3304      	adds	r3, #4
 8002506:	4619      	mov	r1, r3
 8002508:	481a      	ldr	r0, [pc, #104]	; (8002574 <prvAddCurrentTaskToDelayedList+0xbc>)
 800250a:	f7ff f9cf 	bl	80018ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800250e:	e026      	b.n	800255e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d209      	bcs.n	800253c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <prvAddCurrentTaskToDelayedList+0xc0>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3304      	adds	r3, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7ff f9dd 	bl	80018f4 <vListInsert>
}
 800253a:	e010      	b.n	800255e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <prvAddCurrentTaskToDelayedList+0xc4>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7ff f9d3 	bl	80018f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d202      	bcs.n	800255e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <prvAddCurrentTaskToDelayedList+0xc8>)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200003ec 	.word	0x200003ec
 800256c:	200002e8 	.word	0x200002e8
 8002570:	200003f0 	.word	0x200003f0
 8002574:	200003d4 	.word	0x200003d4
 8002578:	200003a4 	.word	0x200003a4
 800257c:	200003a0 	.word	0x200003a0
 8002580:	20000408 	.word	0x20000408

08002584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3b04      	subs	r3, #4
 8002594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800259c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b04      	subs	r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f023 0201 	bic.w	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3b04      	subs	r3, #4
 80025b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <pxPortInitialiseStack+0x64>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3b14      	subs	r3, #20
 80025be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3b04      	subs	r3, #4
 80025ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f06f 0202 	mvn.w	r2, #2
 80025d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b20      	subs	r3, #32
 80025d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	080025ed 	.word	0x080025ed

080025ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <prvTaskExitError+0x50>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d009      	beq.n	8002614 <prvTaskExitError+0x28>
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e7fe      	b.n	8002612 <prvTaskExitError+0x26>
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002626:	bf00      	nop
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0fc      	beq.n	8002628 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	2000000c 	.word	0x2000000c

08002640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <pxCurrentTCBConst2>)
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	6808      	ldr	r0, [r1, #0]
 8002646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800264a:	f380 8809 	msr	PSP, r0
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f380 8811 	msr	BASEPRI, r0
 800265a:	4770      	bx	lr
 800265c:	f3af 8000 	nop.w

08002660 <pxCurrentTCBConst2>:
 8002660:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop

08002668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002668:	4808      	ldr	r0, [pc, #32]	; (800268c <prvPortStartFirstTask+0x24>)
 800266a:	6800      	ldr	r0, [r0, #0]
 800266c:	6800      	ldr	r0, [r0, #0]
 800266e:	f380 8808 	msr	MSP, r0
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f380 8814 	msr	CONTROL, r0
 800267a:	b662      	cpsie	i
 800267c:	b661      	cpsie	f
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	df00      	svc	0
 8002688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800268a:	bf00      	nop
 800268c:	e000ed08 	.word	0xe000ed08

08002690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <xPortStartScheduler+0x118>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a44      	ldr	r2, [pc, #272]	; (80027ac <xPortStartScheduler+0x11c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d109      	bne.n	80026b4 <xPortStartScheduler+0x24>
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e7fe      	b.n	80026b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026b4:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <xPortStartScheduler+0x118>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3d      	ldr	r2, [pc, #244]	; (80027b0 <xPortStartScheduler+0x120>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d109      	bne.n	80026d2 <xPortStartScheduler+0x42>
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e7fe      	b.n	80026d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <xPortStartScheduler+0x124>)
 80026d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	22ff      	movs	r2, #255	; 0xff
 80026e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <xPortStartScheduler+0x128>)
 80026f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026fa:	4b30      	ldr	r3, [pc, #192]	; (80027bc <xPortStartScheduler+0x12c>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002700:	e009      	b.n	8002716 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002702:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <xPortStartScheduler+0x12c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3b01      	subs	r3, #1
 8002708:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <xPortStartScheduler+0x12c>)
 800270a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d0ef      	beq.n	8002702 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <xPortStartScheduler+0x12c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	d009      	beq.n	8002742 <xPortStartScheduler+0xb2>
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	e7fe      	b.n	8002740 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <xPortStartScheduler+0x12c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <xPortStartScheduler+0x12c>)
 800274a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <xPortStartScheduler+0x12c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <xPortStartScheduler+0x12c>)
 8002756:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <xPortStartScheduler+0x130>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <xPortStartScheduler+0x130>)
 8002766:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800276a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <xPortStartScheduler+0x130>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <xPortStartScheduler+0x130>)
 8002772:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002776:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002778:	f000 f8d6 	bl	8002928 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <xPortStartScheduler+0x134>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002782:	f000 f8f5 	bl	8002970 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <xPortStartScheduler+0x138>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <xPortStartScheduler+0x138>)
 800278c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002790:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002792:	f7ff ff69 	bl	8002668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002796:	f7ff fc93 	bl	80020c0 <vTaskSwitchContext>
	prvTaskExitError();
 800279a:	f7ff ff27 	bl	80025ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	e000ed00 	.word	0xe000ed00
 80027ac:	410fc271 	.word	0x410fc271
 80027b0:	410fc270 	.word	0x410fc270
 80027b4:	e000e400 	.word	0xe000e400
 80027b8:	20000414 	.word	0x20000414
 80027bc:	20000418 	.word	0x20000418
 80027c0:	e000ed20 	.word	0xe000ed20
 80027c4:	2000000c 	.word	0x2000000c
 80027c8:	e000ef34 	.word	0xe000ef34

080027cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <vPortEnterCritical+0x54>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <vPortEnterCritical+0x54>)
 80027ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <vPortEnterCritical+0x54>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10e      	bne.n	8002814 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <vPortEnterCritical+0x58>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <vPortEnterCritical+0x48>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	e7fe      	b.n	8002812 <vPortEnterCritical+0x46>
	}
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	2000000c 	.word	0x2000000c
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <vPortExitCritical+0x4c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <vPortExitCritical+0x22>
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	e7fe      	b.n	8002848 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <vPortExitCritical+0x4c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3b01      	subs	r3, #1
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <vPortExitCritical+0x4c>)
 8002852:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <vPortExitCritical+0x4c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <vPortExitCritical+0x3e>
 800285c:	2300      	movs	r3, #0
 800285e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	2000000c 	.word	0x2000000c
	...

08002880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002880:	f3ef 8009 	mrs	r0, PSP
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <pxCurrentTCBConst>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f01e 0f10 	tst.w	lr, #16
 8002890:	bf08      	it	eq
 8002892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289a:	6010      	str	r0, [r2, #0]
 800289c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028a4:	f380 8811 	msr	BASEPRI, r0
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f7ff fc06 	bl	80020c0 <vTaskSwitchContext>
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	f380 8811 	msr	BASEPRI, r0
 80028bc:	bc09      	pop	{r0, r3}
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	6808      	ldr	r0, [r1, #0]
 80028c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c6:	f01e 0f10 	tst.w	lr, #16
 80028ca:	bf08      	it	eq
 80028cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028d0:	f380 8809 	msr	PSP, r0
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	f3af 8000 	nop.w

080028e0 <pxCurrentTCBConst>:
 80028e0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop

080028e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	__asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002900:	f7ff fb26 	bl	8001f50 <xTaskIncrementTick>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <xPortSysTickHandler+0x3c>)
 800290c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	2300      	movs	r3, #0
 8002914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <vPortSetupTimerInterrupt+0x34>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <vPortSetupTimerInterrupt+0x38>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <vPortSetupTimerInterrupt+0x3c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <vPortSetupTimerInterrupt+0x40>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	4a09      	ldr	r2, [pc, #36]	; (800296c <vPortSetupTimerInterrupt+0x44>)
 8002946:	3b01      	subs	r3, #1
 8002948:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <vPortSetupTimerInterrupt+0x34>)
 800294c:	2207      	movs	r2, #7
 800294e:	601a      	str	r2, [r3, #0]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e010 	.word	0xe000e010
 8002960:	e000e018 	.word	0xe000e018
 8002964:	20000000 	.word	0x20000000
 8002968:	10624dd3 	.word	0x10624dd3
 800296c:	e000e014 	.word	0xe000e014

08002970 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002970:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002980 <vPortEnableVFP+0x10>
 8002974:	6801      	ldr	r1, [r0, #0]
 8002976:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800297a:	6001      	str	r1, [r0, #0]
 800297c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800297e:	bf00      	nop
 8002980:	e000ed88 	.word	0xe000ed88

08002984 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002990:	f7ff fa34 	bl	8001dfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002994:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <pvPortMalloc+0x170>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800299c:	f000 f90c 	bl	8002bb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029a0:	4b55      	ldr	r3, [pc, #340]	; (8002af8 <pvPortMalloc+0x174>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f040 808c 	bne.w	8002ac6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01c      	beq.n	80029ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80029b4:	2208      	movs	r2, #8
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d013      	beq.n	80029ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f023 0307 	bic.w	r3, r3, #7
 80029cc:	3308      	adds	r3, #8
 80029ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <pvPortMalloc+0x6a>
	__asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e7fe      	b.n	80029ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d068      	beq.n	8002ac6 <pvPortMalloc+0x142>
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <pvPortMalloc+0x178>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d863      	bhi.n	8002ac6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029fe:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <pvPortMalloc+0x17c>)
 8002a00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <pvPortMalloc+0x17c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a08:	e004      	b.n	8002a14 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d903      	bls.n	8002a26 <pvPortMalloc+0xa2>
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f1      	bne.n	8002a0a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a26:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <pvPortMalloc+0x170>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d04a      	beq.n	8002ac6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2208      	movs	r2, #8
 8002a36:	4413      	add	r3, r2
 8002a38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	1ad2      	subs	r2, r2, r3
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d91e      	bls.n	8002a90 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d009      	beq.n	8002a78 <pvPortMalloc+0xf4>
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e7fe      	b.n	8002a76 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1ad2      	subs	r2, r2, r3
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a8a:	69b8      	ldr	r0, [r7, #24]
 8002a8c:	f000 f8f6 	bl	8002c7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <pvPortMalloc+0x178>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <pvPortMalloc+0x178>)
 8002a9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <pvPortMalloc+0x178>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <pvPortMalloc+0x180>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d203      	bcs.n	8002ab2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <pvPortMalloc+0x178>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <pvPortMalloc+0x180>)
 8002ab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <pvPortMalloc+0x174>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002ac6:	f7ff f9a7 	bl	8001e18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <pvPortMalloc+0x164>
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	e7fe      	b.n	8002ae6 <pvPortMalloc+0x162>
	return pvReturn;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3728      	adds	r7, #40	; 0x28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20004024 	.word	0x20004024
 8002af8:	20004030 	.word	0x20004030
 8002afc:	20004028 	.word	0x20004028
 8002b00:	2000401c 	.word	0x2000401c
 8002b04:	2000402c 	.word	0x2000402c

08002b08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d046      	beq.n	8002ba8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <vPortFree+0xa8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <vPortFree+0x42>
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e7fe      	b.n	8002b48 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <vPortFree+0x5e>
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	e7fe      	b.n	8002b64 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <vPortFree+0xa8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d019      	beq.n	8002ba8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d115      	bne.n	8002ba8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <vPortFree+0xa8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b8c:	f7ff f936 	bl	8001dfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <vPortFree+0xac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <vPortFree+0xac>)
 8002b9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b9e:	6938      	ldr	r0, [r7, #16]
 8002ba0:	f000 f86c 	bl	8002c7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ba4:	f7ff f938 	bl	8001e18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20004030 	.word	0x20004030
 8002bb4:	20004028 	.word	0x20004028

08002bb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002bbe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002bc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <prvHeapInit+0xac>)
 8002bc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3307      	adds	r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <prvHeapInit+0xac>)
 8002be8:	4413      	add	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <prvHeapInit+0xb0>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <prvHeapInit+0xb0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4413      	add	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c04:	2208      	movs	r2, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0307 	bic.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <prvHeapInit+0xb4>)
 8002c18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <prvHeapInit+0xb4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <prvHeapInit+0xb4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <prvHeapInit+0xb4>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <prvHeapInit+0xb8>)
 8002c46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <prvHeapInit+0xbc>)
 8002c4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <prvHeapInit+0xc0>)
 8002c52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	2000041c 	.word	0x2000041c
 8002c68:	2000401c 	.word	0x2000401c
 8002c6c:	20004024 	.word	0x20004024
 8002c70:	2000402c 	.word	0x2000402c
 8002c74:	20004028 	.word	0x20004028
 8002c78:	20004030 	.word	0x20004030

08002c7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c84:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <prvInsertBlockIntoFreeList+0xac>)
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e002      	b.n	8002c90 <prvInsertBlockIntoFreeList+0x14>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d8f7      	bhi.n	8002c8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d108      	bne.n	8002cbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	441a      	add	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d118      	bne.n	8002d04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <prvInsertBlockIntoFreeList+0xb0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d00d      	beq.n	8002cfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e008      	b.n	8002d0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <prvInsertBlockIntoFreeList+0xb0>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e003      	b.n	8002d0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d002      	beq.n	8002d1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	2000401c 	.word	0x2000401c
 8002d2c:	20004024 	.word	0x20004024

08002d30 <__errno>:
 8002d30:	4b01      	ldr	r3, [pc, #4]	; (8002d38 <__errno+0x8>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000010 	.word	0x20000010

08002d3c <__libc_init_array>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	4e0d      	ldr	r6, [pc, #52]	; (8002d74 <__libc_init_array+0x38>)
 8002d40:	4c0d      	ldr	r4, [pc, #52]	; (8002d78 <__libc_init_array+0x3c>)
 8002d42:	1ba4      	subs	r4, r4, r6
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	2500      	movs	r5, #0
 8002d48:	42a5      	cmp	r5, r4
 8002d4a:	d109      	bne.n	8002d60 <__libc_init_array+0x24>
 8002d4c:	4e0b      	ldr	r6, [pc, #44]	; (8002d7c <__libc_init_array+0x40>)
 8002d4e:	4c0c      	ldr	r4, [pc, #48]	; (8002d80 <__libc_init_array+0x44>)
 8002d50:	f000 fc88 	bl	8003664 <_init>
 8002d54:	1ba4      	subs	r4, r4, r6
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	2500      	movs	r5, #0
 8002d5a:	42a5      	cmp	r5, r4
 8002d5c:	d105      	bne.n	8002d6a <__libc_init_array+0x2e>
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d64:	4798      	blx	r3
 8002d66:	3501      	adds	r5, #1
 8002d68:	e7ee      	b.n	8002d48 <__libc_init_array+0xc>
 8002d6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d6e:	4798      	blx	r3
 8002d70:	3501      	adds	r5, #1
 8002d72:	e7f2      	b.n	8002d5a <__libc_init_array+0x1e>
 8002d74:	0800378c 	.word	0x0800378c
 8002d78:	0800378c 	.word	0x0800378c
 8002d7c:	0800378c 	.word	0x0800378c
 8002d80:	08003790 	.word	0x08003790

08002d84 <memset>:
 8002d84:	4402      	add	r2, r0
 8002d86:	4603      	mov	r3, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <_puts_r>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	460e      	mov	r6, r1
 8002d98:	4605      	mov	r5, r0
 8002d9a:	b118      	cbz	r0, 8002da4 <_puts_r+0x10>
 8002d9c:	6983      	ldr	r3, [r0, #24]
 8002d9e:	b90b      	cbnz	r3, 8002da4 <_puts_r+0x10>
 8002da0:	f000 fa0c 	bl	80031bc <__sinit>
 8002da4:	69ab      	ldr	r3, [r5, #24]
 8002da6:	68ac      	ldr	r4, [r5, #8]
 8002da8:	b913      	cbnz	r3, 8002db0 <_puts_r+0x1c>
 8002daa:	4628      	mov	r0, r5
 8002dac:	f000 fa06 	bl	80031bc <__sinit>
 8002db0:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <_puts_r+0xac>)
 8002db2:	429c      	cmp	r4, r3
 8002db4:	d117      	bne.n	8002de6 <_puts_r+0x52>
 8002db6:	686c      	ldr	r4, [r5, #4]
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	071b      	lsls	r3, r3, #28
 8002dbc:	d51d      	bpl.n	8002dfa <_puts_r+0x66>
 8002dbe:	6923      	ldr	r3, [r4, #16]
 8002dc0:	b1db      	cbz	r3, 8002dfa <_puts_r+0x66>
 8002dc2:	3e01      	subs	r6, #1
 8002dc4:	68a3      	ldr	r3, [r4, #8]
 8002dc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	60a3      	str	r3, [r4, #8]
 8002dce:	b9e9      	cbnz	r1, 8002e0c <_puts_r+0x78>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	da2e      	bge.n	8002e32 <_puts_r+0x9e>
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	210a      	movs	r1, #10
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f000 f83f 	bl	8002e5c <__swbuf_r>
 8002dde:	3001      	adds	r0, #1
 8002de0:	d011      	beq.n	8002e06 <_puts_r+0x72>
 8002de2:	200a      	movs	r0, #10
 8002de4:	e011      	b.n	8002e0a <_puts_r+0x76>
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <_puts_r+0xb0>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	d101      	bne.n	8002df0 <_puts_r+0x5c>
 8002dec:	68ac      	ldr	r4, [r5, #8]
 8002dee:	e7e3      	b.n	8002db8 <_puts_r+0x24>
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <_puts_r+0xb4>)
 8002df2:	429c      	cmp	r4, r3
 8002df4:	bf08      	it	eq
 8002df6:	68ec      	ldreq	r4, [r5, #12]
 8002df8:	e7de      	b.n	8002db8 <_puts_r+0x24>
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f000 f87f 	bl	8002f00 <__swsetup_r>
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d0dd      	beq.n	8002dc2 <_puts_r+0x2e>
 8002e06:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da04      	bge.n	8002e1a <_puts_r+0x86>
 8002e10:	69a2      	ldr	r2, [r4, #24]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dc06      	bgt.n	8002e24 <_puts_r+0x90>
 8002e16:	290a      	cmp	r1, #10
 8002e18:	d004      	beq.n	8002e24 <_puts_r+0x90>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	6022      	str	r2, [r4, #0]
 8002e20:	7019      	strb	r1, [r3, #0]
 8002e22:	e7cf      	b.n	8002dc4 <_puts_r+0x30>
 8002e24:	4622      	mov	r2, r4
 8002e26:	4628      	mov	r0, r5
 8002e28:	f000 f818 	bl	8002e5c <__swbuf_r>
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d1c9      	bne.n	8002dc4 <_puts_r+0x30>
 8002e30:	e7e9      	b.n	8002e06 <_puts_r+0x72>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	200a      	movs	r0, #10
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	6022      	str	r2, [r4, #0]
 8002e3a:	7018      	strb	r0, [r3, #0]
 8002e3c:	e7e5      	b.n	8002e0a <_puts_r+0x76>
 8002e3e:	bf00      	nop
 8002e40:	08003744 	.word	0x08003744
 8002e44:	08003764 	.word	0x08003764
 8002e48:	08003724 	.word	0x08003724

08002e4c <puts>:
 8002e4c:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <puts+0xc>)
 8002e4e:	4601      	mov	r1, r0
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	f7ff bf9f 	b.w	8002d94 <_puts_r>
 8002e56:	bf00      	nop
 8002e58:	20000010 	.word	0x20000010

08002e5c <__swbuf_r>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	460e      	mov	r6, r1
 8002e60:	4614      	mov	r4, r2
 8002e62:	4605      	mov	r5, r0
 8002e64:	b118      	cbz	r0, 8002e6e <__swbuf_r+0x12>
 8002e66:	6983      	ldr	r3, [r0, #24]
 8002e68:	b90b      	cbnz	r3, 8002e6e <__swbuf_r+0x12>
 8002e6a:	f000 f9a7 	bl	80031bc <__sinit>
 8002e6e:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <__swbuf_r+0x98>)
 8002e70:	429c      	cmp	r4, r3
 8002e72:	d12a      	bne.n	8002eca <__swbuf_r+0x6e>
 8002e74:	686c      	ldr	r4, [r5, #4]
 8002e76:	69a3      	ldr	r3, [r4, #24]
 8002e78:	60a3      	str	r3, [r4, #8]
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	071a      	lsls	r2, r3, #28
 8002e7e:	d52e      	bpl.n	8002ede <__swbuf_r+0x82>
 8002e80:	6923      	ldr	r3, [r4, #16]
 8002e82:	b363      	cbz	r3, 8002ede <__swbuf_r+0x82>
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	1ac0      	subs	r0, r0, r3
 8002e8a:	6963      	ldr	r3, [r4, #20]
 8002e8c:	b2f6      	uxtb	r6, r6
 8002e8e:	4283      	cmp	r3, r0
 8002e90:	4637      	mov	r7, r6
 8002e92:	dc04      	bgt.n	8002e9e <__swbuf_r+0x42>
 8002e94:	4621      	mov	r1, r4
 8002e96:	4628      	mov	r0, r5
 8002e98:	f000 f926 	bl	80030e8 <_fflush_r>
 8002e9c:	bb28      	cbnz	r0, 8002eea <__swbuf_r+0x8e>
 8002e9e:	68a3      	ldr	r3, [r4, #8]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60a3      	str	r3, [r4, #8]
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	6022      	str	r2, [r4, #0]
 8002eaa:	701e      	strb	r6, [r3, #0]
 8002eac:	6963      	ldr	r3, [r4, #20]
 8002eae:	3001      	adds	r0, #1
 8002eb0:	4283      	cmp	r3, r0
 8002eb2:	d004      	beq.n	8002ebe <__swbuf_r+0x62>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	07db      	lsls	r3, r3, #31
 8002eb8:	d519      	bpl.n	8002eee <__swbuf_r+0x92>
 8002eba:	2e0a      	cmp	r6, #10
 8002ebc:	d117      	bne.n	8002eee <__swbuf_r+0x92>
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f000 f911 	bl	80030e8 <_fflush_r>
 8002ec6:	b190      	cbz	r0, 8002eee <__swbuf_r+0x92>
 8002ec8:	e00f      	b.n	8002eea <__swbuf_r+0x8e>
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <__swbuf_r+0x9c>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d101      	bne.n	8002ed4 <__swbuf_r+0x78>
 8002ed0:	68ac      	ldr	r4, [r5, #8]
 8002ed2:	e7d0      	b.n	8002e76 <__swbuf_r+0x1a>
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <__swbuf_r+0xa0>)
 8002ed6:	429c      	cmp	r4, r3
 8002ed8:	bf08      	it	eq
 8002eda:	68ec      	ldreq	r4, [r5, #12]
 8002edc:	e7cb      	b.n	8002e76 <__swbuf_r+0x1a>
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f000 f80d 	bl	8002f00 <__swsetup_r>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d0cc      	beq.n	8002e84 <__swbuf_r+0x28>
 8002eea:	f04f 37ff 	mov.w	r7, #4294967295
 8002eee:	4638      	mov	r0, r7
 8002ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	08003744 	.word	0x08003744
 8002ef8:	08003764 	.word	0x08003764
 8002efc:	08003724 	.word	0x08003724

08002f00 <__swsetup_r>:
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <__swsetup_r+0xcc>)
 8002f02:	b570      	push	{r4, r5, r6, lr}
 8002f04:	681d      	ldr	r5, [r3, #0]
 8002f06:	4606      	mov	r6, r0
 8002f08:	460c      	mov	r4, r1
 8002f0a:	b125      	cbz	r5, 8002f16 <__swsetup_r+0x16>
 8002f0c:	69ab      	ldr	r3, [r5, #24]
 8002f0e:	b913      	cbnz	r3, 8002f16 <__swsetup_r+0x16>
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 f953 	bl	80031bc <__sinit>
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <__swsetup_r+0xd0>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d10f      	bne.n	8002f3c <__swsetup_r+0x3c>
 8002f1c:	686c      	ldr	r4, [r5, #4]
 8002f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	0715      	lsls	r5, r2, #28
 8002f26:	d42c      	bmi.n	8002f82 <__swsetup_r+0x82>
 8002f28:	06d0      	lsls	r0, r2, #27
 8002f2a:	d411      	bmi.n	8002f50 <__swsetup_r+0x50>
 8002f2c:	2209      	movs	r2, #9
 8002f2e:	6032      	str	r2, [r6, #0]
 8002f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f34:	81a3      	strh	r3, [r4, #12]
 8002f36:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3a:	e03e      	b.n	8002fba <__swsetup_r+0xba>
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <__swsetup_r+0xd4>)
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d101      	bne.n	8002f46 <__swsetup_r+0x46>
 8002f42:	68ac      	ldr	r4, [r5, #8]
 8002f44:	e7eb      	b.n	8002f1e <__swsetup_r+0x1e>
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <__swsetup_r+0xd8>)
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	bf08      	it	eq
 8002f4c:	68ec      	ldreq	r4, [r5, #12]
 8002f4e:	e7e6      	b.n	8002f1e <__swsetup_r+0x1e>
 8002f50:	0751      	lsls	r1, r2, #29
 8002f52:	d512      	bpl.n	8002f7a <__swsetup_r+0x7a>
 8002f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f56:	b141      	cbz	r1, 8002f6a <__swsetup_r+0x6a>
 8002f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	d002      	beq.n	8002f66 <__swsetup_r+0x66>
 8002f60:	4630      	mov	r0, r6
 8002f62:	f000 fa19 	bl	8003398 <_free_r>
 8002f66:	2300      	movs	r3, #0
 8002f68:	6363      	str	r3, [r4, #52]	; 0x34
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f70:	81a3      	strh	r3, [r4, #12]
 8002f72:	2300      	movs	r3, #0
 8002f74:	6063      	str	r3, [r4, #4]
 8002f76:	6923      	ldr	r3, [r4, #16]
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	81a3      	strh	r3, [r4, #12]
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	b94b      	cbnz	r3, 8002f9a <__swsetup_r+0x9a>
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d003      	beq.n	8002f9a <__swsetup_r+0x9a>
 8002f92:	4621      	mov	r1, r4
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 f9bf 	bl	8003318 <__smakebuf_r>
 8002f9a:	89a2      	ldrh	r2, [r4, #12]
 8002f9c:	f012 0301 	ands.w	r3, r2, #1
 8002fa0:	d00c      	beq.n	8002fbc <__swsetup_r+0xbc>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60a3      	str	r3, [r4, #8]
 8002fa6:	6963      	ldr	r3, [r4, #20]
 8002fa8:	425b      	negs	r3, r3
 8002faa:	61a3      	str	r3, [r4, #24]
 8002fac:	6923      	ldr	r3, [r4, #16]
 8002fae:	b953      	cbnz	r3, 8002fc6 <__swsetup_r+0xc6>
 8002fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002fb8:	d1ba      	bne.n	8002f30 <__swsetup_r+0x30>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	0792      	lsls	r2, r2, #30
 8002fbe:	bf58      	it	pl
 8002fc0:	6963      	ldrpl	r3, [r4, #20]
 8002fc2:	60a3      	str	r3, [r4, #8]
 8002fc4:	e7f2      	b.n	8002fac <__swsetup_r+0xac>
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	e7f7      	b.n	8002fba <__swsetup_r+0xba>
 8002fca:	bf00      	nop
 8002fcc:	20000010 	.word	0x20000010
 8002fd0:	08003744 	.word	0x08003744
 8002fd4:	08003764 	.word	0x08003764
 8002fd8:	08003724 	.word	0x08003724

08002fdc <__sflush_r>:
 8002fdc:	898a      	ldrh	r2, [r1, #12]
 8002fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe2:	4605      	mov	r5, r0
 8002fe4:	0710      	lsls	r0, r2, #28
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	d458      	bmi.n	800309c <__sflush_r+0xc0>
 8002fea:	684b      	ldr	r3, [r1, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	dc05      	bgt.n	8002ffc <__sflush_r+0x20>
 8002ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	dc02      	bgt.n	8002ffc <__sflush_r+0x20>
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ffe:	2e00      	cmp	r6, #0
 8003000:	d0f9      	beq.n	8002ff6 <__sflush_r+0x1a>
 8003002:	2300      	movs	r3, #0
 8003004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003008:	682f      	ldr	r7, [r5, #0]
 800300a:	6a21      	ldr	r1, [r4, #32]
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	d032      	beq.n	8003076 <__sflush_r+0x9a>
 8003010:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	075a      	lsls	r2, r3, #29
 8003016:	d505      	bpl.n	8003024 <__sflush_r+0x48>
 8003018:	6863      	ldr	r3, [r4, #4]
 800301a:	1ac0      	subs	r0, r0, r3
 800301c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800301e:	b10b      	cbz	r3, 8003024 <__sflush_r+0x48>
 8003020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003022:	1ac0      	subs	r0, r0, r3
 8003024:	2300      	movs	r3, #0
 8003026:	4602      	mov	r2, r0
 8003028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800302a:	6a21      	ldr	r1, [r4, #32]
 800302c:	4628      	mov	r0, r5
 800302e:	47b0      	blx	r6
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	d106      	bne.n	8003044 <__sflush_r+0x68>
 8003036:	6829      	ldr	r1, [r5, #0]
 8003038:	291d      	cmp	r1, #29
 800303a:	d848      	bhi.n	80030ce <__sflush_r+0xf2>
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <__sflush_r+0x108>)
 800303e:	40ca      	lsrs	r2, r1
 8003040:	07d6      	lsls	r6, r2, #31
 8003042:	d544      	bpl.n	80030ce <__sflush_r+0xf2>
 8003044:	2200      	movs	r2, #0
 8003046:	6062      	str	r2, [r4, #4]
 8003048:	04d9      	lsls	r1, r3, #19
 800304a:	6922      	ldr	r2, [r4, #16]
 800304c:	6022      	str	r2, [r4, #0]
 800304e:	d504      	bpl.n	800305a <__sflush_r+0x7e>
 8003050:	1c42      	adds	r2, r0, #1
 8003052:	d101      	bne.n	8003058 <__sflush_r+0x7c>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b903      	cbnz	r3, 800305a <__sflush_r+0x7e>
 8003058:	6560      	str	r0, [r4, #84]	; 0x54
 800305a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800305c:	602f      	str	r7, [r5, #0]
 800305e:	2900      	cmp	r1, #0
 8003060:	d0c9      	beq.n	8002ff6 <__sflush_r+0x1a>
 8003062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003066:	4299      	cmp	r1, r3
 8003068:	d002      	beq.n	8003070 <__sflush_r+0x94>
 800306a:	4628      	mov	r0, r5
 800306c:	f000 f994 	bl	8003398 <_free_r>
 8003070:	2000      	movs	r0, #0
 8003072:	6360      	str	r0, [r4, #52]	; 0x34
 8003074:	e7c0      	b.n	8002ff8 <__sflush_r+0x1c>
 8003076:	2301      	movs	r3, #1
 8003078:	4628      	mov	r0, r5
 800307a:	47b0      	blx	r6
 800307c:	1c41      	adds	r1, r0, #1
 800307e:	d1c8      	bne.n	8003012 <__sflush_r+0x36>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0c5      	beq.n	8003012 <__sflush_r+0x36>
 8003086:	2b1d      	cmp	r3, #29
 8003088:	d001      	beq.n	800308e <__sflush_r+0xb2>
 800308a:	2b16      	cmp	r3, #22
 800308c:	d101      	bne.n	8003092 <__sflush_r+0xb6>
 800308e:	602f      	str	r7, [r5, #0]
 8003090:	e7b1      	b.n	8002ff6 <__sflush_r+0x1a>
 8003092:	89a3      	ldrh	r3, [r4, #12]
 8003094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003098:	81a3      	strh	r3, [r4, #12]
 800309a:	e7ad      	b.n	8002ff8 <__sflush_r+0x1c>
 800309c:	690f      	ldr	r7, [r1, #16]
 800309e:	2f00      	cmp	r7, #0
 80030a0:	d0a9      	beq.n	8002ff6 <__sflush_r+0x1a>
 80030a2:	0793      	lsls	r3, r2, #30
 80030a4:	680e      	ldr	r6, [r1, #0]
 80030a6:	bf08      	it	eq
 80030a8:	694b      	ldreq	r3, [r1, #20]
 80030aa:	600f      	str	r7, [r1, #0]
 80030ac:	bf18      	it	ne
 80030ae:	2300      	movne	r3, #0
 80030b0:	eba6 0807 	sub.w	r8, r6, r7
 80030b4:	608b      	str	r3, [r1, #8]
 80030b6:	f1b8 0f00 	cmp.w	r8, #0
 80030ba:	dd9c      	ble.n	8002ff6 <__sflush_r+0x1a>
 80030bc:	4643      	mov	r3, r8
 80030be:	463a      	mov	r2, r7
 80030c0:	6a21      	ldr	r1, [r4, #32]
 80030c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030c4:	4628      	mov	r0, r5
 80030c6:	47b0      	blx	r6
 80030c8:	2800      	cmp	r0, #0
 80030ca:	dc06      	bgt.n	80030da <__sflush_r+0xfe>
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	e78e      	b.n	8002ff8 <__sflush_r+0x1c>
 80030da:	4407      	add	r7, r0
 80030dc:	eba8 0800 	sub.w	r8, r8, r0
 80030e0:	e7e9      	b.n	80030b6 <__sflush_r+0xda>
 80030e2:	bf00      	nop
 80030e4:	20400001 	.word	0x20400001

080030e8 <_fflush_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	690b      	ldr	r3, [r1, #16]
 80030ec:	4605      	mov	r5, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	b1db      	cbz	r3, 800312a <_fflush_r+0x42>
 80030f2:	b118      	cbz	r0, 80030fc <_fflush_r+0x14>
 80030f4:	6983      	ldr	r3, [r0, #24]
 80030f6:	b90b      	cbnz	r3, 80030fc <_fflush_r+0x14>
 80030f8:	f000 f860 	bl	80031bc <__sinit>
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <_fflush_r+0x48>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d109      	bne.n	8003116 <_fflush_r+0x2e>
 8003102:	686c      	ldr	r4, [r5, #4]
 8003104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003108:	b17b      	cbz	r3, 800312a <_fflush_r+0x42>
 800310a:	4621      	mov	r1, r4
 800310c:	4628      	mov	r0, r5
 800310e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003112:	f7ff bf63 	b.w	8002fdc <__sflush_r>
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <_fflush_r+0x4c>)
 8003118:	429c      	cmp	r4, r3
 800311a:	d101      	bne.n	8003120 <_fflush_r+0x38>
 800311c:	68ac      	ldr	r4, [r5, #8]
 800311e:	e7f1      	b.n	8003104 <_fflush_r+0x1c>
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <_fflush_r+0x50>)
 8003122:	429c      	cmp	r4, r3
 8003124:	bf08      	it	eq
 8003126:	68ec      	ldreq	r4, [r5, #12]
 8003128:	e7ec      	b.n	8003104 <_fflush_r+0x1c>
 800312a:	2000      	movs	r0, #0
 800312c:	bd38      	pop	{r3, r4, r5, pc}
 800312e:	bf00      	nop
 8003130:	08003744 	.word	0x08003744
 8003134:	08003764 	.word	0x08003764
 8003138:	08003724 	.word	0x08003724

0800313c <std>:
 800313c:	2300      	movs	r3, #0
 800313e:	b510      	push	{r4, lr}
 8003140:	4604      	mov	r4, r0
 8003142:	e9c0 3300 	strd	r3, r3, [r0]
 8003146:	6083      	str	r3, [r0, #8]
 8003148:	8181      	strh	r1, [r0, #12]
 800314a:	6643      	str	r3, [r0, #100]	; 0x64
 800314c:	81c2      	strh	r2, [r0, #14]
 800314e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003152:	6183      	str	r3, [r0, #24]
 8003154:	4619      	mov	r1, r3
 8003156:	2208      	movs	r2, #8
 8003158:	305c      	adds	r0, #92	; 0x5c
 800315a:	f7ff fe13 	bl	8002d84 <memset>
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <std+0x38>)
 8003160:	6263      	str	r3, [r4, #36]	; 0x24
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <std+0x3c>)
 8003164:	62a3      	str	r3, [r4, #40]	; 0x28
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <std+0x40>)
 8003168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <std+0x44>)
 800316c:	6224      	str	r4, [r4, #32]
 800316e:	6323      	str	r3, [r4, #48]	; 0x30
 8003170:	bd10      	pop	{r4, pc}
 8003172:	bf00      	nop
 8003174:	08003509 	.word	0x08003509
 8003178:	0800352b 	.word	0x0800352b
 800317c:	08003563 	.word	0x08003563
 8003180:	08003587 	.word	0x08003587

08003184 <_cleanup_r>:
 8003184:	4901      	ldr	r1, [pc, #4]	; (800318c <_cleanup_r+0x8>)
 8003186:	f000 b885 	b.w	8003294 <_fwalk_reent>
 800318a:	bf00      	nop
 800318c:	080030e9 	.word	0x080030e9

08003190 <__sfmoreglue>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	1e4a      	subs	r2, r1, #1
 8003194:	2568      	movs	r5, #104	; 0x68
 8003196:	4355      	muls	r5, r2
 8003198:	460e      	mov	r6, r1
 800319a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800319e:	f000 f949 	bl	8003434 <_malloc_r>
 80031a2:	4604      	mov	r4, r0
 80031a4:	b140      	cbz	r0, 80031b8 <__sfmoreglue+0x28>
 80031a6:	2100      	movs	r1, #0
 80031a8:	e9c0 1600 	strd	r1, r6, [r0]
 80031ac:	300c      	adds	r0, #12
 80031ae:	60a0      	str	r0, [r4, #8]
 80031b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031b4:	f7ff fde6 	bl	8002d84 <memset>
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd70      	pop	{r4, r5, r6, pc}

080031bc <__sinit>:
 80031bc:	6983      	ldr	r3, [r0, #24]
 80031be:	b510      	push	{r4, lr}
 80031c0:	4604      	mov	r4, r0
 80031c2:	bb33      	cbnz	r3, 8003212 <__sinit+0x56>
 80031c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80031c8:	6503      	str	r3, [r0, #80]	; 0x50
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <__sinit+0x58>)
 80031cc:	4a12      	ldr	r2, [pc, #72]	; (8003218 <__sinit+0x5c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6282      	str	r2, [r0, #40]	; 0x28
 80031d2:	4298      	cmp	r0, r3
 80031d4:	bf04      	itt	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	6183      	streq	r3, [r0, #24]
 80031da:	f000 f81f 	bl	800321c <__sfp>
 80031de:	6060      	str	r0, [r4, #4]
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 f81b 	bl	800321c <__sfp>
 80031e6:	60a0      	str	r0, [r4, #8]
 80031e8:	4620      	mov	r0, r4
 80031ea:	f000 f817 	bl	800321c <__sfp>
 80031ee:	2200      	movs	r2, #0
 80031f0:	60e0      	str	r0, [r4, #12]
 80031f2:	2104      	movs	r1, #4
 80031f4:	6860      	ldr	r0, [r4, #4]
 80031f6:	f7ff ffa1 	bl	800313c <std>
 80031fa:	2201      	movs	r2, #1
 80031fc:	2109      	movs	r1, #9
 80031fe:	68a0      	ldr	r0, [r4, #8]
 8003200:	f7ff ff9c 	bl	800313c <std>
 8003204:	2202      	movs	r2, #2
 8003206:	2112      	movs	r1, #18
 8003208:	68e0      	ldr	r0, [r4, #12]
 800320a:	f7ff ff97 	bl	800313c <std>
 800320e:	2301      	movs	r3, #1
 8003210:	61a3      	str	r3, [r4, #24]
 8003212:	bd10      	pop	{r4, pc}
 8003214:	08003720 	.word	0x08003720
 8003218:	08003185 	.word	0x08003185

0800321c <__sfp>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <__sfp+0x70>)
 8003220:	681e      	ldr	r6, [r3, #0]
 8003222:	69b3      	ldr	r3, [r6, #24]
 8003224:	4607      	mov	r7, r0
 8003226:	b913      	cbnz	r3, 800322e <__sfp+0x12>
 8003228:	4630      	mov	r0, r6
 800322a:	f7ff ffc7 	bl	80031bc <__sinit>
 800322e:	3648      	adds	r6, #72	; 0x48
 8003230:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003234:	3b01      	subs	r3, #1
 8003236:	d503      	bpl.n	8003240 <__sfp+0x24>
 8003238:	6833      	ldr	r3, [r6, #0]
 800323a:	b133      	cbz	r3, 800324a <__sfp+0x2e>
 800323c:	6836      	ldr	r6, [r6, #0]
 800323e:	e7f7      	b.n	8003230 <__sfp+0x14>
 8003240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003244:	b16d      	cbz	r5, 8003262 <__sfp+0x46>
 8003246:	3468      	adds	r4, #104	; 0x68
 8003248:	e7f4      	b.n	8003234 <__sfp+0x18>
 800324a:	2104      	movs	r1, #4
 800324c:	4638      	mov	r0, r7
 800324e:	f7ff ff9f 	bl	8003190 <__sfmoreglue>
 8003252:	6030      	str	r0, [r6, #0]
 8003254:	2800      	cmp	r0, #0
 8003256:	d1f1      	bne.n	800323c <__sfp+0x20>
 8003258:	230c      	movs	r3, #12
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4604      	mov	r4, r0
 800325e:	4620      	mov	r0, r4
 8003260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <__sfp+0x74>)
 8003264:	6665      	str	r5, [r4, #100]	; 0x64
 8003266:	e9c4 5500 	strd	r5, r5, [r4]
 800326a:	60a5      	str	r5, [r4, #8]
 800326c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003270:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003274:	2208      	movs	r2, #8
 8003276:	4629      	mov	r1, r5
 8003278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800327c:	f7ff fd82 	bl	8002d84 <memset>
 8003280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003288:	e7e9      	b.n	800325e <__sfp+0x42>
 800328a:	bf00      	nop
 800328c:	08003720 	.word	0x08003720
 8003290:	ffff0001 	.word	0xffff0001

08003294 <_fwalk_reent>:
 8003294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003298:	4680      	mov	r8, r0
 800329a:	4689      	mov	r9, r1
 800329c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032a0:	2600      	movs	r6, #0
 80032a2:	b914      	cbnz	r4, 80032aa <_fwalk_reent+0x16>
 80032a4:	4630      	mov	r0, r6
 80032a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80032ae:	3f01      	subs	r7, #1
 80032b0:	d501      	bpl.n	80032b6 <_fwalk_reent+0x22>
 80032b2:	6824      	ldr	r4, [r4, #0]
 80032b4:	e7f5      	b.n	80032a2 <_fwalk_reent+0xe>
 80032b6:	89ab      	ldrh	r3, [r5, #12]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d907      	bls.n	80032cc <_fwalk_reent+0x38>
 80032bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032c0:	3301      	adds	r3, #1
 80032c2:	d003      	beq.n	80032cc <_fwalk_reent+0x38>
 80032c4:	4629      	mov	r1, r5
 80032c6:	4640      	mov	r0, r8
 80032c8:	47c8      	blx	r9
 80032ca:	4306      	orrs	r6, r0
 80032cc:	3568      	adds	r5, #104	; 0x68
 80032ce:	e7ee      	b.n	80032ae <_fwalk_reent+0x1a>

080032d0 <__swhatbuf_r>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	460e      	mov	r6, r1
 80032d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d8:	2900      	cmp	r1, #0
 80032da:	b096      	sub	sp, #88	; 0x58
 80032dc:	4614      	mov	r4, r2
 80032de:	461d      	mov	r5, r3
 80032e0:	da07      	bge.n	80032f2 <__swhatbuf_r+0x22>
 80032e2:	2300      	movs	r3, #0
 80032e4:	602b      	str	r3, [r5, #0]
 80032e6:	89b3      	ldrh	r3, [r6, #12]
 80032e8:	061a      	lsls	r2, r3, #24
 80032ea:	d410      	bmi.n	800330e <__swhatbuf_r+0x3e>
 80032ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f0:	e00e      	b.n	8003310 <__swhatbuf_r+0x40>
 80032f2:	466a      	mov	r2, sp
 80032f4:	f000 f96e 	bl	80035d4 <_fstat_r>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	dbf2      	blt.n	80032e2 <__swhatbuf_r+0x12>
 80032fc:	9a01      	ldr	r2, [sp, #4]
 80032fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003302:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003306:	425a      	negs	r2, r3
 8003308:	415a      	adcs	r2, r3
 800330a:	602a      	str	r2, [r5, #0]
 800330c:	e7ee      	b.n	80032ec <__swhatbuf_r+0x1c>
 800330e:	2340      	movs	r3, #64	; 0x40
 8003310:	2000      	movs	r0, #0
 8003312:	6023      	str	r3, [r4, #0]
 8003314:	b016      	add	sp, #88	; 0x58
 8003316:	bd70      	pop	{r4, r5, r6, pc}

08003318 <__smakebuf_r>:
 8003318:	898b      	ldrh	r3, [r1, #12]
 800331a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800331c:	079d      	lsls	r5, r3, #30
 800331e:	4606      	mov	r6, r0
 8003320:	460c      	mov	r4, r1
 8003322:	d507      	bpl.n	8003334 <__smakebuf_r+0x1c>
 8003324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	6123      	str	r3, [r4, #16]
 800332c:	2301      	movs	r3, #1
 800332e:	6163      	str	r3, [r4, #20]
 8003330:	b002      	add	sp, #8
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	ab01      	add	r3, sp, #4
 8003336:	466a      	mov	r2, sp
 8003338:	f7ff ffca 	bl	80032d0 <__swhatbuf_r>
 800333c:	9900      	ldr	r1, [sp, #0]
 800333e:	4605      	mov	r5, r0
 8003340:	4630      	mov	r0, r6
 8003342:	f000 f877 	bl	8003434 <_malloc_r>
 8003346:	b948      	cbnz	r0, 800335c <__smakebuf_r+0x44>
 8003348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800334c:	059a      	lsls	r2, r3, #22
 800334e:	d4ef      	bmi.n	8003330 <__smakebuf_r+0x18>
 8003350:	f023 0303 	bic.w	r3, r3, #3
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	81a3      	strh	r3, [r4, #12]
 800335a:	e7e3      	b.n	8003324 <__smakebuf_r+0xc>
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <__smakebuf_r+0x7c>)
 800335e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	6020      	str	r0, [r4, #0]
 8003364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003368:	81a3      	strh	r3, [r4, #12]
 800336a:	9b00      	ldr	r3, [sp, #0]
 800336c:	6163      	str	r3, [r4, #20]
 800336e:	9b01      	ldr	r3, [sp, #4]
 8003370:	6120      	str	r0, [r4, #16]
 8003372:	b15b      	cbz	r3, 800338c <__smakebuf_r+0x74>
 8003374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003378:	4630      	mov	r0, r6
 800337a:	f000 f93d 	bl	80035f8 <_isatty_r>
 800337e:	b128      	cbz	r0, 800338c <__smakebuf_r+0x74>
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	81a3      	strh	r3, [r4, #12]
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	431d      	orrs	r5, r3
 8003390:	81a5      	strh	r5, [r4, #12]
 8003392:	e7cd      	b.n	8003330 <__smakebuf_r+0x18>
 8003394:	08003185 	.word	0x08003185

08003398 <_free_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4605      	mov	r5, r0
 800339c:	2900      	cmp	r1, #0
 800339e:	d045      	beq.n	800342c <_free_r+0x94>
 80033a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033a4:	1f0c      	subs	r4, r1, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bfb8      	it	lt
 80033aa:	18e4      	addlt	r4, r4, r3
 80033ac:	f000 f946 	bl	800363c <__malloc_lock>
 80033b0:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <_free_r+0x98>)
 80033b2:	6813      	ldr	r3, [r2, #0]
 80033b4:	4610      	mov	r0, r2
 80033b6:	b933      	cbnz	r3, 80033c6 <_free_r+0x2e>
 80033b8:	6063      	str	r3, [r4, #4]
 80033ba:	6014      	str	r4, [r2, #0]
 80033bc:	4628      	mov	r0, r5
 80033be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033c2:	f000 b93c 	b.w	800363e <__malloc_unlock>
 80033c6:	42a3      	cmp	r3, r4
 80033c8:	d90c      	bls.n	80033e4 <_free_r+0x4c>
 80033ca:	6821      	ldr	r1, [r4, #0]
 80033cc:	1862      	adds	r2, r4, r1
 80033ce:	4293      	cmp	r3, r2
 80033d0:	bf04      	itt	eq
 80033d2:	681a      	ldreq	r2, [r3, #0]
 80033d4:	685b      	ldreq	r3, [r3, #4]
 80033d6:	6063      	str	r3, [r4, #4]
 80033d8:	bf04      	itt	eq
 80033da:	1852      	addeq	r2, r2, r1
 80033dc:	6022      	streq	r2, [r4, #0]
 80033de:	6004      	str	r4, [r0, #0]
 80033e0:	e7ec      	b.n	80033bc <_free_r+0x24>
 80033e2:	4613      	mov	r3, r2
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	b10a      	cbz	r2, 80033ec <_free_r+0x54>
 80033e8:	42a2      	cmp	r2, r4
 80033ea:	d9fa      	bls.n	80033e2 <_free_r+0x4a>
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	1858      	adds	r0, r3, r1
 80033f0:	42a0      	cmp	r0, r4
 80033f2:	d10b      	bne.n	800340c <_free_r+0x74>
 80033f4:	6820      	ldr	r0, [r4, #0]
 80033f6:	4401      	add	r1, r0
 80033f8:	1858      	adds	r0, r3, r1
 80033fa:	4282      	cmp	r2, r0
 80033fc:	6019      	str	r1, [r3, #0]
 80033fe:	d1dd      	bne.n	80033bc <_free_r+0x24>
 8003400:	6810      	ldr	r0, [r2, #0]
 8003402:	6852      	ldr	r2, [r2, #4]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	4401      	add	r1, r0
 8003408:	6019      	str	r1, [r3, #0]
 800340a:	e7d7      	b.n	80033bc <_free_r+0x24>
 800340c:	d902      	bls.n	8003414 <_free_r+0x7c>
 800340e:	230c      	movs	r3, #12
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	e7d3      	b.n	80033bc <_free_r+0x24>
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	1821      	adds	r1, r4, r0
 8003418:	428a      	cmp	r2, r1
 800341a:	bf04      	itt	eq
 800341c:	6811      	ldreq	r1, [r2, #0]
 800341e:	6852      	ldreq	r2, [r2, #4]
 8003420:	6062      	str	r2, [r4, #4]
 8003422:	bf04      	itt	eq
 8003424:	1809      	addeq	r1, r1, r0
 8003426:	6021      	streq	r1, [r4, #0]
 8003428:	605c      	str	r4, [r3, #4]
 800342a:	e7c7      	b.n	80033bc <_free_r+0x24>
 800342c:	bd38      	pop	{r3, r4, r5, pc}
 800342e:	bf00      	nop
 8003430:	20004034 	.word	0x20004034

08003434 <_malloc_r>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	1ccd      	adds	r5, r1, #3
 8003438:	f025 0503 	bic.w	r5, r5, #3
 800343c:	3508      	adds	r5, #8
 800343e:	2d0c      	cmp	r5, #12
 8003440:	bf38      	it	cc
 8003442:	250c      	movcc	r5, #12
 8003444:	2d00      	cmp	r5, #0
 8003446:	4606      	mov	r6, r0
 8003448:	db01      	blt.n	800344e <_malloc_r+0x1a>
 800344a:	42a9      	cmp	r1, r5
 800344c:	d903      	bls.n	8003456 <_malloc_r+0x22>
 800344e:	230c      	movs	r3, #12
 8003450:	6033      	str	r3, [r6, #0]
 8003452:	2000      	movs	r0, #0
 8003454:	bd70      	pop	{r4, r5, r6, pc}
 8003456:	f000 f8f1 	bl	800363c <__malloc_lock>
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <_malloc_r+0xac>)
 800345c:	6814      	ldr	r4, [r2, #0]
 800345e:	4621      	mov	r1, r4
 8003460:	b991      	cbnz	r1, 8003488 <_malloc_r+0x54>
 8003462:	4c20      	ldr	r4, [pc, #128]	; (80034e4 <_malloc_r+0xb0>)
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	b91b      	cbnz	r3, 8003470 <_malloc_r+0x3c>
 8003468:	4630      	mov	r0, r6
 800346a:	f000 f83d 	bl	80034e8 <_sbrk_r>
 800346e:	6020      	str	r0, [r4, #0]
 8003470:	4629      	mov	r1, r5
 8003472:	4630      	mov	r0, r6
 8003474:	f000 f838 	bl	80034e8 <_sbrk_r>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d124      	bne.n	80034c6 <_malloc_r+0x92>
 800347c:	230c      	movs	r3, #12
 800347e:	6033      	str	r3, [r6, #0]
 8003480:	4630      	mov	r0, r6
 8003482:	f000 f8dc 	bl	800363e <__malloc_unlock>
 8003486:	e7e4      	b.n	8003452 <_malloc_r+0x1e>
 8003488:	680b      	ldr	r3, [r1, #0]
 800348a:	1b5b      	subs	r3, r3, r5
 800348c:	d418      	bmi.n	80034c0 <_malloc_r+0x8c>
 800348e:	2b0b      	cmp	r3, #11
 8003490:	d90f      	bls.n	80034b2 <_malloc_r+0x7e>
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	50cd      	str	r5, [r1, r3]
 8003496:	18cc      	adds	r4, r1, r3
 8003498:	4630      	mov	r0, r6
 800349a:	f000 f8d0 	bl	800363e <__malloc_unlock>
 800349e:	f104 000b 	add.w	r0, r4, #11
 80034a2:	1d23      	adds	r3, r4, #4
 80034a4:	f020 0007 	bic.w	r0, r0, #7
 80034a8:	1ac3      	subs	r3, r0, r3
 80034aa:	d0d3      	beq.n	8003454 <_malloc_r+0x20>
 80034ac:	425a      	negs	r2, r3
 80034ae:	50e2      	str	r2, [r4, r3]
 80034b0:	e7d0      	b.n	8003454 <_malloc_r+0x20>
 80034b2:	428c      	cmp	r4, r1
 80034b4:	684b      	ldr	r3, [r1, #4]
 80034b6:	bf16      	itet	ne
 80034b8:	6063      	strne	r3, [r4, #4]
 80034ba:	6013      	streq	r3, [r2, #0]
 80034bc:	460c      	movne	r4, r1
 80034be:	e7eb      	b.n	8003498 <_malloc_r+0x64>
 80034c0:	460c      	mov	r4, r1
 80034c2:	6849      	ldr	r1, [r1, #4]
 80034c4:	e7cc      	b.n	8003460 <_malloc_r+0x2c>
 80034c6:	1cc4      	adds	r4, r0, #3
 80034c8:	f024 0403 	bic.w	r4, r4, #3
 80034cc:	42a0      	cmp	r0, r4
 80034ce:	d005      	beq.n	80034dc <_malloc_r+0xa8>
 80034d0:	1a21      	subs	r1, r4, r0
 80034d2:	4630      	mov	r0, r6
 80034d4:	f000 f808 	bl	80034e8 <_sbrk_r>
 80034d8:	3001      	adds	r0, #1
 80034da:	d0cf      	beq.n	800347c <_malloc_r+0x48>
 80034dc:	6025      	str	r5, [r4, #0]
 80034de:	e7db      	b.n	8003498 <_malloc_r+0x64>
 80034e0:	20004034 	.word	0x20004034
 80034e4:	20004038 	.word	0x20004038

080034e8 <_sbrk_r>:
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	4c06      	ldr	r4, [pc, #24]	; (8003504 <_sbrk_r+0x1c>)
 80034ec:	2300      	movs	r3, #0
 80034ee:	4605      	mov	r5, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	6023      	str	r3, [r4, #0]
 80034f4:	f7fd fa14 	bl	8000920 <_sbrk>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d102      	bne.n	8003502 <_sbrk_r+0x1a>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	b103      	cbz	r3, 8003502 <_sbrk_r+0x1a>
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	bd38      	pop	{r3, r4, r5, pc}
 8003504:	20004044 	.word	0x20004044

08003508 <__sread>:
 8003508:	b510      	push	{r4, lr}
 800350a:	460c      	mov	r4, r1
 800350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003510:	f000 f896 	bl	8003640 <_read_r>
 8003514:	2800      	cmp	r0, #0
 8003516:	bfab      	itete	ge
 8003518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800351a:	89a3      	ldrhlt	r3, [r4, #12]
 800351c:	181b      	addge	r3, r3, r0
 800351e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003522:	bfac      	ite	ge
 8003524:	6563      	strge	r3, [r4, #84]	; 0x54
 8003526:	81a3      	strhlt	r3, [r4, #12]
 8003528:	bd10      	pop	{r4, pc}

0800352a <__swrite>:
 800352a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352e:	461f      	mov	r7, r3
 8003530:	898b      	ldrh	r3, [r1, #12]
 8003532:	05db      	lsls	r3, r3, #23
 8003534:	4605      	mov	r5, r0
 8003536:	460c      	mov	r4, r1
 8003538:	4616      	mov	r6, r2
 800353a:	d505      	bpl.n	8003548 <__swrite+0x1e>
 800353c:	2302      	movs	r3, #2
 800353e:	2200      	movs	r2, #0
 8003540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003544:	f000 f868 	bl	8003618 <_lseek_r>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800354e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003552:	81a3      	strh	r3, [r4, #12]
 8003554:	4632      	mov	r2, r6
 8003556:	463b      	mov	r3, r7
 8003558:	4628      	mov	r0, r5
 800355a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800355e:	f000 b817 	b.w	8003590 <_write_r>

08003562 <__sseek>:
 8003562:	b510      	push	{r4, lr}
 8003564:	460c      	mov	r4, r1
 8003566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356a:	f000 f855 	bl	8003618 <_lseek_r>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	bf15      	itete	ne
 8003574:	6560      	strne	r0, [r4, #84]	; 0x54
 8003576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800357a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800357e:	81a3      	strheq	r3, [r4, #12]
 8003580:	bf18      	it	ne
 8003582:	81a3      	strhne	r3, [r4, #12]
 8003584:	bd10      	pop	{r4, pc}

08003586 <__sclose>:
 8003586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358a:	f000 b813 	b.w	80035b4 <_close_r>
	...

08003590 <_write_r>:
 8003590:	b538      	push	{r3, r4, r5, lr}
 8003592:	4c07      	ldr	r4, [pc, #28]	; (80035b0 <_write_r+0x20>)
 8003594:	4605      	mov	r5, r0
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	2200      	movs	r2, #0
 800359c:	6022      	str	r2, [r4, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	f7fc ffd7 	bl	8000552 <_write>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	d102      	bne.n	80035ae <_write_r+0x1e>
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	b103      	cbz	r3, 80035ae <_write_r+0x1e>
 80035ac:	602b      	str	r3, [r5, #0]
 80035ae:	bd38      	pop	{r3, r4, r5, pc}
 80035b0:	20004044 	.word	0x20004044

080035b4 <_close_r>:
 80035b4:	b538      	push	{r3, r4, r5, lr}
 80035b6:	4c06      	ldr	r4, [pc, #24]	; (80035d0 <_close_r+0x1c>)
 80035b8:	2300      	movs	r3, #0
 80035ba:	4605      	mov	r5, r0
 80035bc:	4608      	mov	r0, r1
 80035be:	6023      	str	r3, [r4, #0]
 80035c0:	f7fd f97a 	bl	80008b8 <_close>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	d102      	bne.n	80035ce <_close_r+0x1a>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	b103      	cbz	r3, 80035ce <_close_r+0x1a>
 80035cc:	602b      	str	r3, [r5, #0]
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	20004044 	.word	0x20004044

080035d4 <_fstat_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4c07      	ldr	r4, [pc, #28]	; (80035f4 <_fstat_r+0x20>)
 80035d8:	2300      	movs	r3, #0
 80035da:	4605      	mov	r5, r0
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	f7fd f975 	bl	80008d0 <_fstat>
 80035e6:	1c43      	adds	r3, r0, #1
 80035e8:	d102      	bne.n	80035f0 <_fstat_r+0x1c>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	b103      	cbz	r3, 80035f0 <_fstat_r+0x1c>
 80035ee:	602b      	str	r3, [r5, #0]
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
 80035f2:	bf00      	nop
 80035f4:	20004044 	.word	0x20004044

080035f8 <_isatty_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4c06      	ldr	r4, [pc, #24]	; (8003614 <_isatty_r+0x1c>)
 80035fc:	2300      	movs	r3, #0
 80035fe:	4605      	mov	r5, r0
 8003600:	4608      	mov	r0, r1
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	f7fd f974 	bl	80008f0 <_isatty>
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d102      	bne.n	8003612 <_isatty_r+0x1a>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	b103      	cbz	r3, 8003612 <_isatty_r+0x1a>
 8003610:	602b      	str	r3, [r5, #0]
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	20004044 	.word	0x20004044

08003618 <_lseek_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4c07      	ldr	r4, [pc, #28]	; (8003638 <_lseek_r+0x20>)
 800361c:	4605      	mov	r5, r0
 800361e:	4608      	mov	r0, r1
 8003620:	4611      	mov	r1, r2
 8003622:	2200      	movs	r2, #0
 8003624:	6022      	str	r2, [r4, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f7fd f96d 	bl	8000906 <_lseek>
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d102      	bne.n	8003636 <_lseek_r+0x1e>
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	b103      	cbz	r3, 8003636 <_lseek_r+0x1e>
 8003634:	602b      	str	r3, [r5, #0]
 8003636:	bd38      	pop	{r3, r4, r5, pc}
 8003638:	20004044 	.word	0x20004044

0800363c <__malloc_lock>:
 800363c:	4770      	bx	lr

0800363e <__malloc_unlock>:
 800363e:	4770      	bx	lr

08003640 <_read_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4c07      	ldr	r4, [pc, #28]	; (8003660 <_read_r+0x20>)
 8003644:	4605      	mov	r5, r0
 8003646:	4608      	mov	r0, r1
 8003648:	4611      	mov	r1, r2
 800364a:	2200      	movs	r2, #0
 800364c:	6022      	str	r2, [r4, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f7fd f915 	bl	800087e <_read>
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	d102      	bne.n	800365e <_read_r+0x1e>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	b103      	cbz	r3, 800365e <_read_r+0x1e>
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	20004044 	.word	0x20004044

08003664 <_init>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr

08003670 <_fini>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr
