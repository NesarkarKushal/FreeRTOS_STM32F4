
06_01_SteamBuffer_create.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004950  08004950  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004958  08004958  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd8  20000074  080049d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000404c  080049d4  0002404c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bec5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e3  00000000  00000000  0002bf69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000868  00000000  00000000  0002e050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002e8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000220bd  00000000  00000000  0002f018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088b6  00000000  00000000  000510d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c89f4  00000000  00000000  0005998b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012237f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  001223fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047fc 	.word	0x080047fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080047fc 	.word	0x080047fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	200000e4 	.word	0x200000e4

080005a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d013      	beq.n	80005e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00b      	beq.n	80005e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	e000      	b.n	80005d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f9      	beq.n	80005ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <_write>:
//#include "FreeRTOS/source/stream_buffer.c"

#include <stdio.h>

int _write(int file,char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	int i=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x2a>
	ITM_SendChar((*ptr++));
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffc7 	bl	80005a4 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x16>
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <TaskA>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void TaskA()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
	size_t send;
	int i;
	uint8_t data[] ={1,2,3,4,5};
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <TaskA+0x84>)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063e:	6018      	str	r0, [r3, #0]
 8000640:	3304      	adds	r3, #4
 8000642:	7019      	strb	r1, [r3, #0]
	uint8_t size;
	size=sizeof(data);
 8000644:	2305      	movs	r3, #5
 8000646:	74fb      	strb	r3, [r7, #19]

	 xStreamBufferReset(rx);
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <TaskA+0x88>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fab9 	bl	8001bc4 <xStreamBufferReset>
	 xStreamBufferReset(tx);
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <TaskA+0x8c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fab4 	bl	8001bc4 <xStreamBufferReset>

	xStreamBufferSetTriggerLevel(tx,size);
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <TaskA+0x8c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	7cfa      	ldrb	r2, [r7, #19]
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fae2 	bl	8001c2e <xStreamBufferSetTriggerLevel>


	for(;;)
	{
		send = xStreamBufferSend(rx,
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <TaskA+0x88>)
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	7cfa      	ldrb	r2, [r7, #19]
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	f001 fb3a 	bl	8001cec <xStreamBufferSend>
 8000678:	60f8      	str	r0, [r7, #12]
								 data,
								 size,
								 100 );
		vTaskDelay(1000);
 800067a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067e:	f001 ffdd 	bl	800263c <vTaskDelay>
		for(i=0;i<size;i++)
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	e00d      	b.n	80006a4 <TaskA+0x74>
		{
			printf("data sent=%d\n",data[i]);
 8000688:	1d3a      	adds	r2, r7, #4
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <TaskA+0x90>)
 8000694:	f003 f96a 	bl	800396c <iprintf>
			vTaskDelay(100);
 8000698:	2064      	movs	r0, #100	; 0x64
 800069a:	f001 ffcf 	bl	800263c <vTaskDelay>
		for(i=0;i<size;i++)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	7cfb      	ldrb	r3, [r7, #19]
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbed      	blt.n	8000688 <TaskA+0x58>
		}
		printf("Data Sent\n");
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <TaskA+0x94>)
 80006ae:	f003 f9d1 	bl	8003a54 <puts>
		send = xStreamBufferSend(rx,
 80006b2:	e7da      	b.n	800066a <TaskA+0x3a>
 80006b4:	08004830 	.word	0x08004830
 80006b8:	2000403c 	.word	0x2000403c
 80006bc:	20004040 	.word	0x20004040
 80006c0:	08004814 	.word	0x08004814
 80006c4:	08004824 	.word	0x08004824

080006c8 <TaskB>:

	}
}

void TaskB()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	uint8_t rx_data[6];
	uint8_t size;
	int i;
	size=sizeof(rx_data);
 80006ce:	2306      	movs	r3, #6
 80006d0:	72fb      	strb	r3, [r7, #11]
	xStreamBufferSetTriggerLevel(rx,size);
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <TaskB+0x7c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7afa      	ldrb	r2, [r7, #11]
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 faa7 	bl	8001c2e <xStreamBufferSetTriggerLevel>

	for(;;)
	{
		xStreamBufferReceive(tx,
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <TaskB+0x80>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	7afa      	ldrb	r2, [r7, #11]
 80006e6:	1d39      	adds	r1, r7, #4
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	f001 fbed 	bl	8001ec8 <xStreamBufferReceive>
							rx_data,
							size,
							100);
		vTaskDelay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f2:	f001 ffa3 	bl	800263c <vTaskDelay>
		if(xStreamBufferIsFull(rx)==pdTRUE)
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <TaskB+0x7c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fca8 	bl	8002050 <xStreamBufferIsFull>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d103      	bne.n	800070e <TaskB+0x46>
		{
			printf("its full\n");
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <TaskB+0x84>)
 8000708:	f003 f9a4 	bl	8003a54 <puts>
 800070c:	e7e8      	b.n	80006e0 <TaskB+0x18>
		}
		else
		{
		for(i=0;i<size;i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e00e      	b.n	8000732 <TaskB+0x6a>
		{
			printf("Data Recived=%d\n",rx_data[i]);
 8000714:	1d3a      	adds	r2, r7, #4
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <TaskB+0x88>)
 8000720:	f003 f924 	bl	800396c <iprintf>
			vTaskDelay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f001 ff88 	bl	800263c <vTaskDelay>
		for(i=0;i<size;i++)
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	429a      	cmp	r2, r3
 8000738:	dbec      	blt.n	8000714 <TaskB+0x4c>
		}
			printf("Data Received\n");
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <TaskB+0x8c>)
 800073c:	f003 f98a 	bl	8003a54 <puts>
		xStreamBufferReceive(tx,
 8000740:	e7ce      	b.n	80006e0 <TaskB+0x18>
 8000742:	bf00      	nop
 8000744:	2000403c 	.word	0x2000403c
 8000748:	20004040 	.word	0x20004040
 800074c:	08004838 	.word	0x08004838
 8000750:	08004844 	.word	0x08004844
 8000754:	08004858 	.word	0x08004858

08000758 <main>:
		}
	}
}

int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af02      	add	r7, sp, #8
  HAL_Init();
 800075e:	f000 fa11 	bl	8000b84 <HAL_Init>
  SystemClock_Config();
 8000762:	f000 f845 	bl	80007f0 <SystemClock_Config>
  MX_GPIO_Init();
 8000766:	f000 f8a1 	bl	80008ac <MX_GPIO_Init>

  tx = xStreamBufferCreate(100,10 );
 800076a:	2200      	movs	r2, #0
 800076c:	210a      	movs	r1, #10
 800076e:	2064      	movs	r0, #100	; 0x64
 8000770:	f001 f9d0 	bl	8001b14 <xStreamBufferGenericCreate>
 8000774:	4602      	mov	r2, r0
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <main+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  rx = xStreamBufferCreate(100,10 );
 800077a:	2200      	movs	r2, #0
 800077c:	210a      	movs	r1, #10
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f001 f9c8 	bl	8001b14 <xStreamBufferGenericCreate>
 8000784:	4602      	mov	r2, r0
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <main+0x7c>)
 8000788:	601a      	str	r2, [r3, #0]



  if(tx != pdFALSE)
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <main+0x78>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d017      	beq.n	80007c2 <main+0x6a>
  {
	  xTaskCreate(TaskA,"Sender",128,NULL,2,NULL);
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2302      	movs	r3, #2
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	490e      	ldr	r1, [pc, #56]	; (80007d8 <main+0x80>)
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <main+0x84>)
 80007a2:	f001 fe16 	bl	80023d2 <xTaskCreate>
	  xTaskCreate(TaskB,"Receiver",128,NULL,1,NULL);
 80007a6:	2300      	movs	r3, #0
 80007a8:	9301      	str	r3, [sp, #4]
 80007aa:	2301      	movs	r3, #1
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	490b      	ldr	r1, [pc, #44]	; (80007e0 <main+0x88>)
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <main+0x8c>)
 80007b6:	f001 fe0c 	bl	80023d2 <xTaskCreate>

	  printf("Threads Created\n");
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <main+0x90>)
 80007bc:	f003 f94a 	bl	8003a54 <puts>
 80007c0:	e002      	b.n	80007c8 <main+0x70>
  }
  else
  {
	  printf("Buffer Not Created\n");
 80007c2:	480a      	ldr	r0, [pc, #40]	; (80007ec <main+0x94>)
 80007c4:	f003 f946 	bl	8003a54 <puts>
  }


  vTaskStartScheduler();
 80007c8:	f001 ff6c 	bl	80026a4 <vTaskStartScheduler>


  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x74>
 80007ce:	bf00      	nop
 80007d0:	20004040 	.word	0x20004040
 80007d4:	2000403c 	.word	0x2000403c
 80007d8:	08004868 	.word	0x08004868
 80007dc:	08000631 	.word	0x08000631
 80007e0:	08004870 	.word	0x08004870
 80007e4:	080006c9 	.word	0x080006c9
 80007e8:	0800487c 	.word	0x0800487c
 80007ec:	0800488c 	.word	0x0800488c

080007f0 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 f8ab 	bl	800395a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xb4>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemClock_Config+0xb4>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SystemClock_Config+0xb4>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <SystemClock_Config+0xb8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <SystemClock_Config+0xb8>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <SystemClock_Config+0xb8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fc9b 	bl	800119c <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800086c:	f000 f870 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fef6 	bl	800167c <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000896:	f000 f85b 	bl	8000950 <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	3750      	adds	r7, #80	; 0x50
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_GPIO_Init+0x9c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <MX_GPIO_Init+0x9c>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_GPIO_Init+0x9c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_GPIO_Init+0x9c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <MX_GPIO_Init+0x9c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_GPIO_Init+0x9c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_GPIO_Init+0x9c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <MX_GPIO_Init+0x9c>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_GPIO_Init+0x9c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <MX_GPIO_Init+0xa0>)
 800091e:	f000 fc23 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000922:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_GPIO_Init+0xa0>)
 800093c:	f000 fa7a 	bl	8000e34 <HAL_GPIO_Init>

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40020c00 	.word	0x40020c00

08000950 <Error_Handler>:


void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000956:	e7fe      	b.n	8000956 <Error_Handler+0x6>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <HAL_MspInit+0x54>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x54>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_MspInit+0x54>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_MspInit+0x54>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	f06f 0001 	mvn.w	r0, #1
 800099e:	f000 fa20 	bl	8000de2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f922 	bl	8000c28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009e4:	f002 f9f6 	bl	8002dd4 <xTaskGetSchedulerState>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d001      	beq.n	80009f2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ee:	f002 fd5b 	bl	80034a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e00a      	b.n	8000a1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a08:	f3af 8000 	nop.w
 8000a0c:	4601      	mov	r1, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	60ba      	str	r2, [r7, #8]
 8000a14:	b2ca      	uxtb	r2, r1
 8000a16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dbf0      	blt.n	8000a08 <_read+0x12>
	}

return len;
 8000a26:	687b      	ldr	r3, [r7, #4]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	return -1;
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a58:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_isatty>:

int _isatty(int file)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	return 1;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
	return 0;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f002 ff12 	bl	80038f0 <__errno>
 8000acc:	4602      	mov	r2, r0
 8000ace:	230c      	movs	r3, #12
 8000ad0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20020000 	.word	0x20020000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	200002e4 	.word	0x200002e4
 8000b00:	20004050 	.word	0x20004050

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <SystemInit+0x28>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <SystemInit+0x28>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SystemInit+0x28>)
 8000b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b36:	e003      	b.n	8000b40 <LoopCopyDataInit>

08000b38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b3e:	3104      	adds	r1, #4

08000b40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b48:	d3f6      	bcc.n	8000b38 <CopyDataInit>
  ldr  r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b4c:	e002      	b.n	8000b54 <LoopFillZerobss>

08000b4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b50:	f842 3b04 	str.w	r3, [r2], #4

08000b54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b58:	d3f9      	bcc.n	8000b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b5a:	f7ff ffd3 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f002 fecd 	bl	80038fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fdf9 	bl	8000758 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b6c:	08004960 	.word	0x08004960
  ldr  r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b74:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000b78:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000b7c:	2000404c 	.word	0x2000404c

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <HAL_Init+0x40>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_Init+0x40>)
 8000b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_Init+0x40>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f90d 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f000 f808 	bl	8000bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fece 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023c00 	.word	0x40023c00

08000bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x54>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x58>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f917 	bl	8000e1a <HAL_SYSTICK_Config>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00e      	b.n	8000c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d80a      	bhi.n	8000c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 f8ed 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_InitTick+0x5c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e000      	b.n	8000c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20004044 	.word	0x20004044

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20004044 	.word	0x20004044

08000c68 <__NVIC_SetPriorityGrouping>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_SetPriority>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <SysTick_Config>:
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff8e 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff47 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5c 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff8e 	bl	8000d20 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5d 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e16b      	b.n	8001128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 815a 	bne.w	8001122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d00b      	beq.n	8000e8e <HAL_GPIO_Init+0x5a>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e82:	2b11      	cmp	r3, #17
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d130      	bne.n	8000ef0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	f003 0201 	and.w	r2, r3, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0xfc>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b12      	cmp	r3, #18
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80b4 	beq.w	8001122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b5f      	ldr	r3, [pc, #380]	; (800113c <HAL_GPIO_Init+0x308>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a5e      	ldr	r2, [pc, #376]	; (800113c <HAL_GPIO_Init+0x308>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b5c      	ldr	r3, [pc, #368]	; (800113c <HAL_GPIO_Init+0x308>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a5a      	ldr	r2, [pc, #360]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a51      	ldr	r2, [pc, #324]	; (8001144 <HAL_GPIO_Init+0x310>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d02b      	beq.n	800105a <HAL_GPIO_Init+0x226>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d025      	beq.n	8001056 <HAL_GPIO_Init+0x222>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_GPIO_Init+0x318>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01f      	beq.n	8001052 <HAL_GPIO_Init+0x21e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4e      	ldr	r2, [pc, #312]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_GPIO_Init+0x320>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x216>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_GPIO_Init+0x328>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <HAL_GPIO_Init+0x32c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x20a>
 800103a:	2307      	movs	r3, #7
 800103c:	e00e      	b.n	800105c <HAL_GPIO_Init+0x228>
 800103e:	2308      	movs	r3, #8
 8001040:	e00c      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001042:	2306      	movs	r3, #6
 8001044:	e00a      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x228>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x228>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x228>
 800105a:	2300      	movs	r3, #0
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	f002 0203 	and.w	r2, r2, #3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4093      	lsls	r3, r2
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106c:	4934      	ldr	r1, [pc, #208]	; (8001140 <HAL_GPIO_Init+0x30c>)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <HAL_GPIO_Init+0x330>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109e:	4a31      	ldr	r2, [pc, #196]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a11      	ldr	r2, [pc, #68]	; (8001164 <HAL_GPIO_Init+0x330>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	f67f ae90 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001130:	bf00      	nop
 8001132:	3724      	adds	r7, #36	; 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e25b      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d075      	beq.n	80012a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ba:	4ba3      	ldr	r3, [pc, #652]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d00c      	beq.n	80011e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c6:	4ba0      	ldr	r3, [pc, #640]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d112      	bne.n	80011f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d2:	4b9d      	ldr	r3, [pc, #628]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011de:	d10b      	bne.n	80011f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	4b99      	ldr	r3, [pc, #612]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d05b      	beq.n	80012a4 <HAL_RCC_OscConfig+0x108>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d157      	bne.n	80012a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e236      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001200:	d106      	bne.n	8001210 <HAL_RCC_OscConfig+0x74>
 8001202:	4b91      	ldr	r3, [pc, #580]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a90      	ldr	r2, [pc, #576]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e01d      	b.n	800124c <HAL_RCC_OscConfig+0xb0>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x98>
 800121a:	4b8b      	ldr	r3, [pc, #556]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a8a      	ldr	r2, [pc, #552]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b88      	ldr	r3, [pc, #544]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a87      	ldr	r2, [pc, #540]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0xb0>
 8001234:	4b84      	ldr	r3, [pc, #528]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a83      	ldr	r2, [pc, #524]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b81      	ldr	r3, [pc, #516]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a80      	ldr	r2, [pc, #512]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d013      	beq.n	800127c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fcfc 	bl	8000c50 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fcf8 	bl	8000c50 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1fb      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0xc0>
 800127a:	e014      	b.n	80012a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fce8 	bl	8000c50 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fce4 	bl	8000c50 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1e7      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001296:	4b6c      	ldr	r3, [pc, #432]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0xe8>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d063      	beq.n	800137a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b2:	4b65      	ldr	r3, [pc, #404]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00b      	beq.n	80012d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d11c      	bne.n	8001304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d116      	bne.n	8001304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <HAL_RCC_OscConfig+0x152>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e1bb      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	4b56      	ldr	r3, [pc, #344]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4952      	ldr	r1, [pc, #328]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	e03a      	b.n	800137a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <HAL_RCC_OscConfig+0x2b0>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff fc9d 	bl	8000c50 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fc99 	bl	8000c50 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e19c      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132c:	4b46      	ldr	r3, [pc, #280]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4940      	ldr	r1, [pc, #256]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
 800134c:	e015      	b.n	800137a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <HAL_RCC_OscConfig+0x2b0>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fc7c 	bl	8000c50 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fc78 	bl	8000c50 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e17b      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d030      	beq.n	80013e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d016      	beq.n	80013bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_RCC_OscConfig+0x2b4>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001394:	f7ff fc5c 	bl	8000c50 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fc58 	bl	8000c50 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e15b      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x200>
 80013ba:	e015      	b.n	80013e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_RCC_OscConfig+0x2b4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fc45 	bl	8000c50 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc41 	bl	8000c50 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e144      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f0      	bne.n	80013ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a0 	beq.w	8001536 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10f      	bne.n	8001426 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_RCC_OscConfig+0x2b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d121      	bne.n	8001476 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_RCC_OscConfig+0x2b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_RCC_OscConfig+0x2b8>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143e:	f7ff fc07 	bl	8000c50 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	e011      	b.n	800146a <HAL_RCC_OscConfig+0x2ce>
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	42470000 	.word	0x42470000
 8001450:	42470e80 	.word	0x42470e80
 8001454:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001458:	f7ff fbfa 	bl	8000c50 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0fd      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146a:	4b81      	ldr	r3, [pc, #516]	; (8001670 <HAL_RCC_OscConfig+0x4d4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x2f0>
 800147e:	4b7d      	ldr	r3, [pc, #500]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a7c      	ldr	r2, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	e01c      	b.n	80014c6 <HAL_RCC_OscConfig+0x32a>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b05      	cmp	r3, #5
 8001492:	d10c      	bne.n	80014ae <HAL_RCC_OscConfig+0x312>
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a76      	ldr	r2, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	4b74      	ldr	r3, [pc, #464]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6713      	str	r3, [r2, #112]	; 0x70
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_OscConfig+0x32a>
 80014ae:	4b71      	ldr	r3, [pc, #452]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a70      	ldr	r2, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ba:	4b6e      	ldr	r3, [pc, #440]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	4a6d      	ldr	r2, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d015      	beq.n	80014fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbbf 	bl	8000c50 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fbbb 	bl	8000c50 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0bc      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	4b61      	ldr	r3, [pc, #388]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0ee      	beq.n	80014d6 <HAL_RCC_OscConfig+0x33a>
 80014f8:	e014      	b.n	8001524 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fba9 	bl	8000c50 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff fba5 	bl	8000c50 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0a6      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	4b56      	ldr	r3, [pc, #344]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ee      	bne.n	8001502 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d105      	bne.n	8001536 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152a:	4b52      	ldr	r3, [pc, #328]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a51      	ldr	r2, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 8001530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8092 	beq.w	8001664 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b08      	cmp	r3, #8
 800154a:	d05c      	beq.n	8001606 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d141      	bne.n	80015d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001554:	4b48      	ldr	r3, [pc, #288]	; (8001678 <HAL_RCC_OscConfig+0x4dc>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fb79 	bl	8000c50 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff fb75 	bl	8000c50 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e078      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001574:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69da      	ldr	r2, [r3, #28]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	019b      	lsls	r3, r3, #6
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	085b      	lsrs	r3, r3, #1
 8001598:	3b01      	subs	r3, #1
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	061b      	lsls	r3, r3, #24
 80015a4:	4933      	ldr	r1, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_RCC_OscConfig+0x4dc>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb4e 	bl	8000c50 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff fb4a 	bl	8000c50 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e04d      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x41c>
 80015d6:	e045      	b.n	8001664 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x4dc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fb37 	bl	8000c50 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fb33 	bl	8000c50 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e036      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x44a>
 8001604:	e02e      	b.n	8001664 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e029      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_RCC_OscConfig+0x4d8>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	429a      	cmp	r2, r3
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d115      	bne.n	8001660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800163a:	4013      	ands	r3, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001640:	4293      	cmp	r3, r2
 8001642:	d10d      	bne.n	8001660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40007000 	.word	0x40007000
 8001674:	40023800 	.word	0x40023800
 8001678:	42470060 	.word	0x42470060

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0cc      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa70 	bl	8000c50 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fa6c 	bl	8000c50 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4601      	mov	r1, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	fa21 f303 	lsr.w	r3, r1, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f9d0 	bl	8000bc8 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00
 8001838:	40023800 	.word	0x40023800
 800183c:	080048a8 	.word	0x080048a8
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185e:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b04      	cmp	r3, #4
 8001868:	d007      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x32>
 800186a:	2b08      	cmp	r3, #8
 800186c:	d008      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x38>
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 808d 	bne.w	800198e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001876:	60bb      	str	r3, [r7, #8]
       break;
 8001878:	e08c      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187a:	4b4b      	ldr	r3, [pc, #300]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800187c:	60bb      	str	r3, [r7, #8]
      break;
 800187e:	e089      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001888:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188a:	4b45      	ldr	r3, [pc, #276]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d023      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001896:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	099b      	lsrs	r3, r3, #6
 800189c:	f04f 0400 	mov.w	r4, #0
 80018a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	ea03 0501 	and.w	r5, r3, r1
 80018ac:	ea04 0602 	and.w	r6, r4, r2
 80018b0:	4a3d      	ldr	r2, [pc, #244]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018b2:	fb02 f106 	mul.w	r1, r2, r6
 80018b6:	2200      	movs	r2, #0
 80018b8:	fb02 f205 	mul.w	r2, r2, r5
 80018bc:	440a      	add	r2, r1
 80018be:	493a      	ldr	r1, [pc, #232]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018c0:	fba5 0101 	umull	r0, r1, r5, r1
 80018c4:	1853      	adds	r3, r2, r1
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	f7fe fccd 	bl	8000270 <__aeabi_uldivmod>
 80018d6:	4603      	mov	r3, r0
 80018d8:	460c      	mov	r4, r1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e049      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	f04f 0400 	mov.w	r4, #0
 80018e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	ea03 0501 	and.w	r5, r3, r1
 80018f4:	ea04 0602 	and.w	r6, r4, r2
 80018f8:	4629      	mov	r1, r5
 80018fa:	4632      	mov	r2, r6
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	0154      	lsls	r4, r2, #5
 8001906:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800190a:	014b      	lsls	r3, r1, #5
 800190c:	4619      	mov	r1, r3
 800190e:	4622      	mov	r2, r4
 8001910:	1b49      	subs	r1, r1, r5
 8001912:	eb62 0206 	sbc.w	r2, r2, r6
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f04f 0400 	mov.w	r4, #0
 800191e:	0194      	lsls	r4, r2, #6
 8001920:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001924:	018b      	lsls	r3, r1, #6
 8001926:	1a5b      	subs	r3, r3, r1
 8001928:	eb64 0402 	sbc.w	r4, r4, r2
 800192c:	f04f 0100 	mov.w	r1, #0
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	00e2      	lsls	r2, r4, #3
 8001936:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800193a:	00d9      	lsls	r1, r3, #3
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	195b      	adds	r3, r3, r5
 8001942:	eb44 0406 	adc.w	r4, r4, r6
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	02a2      	lsls	r2, r4, #10
 8001950:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001954:	0299      	lsls	r1, r3, #10
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	4618      	mov	r0, r3
 800195c:	4621      	mov	r1, r4
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	461a      	mov	r2, r3
 8001966:	4623      	mov	r3, r4
 8001968:	f7fe fc82 	bl	8000270 <__aeabi_uldivmod>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	0c1b      	lsrs	r3, r3, #16
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	3301      	adds	r3, #1
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	60bb      	str	r3, [r7, #8]
      break;
 800198c:	e002      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001990:	60bb      	str	r3, [r7, #8]
      break;
 8001992:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001994:	68bb      	ldr	r3, [r7, #8]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	017d7840 	.word	0x017d7840

080019ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f103 0208 	add.w	r2, r3, #8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f103 0208 	add.w	r2, r3, #8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 0208 	add.w	r2, r3, #8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a06:	b480      	push	{r7}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d103      	bne.n	8001a6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e00c      	b.n	8001a88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3308      	adds	r3, #8
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e002      	b.n	8001a7c <vListInsert+0x2e>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d2f6      	bcs.n	8001a76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6892      	ldr	r2, [r2, #8]
 8001ad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6852      	ldr	r2, [r2, #4]
 8001ae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d103      	bne.n	8001af4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10f      	bne.n	8001b46 <xStreamBufferGenericCreate+0x32>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d819      	bhi.n	8001b66 <xStreamBufferGenericCreate+0x52>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	e7fe      	b.n	8001b44 <xStreamBufferGenericCreate+0x30>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <xStreamBufferGenericCreate+0x52>
 8001b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b56:	f383 8811 	msr	BASEPRI, r3
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	e7fe      	b.n	8001b64 <xStreamBufferGenericCreate+0x50>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d909      	bls.n	8001b82 <xStreamBufferGenericCreate+0x6e>
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e7fe      	b.n	8001b80 <xStreamBufferGenericCreate+0x6c>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <xStreamBufferGenericCreate+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3320      	adds	r3, #32
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fcd4 	bl	8003544 <pvPortMalloc>
 8001b9c:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00a      	beq.n	8001bba <xStreamBufferGenericCreate+0xa6>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	f103 0120 	add.w	r1, r3, #32
 8001baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	6a38      	ldr	r0, [r7, #32]
 8001bb6:	f000 fb80 	bl	80022ba <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8001bba:	6a3b      	ldr	r3, [r7, #32]
	}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <xStreamBufferReset>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	613b      	str	r3, [r7, #16]
BaseType_t xReturn = pdFAIL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

#if( configUSE_TRACE_FACILITY == 1 )
	UBaseType_t uxStreamBufferNumber;
#endif

	configASSERT( pxStreamBuffer );
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <xStreamBufferReset+0x2a>
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e7fe      	b.n	8001bec <xStreamBufferReset+0x28>
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 8001bee:	f001 fbcd 	bl	800338c <vPortEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d112      	bne.n	8001c20 <xStreamBufferReset+0x5c>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <xStreamBufferReset+0x5c>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6999      	ldr	r1, [r3, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	68d8      	ldr	r0, [r3, #12]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	7f1b      	ldrb	r3, [r3, #28]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4603      	mov	r3, r0
 8001c16:	6938      	ldr	r0, [r7, #16]
 8001c18:	f000 fb4f 	bl	80022ba <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 8001c20:	f001 fbe2 	bl	80033e8 <vPortExitCritical>

	return xReturn;
 8001c24:	697b      	ldr	r3, [r7, #20]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b087      	sub	sp, #28
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <xStreamBufferSetTriggerLevel+0x28>
 8001c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e7fe      	b.n	8001c54 <xStreamBufferSetTriggerLevel+0x26>

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <xStreamBufferSetTriggerLevel+0x32>
	{
		xTriggerLevel = ( size_t ) 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	603b      	str	r3, [r7, #0]
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d805      	bhi.n	8001c76 <xStreamBufferSetTriggerLevel+0x48>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	60da      	str	r2, [r3, #12]
		xReturn = pdPASS;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e001      	b.n	8001c7a <xStreamBufferSetTriggerLevel+0x4c>
	}
	else
	{
		xReturn = pdFALSE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001c7a:	697b      	ldr	r3, [r7, #20]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <xStreamBufferSpacesAvailable+0x26>
 8001c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9e:	f383 8811 	msr	BASEPRI, r3
 8001ca2:	f3bf 8f6f 	isb	sy
 8001ca6:	f3bf 8f4f 	dsb	sy
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	e7fe      	b.n	8001cac <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d304      	bcc.n	8001cde <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8001cde:	697b      	ldr	r3, [r7, #20]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b090      	sub	sp, #64	; 0x40
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <xStreamBufferSend+0x34>
 8001d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d10:	f383 8811 	msr	BASEPRI, r3
 8001d14:	f3bf 8f6f 	isb	sy
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e7fe      	b.n	8001d1e <xStreamBufferSend+0x32>
	configASSERT( pxStreamBuffer );
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <xStreamBufferSend+0x4e>
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	f383 8811 	msr	BASEPRI, r3
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	f3bf 8f4f 	dsb	sy
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	e7fe      	b.n	8001d38 <xStreamBufferSend+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	7f1b      	ldrb	r3, [r3, #28]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d010      	beq.n	8001d68 <xStreamBufferSend+0x7c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	3304      	adds	r3, #4
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8001d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d809      	bhi.n	8001d68 <xStreamBufferSend+0x7c>
 8001d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e7fe      	b.n	8001d66 <xStreamBufferSend+0x7a>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03d      	beq.n	8001dea <xStreamBufferSend+0xfe>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 feb0 	bl	8002ad8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8001d78:	f001 fb08 	bl	800338c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001d7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d7e:	f7ff ff83 	bl	8001c88 <xStreamBufferSpacesAvailable>
 8001d82:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8001d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d216      	bcs.n	8001dba <xStreamBufferSend+0xce>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f001 f94b 	bl	8003028 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <xStreamBufferSend+0xc2>
 8001d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e7fe      	b.n	8001dac <xStreamBufferSend+0xc0>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8001dae:	f001 f801 	bl	8002db4 <xTaskGetCurrentTaskHandle>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	e002      	b.n	8001dc0 <xStreamBufferSend+0xd4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8001dba:	f001 fb15 	bl	80033e8 <vPortExitCritical>
					break;
 8001dbe:	e014      	b.n	8001dea <xStreamBufferSend+0xfe>
				}
			}
			taskEXIT_CRITICAL();
 8001dc0:	f001 fb12 	bl	80033e8 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f001 f820 	bl	8002e10 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8001dd6:	463a      	mov	r2, r7
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 feb6 	bl	8002b50 <xTaskCheckForTimeOut>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0c6      	beq.n	8001d78 <xStreamBufferSend+0x8c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <xStreamBufferSend+0x10c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8001df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001df2:	f7ff ff49 	bl	8001c88 <xStreamBufferSpacesAvailable>
 8001df6:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e04:	f000 f823 	bl	8001e4e <prvWriteMessageToBuffer>
 8001e08:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d019      	beq.n	8001e44 <xStreamBufferSend+0x158>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8001e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e12:	f000 fa32 	bl	800227a <prvBytesInBuffer>
 8001e16:	4602      	mov	r2, r0
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d311      	bcc.n	8001e44 <xStreamBufferSend+0x158>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8001e20:	f000 fc9e 	bl	8002760 <vTaskSuspendAll>
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d009      	beq.n	8001e40 <xStreamBufferSend+0x154>
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	6918      	ldr	r0, [r3, #16]
 8001e30:	2300      	movs	r3, #0
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	f001 f845 	bl	8002ec4 <xTaskGenericNotify>
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	f000 fc9c 	bl	800277c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3738      	adds	r7, #56	; 0x38
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e01d      	b.n	8001ea4 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	7f1b      	ldrb	r3, [r3, #28]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d108      	bne.n	8001e86 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8001e74:	2301      	movs	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bf28      	it	cs
 8001e80:	4613      	movcs	r3, r2
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	e00e      	b.n	8001ea4 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d308      	bcc.n	8001ea0 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2204      	movs	r2, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f908 	bl	80020ae <prvWriteBytesToBuffer>
 8001e9e:	e001      	b.n	8001ea4 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f8fc 	bl	80020ae <prvWriteBytesToBuffer>
 8001eb6:	6138      	str	r0, [r7, #16]
 8001eb8:	e001      	b.n	8001ebe <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8001ebe:	693b      	ldr	r3, [r7, #16]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08e      	sub	sp, #56	; 0x38
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <xStreamBufferReceive+0x30>
 8001ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e7fe      	b.n	8001ef6 <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <xStreamBufferReceive+0x4a>
 8001efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f02:	f383 8811 	msr	BASEPRI, r3
 8001f06:	f3bf 8f6f 	isb	sy
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	61bb      	str	r3, [r7, #24]
 8001f10:	e7fe      	b.n	8001f10 <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	7f1b      	ldrb	r3, [r3, #28]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	e001      	b.n	8001f28 <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d033      	beq.n	8001f96 <xStreamBufferReceive+0xce>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8001f2e:	f001 fa2d 	bl	800338c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001f32:	6a38      	ldr	r0, [r7, #32]
 8001f34:	f000 f9a1 	bl	800227a <prvBytesInBuffer>
 8001f38:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d815      	bhi.n	8001f6e <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8001f42:	2000      	movs	r0, #0
 8001f44:	f001 f870 	bl	8003028 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <xStreamBufferReceive+0x9c>
 8001f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e7fe      	b.n	8001f62 <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8001f64:	f000 ff26 	bl	8002db4 <xTaskGetCurrentTaskHandle>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001f6e:	f001 fa3b 	bl	80033e8 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8001f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d811      	bhi.n	8001f9e <xStreamBufferReceive+0xd6>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2000      	movs	r0, #0
 8001f82:	f000 ff45 	bl	8002e10 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001f8c:	6a38      	ldr	r0, [r7, #32]
 8001f8e:	f000 f974 	bl	800227a <prvBytesInBuffer>
 8001f92:	62b8      	str	r0, [r7, #40]	; 0x28
 8001f94:	e003      	b.n	8001f9e <xStreamBufferReceive+0xd6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8001f96:	6a38      	ldr	r0, [r7, #32]
 8001f98:	f000 f96f 	bl	800227a <prvBytesInBuffer>
 8001f9c:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8001f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d91d      	bls.n	8001fe2 <xStreamBufferReceive+0x11a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	6a38      	ldr	r0, [r7, #32]
 8001fb2:	f000 f81b 	bl	8001fec <prvReadMessageFromBuffer>
 8001fb6:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8001fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d011      	beq.n	8001fe2 <xStreamBufferReceive+0x11a>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8001fbe:	f000 fbcf 	bl	8002760 <vTaskSuspendAll>
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <xStreamBufferReceive+0x116>
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	6958      	ldr	r0, [r3, #20]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	f000 ff76 	bl	8002ec4 <xTaskGenericNotify>
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	f000 fbcd 	bl	800277c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3730      	adds	r7, #48	; 0x30
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d019      	beq.n	8002034 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8002006:	f107 0110 	add.w	r1, r7, #16
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f8bc 	bl	800218c <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d907      	bls.n	8002038 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e001      	b.n	8002038 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f8a4 	bl	800218c <prvReadBytesFromBuffer>
 8002044:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8002046:	697b      	ldr	r3, [r7, #20]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <xStreamBufferIsFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <xStreamBufferIsFull+0x26>
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	e7fe      	b.n	8002074 <xStreamBufferIsFull+0x24>

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	7f1b      	ldrb	r3, [r3, #28]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <xStreamBufferIsFull+0x38>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002082:	2304      	movs	r3, #4
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e001      	b.n	800208c <xStreamBufferIsFull+0x3c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff fdfb 	bl	8001c88 <xStreamBufferSpacesAvailable>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4293      	cmp	r3, r2
 8002098:	d302      	bcc.n	80020a0 <xStreamBufferIsFull+0x50>
	{
		xReturn = pdTRUE;
 800209a:	2301      	movs	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e001      	b.n	80020a4 <xStreamBufferIsFull+0x54>
	}
	else
	{
		xReturn = pdFALSE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80020a4:	697b      	ldr	r3, [r7, #20]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b08a      	sub	sp, #40	; 0x28
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <prvWriteBytesToBuffer+0x26>
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e7fe      	b.n	80020d2 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf28      	it	cs
 80020e8:	4613      	movcs	r3, r2
 80020ea:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80020ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	441a      	add	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d909      	bls.n	800210e <prvWriteBytesToBuffer+0x60>
 80020fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e7fe      	b.n	800210c <prvWriteBytesToBuffer+0x5e>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	4413      	add	r3, r2
 8002116:	6a3a      	ldr	r2, [r7, #32]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fc12 	bl	8003944 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	d91b      	bls.n	8002160 <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	d909      	bls.n	800214a <prvWriteBytesToBuffer+0x9c>
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e7fe      	b.n	8002148 <prvWriteBytesToBuffer+0x9a>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6998      	ldr	r0, [r3, #24]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	18d1      	adds	r1, r2, r3
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	461a      	mov	r2, r3
 800215c:	f001 fbf2 	bl	8003944 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8002160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	429a      	cmp	r2, r3
 8002170:	d304      	bcc.n	800217c <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002180:	605a      	str	r2, [r3, #4]

	return xCount;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4293      	cmp	r3, r2
 80021a0:	bf28      	it	cs
 80021a2:	4613      	movcs	r3, r2
 80021a4:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d061      	beq.n	8002270 <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	6a3a      	ldr	r2, [r7, #32]
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf28      	it	cs
 80021c0:	4613      	movcs	r3, r2
 80021c2:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d909      	bls.n	80021e0 <prvReadBytesFromBuffer+0x54>
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	e7fe      	b.n	80021de <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	441a      	add	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d909      	bls.n	8002202 <prvReadBytesFromBuffer+0x76>
 80021ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e7fe      	b.n	8002200 <prvReadBytesFromBuffer+0x74>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	4413      	add	r3, r2
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	4619      	mov	r1, r3
 800220e:	68b8      	ldr	r0, [r7, #8]
 8002210:	f001 fb98 	bl	8003944 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	429a      	cmp	r2, r3
 800221a:	d918      	bls.n	800224e <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800221c:	6a3a      	ldr	r2, [r7, #32]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d909      	bls.n	8002238 <prvReadBytesFromBuffer+0xac>
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e7fe      	b.n	8002236 <prvReadBytesFromBuffer+0xaa>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	18d0      	adds	r0, r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6999      	ldr	r1, [r3, #24]
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	461a      	mov	r2, r3
 800224a:	f001 fb7b 	bl	8003944 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	4413      	add	r3, r2
 8002254:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	429a      	cmp	r2, r3
 800225e:	d304      	bcc.n	800226a <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8002270:	6a3b      	ldr	r3, [r7, #32]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3728      	adds	r7, #40	; 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d304      	bcc.n	80022ac <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80022c8:	2355      	movs	r3, #85	; 0x55
 80022ca:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6979      	ldr	r1, [r7, #20]
 80022d0:	68b8      	ldr	r0, [r7, #8]
 80022d2:	f001 fb42 	bl	800395a <memset>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d009      	beq.n	80022f2 <prvInitialiseNewStreamBuffer+0x38>
 80022de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e7fe      	b.n	80022f0 <prvInitialiseNewStreamBuffer+0x36>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80022f2:	2220      	movs	r2, #32
 80022f4:	2100      	movs	r1, #0
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f001 fb2f 	bl	800395a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002314:	771a      	strb	r2, [r3, #28]
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800231e:	b580      	push	{r7, lr}
 8002320:	b08e      	sub	sp, #56	; 0x38
 8002322:	af04      	add	r7, sp, #16
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <xTaskCreateStatic+0x28>
 8002332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002336:	f383 8811 	msr	BASEPRI, r3
 800233a:	f3bf 8f6f 	isb	sy
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	e7fe      	b.n	8002344 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <xTaskCreateStatic+0x42>
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e7fe      	b.n	800235e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002360:	2354      	movs	r3, #84	; 0x54
 8002362:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b54      	cmp	r3, #84	; 0x54
 8002368:	d009      	beq.n	800237e <xTaskCreateStatic+0x60>
 800236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	e7fe      	b.n	800237c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800237e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01e      	beq.n	80023c4 <xTaskCreateStatic+0xa6>
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01b      	beq.n	80023c4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002394:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800239e:	2300      	movs	r3, #0
 80023a0:	9303      	str	r3, [sp, #12]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f850 	bl	800245c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023be:	f000 f8d3 	bl	8002568 <prvAddNewTaskToReadyList>
 80023c2:	e001      	b.n	80023c8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80023c8:	697b      	ldr	r3, [r7, #20]
	}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08c      	sub	sp, #48	; 0x30
 80023d6:	af04      	add	r7, sp, #16
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f001 f8ac 	bl	8003544 <pvPortMalloc>
 80023ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00e      	beq.n	8002412 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023f4:	2054      	movs	r0, #84	; 0x54
 80023f6:	f001 f8a5 	bl	8003544 <pvPortMalloc>
 80023fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
 8002408:	e005      	b.n	8002416 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f001 f95c 	bl	80036c8 <vPortFree>
 8002410:	e001      	b.n	8002416 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d017      	beq.n	800244c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	2300      	movs	r3, #0
 8002428:	9303      	str	r3, [sp, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f80e 	bl	800245c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002440:	69f8      	ldr	r0, [r7, #28]
 8002442:	f000 f891 	bl	8002568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002446:	2301      	movs	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	e002      	b.n	8002452 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002452:	69bb      	ldr	r3, [r7, #24]
	}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002474:	3b01      	subs	r3, #1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f023 0307 	bic.w	r3, r3, #7
 8002482:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <prvInitialiseNewTask+0x46>
 800248e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e7fe      	b.n	80024a0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01f      	beq.n	80024e8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e012      	b.n	80024d4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	7819      	ldrb	r1, [r3, #0]
 80024b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4413      	add	r3, r2
 80024bc:	3334      	adds	r3, #52	; 0x34
 80024be:	460a      	mov	r2, r1
 80024c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	d9e9      	bls.n	80024ae <prvInitialiseNewTask+0x52>
 80024da:	e000      	b.n	80024de <prvInitialiseNewTask+0x82>
			{
				break;
 80024dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024e6:	e003      	b.n	80024f0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d901      	bls.n	80024fa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024f6:	2306      	movs	r3, #6
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	2200      	movs	r2, #0
 800250a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	3304      	adds	r3, #4
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fa6b 	bl	80019ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	3318      	adds	r3, #24
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fa66 	bl	80019ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002524:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	f1c3 0207 	rsb	r2, r3, #7
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	2200      	movs	r2, #0
 800253a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	69b8      	ldr	r0, [r7, #24]
 800254a:	f000 fdf9 	bl	8003140 <pxPortInitialiseStack>
 800254e:	4602      	mov	r2, r0
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002570:	f000 ff0c 	bl	800338c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002574:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <prvAddNewTaskToReadyList+0xb8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a29      	ldr	r2, [pc, #164]	; (8002620 <prvAddNewTaskToReadyList+0xb8>)
 800257c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <prvAddNewTaskToReadyList+0xbc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002586:	4a27      	ldr	r2, [pc, #156]	; (8002624 <prvAddNewTaskToReadyList+0xbc>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <prvAddNewTaskToReadyList+0xb8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d110      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002594:	f000 fb54 	bl	8002c40 <prvInitialiseTaskLists>
 8002598:	e00d      	b.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800259a:	4b23      	ldr	r3, [pc, #140]	; (8002628 <prvAddNewTaskToReadyList+0xc0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <prvAddNewTaskToReadyList+0xbc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d802      	bhi.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025b0:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <prvAddNewTaskToReadyList+0xbc>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <prvAddNewTaskToReadyList+0xc4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a1b      	ldr	r2, [pc, #108]	; (800262c <prvAddNewTaskToReadyList+0xc4>)
 80025be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	2201      	movs	r2, #1
 80025c6:	409a      	lsls	r2, r3
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <prvAddNewTaskToReadyList+0xc8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	4a18      	ldr	r2, [pc, #96]	; (8002630 <prvAddNewTaskToReadyList+0xc8>)
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <prvAddNewTaskToReadyList+0xcc>)
 80025e0:	441a      	add	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7ff fa0c 	bl	8001a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025ee:	f000 fefb 	bl	80033e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <prvAddNewTaskToReadyList+0xc0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00e      	beq.n	8002618 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <prvAddNewTaskToReadyList+0xbc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <prvAddNewTaskToReadyList+0xd0>)
 800260a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200003e8 	.word	0x200003e8
 8002624:	200002e8 	.word	0x200002e8
 8002628:	200003f4 	.word	0x200003f4
 800262c:	20000404 	.word	0x20000404
 8002630:	200003f0 	.word	0x200003f0
 8002634:	200002ec 	.word	0x200002ec
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <vTaskDelay+0x60>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <vTaskDelay+0x2e>
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	e7fe      	b.n	8002668 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800266a:	f000 f879 	bl	8002760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800266e:	2100      	movs	r1, #0
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fcff 	bl	8003074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002676:	f000 f881 	bl	800277c <xTaskResumeAll>
 800267a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <vTaskDelay+0x64>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000410 	.word	0x20000410
 80026a0:	e000ed04 	.word	0xe000ed04

080026a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80026b2:	463a      	mov	r2, r7
 80026b4:	1d39      	adds	r1, r7, #4
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fd ff58 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	9202      	str	r2, [sp, #8]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	2300      	movs	r3, #0
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	460a      	mov	r2, r1
 80026d2:	491d      	ldr	r1, [pc, #116]	; (8002748 <vTaskStartScheduler+0xa4>)
 80026d4:	481d      	ldr	r0, [pc, #116]	; (800274c <vTaskStartScheduler+0xa8>)
 80026d6:	f7ff fe22 	bl	800231e <xTaskCreateStatic>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <vTaskStartScheduler+0xac>)
 80026de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <vTaskStartScheduler+0xac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80026e8:	2301      	movs	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e001      	b.n	80026f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d115      	bne.n	8002724 <vTaskStartScheduler+0x80>
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <vTaskStartScheduler+0xb0>)
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <vTaskStartScheduler+0xb4>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <vTaskStartScheduler+0xb8>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800271e:	f000 fd97 	bl	8003250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002722:	e00d      	b.n	8002740 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d109      	bne.n	8002740 <vTaskStartScheduler+0x9c>
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e7fe      	b.n	800273e <vTaskStartScheduler+0x9a>
}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	080048a0 	.word	0x080048a0
 800274c:	08002c11 	.word	0x08002c11
 8002750:	2000040c 	.word	0x2000040c
 8002754:	20000408 	.word	0x20000408
 8002758:	200003f4 	.word	0x200003f4
 800275c:	200003ec 	.word	0x200003ec

08002760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <vTaskSuspendAll+0x18>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	4a03      	ldr	r2, [pc, #12]	; (8002778 <vTaskSuspendAll+0x18>)
 800276c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	20000410 	.word	0x20000410

0800277c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800278a:	4b41      	ldr	r3, [pc, #260]	; (8002890 <xTaskResumeAll+0x114>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <xTaskResumeAll+0x2a>
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	e7fe      	b.n	80027a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80027a6:	f000 fdf1 	bl	800338c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80027aa:	4b39      	ldr	r3, [pc, #228]	; (8002890 <xTaskResumeAll+0x114>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	4a37      	ldr	r2, [pc, #220]	; (8002890 <xTaskResumeAll+0x114>)
 80027b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <xTaskResumeAll+0x114>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d161      	bne.n	8002880 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <xTaskResumeAll+0x118>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d05d      	beq.n	8002880 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c4:	e02e      	b.n	8002824 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <xTaskResumeAll+0x11c>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3318      	adds	r3, #24
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff f974 	bl	8001ac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3304      	adds	r3, #4
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff f96f 	bl	8001ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	2201      	movs	r2, #1
 80027e8:	409a      	lsls	r2, r3
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <xTaskResumeAll+0x120>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	4a2a      	ldr	r2, [pc, #168]	; (800289c <xTaskResumeAll+0x120>)
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <xTaskResumeAll+0x124>)
 8002802:	441a      	add	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f7ff f8fb 	bl	8001a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <xTaskResumeAll+0x128>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <xTaskResumeAll+0x12c>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <xTaskResumeAll+0x11c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1cc      	bne.n	80027c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002832:	f000 fa9f 	bl	8002d74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <xTaskResumeAll+0x130>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002842:	f000 f837 	bl	80028b4 <xTaskIncrementTick>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <xTaskResumeAll+0x12c>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3b01      	subs	r3, #1
 8002856:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f1      	bne.n	8002842 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <xTaskResumeAll+0x130>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <xTaskResumeAll+0x12c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800286c:	2301      	movs	r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <xTaskResumeAll+0x134>)
 8002872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002880:	f000 fdb2 	bl	80033e8 <vPortExitCritical>

	return xAlreadyYielded;
 8002884:	68bb      	ldr	r3, [r7, #8]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000410 	.word	0x20000410
 8002894:	200003e8 	.word	0x200003e8
 8002898:	200003a8 	.word	0x200003a8
 800289c:	200003f0 	.word	0x200003f0
 80028a0:	200002ec 	.word	0x200002ec
 80028a4:	200002e8 	.word	0x200002e8
 80028a8:	200003fc 	.word	0x200003fc
 80028ac:	200003f8 	.word	0x200003f8
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028be:	4b4e      	ldr	r3, [pc, #312]	; (80029f8 <xTaskIncrementTick+0x144>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 8087 	bne.w	80029d6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <xTaskIncrementTick+0x148>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80028d0:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <xTaskIncrementTick+0x148>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11f      	bne.n	800291c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <xTaskIncrementTick+0x14c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <xTaskIncrementTick+0x46>
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	e7fe      	b.n	80028f8 <xTaskIncrementTick+0x44>
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <xTaskIncrementTick+0x14c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <xTaskIncrementTick+0x150>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3e      	ldr	r2, [pc, #248]	; (8002a00 <xTaskIncrementTick+0x14c>)
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4a3e      	ldr	r2, [pc, #248]	; (8002a04 <xTaskIncrementTick+0x150>)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <xTaskIncrementTick+0x154>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <xTaskIncrementTick+0x154>)
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	f000 fa2c 	bl	8002d74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800291c:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <xTaskIncrementTick+0x158>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	429a      	cmp	r2, r3
 8002924:	d348      	bcc.n	80029b8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <xTaskIncrementTick+0x14c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <xTaskIncrementTick+0x158>)
 8002932:	f04f 32ff 	mov.w	r2, #4294967295
 8002936:	601a      	str	r2, [r3, #0]
					break;
 8002938:	e03e      	b.n	80029b8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <xTaskIncrementTick+0x14c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	d203      	bcs.n	800295a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002952:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <xTaskIncrementTick+0x158>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002958:	e02e      	b.n	80029b8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3304      	adds	r3, #4
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f8ae 	bl	8001ac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3318      	adds	r3, #24
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f8a5 	bl	8001ac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	2201      	movs	r2, #1
 800297c:	409a      	lsls	r2, r3
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <xTaskIncrementTick+0x15c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <xTaskIncrementTick+0x15c>)
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <xTaskIncrementTick+0x160>)
 8002996:	441a      	add	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	3304      	adds	r3, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f7ff f831 	bl	8001a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <xTaskIncrementTick+0x164>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3b9      	bcc.n	8002926 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80029b2:	2301      	movs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b6:	e7b6      	b.n	8002926 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <xTaskIncrementTick+0x164>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029be:	4915      	ldr	r1, [pc, #84]	; (8002a14 <xTaskIncrementTick+0x160>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d907      	bls.n	80029e0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e004      	b.n	80029e0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <xTaskIncrementTick+0x168>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <xTaskIncrementTick+0x168>)
 80029de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <xTaskIncrementTick+0x16c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80029e8:	2301      	movs	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80029ec:	697b      	ldr	r3, [r7, #20]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000410 	.word	0x20000410
 80029fc:	200003ec 	.word	0x200003ec
 8002a00:	200003a0 	.word	0x200003a0
 8002a04:	200003a4 	.word	0x200003a4
 8002a08:	20000400 	.word	0x20000400
 8002a0c:	20000408 	.word	0x20000408
 8002a10:	200003f0 	.word	0x200003f0
 8002a14:	200002ec 	.word	0x200002ec
 8002a18:	200002e8 	.word	0x200002e8
 8002a1c:	200003f8 	.word	0x200003f8
 8002a20:	200003fc 	.word	0x200003fc

08002a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <vTaskSwitchContext+0xa0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a32:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <vTaskSwitchContext+0xa4>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a38:	e03e      	b.n	8002ab8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <vTaskSwitchContext+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <vTaskSwitchContext+0xa8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	fab3 f383 	clz	r3, r3
 8002a4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	f1c3 031f 	rsb	r3, r3, #31
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	491e      	ldr	r1, [pc, #120]	; (8002ad0 <vTaskSwitchContext+0xac>)
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	e7fe      	b.n	8002a7c <vTaskSwitchContext+0x58>
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <vTaskSwitchContext+0xac>)
 8002a8a:	4413      	add	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d104      	bne.n	8002aae <vTaskSwitchContext+0x8a>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <vTaskSwitchContext+0xb0>)
 8002ab6:	6013      	str	r3, [r2, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	20000410 	.word	0x20000410
 8002ac8:	200003fc 	.word	0x200003fc
 8002acc:	200003f0 	.word	0x200003f0
 8002ad0:	200002ec 	.word	0x200002ec
 8002ad4:	200002e8 	.word	0x200002e8

08002ad8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <vTaskSetTimeOutState+0x22>
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e7fe      	b.n	8002af8 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 8002afa:	f000 fc47 	bl	800338c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <vTaskSetTimeOutState+0x44>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <vTaskSetTimeOutState+0x48>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8002b0e:	f000 fc6b 	bl	80033e8 <vPortExitCritical>
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000400 	.word	0x20000400
 8002b20:	200003ec 	.word	0x200003ec

08002b24 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <vTaskInternalSetTimeOutState+0x24>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <vTaskInternalSetTimeOutState+0x28>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	605a      	str	r2, [r3, #4]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	20000400 	.word	0x20000400
 8002b4c:	200003ec 	.word	0x200003ec

08002b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <xTaskCheckForTimeOut+0x24>
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	e7fe      	b.n	8002b72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <xTaskCheckForTimeOut+0x3e>
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e7fe      	b.n	8002b8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002b8e:	f000 fbfd 	bl	800338c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <xTaskCheckForTimeOut+0xb8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d102      	bne.n	8002bb2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	e023      	b.n	8002bfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <xTaskCheckForTimeOut+0xbc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d007      	beq.n	8002bce <xTaskCheckForTimeOut+0x7e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	e015      	b.n	8002bfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d20b      	bcs.n	8002bf0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	1ad2      	subs	r2, r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff9d 	bl	8002b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	e004      	b.n	8002bfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002bfa:	f000 fbf5 	bl	80033e8 <vPortExitCritical>

	return xReturn;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200003ec 	.word	0x200003ec
 8002c0c:	20000400 	.word	0x20000400

08002c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c18:	f000 f852 	bl	8002cc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <prvIdleTask+0x28>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d9f9      	bls.n	8002c18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <prvIdleTask+0x2c>)
 8002c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c34:	e7f0      	b.n	8002c18 <prvIdleTask+0x8>
 8002c36:	bf00      	nop
 8002c38:	200002ec 	.word	0x200002ec
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	e00c      	b.n	8002c66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <prvInitialiseTaskLists+0x60>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fea6 	bl	80019ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3301      	adds	r3, #1
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d9ef      	bls.n	8002c4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c6c:	480d      	ldr	r0, [pc, #52]	; (8002ca4 <prvInitialiseTaskLists+0x64>)
 8002c6e:	f7fe fe9d 	bl	80019ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002c72:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <prvInitialiseTaskLists+0x68>)
 8002c74:	f7fe fe9a 	bl	80019ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <prvInitialiseTaskLists+0x6c>)
 8002c7a:	f7fe fe97 	bl	80019ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c7e:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <prvInitialiseTaskLists+0x70>)
 8002c80:	f7fe fe94 	bl	80019ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c84:	480b      	ldr	r0, [pc, #44]	; (8002cb4 <prvInitialiseTaskLists+0x74>)
 8002c86:	f7fe fe91 	bl	80019ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <prvInitialiseTaskLists+0x78>)
 8002c8c:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <prvInitialiseTaskLists+0x64>)
 8002c8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <prvInitialiseTaskLists+0x7c>)
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <prvInitialiseTaskLists+0x68>)
 8002c94:	601a      	str	r2, [r3, #0]
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200002ec 	.word	0x200002ec
 8002ca4:	20000378 	.word	0x20000378
 8002ca8:	2000038c 	.word	0x2000038c
 8002cac:	200003a8 	.word	0x200003a8
 8002cb0:	200003bc 	.word	0x200003bc
 8002cb4:	200003d4 	.word	0x200003d4
 8002cb8:	200003a0 	.word	0x200003a0
 8002cbc:	200003a4 	.word	0x200003a4

08002cc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cc6:	e019      	b.n	8002cfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002cc8:	f000 fb60 	bl	800338c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <prvCheckTasksWaitingTermination+0x4c>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fef1 	bl	8001ac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <prvCheckTasksWaitingTermination+0x50>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <prvCheckTasksWaitingTermination+0x50>)
 8002ce6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <prvCheckTasksWaitingTermination+0x54>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <prvCheckTasksWaitingTermination+0x54>)
 8002cf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002cf2:	f000 fb79 	bl	80033e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f80e 	bl	8002d18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <prvCheckTasksWaitingTermination+0x54>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1e1      	bne.n	8002cc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200003bc 	.word	0x200003bc
 8002d10:	200003e8 	.word	0x200003e8
 8002d14:	200003d0 	.word	0x200003d0

08002d18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fcca 	bl	80036c8 <vPortFree>
				vPortFree( pxTCB );
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fcc7 	bl	80036c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d3a:	e017      	b.n	8002d6c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d103      	bne.n	8002d4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fcbe 	bl	80036c8 <vPortFree>
	}
 8002d4c:	e00e      	b.n	8002d6c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d009      	beq.n	8002d6c <prvDeleteTCB+0x54>
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e7fe      	b.n	8002d6a <prvDeleteTCB+0x52>
	}
 8002d6c:	bf00      	nop
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <prvResetNextTaskUnblockTime+0x38>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d104      	bne.n	8002d8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <prvResetNextTaskUnblockTime+0x3c>)
 8002d86:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d8c:	e008      	b.n	8002da0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <prvResetNextTaskUnblockTime+0x38>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <prvResetNextTaskUnblockTime+0x3c>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	200003a0 	.word	0x200003a0
 8002db0:	20000408 	.word	0x20000408

08002db4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <xTaskGetCurrentTaskHandle+0x1c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002dc0:	687b      	ldr	r3, [r7, #4]
	}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	200002e8 	.word	0x200002e8

08002dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <xTaskGetSchedulerState+0x34>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002de2:	2301      	movs	r3, #1
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	e008      	b.n	8002dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <xTaskGetSchedulerState+0x38>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002df0:	2302      	movs	r3, #2
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	e001      	b.n	8002dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002dfa:	687b      	ldr	r3, [r7, #4]
	}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	200003f4 	.word	0x200003f4
 8002e0c:	20000410 	.word	0x20000410

08002e10 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002e1e:	f000 fab5 	bl	800338c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <xTaskNotifyWait+0xac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d01a      	beq.n	8002e66 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <xTaskNotifyWait+0xac>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	43d2      	mvns	r2, r2
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <xTaskNotifyWait+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e4e:	2101      	movs	r1, #1
 8002e50:	6838      	ldr	r0, [r7, #0]
 8002e52:	f000 f90f 	bl	8003074 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <xTaskNotifyWait+0xb0>)
 8002e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002e66:	f000 fabf 	bl	80033e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002e6a:	f000 fa8f 	bl	800338c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <xTaskNotifyWait+0xac>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <xTaskNotifyWait+0xac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d002      	beq.n	8002e92 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e008      	b.n	8002ea4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <xTaskNotifyWait+0xac>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	43d2      	mvns	r2, r2
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <xTaskNotifyWait+0xac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8002eae:	f000 fa9b 	bl	80033e8 <vPortExitCritical>

		return xReturn;
 8002eb2:	697b      	ldr	r3, [r7, #20]
	}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200002e8 	.word	0x200002e8
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <xTaskGenericNotify+0x2e>
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	e7fe      	b.n	8002ef0 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8002ef6:	f000 fa49 	bl	800338c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f0e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d827      	bhi.n	8002f6e <xTaskGenericNotify+0xaa>
 8002f1e:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <xTaskGenericNotify+0x60>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f8d 	.word	0x08002f8d
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f47 	.word	0x08002f47
 8002f30:	08002f53 	.word	0x08002f53
 8002f34:	08002f5b 	.word	0x08002f5b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002f44:	e025      	b.n	8002f92 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002f50:	e01f      	b.n	8002f92 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002f58:	e01b      	b.n	8002f92 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d003      	beq.n	8002f68 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002f66:	e014      	b.n	8002f92 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002f6c:	e011      	b.n	8002f92 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d00b      	beq.n	8002f90 <xTaskGenericNotify+0xcc>
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e7fe      	b.n	8002f8a <xTaskGenericNotify+0xc6>
					break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <xTaskGenericNotify+0xce>

					break;
 8002f90:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d138      	bne.n	800300a <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fd8f 	bl	8001ac0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <xTaskGenericNotify+0x154>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <xTaskGenericNotify+0x154>)
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4a16      	ldr	r2, [pc, #88]	; (800301c <xTaskGenericNotify+0x158>)
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7fe fd1b 	bl	8001a06 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <xTaskGenericNotify+0x128>
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	e7fe      	b.n	8002fea <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <xTaskGenericNotify+0x15c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d907      	bls.n	800300a <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <xTaskGenericNotify+0x160>)
 8002ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800300a:	f000 f9ed 	bl	80033e8 <vPortExitCritical>

		return xReturn;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200003f0 	.word	0x200003f0
 800301c:	200002ec 	.word	0x200002ec
 8003020:	200002e8 	.word	0x200002e8
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <xTaskNotifyStateClear+0x14>
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <xTaskNotifyStateClear+0x48>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e000      	b.n	800303e <xTaskNotifyStateClear+0x16>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8003040:	f000 f9a4 	bl	800338c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d106      	bne.n	800305e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				xReturn = pdPASS;
 8003058:	2301      	movs	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e001      	b.n	8003062 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8003062:	f000 f9c1 	bl	80033e8 <vPortExitCritical>

		return xReturn;
 8003066:	68fb      	ldr	r3, [r7, #12]
	}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200002e8 	.word	0x200002e8

08003074 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3304      	adds	r3, #4
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fd18 	bl	8001ac0 <uxListRemove>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	2201      	movs	r2, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4013      	ands	r3, r2
 80030aa:	4a20      	ldr	r2, [pc, #128]	; (800312c <prvAddCurrentTaskToDelayedList+0xb8>)
 80030ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d10a      	bne.n	80030cc <prvAddCurrentTaskToDelayedList+0x58>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	481a      	ldr	r0, [pc, #104]	; (8003130 <prvAddCurrentTaskToDelayedList+0xbc>)
 80030c6:	f7fe fc9e 	bl	8001a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030ca:	e026      	b.n	800311a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d209      	bcs.n	80030f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <prvAddCurrentTaskToDelayedList+0xc0>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7fe fcac 	bl	8001a4e <vListInsert>
}
 80030f6:	e010      	b.n	800311a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <prvAddCurrentTaskToDelayedList+0xc4>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f7fe fca2 	bl	8001a4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <prvAddCurrentTaskToDelayedList+0xc8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d202      	bcs.n	800311a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003114:	4a09      	ldr	r2, [pc, #36]	; (800313c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	200003ec 	.word	0x200003ec
 8003128:	200002e8 	.word	0x200002e8
 800312c:	200003f0 	.word	0x200003f0
 8003130:	200003d4 	.word	0x200003d4
 8003134:	200003a4 	.word	0x200003a4
 8003138:	200003a0 	.word	0x200003a0
 800313c:	20000408 	.word	0x20000408

08003140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b04      	subs	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3b04      	subs	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3b04      	subs	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003170:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <pxPortInitialiseStack+0x64>)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3b14      	subs	r3, #20
 800317a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b04      	subs	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f06f 0202 	mvn.w	r2, #2
 800318e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3b20      	subs	r3, #32
 8003194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003196:	68fb      	ldr	r3, [r7, #12]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	080031a9 	.word	0x080031a9

080031a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <prvTaskExitError+0x50>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d009      	beq.n	80031d0 <prvTaskExitError+0x28>
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e7fe      	b.n	80031ce <prvTaskExitError+0x26>
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80031e2:	bf00      	nop
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0fc      	beq.n	80031e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	2000000c 	.word	0x2000000c
 80031fc:	00000000 	.word	0x00000000

08003200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003200:	4b07      	ldr	r3, [pc, #28]	; (8003220 <pxCurrentTCBConst2>)
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	6808      	ldr	r0, [r1, #0]
 8003206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320a:	f380 8809 	msr	PSP, r0
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f380 8811 	msr	BASEPRI, r0
 800321a:	4770      	bx	lr
 800321c:	f3af 8000 	nop.w

08003220 <pxCurrentTCBConst2>:
 8003220:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop

08003228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003228:	4808      	ldr	r0, [pc, #32]	; (800324c <prvPortStartFirstTask+0x24>)
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	6800      	ldr	r0, [r0, #0]
 800322e:	f380 8808 	msr	MSP, r0
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f380 8814 	msr	CONTROL, r0
 800323a:	b662      	cpsie	i
 800323c:	b661      	cpsie	f
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	df00      	svc	0
 8003248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800324a:	bf00      	nop
 800324c:	e000ed08 	.word	0xe000ed08

08003250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <xPortStartScheduler+0x118>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a44      	ldr	r2, [pc, #272]	; (800336c <xPortStartScheduler+0x11c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d109      	bne.n	8003274 <xPortStartScheduler+0x24>
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e7fe      	b.n	8003272 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <xPortStartScheduler+0x118>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <xPortStartScheduler+0x120>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d109      	bne.n	8003292 <xPortStartScheduler+0x42>
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e7fe      	b.n	8003290 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003292:	4b38      	ldr	r3, [pc, #224]	; (8003374 <xPortStartScheduler+0x124>)
 8003294:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	22ff      	movs	r2, #255	; 0xff
 80032a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4b30      	ldr	r3, [pc, #192]	; (8003378 <xPortStartScheduler+0x128>)
 80032b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <xPortStartScheduler+0x12c>)
 80032bc:	2207      	movs	r2, #7
 80032be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032c0:	e009      	b.n	80032d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <xPortStartScheduler+0x12c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	4a2c      	ldr	r2, [pc, #176]	; (800337c <xPortStartScheduler+0x12c>)
 80032ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d0ef      	beq.n	80032c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <xPortStartScheduler+0x12c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d009      	beq.n	8003302 <xPortStartScheduler+0xb2>
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	e7fe      	b.n	8003300 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003302:	4b1e      	ldr	r3, [pc, #120]	; (800337c <xPortStartScheduler+0x12c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	4a1c      	ldr	r2, [pc, #112]	; (800337c <xPortStartScheduler+0x12c>)
 800330a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <xPortStartScheduler+0x12c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003314:	4a19      	ldr	r2, [pc, #100]	; (800337c <xPortStartScheduler+0x12c>)
 8003316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <xPortStartScheduler+0x130>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <xPortStartScheduler+0x130>)
 8003326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800332a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <xPortStartScheduler+0x130>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <xPortStartScheduler+0x130>)
 8003332:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003338:	f000 f8d6 	bl	80034e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <xPortStartScheduler+0x134>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003342:	f000 f8f5 	bl	8003530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <xPortStartScheduler+0x138>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a0f      	ldr	r2, [pc, #60]	; (8003388 <xPortStartScheduler+0x138>)
 800334c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003350:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003352:	f7ff ff69 	bl	8003228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003356:	f7ff fb65 	bl	8002a24 <vTaskSwitchContext>
	prvTaskExitError();
 800335a:	f7ff ff25 	bl	80031a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	e000ed00 	.word	0xe000ed00
 800336c:	410fc271 	.word	0x410fc271
 8003370:	410fc270 	.word	0x410fc270
 8003374:	e000e400 	.word	0xe000e400
 8003378:	20000414 	.word	0x20000414
 800337c:	20000418 	.word	0x20000418
 8003380:	e000ed20 	.word	0xe000ed20
 8003384:	2000000c 	.word	0x2000000c
 8003388:	e000ef34 	.word	0xe000ef34

0800338c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <vPortEnterCritical+0x54>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <vPortEnterCritical+0x54>)
 80033ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <vPortEnterCritical+0x54>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10e      	bne.n	80033d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <vPortEnterCritical+0x58>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <vPortEnterCritical+0x48>
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	e7fe      	b.n	80033d2 <vPortEnterCritical+0x46>
	}
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	e000ed04 	.word	0xe000ed04

080033e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <vPortExitCritical+0x4c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <vPortExitCritical+0x22>
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	e7fe      	b.n	8003408 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <vPortExitCritical+0x4c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3b01      	subs	r3, #1
 8003410:	4a08      	ldr	r2, [pc, #32]	; (8003434 <vPortExitCritical+0x4c>)
 8003412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <vPortExitCritical+0x4c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <vPortExitCritical+0x3e>
 800341c:	2300      	movs	r3, #0
 800341e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	2000000c 	.word	0x2000000c
	...

08003440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003440:	f3ef 8009 	mrs	r0, PSP
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <pxCurrentTCBConst>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	f01e 0f10 	tst.w	lr, #16
 8003450:	bf08      	it	eq
 8003452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345a:	6010      	str	r0, [r2, #0]
 800345c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003464:	f380 8811 	msr	BASEPRI, r0
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f7ff fad8 	bl	8002a24 <vTaskSwitchContext>
 8003474:	f04f 0000 	mov.w	r0, #0
 8003478:	f380 8811 	msr	BASEPRI, r0
 800347c:	bc09      	pop	{r0, r3}
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	6808      	ldr	r0, [r1, #0]
 8003482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003486:	f01e 0f10 	tst.w	lr, #16
 800348a:	bf08      	it	eq
 800348c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003490:	f380 8809 	msr	PSP, r0
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w

080034a0 <pxCurrentTCBConst>:
 80034a0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop

080034a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034c0:	f7ff f9f8 	bl	80028b4 <xTaskIncrementTick>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <xPortSysTickHandler+0x3c>)
 80034cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <vPortSetupTimerInterrupt+0x34>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <vPortSetupTimerInterrupt+0x38>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <vPortSetupTimerInterrupt+0x3c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <vPortSetupTimerInterrupt+0x40>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <vPortSetupTimerInterrupt+0x44>)
 8003506:	3b01      	subs	r3, #1
 8003508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <vPortSetupTimerInterrupt+0x34>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010
 8003520:	e000e018 	.word	0xe000e018
 8003524:	20000000 	.word	0x20000000
 8003528:	10624dd3 	.word	0x10624dd3
 800352c:	e000e014 	.word	0xe000e014

08003530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003540 <vPortEnableVFP+0x10>
 8003534:	6801      	ldr	r1, [r0, #0]
 8003536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800353a:	6001      	str	r1, [r0, #0]
 800353c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800353e:	bf00      	nop
 8003540:	e000ed88 	.word	0xe000ed88

08003544 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003550:	f7ff f906 	bl	8002760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003554:	4b57      	ldr	r3, [pc, #348]	; (80036b4 <pvPortMalloc+0x170>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800355c:	f000 f90c 	bl	8003778 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003560:	4b55      	ldr	r3, [pc, #340]	; (80036b8 <pvPortMalloc+0x174>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	f040 808c 	bne.w	8003686 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01c      	beq.n	80035ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003574:	2208      	movs	r2, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	2b00      	cmp	r3, #0
 8003584:	d013      	beq.n	80035ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f023 0307 	bic.w	r3, r3, #7
 800358c:	3308      	adds	r3, #8
 800358e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <pvPortMalloc+0x6a>
	__asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e7fe      	b.n	80035ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d068      	beq.n	8003686 <pvPortMalloc+0x142>
 80035b4:	4b41      	ldr	r3, [pc, #260]	; (80036bc <pvPortMalloc+0x178>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d863      	bhi.n	8003686 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <pvPortMalloc+0x17c>)
 80035c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80035c2:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <pvPortMalloc+0x17c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035c8:	e004      	b.n	80035d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d903      	bls.n	80035e6 <pvPortMalloc+0xa2>
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f1      	bne.n	80035ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80035e6:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <pvPortMalloc+0x170>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d04a      	beq.n	8003686 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2208      	movs	r2, #8
 80035f6:	4413      	add	r3, r2
 80035f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	1ad2      	subs	r2, r2, r3
 800360a:	2308      	movs	r3, #8
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	429a      	cmp	r2, r3
 8003610:	d91e      	bls.n	8003650 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <pvPortMalloc+0xf4>
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e7fe      	b.n	8003636 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	1ad2      	subs	r2, r2, r3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800364a:	69b8      	ldr	r0, [r7, #24]
 800364c:	f000 f8f6 	bl	800383c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <pvPortMalloc+0x178>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	4a18      	ldr	r2, [pc, #96]	; (80036bc <pvPortMalloc+0x178>)
 800365c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <pvPortMalloc+0x178>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <pvPortMalloc+0x180>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d203      	bcs.n	8003672 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <pvPortMalloc+0x178>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <pvPortMalloc+0x180>)
 8003670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <pvPortMalloc+0x174>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	431a      	orrs	r2, r3
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003686:	f7ff f879 	bl	800277c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <pvPortMalloc+0x164>
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e7fe      	b.n	80036a6 <pvPortMalloc+0x162>
	return pvReturn;
 80036a8:	69fb      	ldr	r3, [r7, #28]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3728      	adds	r7, #40	; 0x28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20004024 	.word	0x20004024
 80036b8:	20004030 	.word	0x20004030
 80036bc:	20004028 	.word	0x20004028
 80036c0:	2000401c 	.word	0x2000401c
 80036c4:	2000402c 	.word	0x2000402c

080036c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d046      	beq.n	8003768 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80036da:	2308      	movs	r3, #8
 80036dc:	425b      	negs	r3, r3
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4413      	add	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <vPortFree+0xa8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <vPortFree+0x42>
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e7fe      	b.n	8003708 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <vPortFree+0x5e>
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	e7fe      	b.n	8003724 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <vPortFree+0xa8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d019      	beq.n	8003768 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d115      	bne.n	8003768 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <vPortFree+0xa8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800374c:	f7ff f808 	bl	8002760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <vPortFree+0xac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4413      	add	r3, r2
 800375a:	4a06      	ldr	r2, [pc, #24]	; (8003774 <vPortFree+0xac>)
 800375c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800375e:	6938      	ldr	r0, [r7, #16]
 8003760:	f000 f86c 	bl	800383c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003764:	f7ff f80a 	bl	800277c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003768:	bf00      	nop
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20004030 	.word	0x20004030
 8003774:	20004028 	.word	0x20004028

08003778 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800377e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003782:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <prvHeapInit+0xac>)
 8003786:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	3307      	adds	r3, #7
 8003796:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0307 	bic.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <prvHeapInit+0xac>)
 80037a8:	4413      	add	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <prvHeapInit+0xb0>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80037b6:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <prvHeapInit+0xb0>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4413      	add	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80037c4:	2208      	movs	r2, #8
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0307 	bic.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4a15      	ldr	r2, [pc, #84]	; (800382c <prvHeapInit+0xb4>)
 80037d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <prvHeapInit+0xb4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <prvHeapInit+0xb4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	1ad2      	subs	r2, r2, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <prvHeapInit+0xb4>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <prvHeapInit+0xb8>)
 8003806:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a09      	ldr	r2, [pc, #36]	; (8003834 <prvHeapInit+0xbc>)
 800380e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <prvHeapInit+0xc0>)
 8003812:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003816:	601a      	str	r2, [r3, #0]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	2000041c 	.word	0x2000041c
 8003828:	2000401c 	.word	0x2000401c
 800382c:	20004024 	.word	0x20004024
 8003830:	2000402c 	.word	0x2000402c
 8003834:	20004028 	.word	0x20004028
 8003838:	20004030 	.word	0x20004030

0800383c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <prvInsertBlockIntoFreeList+0xac>)
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e002      	b.n	8003850 <prvInsertBlockIntoFreeList+0x14>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d8f7      	bhi.n	800384a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4413      	add	r3, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	d108      	bne.n	800387e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	441a      	add	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	441a      	add	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d118      	bne.n	80038c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <prvInsertBlockIntoFreeList+0xb0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d00d      	beq.n	80038ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e008      	b.n	80038cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <prvInsertBlockIntoFreeList+0xb0>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e003      	b.n	80038cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d002      	beq.n	80038da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	2000401c 	.word	0x2000401c
 80038ec:	20004024 	.word	0x20004024

080038f0 <__errno>:
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <__errno+0x8>)
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000010 	.word	0x20000010

080038fc <__libc_init_array>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4e0d      	ldr	r6, [pc, #52]	; (8003934 <__libc_init_array+0x38>)
 8003900:	4c0d      	ldr	r4, [pc, #52]	; (8003938 <__libc_init_array+0x3c>)
 8003902:	1ba4      	subs	r4, r4, r6
 8003904:	10a4      	asrs	r4, r4, #2
 8003906:	2500      	movs	r5, #0
 8003908:	42a5      	cmp	r5, r4
 800390a:	d109      	bne.n	8003920 <__libc_init_array+0x24>
 800390c:	4e0b      	ldr	r6, [pc, #44]	; (800393c <__libc_init_array+0x40>)
 800390e:	4c0c      	ldr	r4, [pc, #48]	; (8003940 <__libc_init_array+0x44>)
 8003910:	f000 ff74 	bl	80047fc <_init>
 8003914:	1ba4      	subs	r4, r4, r6
 8003916:	10a4      	asrs	r4, r4, #2
 8003918:	2500      	movs	r5, #0
 800391a:	42a5      	cmp	r5, r4
 800391c:	d105      	bne.n	800392a <__libc_init_array+0x2e>
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003924:	4798      	blx	r3
 8003926:	3501      	adds	r5, #1
 8003928:	e7ee      	b.n	8003908 <__libc_init_array+0xc>
 800392a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800392e:	4798      	blx	r3
 8003930:	3501      	adds	r5, #1
 8003932:	e7f2      	b.n	800391a <__libc_init_array+0x1e>
 8003934:	08004958 	.word	0x08004958
 8003938:	08004958 	.word	0x08004958
 800393c:	08004958 	.word	0x08004958
 8003940:	0800495c 	.word	0x0800495c

08003944 <memcpy>:
 8003944:	b510      	push	{r4, lr}
 8003946:	1e43      	subs	r3, r0, #1
 8003948:	440a      	add	r2, r1
 800394a:	4291      	cmp	r1, r2
 800394c:	d100      	bne.n	8003950 <memcpy+0xc>
 800394e:	bd10      	pop	{r4, pc}
 8003950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003958:	e7f7      	b.n	800394a <memcpy+0x6>

0800395a <memset>:
 800395a:	4402      	add	r2, r0
 800395c:	4603      	mov	r3, r0
 800395e:	4293      	cmp	r3, r2
 8003960:	d100      	bne.n	8003964 <memset+0xa>
 8003962:	4770      	bx	lr
 8003964:	f803 1b01 	strb.w	r1, [r3], #1
 8003968:	e7f9      	b.n	800395e <memset+0x4>
	...

0800396c <iprintf>:
 800396c:	b40f      	push	{r0, r1, r2, r3}
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <iprintf+0x2c>)
 8003970:	b513      	push	{r0, r1, r4, lr}
 8003972:	681c      	ldr	r4, [r3, #0]
 8003974:	b124      	cbz	r4, 8003980 <iprintf+0x14>
 8003976:	69a3      	ldr	r3, [r4, #24]
 8003978:	b913      	cbnz	r3, 8003980 <iprintf+0x14>
 800397a:	4620      	mov	r0, r4
 800397c:	f000 fa22 	bl	8003dc4 <__sinit>
 8003980:	ab05      	add	r3, sp, #20
 8003982:	9a04      	ldr	r2, [sp, #16]
 8003984:	68a1      	ldr	r1, [r4, #8]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	4620      	mov	r0, r4
 800398a:	f000 fbdb 	bl	8004144 <_vfiprintf_r>
 800398e:	b002      	add	sp, #8
 8003990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003994:	b004      	add	sp, #16
 8003996:	4770      	bx	lr
 8003998:	20000010 	.word	0x20000010

0800399c <_puts_r>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	460e      	mov	r6, r1
 80039a0:	4605      	mov	r5, r0
 80039a2:	b118      	cbz	r0, 80039ac <_puts_r+0x10>
 80039a4:	6983      	ldr	r3, [r0, #24]
 80039a6:	b90b      	cbnz	r3, 80039ac <_puts_r+0x10>
 80039a8:	f000 fa0c 	bl	8003dc4 <__sinit>
 80039ac:	69ab      	ldr	r3, [r5, #24]
 80039ae:	68ac      	ldr	r4, [r5, #8]
 80039b0:	b913      	cbnz	r3, 80039b8 <_puts_r+0x1c>
 80039b2:	4628      	mov	r0, r5
 80039b4:	f000 fa06 	bl	8003dc4 <__sinit>
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <_puts_r+0xac>)
 80039ba:	429c      	cmp	r4, r3
 80039bc:	d117      	bne.n	80039ee <_puts_r+0x52>
 80039be:	686c      	ldr	r4, [r5, #4]
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	071b      	lsls	r3, r3, #28
 80039c4:	d51d      	bpl.n	8003a02 <_puts_r+0x66>
 80039c6:	6923      	ldr	r3, [r4, #16]
 80039c8:	b1db      	cbz	r3, 8003a02 <_puts_r+0x66>
 80039ca:	3e01      	subs	r6, #1
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039d2:	3b01      	subs	r3, #1
 80039d4:	60a3      	str	r3, [r4, #8]
 80039d6:	b9e9      	cbnz	r1, 8003a14 <_puts_r+0x78>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da2e      	bge.n	8003a3a <_puts_r+0x9e>
 80039dc:	4622      	mov	r2, r4
 80039de:	210a      	movs	r1, #10
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 f83f 	bl	8003a64 <__swbuf_r>
 80039e6:	3001      	adds	r0, #1
 80039e8:	d011      	beq.n	8003a0e <_puts_r+0x72>
 80039ea:	200a      	movs	r0, #10
 80039ec:	e011      	b.n	8003a12 <_puts_r+0x76>
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <_puts_r+0xb0>)
 80039f0:	429c      	cmp	r4, r3
 80039f2:	d101      	bne.n	80039f8 <_puts_r+0x5c>
 80039f4:	68ac      	ldr	r4, [r5, #8]
 80039f6:	e7e3      	b.n	80039c0 <_puts_r+0x24>
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <_puts_r+0xb4>)
 80039fa:	429c      	cmp	r4, r3
 80039fc:	bf08      	it	eq
 80039fe:	68ec      	ldreq	r4, [r5, #12]
 8003a00:	e7de      	b.n	80039c0 <_puts_r+0x24>
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 f87f 	bl	8003b08 <__swsetup_r>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d0dd      	beq.n	80039ca <_puts_r+0x2e>
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da04      	bge.n	8003a22 <_puts_r+0x86>
 8003a18:	69a2      	ldr	r2, [r4, #24]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	dc06      	bgt.n	8003a2c <_puts_r+0x90>
 8003a1e:	290a      	cmp	r1, #10
 8003a20:	d004      	beq.n	8003a2c <_puts_r+0x90>
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	6022      	str	r2, [r4, #0]
 8003a28:	7019      	strb	r1, [r3, #0]
 8003a2a:	e7cf      	b.n	80039cc <_puts_r+0x30>
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f818 	bl	8003a64 <__swbuf_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d1c9      	bne.n	80039cc <_puts_r+0x30>
 8003a38:	e7e9      	b.n	8003a0e <_puts_r+0x72>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	200a      	movs	r0, #10
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	6022      	str	r2, [r4, #0]
 8003a42:	7018      	strb	r0, [r3, #0]
 8003a44:	e7e5      	b.n	8003a12 <_puts_r+0x76>
 8003a46:	bf00      	nop
 8003a48:	080048dc 	.word	0x080048dc
 8003a4c:	080048fc 	.word	0x080048fc
 8003a50:	080048bc 	.word	0x080048bc

08003a54 <puts>:
 8003a54:	4b02      	ldr	r3, [pc, #8]	; (8003a60 <puts+0xc>)
 8003a56:	4601      	mov	r1, r0
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	f7ff bf9f 	b.w	800399c <_puts_r>
 8003a5e:	bf00      	nop
 8003a60:	20000010 	.word	0x20000010

08003a64 <__swbuf_r>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	460e      	mov	r6, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	b118      	cbz	r0, 8003a76 <__swbuf_r+0x12>
 8003a6e:	6983      	ldr	r3, [r0, #24]
 8003a70:	b90b      	cbnz	r3, 8003a76 <__swbuf_r+0x12>
 8003a72:	f000 f9a7 	bl	8003dc4 <__sinit>
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <__swbuf_r+0x98>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d12a      	bne.n	8003ad2 <__swbuf_r+0x6e>
 8003a7c:	686c      	ldr	r4, [r5, #4]
 8003a7e:	69a3      	ldr	r3, [r4, #24]
 8003a80:	60a3      	str	r3, [r4, #8]
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	071a      	lsls	r2, r3, #28
 8003a86:	d52e      	bpl.n	8003ae6 <__swbuf_r+0x82>
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	b363      	cbz	r3, 8003ae6 <__swbuf_r+0x82>
 8003a8c:	6923      	ldr	r3, [r4, #16]
 8003a8e:	6820      	ldr	r0, [r4, #0]
 8003a90:	1ac0      	subs	r0, r0, r3
 8003a92:	6963      	ldr	r3, [r4, #20]
 8003a94:	b2f6      	uxtb	r6, r6
 8003a96:	4283      	cmp	r3, r0
 8003a98:	4637      	mov	r7, r6
 8003a9a:	dc04      	bgt.n	8003aa6 <__swbuf_r+0x42>
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f926 	bl	8003cf0 <_fflush_r>
 8003aa4:	bb28      	cbnz	r0, 8003af2 <__swbuf_r+0x8e>
 8003aa6:	68a3      	ldr	r3, [r4, #8]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60a3      	str	r3, [r4, #8]
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	6022      	str	r2, [r4, #0]
 8003ab2:	701e      	strb	r6, [r3, #0]
 8003ab4:	6963      	ldr	r3, [r4, #20]
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	4283      	cmp	r3, r0
 8003aba:	d004      	beq.n	8003ac6 <__swbuf_r+0x62>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	07db      	lsls	r3, r3, #31
 8003ac0:	d519      	bpl.n	8003af6 <__swbuf_r+0x92>
 8003ac2:	2e0a      	cmp	r6, #10
 8003ac4:	d117      	bne.n	8003af6 <__swbuf_r+0x92>
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 f911 	bl	8003cf0 <_fflush_r>
 8003ace:	b190      	cbz	r0, 8003af6 <__swbuf_r+0x92>
 8003ad0:	e00f      	b.n	8003af2 <__swbuf_r+0x8e>
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <__swbuf_r+0x9c>)
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	d101      	bne.n	8003adc <__swbuf_r+0x78>
 8003ad8:	68ac      	ldr	r4, [r5, #8]
 8003ada:	e7d0      	b.n	8003a7e <__swbuf_r+0x1a>
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <__swbuf_r+0xa0>)
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	bf08      	it	eq
 8003ae2:	68ec      	ldreq	r4, [r5, #12]
 8003ae4:	e7cb      	b.n	8003a7e <__swbuf_r+0x1a>
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f000 f80d 	bl	8003b08 <__swsetup_r>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d0cc      	beq.n	8003a8c <__swbuf_r+0x28>
 8003af2:	f04f 37ff 	mov.w	r7, #4294967295
 8003af6:	4638      	mov	r0, r7
 8003af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003afa:	bf00      	nop
 8003afc:	080048dc 	.word	0x080048dc
 8003b00:	080048fc 	.word	0x080048fc
 8003b04:	080048bc 	.word	0x080048bc

08003b08 <__swsetup_r>:
 8003b08:	4b32      	ldr	r3, [pc, #200]	; (8003bd4 <__swsetup_r+0xcc>)
 8003b0a:	b570      	push	{r4, r5, r6, lr}
 8003b0c:	681d      	ldr	r5, [r3, #0]
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	b125      	cbz	r5, 8003b1e <__swsetup_r+0x16>
 8003b14:	69ab      	ldr	r3, [r5, #24]
 8003b16:	b913      	cbnz	r3, 8003b1e <__swsetup_r+0x16>
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 f953 	bl	8003dc4 <__sinit>
 8003b1e:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <__swsetup_r+0xd0>)
 8003b20:	429c      	cmp	r4, r3
 8003b22:	d10f      	bne.n	8003b44 <__swsetup_r+0x3c>
 8003b24:	686c      	ldr	r4, [r5, #4]
 8003b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	0715      	lsls	r5, r2, #28
 8003b2e:	d42c      	bmi.n	8003b8a <__swsetup_r+0x82>
 8003b30:	06d0      	lsls	r0, r2, #27
 8003b32:	d411      	bmi.n	8003b58 <__swsetup_r+0x50>
 8003b34:	2209      	movs	r2, #9
 8003b36:	6032      	str	r2, [r6, #0]
 8003b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3c:	81a3      	strh	r3, [r4, #12]
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b42:	e03e      	b.n	8003bc2 <__swsetup_r+0xba>
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <__swsetup_r+0xd4>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	d101      	bne.n	8003b4e <__swsetup_r+0x46>
 8003b4a:	68ac      	ldr	r4, [r5, #8]
 8003b4c:	e7eb      	b.n	8003b26 <__swsetup_r+0x1e>
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <__swsetup_r+0xd8>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	bf08      	it	eq
 8003b54:	68ec      	ldreq	r4, [r5, #12]
 8003b56:	e7e6      	b.n	8003b26 <__swsetup_r+0x1e>
 8003b58:	0751      	lsls	r1, r2, #29
 8003b5a:	d512      	bpl.n	8003b82 <__swsetup_r+0x7a>
 8003b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b5e:	b141      	cbz	r1, 8003b72 <__swsetup_r+0x6a>
 8003b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b64:	4299      	cmp	r1, r3
 8003b66:	d002      	beq.n	8003b6e <__swsetup_r+0x66>
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f000 fa19 	bl	8003fa0 <_free_r>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6363      	str	r3, [r4, #52]	; 0x34
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	b94b      	cbnz	r3, 8003ba2 <__swsetup_r+0x9a>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b98:	d003      	beq.n	8003ba2 <__swsetup_r+0x9a>
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f9bf 	bl	8003f20 <__smakebuf_r>
 8003ba2:	89a2      	ldrh	r2, [r4, #12]
 8003ba4:	f012 0301 	ands.w	r3, r2, #1
 8003ba8:	d00c      	beq.n	8003bc4 <__swsetup_r+0xbc>
 8003baa:	2300      	movs	r3, #0
 8003bac:	60a3      	str	r3, [r4, #8]
 8003bae:	6963      	ldr	r3, [r4, #20]
 8003bb0:	425b      	negs	r3, r3
 8003bb2:	61a3      	str	r3, [r4, #24]
 8003bb4:	6923      	ldr	r3, [r4, #16]
 8003bb6:	b953      	cbnz	r3, 8003bce <__swsetup_r+0xc6>
 8003bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003bc0:	d1ba      	bne.n	8003b38 <__swsetup_r+0x30>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
 8003bc4:	0792      	lsls	r2, r2, #30
 8003bc6:	bf58      	it	pl
 8003bc8:	6963      	ldrpl	r3, [r4, #20]
 8003bca:	60a3      	str	r3, [r4, #8]
 8003bcc:	e7f2      	b.n	8003bb4 <__swsetup_r+0xac>
 8003bce:	2000      	movs	r0, #0
 8003bd0:	e7f7      	b.n	8003bc2 <__swsetup_r+0xba>
 8003bd2:	bf00      	nop
 8003bd4:	20000010 	.word	0x20000010
 8003bd8:	080048dc 	.word	0x080048dc
 8003bdc:	080048fc 	.word	0x080048fc
 8003be0:	080048bc 	.word	0x080048bc

08003be4 <__sflush_r>:
 8003be4:	898a      	ldrh	r2, [r1, #12]
 8003be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bea:	4605      	mov	r5, r0
 8003bec:	0710      	lsls	r0, r2, #28
 8003bee:	460c      	mov	r4, r1
 8003bf0:	d458      	bmi.n	8003ca4 <__sflush_r+0xc0>
 8003bf2:	684b      	ldr	r3, [r1, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dc05      	bgt.n	8003c04 <__sflush_r+0x20>
 8003bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	dc02      	bgt.n	8003c04 <__sflush_r+0x20>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c06:	2e00      	cmp	r6, #0
 8003c08:	d0f9      	beq.n	8003bfe <__sflush_r+0x1a>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c10:	682f      	ldr	r7, [r5, #0]
 8003c12:	6a21      	ldr	r1, [r4, #32]
 8003c14:	602b      	str	r3, [r5, #0]
 8003c16:	d032      	beq.n	8003c7e <__sflush_r+0x9a>
 8003c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	075a      	lsls	r2, r3, #29
 8003c1e:	d505      	bpl.n	8003c2c <__sflush_r+0x48>
 8003c20:	6863      	ldr	r3, [r4, #4]
 8003c22:	1ac0      	subs	r0, r0, r3
 8003c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c26:	b10b      	cbz	r3, 8003c2c <__sflush_r+0x48>
 8003c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c2a:	1ac0      	subs	r0, r0, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4602      	mov	r2, r0
 8003c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c32:	6a21      	ldr	r1, [r4, #32]
 8003c34:	4628      	mov	r0, r5
 8003c36:	47b0      	blx	r6
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	d106      	bne.n	8003c4c <__sflush_r+0x68>
 8003c3e:	6829      	ldr	r1, [r5, #0]
 8003c40:	291d      	cmp	r1, #29
 8003c42:	d848      	bhi.n	8003cd6 <__sflush_r+0xf2>
 8003c44:	4a29      	ldr	r2, [pc, #164]	; (8003cec <__sflush_r+0x108>)
 8003c46:	40ca      	lsrs	r2, r1
 8003c48:	07d6      	lsls	r6, r2, #31
 8003c4a:	d544      	bpl.n	8003cd6 <__sflush_r+0xf2>
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	6062      	str	r2, [r4, #4]
 8003c50:	04d9      	lsls	r1, r3, #19
 8003c52:	6922      	ldr	r2, [r4, #16]
 8003c54:	6022      	str	r2, [r4, #0]
 8003c56:	d504      	bpl.n	8003c62 <__sflush_r+0x7e>
 8003c58:	1c42      	adds	r2, r0, #1
 8003c5a:	d101      	bne.n	8003c60 <__sflush_r+0x7c>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b903      	cbnz	r3, 8003c62 <__sflush_r+0x7e>
 8003c60:	6560      	str	r0, [r4, #84]	; 0x54
 8003c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c64:	602f      	str	r7, [r5, #0]
 8003c66:	2900      	cmp	r1, #0
 8003c68:	d0c9      	beq.n	8003bfe <__sflush_r+0x1a>
 8003c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	d002      	beq.n	8003c78 <__sflush_r+0x94>
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f994 	bl	8003fa0 <_free_r>
 8003c78:	2000      	movs	r0, #0
 8003c7a:	6360      	str	r0, [r4, #52]	; 0x34
 8003c7c:	e7c0      	b.n	8003c00 <__sflush_r+0x1c>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4628      	mov	r0, r5
 8003c82:	47b0      	blx	r6
 8003c84:	1c41      	adds	r1, r0, #1
 8003c86:	d1c8      	bne.n	8003c1a <__sflush_r+0x36>
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0c5      	beq.n	8003c1a <__sflush_r+0x36>
 8003c8e:	2b1d      	cmp	r3, #29
 8003c90:	d001      	beq.n	8003c96 <__sflush_r+0xb2>
 8003c92:	2b16      	cmp	r3, #22
 8003c94:	d101      	bne.n	8003c9a <__sflush_r+0xb6>
 8003c96:	602f      	str	r7, [r5, #0]
 8003c98:	e7b1      	b.n	8003bfe <__sflush_r+0x1a>
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	e7ad      	b.n	8003c00 <__sflush_r+0x1c>
 8003ca4:	690f      	ldr	r7, [r1, #16]
 8003ca6:	2f00      	cmp	r7, #0
 8003ca8:	d0a9      	beq.n	8003bfe <__sflush_r+0x1a>
 8003caa:	0793      	lsls	r3, r2, #30
 8003cac:	680e      	ldr	r6, [r1, #0]
 8003cae:	bf08      	it	eq
 8003cb0:	694b      	ldreq	r3, [r1, #20]
 8003cb2:	600f      	str	r7, [r1, #0]
 8003cb4:	bf18      	it	ne
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	eba6 0807 	sub.w	r8, r6, r7
 8003cbc:	608b      	str	r3, [r1, #8]
 8003cbe:	f1b8 0f00 	cmp.w	r8, #0
 8003cc2:	dd9c      	ble.n	8003bfe <__sflush_r+0x1a>
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	463a      	mov	r2, r7
 8003cc8:	6a21      	ldr	r1, [r4, #32]
 8003cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b0      	blx	r6
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	dc06      	bgt.n	8003ce2 <__sflush_r+0xfe>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cda:	81a3      	strh	r3, [r4, #12]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	e78e      	b.n	8003c00 <__sflush_r+0x1c>
 8003ce2:	4407      	add	r7, r0
 8003ce4:	eba8 0800 	sub.w	r8, r8, r0
 8003ce8:	e7e9      	b.n	8003cbe <__sflush_r+0xda>
 8003cea:	bf00      	nop
 8003cec:	20400001 	.word	0x20400001

08003cf0 <_fflush_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	690b      	ldr	r3, [r1, #16]
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	b1db      	cbz	r3, 8003d32 <_fflush_r+0x42>
 8003cfa:	b118      	cbz	r0, 8003d04 <_fflush_r+0x14>
 8003cfc:	6983      	ldr	r3, [r0, #24]
 8003cfe:	b90b      	cbnz	r3, 8003d04 <_fflush_r+0x14>
 8003d00:	f000 f860 	bl	8003dc4 <__sinit>
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <_fflush_r+0x48>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d109      	bne.n	8003d1e <_fflush_r+0x2e>
 8003d0a:	686c      	ldr	r4, [r5, #4]
 8003d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d10:	b17b      	cbz	r3, 8003d32 <_fflush_r+0x42>
 8003d12:	4621      	mov	r1, r4
 8003d14:	4628      	mov	r0, r5
 8003d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d1a:	f7ff bf63 	b.w	8003be4 <__sflush_r>
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <_fflush_r+0x4c>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	d101      	bne.n	8003d28 <_fflush_r+0x38>
 8003d24:	68ac      	ldr	r4, [r5, #8]
 8003d26:	e7f1      	b.n	8003d0c <_fflush_r+0x1c>
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <_fflush_r+0x50>)
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	bf08      	it	eq
 8003d2e:	68ec      	ldreq	r4, [r5, #12]
 8003d30:	e7ec      	b.n	8003d0c <_fflush_r+0x1c>
 8003d32:	2000      	movs	r0, #0
 8003d34:	bd38      	pop	{r3, r4, r5, pc}
 8003d36:	bf00      	nop
 8003d38:	080048dc 	.word	0x080048dc
 8003d3c:	080048fc 	.word	0x080048fc
 8003d40:	080048bc 	.word	0x080048bc

08003d44 <std>:
 8003d44:	2300      	movs	r3, #0
 8003d46:	b510      	push	{r4, lr}
 8003d48:	4604      	mov	r4, r0
 8003d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d4e:	6083      	str	r3, [r0, #8]
 8003d50:	8181      	strh	r1, [r0, #12]
 8003d52:	6643      	str	r3, [r0, #100]	; 0x64
 8003d54:	81c2      	strh	r2, [r0, #14]
 8003d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d5a:	6183      	str	r3, [r0, #24]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	2208      	movs	r2, #8
 8003d60:	305c      	adds	r0, #92	; 0x5c
 8003d62:	f7ff fdfa 	bl	800395a <memset>
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <std+0x38>)
 8003d68:	6263      	str	r3, [r4, #36]	; 0x24
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <std+0x3c>)
 8003d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <std+0x40>)
 8003d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <std+0x44>)
 8003d74:	6224      	str	r4, [r4, #32]
 8003d76:	6323      	str	r3, [r4, #48]	; 0x30
 8003d78:	bd10      	pop	{r4, pc}
 8003d7a:	bf00      	nop
 8003d7c:	080046a1 	.word	0x080046a1
 8003d80:	080046c3 	.word	0x080046c3
 8003d84:	080046fb 	.word	0x080046fb
 8003d88:	0800471f 	.word	0x0800471f

08003d8c <_cleanup_r>:
 8003d8c:	4901      	ldr	r1, [pc, #4]	; (8003d94 <_cleanup_r+0x8>)
 8003d8e:	f000 b885 	b.w	8003e9c <_fwalk_reent>
 8003d92:	bf00      	nop
 8003d94:	08003cf1 	.word	0x08003cf1

08003d98 <__sfmoreglue>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	1e4a      	subs	r2, r1, #1
 8003d9c:	2568      	movs	r5, #104	; 0x68
 8003d9e:	4355      	muls	r5, r2
 8003da0:	460e      	mov	r6, r1
 8003da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003da6:	f000 f949 	bl	800403c <_malloc_r>
 8003daa:	4604      	mov	r4, r0
 8003dac:	b140      	cbz	r0, 8003dc0 <__sfmoreglue+0x28>
 8003dae:	2100      	movs	r1, #0
 8003db0:	e9c0 1600 	strd	r1, r6, [r0]
 8003db4:	300c      	adds	r0, #12
 8003db6:	60a0      	str	r0, [r4, #8]
 8003db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dbc:	f7ff fdcd 	bl	800395a <memset>
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}

08003dc4 <__sinit>:
 8003dc4:	6983      	ldr	r3, [r0, #24]
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	4604      	mov	r4, r0
 8003dca:	bb33      	cbnz	r3, 8003e1a <__sinit+0x56>
 8003dcc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003dd0:	6503      	str	r3, [r0, #80]	; 0x50
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <__sinit+0x58>)
 8003dd4:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <__sinit+0x5c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6282      	str	r2, [r0, #40]	; 0x28
 8003dda:	4298      	cmp	r0, r3
 8003ddc:	bf04      	itt	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	6183      	streq	r3, [r0, #24]
 8003de2:	f000 f81f 	bl	8003e24 <__sfp>
 8003de6:	6060      	str	r0, [r4, #4]
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 f81b 	bl	8003e24 <__sfp>
 8003dee:	60a0      	str	r0, [r4, #8]
 8003df0:	4620      	mov	r0, r4
 8003df2:	f000 f817 	bl	8003e24 <__sfp>
 8003df6:	2200      	movs	r2, #0
 8003df8:	60e0      	str	r0, [r4, #12]
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	6860      	ldr	r0, [r4, #4]
 8003dfe:	f7ff ffa1 	bl	8003d44 <std>
 8003e02:	2201      	movs	r2, #1
 8003e04:	2109      	movs	r1, #9
 8003e06:	68a0      	ldr	r0, [r4, #8]
 8003e08:	f7ff ff9c 	bl	8003d44 <std>
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	2112      	movs	r1, #18
 8003e10:	68e0      	ldr	r0, [r4, #12]
 8003e12:	f7ff ff97 	bl	8003d44 <std>
 8003e16:	2301      	movs	r3, #1
 8003e18:	61a3      	str	r3, [r4, #24]
 8003e1a:	bd10      	pop	{r4, pc}
 8003e1c:	080048b8 	.word	0x080048b8
 8003e20:	08003d8d 	.word	0x08003d8d

08003e24 <__sfp>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <__sfp+0x70>)
 8003e28:	681e      	ldr	r6, [r3, #0]
 8003e2a:	69b3      	ldr	r3, [r6, #24]
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	b913      	cbnz	r3, 8003e36 <__sfp+0x12>
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7ff ffc7 	bl	8003dc4 <__sinit>
 8003e36:	3648      	adds	r6, #72	; 0x48
 8003e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	d503      	bpl.n	8003e48 <__sfp+0x24>
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	b133      	cbz	r3, 8003e52 <__sfp+0x2e>
 8003e44:	6836      	ldr	r6, [r6, #0]
 8003e46:	e7f7      	b.n	8003e38 <__sfp+0x14>
 8003e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e4c:	b16d      	cbz	r5, 8003e6a <__sfp+0x46>
 8003e4e:	3468      	adds	r4, #104	; 0x68
 8003e50:	e7f4      	b.n	8003e3c <__sfp+0x18>
 8003e52:	2104      	movs	r1, #4
 8003e54:	4638      	mov	r0, r7
 8003e56:	f7ff ff9f 	bl	8003d98 <__sfmoreglue>
 8003e5a:	6030      	str	r0, [r6, #0]
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d1f1      	bne.n	8003e44 <__sfp+0x20>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4604      	mov	r4, r0
 8003e66:	4620      	mov	r0, r4
 8003e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <__sfp+0x74>)
 8003e6c:	6665      	str	r5, [r4, #100]	; 0x64
 8003e6e:	e9c4 5500 	strd	r5, r5, [r4]
 8003e72:	60a5      	str	r5, [r4, #8]
 8003e74:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	4629      	mov	r1, r5
 8003e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e84:	f7ff fd69 	bl	800395a <memset>
 8003e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e90:	e7e9      	b.n	8003e66 <__sfp+0x42>
 8003e92:	bf00      	nop
 8003e94:	080048b8 	.word	0x080048b8
 8003e98:	ffff0001 	.word	0xffff0001

08003e9c <_fwalk_reent>:
 8003e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea0:	4680      	mov	r8, r0
 8003ea2:	4689      	mov	r9, r1
 8003ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	b914      	cbnz	r4, 8003eb2 <_fwalk_reent+0x16>
 8003eac:	4630      	mov	r0, r6
 8003eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003eb6:	3f01      	subs	r7, #1
 8003eb8:	d501      	bpl.n	8003ebe <_fwalk_reent+0x22>
 8003eba:	6824      	ldr	r4, [r4, #0]
 8003ebc:	e7f5      	b.n	8003eaa <_fwalk_reent+0xe>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d907      	bls.n	8003ed4 <_fwalk_reent+0x38>
 8003ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	d003      	beq.n	8003ed4 <_fwalk_reent+0x38>
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4640      	mov	r0, r8
 8003ed0:	47c8      	blx	r9
 8003ed2:	4306      	orrs	r6, r0
 8003ed4:	3568      	adds	r5, #104	; 0x68
 8003ed6:	e7ee      	b.n	8003eb6 <_fwalk_reent+0x1a>

08003ed8 <__swhatbuf_r>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	460e      	mov	r6, r1
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	b096      	sub	sp, #88	; 0x58
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	da07      	bge.n	8003efa <__swhatbuf_r+0x22>
 8003eea:	2300      	movs	r3, #0
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	89b3      	ldrh	r3, [r6, #12]
 8003ef0:	061a      	lsls	r2, r3, #24
 8003ef2:	d410      	bmi.n	8003f16 <__swhatbuf_r+0x3e>
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	e00e      	b.n	8003f18 <__swhatbuf_r+0x40>
 8003efa:	466a      	mov	r2, sp
 8003efc:	f000 fc36 	bl	800476c <_fstat_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	dbf2      	blt.n	8003eea <__swhatbuf_r+0x12>
 8003f04:	9a01      	ldr	r2, [sp, #4]
 8003f06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f0e:	425a      	negs	r2, r3
 8003f10:	415a      	adcs	r2, r3
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	e7ee      	b.n	8003ef4 <__swhatbuf_r+0x1c>
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	2000      	movs	r0, #0
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	b016      	add	sp, #88	; 0x58
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <__smakebuf_r>:
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f24:	079d      	lsls	r5, r3, #30
 8003f26:	4606      	mov	r6, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	d507      	bpl.n	8003f3c <__smakebuf_r+0x1c>
 8003f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	6123      	str	r3, [r4, #16]
 8003f34:	2301      	movs	r3, #1
 8003f36:	6163      	str	r3, [r4, #20]
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	ab01      	add	r3, sp, #4
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f7ff ffca 	bl	8003ed8 <__swhatbuf_r>
 8003f44:	9900      	ldr	r1, [sp, #0]
 8003f46:	4605      	mov	r5, r0
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f877 	bl	800403c <_malloc_r>
 8003f4e:	b948      	cbnz	r0, 8003f64 <__smakebuf_r+0x44>
 8003f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f54:	059a      	lsls	r2, r3, #22
 8003f56:	d4ef      	bmi.n	8003f38 <__smakebuf_r+0x18>
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	e7e3      	b.n	8003f2c <__smakebuf_r+0xc>
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <__smakebuf_r+0x7c>)
 8003f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	6163      	str	r3, [r4, #20]
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	6120      	str	r0, [r4, #16]
 8003f7a:	b15b      	cbz	r3, 8003f94 <__smakebuf_r+0x74>
 8003f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 fc05 	bl	8004790 <_isatty_r>
 8003f86:	b128      	cbz	r0, 8003f94 <__smakebuf_r+0x74>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	431d      	orrs	r5, r3
 8003f98:	81a5      	strh	r5, [r4, #12]
 8003f9a:	e7cd      	b.n	8003f38 <__smakebuf_r+0x18>
 8003f9c:	08003d8d 	.word	0x08003d8d

08003fa0 <_free_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	d045      	beq.n	8004034 <_free_r+0x94>
 8003fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fac:	1f0c      	subs	r4, r1, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfb8      	it	lt
 8003fb2:	18e4      	addlt	r4, r4, r3
 8003fb4:	f000 fc0e 	bl	80047d4 <__malloc_lock>
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <_free_r+0x98>)
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	b933      	cbnz	r3, 8003fce <_free_r+0x2e>
 8003fc0:	6063      	str	r3, [r4, #4]
 8003fc2:	6014      	str	r4, [r2, #0]
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fca:	f000 bc04 	b.w	80047d6 <__malloc_unlock>
 8003fce:	42a3      	cmp	r3, r4
 8003fd0:	d90c      	bls.n	8003fec <_free_r+0x4c>
 8003fd2:	6821      	ldr	r1, [r4, #0]
 8003fd4:	1862      	adds	r2, r4, r1
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	bf04      	itt	eq
 8003fda:	681a      	ldreq	r2, [r3, #0]
 8003fdc:	685b      	ldreq	r3, [r3, #4]
 8003fde:	6063      	str	r3, [r4, #4]
 8003fe0:	bf04      	itt	eq
 8003fe2:	1852      	addeq	r2, r2, r1
 8003fe4:	6022      	streq	r2, [r4, #0]
 8003fe6:	6004      	str	r4, [r0, #0]
 8003fe8:	e7ec      	b.n	8003fc4 <_free_r+0x24>
 8003fea:	4613      	mov	r3, r2
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	b10a      	cbz	r2, 8003ff4 <_free_r+0x54>
 8003ff0:	42a2      	cmp	r2, r4
 8003ff2:	d9fa      	bls.n	8003fea <_free_r+0x4a>
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	1858      	adds	r0, r3, r1
 8003ff8:	42a0      	cmp	r0, r4
 8003ffa:	d10b      	bne.n	8004014 <_free_r+0x74>
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	4401      	add	r1, r0
 8004000:	1858      	adds	r0, r3, r1
 8004002:	4282      	cmp	r2, r0
 8004004:	6019      	str	r1, [r3, #0]
 8004006:	d1dd      	bne.n	8003fc4 <_free_r+0x24>
 8004008:	6810      	ldr	r0, [r2, #0]
 800400a:	6852      	ldr	r2, [r2, #4]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	4401      	add	r1, r0
 8004010:	6019      	str	r1, [r3, #0]
 8004012:	e7d7      	b.n	8003fc4 <_free_r+0x24>
 8004014:	d902      	bls.n	800401c <_free_r+0x7c>
 8004016:	230c      	movs	r3, #12
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	e7d3      	b.n	8003fc4 <_free_r+0x24>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	1821      	adds	r1, r4, r0
 8004020:	428a      	cmp	r2, r1
 8004022:	bf04      	itt	eq
 8004024:	6811      	ldreq	r1, [r2, #0]
 8004026:	6852      	ldreq	r2, [r2, #4]
 8004028:	6062      	str	r2, [r4, #4]
 800402a:	bf04      	itt	eq
 800402c:	1809      	addeq	r1, r1, r0
 800402e:	6021      	streq	r1, [r4, #0]
 8004030:	605c      	str	r4, [r3, #4]
 8004032:	e7c7      	b.n	8003fc4 <_free_r+0x24>
 8004034:	bd38      	pop	{r3, r4, r5, pc}
 8004036:	bf00      	nop
 8004038:	20004034 	.word	0x20004034

0800403c <_malloc_r>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	1ccd      	adds	r5, r1, #3
 8004040:	f025 0503 	bic.w	r5, r5, #3
 8004044:	3508      	adds	r5, #8
 8004046:	2d0c      	cmp	r5, #12
 8004048:	bf38      	it	cc
 800404a:	250c      	movcc	r5, #12
 800404c:	2d00      	cmp	r5, #0
 800404e:	4606      	mov	r6, r0
 8004050:	db01      	blt.n	8004056 <_malloc_r+0x1a>
 8004052:	42a9      	cmp	r1, r5
 8004054:	d903      	bls.n	800405e <_malloc_r+0x22>
 8004056:	230c      	movs	r3, #12
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	2000      	movs	r0, #0
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	f000 fbb9 	bl	80047d4 <__malloc_lock>
 8004062:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <_malloc_r+0xac>)
 8004064:	6814      	ldr	r4, [r2, #0]
 8004066:	4621      	mov	r1, r4
 8004068:	b991      	cbnz	r1, 8004090 <_malloc_r+0x54>
 800406a:	4c20      	ldr	r4, [pc, #128]	; (80040ec <_malloc_r+0xb0>)
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	b91b      	cbnz	r3, 8004078 <_malloc_r+0x3c>
 8004070:	4630      	mov	r0, r6
 8004072:	f000 fb05 	bl	8004680 <_sbrk_r>
 8004076:	6020      	str	r0, [r4, #0]
 8004078:	4629      	mov	r1, r5
 800407a:	4630      	mov	r0, r6
 800407c:	f000 fb00 	bl	8004680 <_sbrk_r>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d124      	bne.n	80040ce <_malloc_r+0x92>
 8004084:	230c      	movs	r3, #12
 8004086:	6033      	str	r3, [r6, #0]
 8004088:	4630      	mov	r0, r6
 800408a:	f000 fba4 	bl	80047d6 <__malloc_unlock>
 800408e:	e7e4      	b.n	800405a <_malloc_r+0x1e>
 8004090:	680b      	ldr	r3, [r1, #0]
 8004092:	1b5b      	subs	r3, r3, r5
 8004094:	d418      	bmi.n	80040c8 <_malloc_r+0x8c>
 8004096:	2b0b      	cmp	r3, #11
 8004098:	d90f      	bls.n	80040ba <_malloc_r+0x7e>
 800409a:	600b      	str	r3, [r1, #0]
 800409c:	50cd      	str	r5, [r1, r3]
 800409e:	18cc      	adds	r4, r1, r3
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 fb98 	bl	80047d6 <__malloc_unlock>
 80040a6:	f104 000b 	add.w	r0, r4, #11
 80040aa:	1d23      	adds	r3, r4, #4
 80040ac:	f020 0007 	bic.w	r0, r0, #7
 80040b0:	1ac3      	subs	r3, r0, r3
 80040b2:	d0d3      	beq.n	800405c <_malloc_r+0x20>
 80040b4:	425a      	negs	r2, r3
 80040b6:	50e2      	str	r2, [r4, r3]
 80040b8:	e7d0      	b.n	800405c <_malloc_r+0x20>
 80040ba:	428c      	cmp	r4, r1
 80040bc:	684b      	ldr	r3, [r1, #4]
 80040be:	bf16      	itet	ne
 80040c0:	6063      	strne	r3, [r4, #4]
 80040c2:	6013      	streq	r3, [r2, #0]
 80040c4:	460c      	movne	r4, r1
 80040c6:	e7eb      	b.n	80040a0 <_malloc_r+0x64>
 80040c8:	460c      	mov	r4, r1
 80040ca:	6849      	ldr	r1, [r1, #4]
 80040cc:	e7cc      	b.n	8004068 <_malloc_r+0x2c>
 80040ce:	1cc4      	adds	r4, r0, #3
 80040d0:	f024 0403 	bic.w	r4, r4, #3
 80040d4:	42a0      	cmp	r0, r4
 80040d6:	d005      	beq.n	80040e4 <_malloc_r+0xa8>
 80040d8:	1a21      	subs	r1, r4, r0
 80040da:	4630      	mov	r0, r6
 80040dc:	f000 fad0 	bl	8004680 <_sbrk_r>
 80040e0:	3001      	adds	r0, #1
 80040e2:	d0cf      	beq.n	8004084 <_malloc_r+0x48>
 80040e4:	6025      	str	r5, [r4, #0]
 80040e6:	e7db      	b.n	80040a0 <_malloc_r+0x64>
 80040e8:	20004034 	.word	0x20004034
 80040ec:	20004038 	.word	0x20004038

080040f0 <__sfputc_r>:
 80040f0:	6893      	ldr	r3, [r2, #8]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	b410      	push	{r4}
 80040f8:	6093      	str	r3, [r2, #8]
 80040fa:	da08      	bge.n	800410e <__sfputc_r+0x1e>
 80040fc:	6994      	ldr	r4, [r2, #24]
 80040fe:	42a3      	cmp	r3, r4
 8004100:	db01      	blt.n	8004106 <__sfputc_r+0x16>
 8004102:	290a      	cmp	r1, #10
 8004104:	d103      	bne.n	800410e <__sfputc_r+0x1e>
 8004106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800410a:	f7ff bcab 	b.w	8003a64 <__swbuf_r>
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	1c58      	adds	r0, r3, #1
 8004112:	6010      	str	r0, [r2, #0]
 8004114:	7019      	strb	r1, [r3, #0]
 8004116:	4608      	mov	r0, r1
 8004118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411c:	4770      	bx	lr

0800411e <__sfputs_r>:
 800411e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004120:	4606      	mov	r6, r0
 8004122:	460f      	mov	r7, r1
 8004124:	4614      	mov	r4, r2
 8004126:	18d5      	adds	r5, r2, r3
 8004128:	42ac      	cmp	r4, r5
 800412a:	d101      	bne.n	8004130 <__sfputs_r+0x12>
 800412c:	2000      	movs	r0, #0
 800412e:	e007      	b.n	8004140 <__sfputs_r+0x22>
 8004130:	463a      	mov	r2, r7
 8004132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004136:	4630      	mov	r0, r6
 8004138:	f7ff ffda 	bl	80040f0 <__sfputc_r>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d1f3      	bne.n	8004128 <__sfputs_r+0xa>
 8004140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004144 <_vfiprintf_r>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	460c      	mov	r4, r1
 800414a:	b09d      	sub	sp, #116	; 0x74
 800414c:	4617      	mov	r7, r2
 800414e:	461d      	mov	r5, r3
 8004150:	4606      	mov	r6, r0
 8004152:	b118      	cbz	r0, 800415c <_vfiprintf_r+0x18>
 8004154:	6983      	ldr	r3, [r0, #24]
 8004156:	b90b      	cbnz	r3, 800415c <_vfiprintf_r+0x18>
 8004158:	f7ff fe34 	bl	8003dc4 <__sinit>
 800415c:	4b7c      	ldr	r3, [pc, #496]	; (8004350 <_vfiprintf_r+0x20c>)
 800415e:	429c      	cmp	r4, r3
 8004160:	d158      	bne.n	8004214 <_vfiprintf_r+0xd0>
 8004162:	6874      	ldr	r4, [r6, #4]
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	0718      	lsls	r0, r3, #28
 8004168:	d55e      	bpl.n	8004228 <_vfiprintf_r+0xe4>
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d05b      	beq.n	8004228 <_vfiprintf_r+0xe4>
 8004170:	2300      	movs	r3, #0
 8004172:	9309      	str	r3, [sp, #36]	; 0x24
 8004174:	2320      	movs	r3, #32
 8004176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800417a:	2330      	movs	r3, #48	; 0x30
 800417c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004180:	9503      	str	r5, [sp, #12]
 8004182:	f04f 0b01 	mov.w	fp, #1
 8004186:	46b8      	mov	r8, r7
 8004188:	4645      	mov	r5, r8
 800418a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800418e:	b10b      	cbz	r3, 8004194 <_vfiprintf_r+0x50>
 8004190:	2b25      	cmp	r3, #37	; 0x25
 8004192:	d154      	bne.n	800423e <_vfiprintf_r+0xfa>
 8004194:	ebb8 0a07 	subs.w	sl, r8, r7
 8004198:	d00b      	beq.n	80041b2 <_vfiprintf_r+0x6e>
 800419a:	4653      	mov	r3, sl
 800419c:	463a      	mov	r2, r7
 800419e:	4621      	mov	r1, r4
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7ff ffbc 	bl	800411e <__sfputs_r>
 80041a6:	3001      	adds	r0, #1
 80041a8:	f000 80c2 	beq.w	8004330 <_vfiprintf_r+0x1ec>
 80041ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ae:	4453      	add	r3, sl
 80041b0:	9309      	str	r3, [sp, #36]	; 0x24
 80041b2:	f898 3000 	ldrb.w	r3, [r8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80ba 	beq.w	8004330 <_vfiprintf_r+0x1ec>
 80041bc:	2300      	movs	r3, #0
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041c6:	9304      	str	r3, [sp, #16]
 80041c8:	9307      	str	r3, [sp, #28]
 80041ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041ce:	931a      	str	r3, [sp, #104]	; 0x68
 80041d0:	46a8      	mov	r8, r5
 80041d2:	2205      	movs	r2, #5
 80041d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80041d8:	485e      	ldr	r0, [pc, #376]	; (8004354 <_vfiprintf_r+0x210>)
 80041da:	f7fb fff9 	bl	80001d0 <memchr>
 80041de:	9b04      	ldr	r3, [sp, #16]
 80041e0:	bb78      	cbnz	r0, 8004242 <_vfiprintf_r+0xfe>
 80041e2:	06d9      	lsls	r1, r3, #27
 80041e4:	bf44      	itt	mi
 80041e6:	2220      	movmi	r2, #32
 80041e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041ec:	071a      	lsls	r2, r3, #28
 80041ee:	bf44      	itt	mi
 80041f0:	222b      	movmi	r2, #43	; 0x2b
 80041f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041f6:	782a      	ldrb	r2, [r5, #0]
 80041f8:	2a2a      	cmp	r2, #42	; 0x2a
 80041fa:	d02a      	beq.n	8004252 <_vfiprintf_r+0x10e>
 80041fc:	9a07      	ldr	r2, [sp, #28]
 80041fe:	46a8      	mov	r8, r5
 8004200:	2000      	movs	r0, #0
 8004202:	250a      	movs	r5, #10
 8004204:	4641      	mov	r1, r8
 8004206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420a:	3b30      	subs	r3, #48	; 0x30
 800420c:	2b09      	cmp	r3, #9
 800420e:	d969      	bls.n	80042e4 <_vfiprintf_r+0x1a0>
 8004210:	b360      	cbz	r0, 800426c <_vfiprintf_r+0x128>
 8004212:	e024      	b.n	800425e <_vfiprintf_r+0x11a>
 8004214:	4b50      	ldr	r3, [pc, #320]	; (8004358 <_vfiprintf_r+0x214>)
 8004216:	429c      	cmp	r4, r3
 8004218:	d101      	bne.n	800421e <_vfiprintf_r+0xda>
 800421a:	68b4      	ldr	r4, [r6, #8]
 800421c:	e7a2      	b.n	8004164 <_vfiprintf_r+0x20>
 800421e:	4b4f      	ldr	r3, [pc, #316]	; (800435c <_vfiprintf_r+0x218>)
 8004220:	429c      	cmp	r4, r3
 8004222:	bf08      	it	eq
 8004224:	68f4      	ldreq	r4, [r6, #12]
 8004226:	e79d      	b.n	8004164 <_vfiprintf_r+0x20>
 8004228:	4621      	mov	r1, r4
 800422a:	4630      	mov	r0, r6
 800422c:	f7ff fc6c 	bl	8003b08 <__swsetup_r>
 8004230:	2800      	cmp	r0, #0
 8004232:	d09d      	beq.n	8004170 <_vfiprintf_r+0x2c>
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	b01d      	add	sp, #116	; 0x74
 800423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423e:	46a8      	mov	r8, r5
 8004240:	e7a2      	b.n	8004188 <_vfiprintf_r+0x44>
 8004242:	4a44      	ldr	r2, [pc, #272]	; (8004354 <_vfiprintf_r+0x210>)
 8004244:	1a80      	subs	r0, r0, r2
 8004246:	fa0b f000 	lsl.w	r0, fp, r0
 800424a:	4318      	orrs	r0, r3
 800424c:	9004      	str	r0, [sp, #16]
 800424e:	4645      	mov	r5, r8
 8004250:	e7be      	b.n	80041d0 <_vfiprintf_r+0x8c>
 8004252:	9a03      	ldr	r2, [sp, #12]
 8004254:	1d11      	adds	r1, r2, #4
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	9103      	str	r1, [sp, #12]
 800425a:	2a00      	cmp	r2, #0
 800425c:	db01      	blt.n	8004262 <_vfiprintf_r+0x11e>
 800425e:	9207      	str	r2, [sp, #28]
 8004260:	e004      	b.n	800426c <_vfiprintf_r+0x128>
 8004262:	4252      	negs	r2, r2
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	9207      	str	r2, [sp, #28]
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	f898 3000 	ldrb.w	r3, [r8]
 8004270:	2b2e      	cmp	r3, #46	; 0x2e
 8004272:	d10e      	bne.n	8004292 <_vfiprintf_r+0x14e>
 8004274:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004278:	2b2a      	cmp	r3, #42	; 0x2a
 800427a:	d138      	bne.n	80042ee <_vfiprintf_r+0x1aa>
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	9203      	str	r2, [sp, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	bfb8      	it	lt
 8004288:	f04f 33ff 	movlt.w	r3, #4294967295
 800428c:	f108 0802 	add.w	r8, r8, #2
 8004290:	9305      	str	r3, [sp, #20]
 8004292:	4d33      	ldr	r5, [pc, #204]	; (8004360 <_vfiprintf_r+0x21c>)
 8004294:	f898 1000 	ldrb.w	r1, [r8]
 8004298:	2203      	movs	r2, #3
 800429a:	4628      	mov	r0, r5
 800429c:	f7fb ff98 	bl	80001d0 <memchr>
 80042a0:	b140      	cbz	r0, 80042b4 <_vfiprintf_r+0x170>
 80042a2:	2340      	movs	r3, #64	; 0x40
 80042a4:	1b40      	subs	r0, r0, r5
 80042a6:	fa03 f000 	lsl.w	r0, r3, r0
 80042aa:	9b04      	ldr	r3, [sp, #16]
 80042ac:	4303      	orrs	r3, r0
 80042ae:	f108 0801 	add.w	r8, r8, #1
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	f898 1000 	ldrb.w	r1, [r8]
 80042b8:	482a      	ldr	r0, [pc, #168]	; (8004364 <_vfiprintf_r+0x220>)
 80042ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042be:	2206      	movs	r2, #6
 80042c0:	f108 0701 	add.w	r7, r8, #1
 80042c4:	f7fb ff84 	bl	80001d0 <memchr>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d037      	beq.n	800433c <_vfiprintf_r+0x1f8>
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <_vfiprintf_r+0x224>)
 80042ce:	bb1b      	cbnz	r3, 8004318 <_vfiprintf_r+0x1d4>
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	3307      	adds	r3, #7
 80042d4:	f023 0307 	bic.w	r3, r3, #7
 80042d8:	3308      	adds	r3, #8
 80042da:	9303      	str	r3, [sp, #12]
 80042dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042de:	444b      	add	r3, r9
 80042e0:	9309      	str	r3, [sp, #36]	; 0x24
 80042e2:	e750      	b.n	8004186 <_vfiprintf_r+0x42>
 80042e4:	fb05 3202 	mla	r2, r5, r2, r3
 80042e8:	2001      	movs	r0, #1
 80042ea:	4688      	mov	r8, r1
 80042ec:	e78a      	b.n	8004204 <_vfiprintf_r+0xc0>
 80042ee:	2300      	movs	r3, #0
 80042f0:	f108 0801 	add.w	r8, r8, #1
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	4619      	mov	r1, r3
 80042f8:	250a      	movs	r5, #10
 80042fa:	4640      	mov	r0, r8
 80042fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004300:	3a30      	subs	r2, #48	; 0x30
 8004302:	2a09      	cmp	r2, #9
 8004304:	d903      	bls.n	800430e <_vfiprintf_r+0x1ca>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0c3      	beq.n	8004292 <_vfiprintf_r+0x14e>
 800430a:	9105      	str	r1, [sp, #20]
 800430c:	e7c1      	b.n	8004292 <_vfiprintf_r+0x14e>
 800430e:	fb05 2101 	mla	r1, r5, r1, r2
 8004312:	2301      	movs	r3, #1
 8004314:	4680      	mov	r8, r0
 8004316:	e7f0      	b.n	80042fa <_vfiprintf_r+0x1b6>
 8004318:	ab03      	add	r3, sp, #12
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4622      	mov	r2, r4
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <_vfiprintf_r+0x228>)
 8004320:	a904      	add	r1, sp, #16
 8004322:	4630      	mov	r0, r6
 8004324:	f3af 8000 	nop.w
 8004328:	f1b0 3fff 	cmp.w	r0, #4294967295
 800432c:	4681      	mov	r9, r0
 800432e:	d1d5      	bne.n	80042dc <_vfiprintf_r+0x198>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	065b      	lsls	r3, r3, #25
 8004334:	f53f af7e 	bmi.w	8004234 <_vfiprintf_r+0xf0>
 8004338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433a:	e77d      	b.n	8004238 <_vfiprintf_r+0xf4>
 800433c:	ab03      	add	r3, sp, #12
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4622      	mov	r2, r4
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <_vfiprintf_r+0x228>)
 8004344:	a904      	add	r1, sp, #16
 8004346:	4630      	mov	r0, r6
 8004348:	f000 f888 	bl	800445c <_printf_i>
 800434c:	e7ec      	b.n	8004328 <_vfiprintf_r+0x1e4>
 800434e:	bf00      	nop
 8004350:	080048dc 	.word	0x080048dc
 8004354:	0800491c 	.word	0x0800491c
 8004358:	080048fc 	.word	0x080048fc
 800435c:	080048bc 	.word	0x080048bc
 8004360:	08004922 	.word	0x08004922
 8004364:	08004926 	.word	0x08004926
 8004368:	00000000 	.word	0x00000000
 800436c:	0800411f 	.word	0x0800411f

08004370 <_printf_common>:
 8004370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	4691      	mov	r9, r2
 8004376:	461f      	mov	r7, r3
 8004378:	688a      	ldr	r2, [r1, #8]
 800437a:	690b      	ldr	r3, [r1, #16]
 800437c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004380:	4293      	cmp	r3, r2
 8004382:	bfb8      	it	lt
 8004384:	4613      	movlt	r3, r2
 8004386:	f8c9 3000 	str.w	r3, [r9]
 800438a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800438e:	4606      	mov	r6, r0
 8004390:	460c      	mov	r4, r1
 8004392:	b112      	cbz	r2, 800439a <_printf_common+0x2a>
 8004394:	3301      	adds	r3, #1
 8004396:	f8c9 3000 	str.w	r3, [r9]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	bf42      	ittt	mi
 80043a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043a4:	3302      	addmi	r3, #2
 80043a6:	f8c9 3000 	strmi.w	r3, [r9]
 80043aa:	6825      	ldr	r5, [r4, #0]
 80043ac:	f015 0506 	ands.w	r5, r5, #6
 80043b0:	d107      	bne.n	80043c2 <_printf_common+0x52>
 80043b2:	f104 0a19 	add.w	sl, r4, #25
 80043b6:	68e3      	ldr	r3, [r4, #12]
 80043b8:	f8d9 2000 	ldr.w	r2, [r9]
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	42ab      	cmp	r3, r5
 80043c0:	dc28      	bgt.n	8004414 <_printf_common+0xa4>
 80043c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	3300      	adds	r3, #0
 80043ca:	bf18      	it	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	0692      	lsls	r2, r2, #26
 80043d0:	d42d      	bmi.n	800442e <_printf_common+0xbe>
 80043d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043d6:	4639      	mov	r1, r7
 80043d8:	4630      	mov	r0, r6
 80043da:	47c0      	blx	r8
 80043dc:	3001      	adds	r0, #1
 80043de:	d020      	beq.n	8004422 <_printf_common+0xb2>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	68e5      	ldr	r5, [r4, #12]
 80043e4:	f8d9 2000 	ldr.w	r2, [r9]
 80043e8:	f003 0306 	and.w	r3, r3, #6
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	bf08      	it	eq
 80043f0:	1aad      	subeq	r5, r5, r2
 80043f2:	68a3      	ldr	r3, [r4, #8]
 80043f4:	6922      	ldr	r2, [r4, #16]
 80043f6:	bf0c      	ite	eq
 80043f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043fc:	2500      	movne	r5, #0
 80043fe:	4293      	cmp	r3, r2
 8004400:	bfc4      	itt	gt
 8004402:	1a9b      	subgt	r3, r3, r2
 8004404:	18ed      	addgt	r5, r5, r3
 8004406:	f04f 0900 	mov.w	r9, #0
 800440a:	341a      	adds	r4, #26
 800440c:	454d      	cmp	r5, r9
 800440e:	d11a      	bne.n	8004446 <_printf_common+0xd6>
 8004410:	2000      	movs	r0, #0
 8004412:	e008      	b.n	8004426 <_printf_common+0xb6>
 8004414:	2301      	movs	r3, #1
 8004416:	4652      	mov	r2, sl
 8004418:	4639      	mov	r1, r7
 800441a:	4630      	mov	r0, r6
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d103      	bne.n	800442a <_printf_common+0xba>
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800442a:	3501      	adds	r5, #1
 800442c:	e7c3      	b.n	80043b6 <_printf_common+0x46>
 800442e:	18e1      	adds	r1, r4, r3
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	2030      	movs	r0, #48	; 0x30
 8004434:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004438:	4422      	add	r2, r4
 800443a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800443e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004442:	3302      	adds	r3, #2
 8004444:	e7c5      	b.n	80043d2 <_printf_common+0x62>
 8004446:	2301      	movs	r3, #1
 8004448:	4622      	mov	r2, r4
 800444a:	4639      	mov	r1, r7
 800444c:	4630      	mov	r0, r6
 800444e:	47c0      	blx	r8
 8004450:	3001      	adds	r0, #1
 8004452:	d0e6      	beq.n	8004422 <_printf_common+0xb2>
 8004454:	f109 0901 	add.w	r9, r9, #1
 8004458:	e7d8      	b.n	800440c <_printf_common+0x9c>
	...

0800445c <_printf_i>:
 800445c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004460:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004464:	460c      	mov	r4, r1
 8004466:	7e09      	ldrb	r1, [r1, #24]
 8004468:	b085      	sub	sp, #20
 800446a:	296e      	cmp	r1, #110	; 0x6e
 800446c:	4617      	mov	r7, r2
 800446e:	4606      	mov	r6, r0
 8004470:	4698      	mov	r8, r3
 8004472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004474:	f000 80b3 	beq.w	80045de <_printf_i+0x182>
 8004478:	d822      	bhi.n	80044c0 <_printf_i+0x64>
 800447a:	2963      	cmp	r1, #99	; 0x63
 800447c:	d036      	beq.n	80044ec <_printf_i+0x90>
 800447e:	d80a      	bhi.n	8004496 <_printf_i+0x3a>
 8004480:	2900      	cmp	r1, #0
 8004482:	f000 80b9 	beq.w	80045f8 <_printf_i+0x19c>
 8004486:	2958      	cmp	r1, #88	; 0x58
 8004488:	f000 8083 	beq.w	8004592 <_printf_i+0x136>
 800448c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004490:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004494:	e032      	b.n	80044fc <_printf_i+0xa0>
 8004496:	2964      	cmp	r1, #100	; 0x64
 8004498:	d001      	beq.n	800449e <_printf_i+0x42>
 800449a:	2969      	cmp	r1, #105	; 0x69
 800449c:	d1f6      	bne.n	800448c <_printf_i+0x30>
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	0605      	lsls	r5, r0, #24
 80044a4:	f103 0104 	add.w	r1, r3, #4
 80044a8:	d52a      	bpl.n	8004500 <_printf_i+0xa4>
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da03      	bge.n	80044ba <_printf_i+0x5e>
 80044b2:	222d      	movs	r2, #45	; 0x2d
 80044b4:	425b      	negs	r3, r3
 80044b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044ba:	486f      	ldr	r0, [pc, #444]	; (8004678 <_printf_i+0x21c>)
 80044bc:	220a      	movs	r2, #10
 80044be:	e039      	b.n	8004534 <_printf_i+0xd8>
 80044c0:	2973      	cmp	r1, #115	; 0x73
 80044c2:	f000 809d 	beq.w	8004600 <_printf_i+0x1a4>
 80044c6:	d808      	bhi.n	80044da <_printf_i+0x7e>
 80044c8:	296f      	cmp	r1, #111	; 0x6f
 80044ca:	d020      	beq.n	800450e <_printf_i+0xb2>
 80044cc:	2970      	cmp	r1, #112	; 0x70
 80044ce:	d1dd      	bne.n	800448c <_printf_i+0x30>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f043 0320 	orr.w	r3, r3, #32
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	e003      	b.n	80044e2 <_printf_i+0x86>
 80044da:	2975      	cmp	r1, #117	; 0x75
 80044dc:	d017      	beq.n	800450e <_printf_i+0xb2>
 80044de:	2978      	cmp	r1, #120	; 0x78
 80044e0:	d1d4      	bne.n	800448c <_printf_i+0x30>
 80044e2:	2378      	movs	r3, #120	; 0x78
 80044e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044e8:	4864      	ldr	r0, [pc, #400]	; (800467c <_printf_i+0x220>)
 80044ea:	e055      	b.n	8004598 <_printf_i+0x13c>
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	1d19      	adds	r1, r3, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6011      	str	r1, [r2, #0]
 80044f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044fc:	2301      	movs	r3, #1
 80044fe:	e08c      	b.n	800461a <_printf_i+0x1be>
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6011      	str	r1, [r2, #0]
 8004504:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004508:	bf18      	it	ne
 800450a:	b21b      	sxthne	r3, r3
 800450c:	e7cf      	b.n	80044ae <_printf_i+0x52>
 800450e:	6813      	ldr	r3, [r2, #0]
 8004510:	6825      	ldr	r5, [r4, #0]
 8004512:	1d18      	adds	r0, r3, #4
 8004514:	6010      	str	r0, [r2, #0]
 8004516:	0628      	lsls	r0, r5, #24
 8004518:	d501      	bpl.n	800451e <_printf_i+0xc2>
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	e002      	b.n	8004524 <_printf_i+0xc8>
 800451e:	0668      	lsls	r0, r5, #25
 8004520:	d5fb      	bpl.n	800451a <_printf_i+0xbe>
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	4854      	ldr	r0, [pc, #336]	; (8004678 <_printf_i+0x21c>)
 8004526:	296f      	cmp	r1, #111	; 0x6f
 8004528:	bf14      	ite	ne
 800452a:	220a      	movne	r2, #10
 800452c:	2208      	moveq	r2, #8
 800452e:	2100      	movs	r1, #0
 8004530:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004534:	6865      	ldr	r5, [r4, #4]
 8004536:	60a5      	str	r5, [r4, #8]
 8004538:	2d00      	cmp	r5, #0
 800453a:	f2c0 8095 	blt.w	8004668 <_printf_i+0x20c>
 800453e:	6821      	ldr	r1, [r4, #0]
 8004540:	f021 0104 	bic.w	r1, r1, #4
 8004544:	6021      	str	r1, [r4, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d13d      	bne.n	80045c6 <_printf_i+0x16a>
 800454a:	2d00      	cmp	r5, #0
 800454c:	f040 808e 	bne.w	800466c <_printf_i+0x210>
 8004550:	4665      	mov	r5, ip
 8004552:	2a08      	cmp	r2, #8
 8004554:	d10b      	bne.n	800456e <_printf_i+0x112>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	07db      	lsls	r3, r3, #31
 800455a:	d508      	bpl.n	800456e <_printf_i+0x112>
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	6862      	ldr	r2, [r4, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	bfde      	ittt	le
 8004564:	2330      	movle	r3, #48	; 0x30
 8004566:	f805 3c01 	strble.w	r3, [r5, #-1]
 800456a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800456e:	ebac 0305 	sub.w	r3, ip, r5
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	f8cd 8000 	str.w	r8, [sp]
 8004578:	463b      	mov	r3, r7
 800457a:	aa03      	add	r2, sp, #12
 800457c:	4621      	mov	r1, r4
 800457e:	4630      	mov	r0, r6
 8004580:	f7ff fef6 	bl	8004370 <_printf_common>
 8004584:	3001      	adds	r0, #1
 8004586:	d14d      	bne.n	8004624 <_printf_i+0x1c8>
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	b005      	add	sp, #20
 800458e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004592:	4839      	ldr	r0, [pc, #228]	; (8004678 <_printf_i+0x21c>)
 8004594:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	6821      	ldr	r1, [r4, #0]
 800459c:	1d1d      	adds	r5, r3, #4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6015      	str	r5, [r2, #0]
 80045a2:	060a      	lsls	r2, r1, #24
 80045a4:	d50b      	bpl.n	80045be <_printf_i+0x162>
 80045a6:	07ca      	lsls	r2, r1, #31
 80045a8:	bf44      	itt	mi
 80045aa:	f041 0120 	orrmi.w	r1, r1, #32
 80045ae:	6021      	strmi	r1, [r4, #0]
 80045b0:	b91b      	cbnz	r3, 80045ba <_printf_i+0x15e>
 80045b2:	6822      	ldr	r2, [r4, #0]
 80045b4:	f022 0220 	bic.w	r2, r2, #32
 80045b8:	6022      	str	r2, [r4, #0]
 80045ba:	2210      	movs	r2, #16
 80045bc:	e7b7      	b.n	800452e <_printf_i+0xd2>
 80045be:	064d      	lsls	r5, r1, #25
 80045c0:	bf48      	it	mi
 80045c2:	b29b      	uxthmi	r3, r3
 80045c4:	e7ef      	b.n	80045a6 <_printf_i+0x14a>
 80045c6:	4665      	mov	r5, ip
 80045c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80045cc:	fb02 3311 	mls	r3, r2, r1, r3
 80045d0:	5cc3      	ldrb	r3, [r0, r3]
 80045d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045d6:	460b      	mov	r3, r1
 80045d8:	2900      	cmp	r1, #0
 80045da:	d1f5      	bne.n	80045c8 <_printf_i+0x16c>
 80045dc:	e7b9      	b.n	8004552 <_printf_i+0xf6>
 80045de:	6813      	ldr	r3, [r2, #0]
 80045e0:	6825      	ldr	r5, [r4, #0]
 80045e2:	6961      	ldr	r1, [r4, #20]
 80045e4:	1d18      	adds	r0, r3, #4
 80045e6:	6010      	str	r0, [r2, #0]
 80045e8:	0628      	lsls	r0, r5, #24
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	d501      	bpl.n	80045f2 <_printf_i+0x196>
 80045ee:	6019      	str	r1, [r3, #0]
 80045f0:	e002      	b.n	80045f8 <_printf_i+0x19c>
 80045f2:	066a      	lsls	r2, r5, #25
 80045f4:	d5fb      	bpl.n	80045ee <_printf_i+0x192>
 80045f6:	8019      	strh	r1, [r3, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	4665      	mov	r5, ip
 80045fe:	e7b9      	b.n	8004574 <_printf_i+0x118>
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	1d19      	adds	r1, r3, #4
 8004604:	6011      	str	r1, [r2, #0]
 8004606:	681d      	ldr	r5, [r3, #0]
 8004608:	6862      	ldr	r2, [r4, #4]
 800460a:	2100      	movs	r1, #0
 800460c:	4628      	mov	r0, r5
 800460e:	f7fb fddf 	bl	80001d0 <memchr>
 8004612:	b108      	cbz	r0, 8004618 <_printf_i+0x1bc>
 8004614:	1b40      	subs	r0, r0, r5
 8004616:	6060      	str	r0, [r4, #4]
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2300      	movs	r3, #0
 800461e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004622:	e7a7      	b.n	8004574 <_printf_i+0x118>
 8004624:	6923      	ldr	r3, [r4, #16]
 8004626:	462a      	mov	r2, r5
 8004628:	4639      	mov	r1, r7
 800462a:	4630      	mov	r0, r6
 800462c:	47c0      	blx	r8
 800462e:	3001      	adds	r0, #1
 8004630:	d0aa      	beq.n	8004588 <_printf_i+0x12c>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	079b      	lsls	r3, r3, #30
 8004636:	d413      	bmi.n	8004660 <_printf_i+0x204>
 8004638:	68e0      	ldr	r0, [r4, #12]
 800463a:	9b03      	ldr	r3, [sp, #12]
 800463c:	4298      	cmp	r0, r3
 800463e:	bfb8      	it	lt
 8004640:	4618      	movlt	r0, r3
 8004642:	e7a3      	b.n	800458c <_printf_i+0x130>
 8004644:	2301      	movs	r3, #1
 8004646:	464a      	mov	r2, r9
 8004648:	4639      	mov	r1, r7
 800464a:	4630      	mov	r0, r6
 800464c:	47c0      	blx	r8
 800464e:	3001      	adds	r0, #1
 8004650:	d09a      	beq.n	8004588 <_printf_i+0x12c>
 8004652:	3501      	adds	r5, #1
 8004654:	68e3      	ldr	r3, [r4, #12]
 8004656:	9a03      	ldr	r2, [sp, #12]
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	42ab      	cmp	r3, r5
 800465c:	dcf2      	bgt.n	8004644 <_printf_i+0x1e8>
 800465e:	e7eb      	b.n	8004638 <_printf_i+0x1dc>
 8004660:	2500      	movs	r5, #0
 8004662:	f104 0919 	add.w	r9, r4, #25
 8004666:	e7f5      	b.n	8004654 <_printf_i+0x1f8>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ac      	bne.n	80045c6 <_printf_i+0x16a>
 800466c:	7803      	ldrb	r3, [r0, #0]
 800466e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004676:	e76c      	b.n	8004552 <_printf_i+0xf6>
 8004678:	0800492d 	.word	0x0800492d
 800467c:	0800493e 	.word	0x0800493e

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4c06      	ldr	r4, [pc, #24]	; (800469c <_sbrk_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4605      	mov	r5, r0
 8004688:	4608      	mov	r0, r1
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	f7fc fa04 	bl	8000a98 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	602b      	str	r3, [r5, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	20004048 	.word	0x20004048

080046a0 <__sread>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	460c      	mov	r4, r1
 80046a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a8:	f000 f896 	bl	80047d8 <_read_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	bfab      	itete	ge
 80046b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046b2:	89a3      	ldrhlt	r3, [r4, #12]
 80046b4:	181b      	addge	r3, r3, r0
 80046b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ba:	bfac      	ite	ge
 80046bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80046be:	81a3      	strhlt	r3, [r4, #12]
 80046c0:	bd10      	pop	{r4, pc}

080046c2 <__swrite>:
 80046c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c6:	461f      	mov	r7, r3
 80046c8:	898b      	ldrh	r3, [r1, #12]
 80046ca:	05db      	lsls	r3, r3, #23
 80046cc:	4605      	mov	r5, r0
 80046ce:	460c      	mov	r4, r1
 80046d0:	4616      	mov	r6, r2
 80046d2:	d505      	bpl.n	80046e0 <__swrite+0x1e>
 80046d4:	2302      	movs	r3, #2
 80046d6:	2200      	movs	r2, #0
 80046d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046dc:	f000 f868 	bl	80047b0 <_lseek_r>
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ea:	81a3      	strh	r3, [r4, #12]
 80046ec:	4632      	mov	r2, r6
 80046ee:	463b      	mov	r3, r7
 80046f0:	4628      	mov	r0, r5
 80046f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f6:	f000 b817 	b.w	8004728 <_write_r>

080046fa <__sseek>:
 80046fa:	b510      	push	{r4, lr}
 80046fc:	460c      	mov	r4, r1
 80046fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004702:	f000 f855 	bl	80047b0 <_lseek_r>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	bf15      	itete	ne
 800470c:	6560      	strne	r0, [r4, #84]	; 0x54
 800470e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004716:	81a3      	strheq	r3, [r4, #12]
 8004718:	bf18      	it	ne
 800471a:	81a3      	strhne	r3, [r4, #12]
 800471c:	bd10      	pop	{r4, pc}

0800471e <__sclose>:
 800471e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004722:	f000 b813 	b.w	800474c <_close_r>
	...

08004728 <_write_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4c07      	ldr	r4, [pc, #28]	; (8004748 <_write_r+0x20>)
 800472c:	4605      	mov	r5, r0
 800472e:	4608      	mov	r0, r1
 8004730:	4611      	mov	r1, r2
 8004732:	2200      	movs	r2, #0
 8004734:	6022      	str	r2, [r4, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f7fb ff5b 	bl	80005f2 <_write>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_write_r+0x1e>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	b103      	cbz	r3, 8004746 <_write_r+0x1e>
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	20004048 	.word	0x20004048

0800474c <_close_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4c06      	ldr	r4, [pc, #24]	; (8004768 <_close_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4605      	mov	r5, r0
 8004754:	4608      	mov	r0, r1
 8004756:	6023      	str	r3, [r4, #0]
 8004758:	f7fc f96a 	bl	8000a30 <_close>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_close_r+0x1a>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	b103      	cbz	r3, 8004766 <_close_r+0x1a>
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	20004048 	.word	0x20004048

0800476c <_fstat_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4c07      	ldr	r4, [pc, #28]	; (800478c <_fstat_r+0x20>)
 8004770:	2300      	movs	r3, #0
 8004772:	4605      	mov	r5, r0
 8004774:	4608      	mov	r0, r1
 8004776:	4611      	mov	r1, r2
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	f7fc f965 	bl	8000a48 <_fstat>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	d102      	bne.n	8004788 <_fstat_r+0x1c>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	b103      	cbz	r3, 8004788 <_fstat_r+0x1c>
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	bd38      	pop	{r3, r4, r5, pc}
 800478a:	bf00      	nop
 800478c:	20004048 	.word	0x20004048

08004790 <_isatty_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4c06      	ldr	r4, [pc, #24]	; (80047ac <_isatty_r+0x1c>)
 8004794:	2300      	movs	r3, #0
 8004796:	4605      	mov	r5, r0
 8004798:	4608      	mov	r0, r1
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	f7fc f964 	bl	8000a68 <_isatty>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_isatty_r+0x1a>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_isatty_r+0x1a>
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	20004048 	.word	0x20004048

080047b0 <_lseek_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4c07      	ldr	r4, [pc, #28]	; (80047d0 <_lseek_r+0x20>)
 80047b4:	4605      	mov	r5, r0
 80047b6:	4608      	mov	r0, r1
 80047b8:	4611      	mov	r1, r2
 80047ba:	2200      	movs	r2, #0
 80047bc:	6022      	str	r2, [r4, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f7fc f95d 	bl	8000a7e <_lseek>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_lseek_r+0x1e>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_lseek_r+0x1e>
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	20004048 	.word	0x20004048

080047d4 <__malloc_lock>:
 80047d4:	4770      	bx	lr

080047d6 <__malloc_unlock>:
 80047d6:	4770      	bx	lr

080047d8 <_read_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4c07      	ldr	r4, [pc, #28]	; (80047f8 <_read_r+0x20>)
 80047dc:	4605      	mov	r5, r0
 80047de:	4608      	mov	r0, r1
 80047e0:	4611      	mov	r1, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f7fc f905 	bl	80009f6 <_read>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_read_r+0x1e>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_read_r+0x1e>
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20004048 	.word	0x20004048

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
