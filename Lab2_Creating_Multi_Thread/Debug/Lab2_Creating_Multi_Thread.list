
Lab2_Creating_Multi_Thread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004020  08004020  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004028  08004028  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004028  08004028  00014028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004558  20000010  08004040  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004568  08004040  00024568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da52  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000222e  00000000  00000000  0002da92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a88  00000000  00000000  0002fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000980  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020be3  00000000  00000000  000310c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000956b  00000000  00000000  00051cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c79ef  00000000  00000000  0005b216  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  00122c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f8c 	.word	0x08003f8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003f8c 	.word	0x08003f8c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetTimerTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetTimerTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000522:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000280 	.word	0x20000280
 8000534:	200002d4 	.word	0x200002d4

08000538 <StartDefaultTask>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void StartDefaultTask(void const * argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <StartDefaultTask+0x1c>)
 8000546:	f000 fc80 	bl	8000e4a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054e:	f001 f90a 	bl	8001766 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000552:	e7f5      	b.n	8000540 <StartDefaultTask+0x8>
 8000554:	40020c00 	.word	0x40020c00

08000558 <StartDefaultTask1>:
  }
}


void StartDefaultTask1(void const * argument)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <StartDefaultTask1+0x1c>)
 8000566:	f000 fc70 	bl	8000e4a <HAL_GPIO_TogglePin>
		  osDelay(1000);
 800056a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056e:	f001 f8fa 	bl	8001766 <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000572:	e7f5      	b.n	8000560 <StartDefaultTask1+0x8>
 8000574:	40020c00 	.word	0x40020c00

08000578 <main>:
  }
}

int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af00      	add	r7, sp, #0
  HAL_Init();
 800057e:	f000 f959 	bl	8000834 <HAL_Init>

  SystemClock_Config();
 8000582:	f000 f831 	bl	80005e8 <SystemClock_Config>

  MX_GPIO_Init();
 8000586:	f000 f88d 	bl	80006a4 <MX_GPIO_Init>

  osThreadDef(defaultTask, StartDefaultTask, 0, 0, 128);
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <main+0x60>)
 800058c:	f107 041c 	add.w	r4, r7, #28
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f892 	bl	80016ce <osThreadCreate>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <main+0x64>)
 80005ae:	601a      	str	r2, [r3, #0]

  osThreadDef(defaultTask1, StartDefaultTask1, 1, 0, 128);
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <main+0x68>)
 80005b2:	463c      	mov	r4, r7
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle1 = osThreadCreate(osThread(defaultTask1), NULL);
 80005c2:	463b      	mov	r3, r7
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f881 	bl	80016ce <osThreadCreate>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <main+0x6c>)
 80005d0:	601a      	str	r2, [r3, #0]
  osKernelStart();
 80005d2:	f001 f875 	bl	80016c0 <osKernelStart>

  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x5e>
 80005d8:	08003fb0 	.word	0x08003fb0
 80005dc:	2000451c 	.word	0x2000451c
 80005e0:	08003fdc 	.word	0x08003fdc
 80005e4:	20004520 	.word	0x20004520

080005e8 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fcbf 	bl	8003f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <SystemClock_Config+0xb4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <SystemClock_Config+0xb4>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <SystemClock_Config+0xb4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <SystemClock_Config+0xb8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <SystemClock_Config+0xb8>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemClock_Config+0xb8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fc11 	bl	8000e80 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000664:	f000 f852 	bl	800070c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fe6c 	bl	8001360 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800068e:	f000 f83d 	bl	800070c <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_GPIO_Init+0x60>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a10      	ldr	r2, [pc, #64]	; (8000704 <MX_GPIO_Init+0x60>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_GPIO_Init+0x60>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0x64>)
 80006dc:	f000 fb9c 	bl	8000e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_GPIO_Init+0x64>)
 80006f8:	f000 f9f4 	bl	8000ae4 <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020c00 	.word	0x40020c00

0800070c <Error_Handler>:


void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000712:	e7fe      	b.n	8000712 <Error_Handler+0x6>

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_MspInit+0x54>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <HAL_MspInit+0x54>)
 8000724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x54>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_MspInit+0x54>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_MspInit+0x54>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x54>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 f99a 	bl	8000a92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f89c 	bl	80008d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007a0:	f002 fb72 	bl	8002e88 <xTaskGetSchedulerState>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d001      	beq.n	80007ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007aa:	f003 f955 	bl	8003a58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <SystemInit+0x28>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <SystemInit+0x28>)
 80007c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SystemInit+0x28>)
 80007ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ce:	609a      	str	r2, [r3, #8]
#endif
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000818 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007e6:	e003      	b.n	80007f0 <LoopCopyDataInit>

080007e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007ee:	3104      	adds	r1, #4

080007f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007f8:	d3f6      	bcc.n	80007e8 <CopyDataInit>
  ldr  r2, =_sbss
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007fc:	e002      	b.n	8000804 <LoopFillZerobss>

080007fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000800:	f842 3b04 	str.w	r3, [r2], #4

08000804 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000806:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000808:	d3f9      	bcc.n	80007fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800080a:	f7ff ffd3 	bl	80007b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080e:	f003 fb85 	bl	8003f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000812:	f7ff feb1 	bl	8000578 <main>
  bx  lr    
 8000816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000818:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800081c:	08004030 	.word	0x08004030
  ldr  r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000824:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000828:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800082c:	20004568 	.word	0x20004568

08000830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_Init+0x40>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <HAL_Init+0x40>)
 800083e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_Init+0x40>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_Init+0x40>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f90d 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff ff54 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023c00 	.word	0x40023c00

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f917 	bl	8000aca <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 f8ed 	bl	8000a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x24>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_IncTick+0x24>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20004524 	.word	0x20004524

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20004524 	.word	0x20004524

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094a:	4a04      	ldr	r2, [pc, #16]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	60d3      	str	r3, [r2, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f1c3 0307 	rsb	r3, r3, #7
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	bf28      	it	cs
 80009ee:	2304      	movcs	r3, #4
 80009f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3304      	adds	r3, #4
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d902      	bls.n	8000a00 <NVIC_EncodePriority+0x30>
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	e000      	b.n	8000a02 <NVIC_EncodePriority+0x32>
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43d9      	mvns	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4313      	orrs	r3, r2
         );
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	; 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a48:	d301      	bcc.n	8000a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00f      	b.n	8000a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <SysTick_Config+0x40>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f7ff ff8e 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x40>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff47 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff5c 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff8e 	bl	80009d0 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffb0 	bl	8000a38 <SysTick_Config>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
 8000afe:	e16b      	b.n	8000dd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b00:	2201      	movs	r2, #1
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	f040 815a 	bne.w	8000dd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d00b      	beq.n	8000b3e <HAL_GPIO_Init+0x5a>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d007      	beq.n	8000b3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b32:	2b11      	cmp	r3, #17
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b12      	cmp	r3, #18
 8000b3c:	d130      	bne.n	8000ba0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4013      	ands	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b74:	2201      	movs	r2, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4013      	ands	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	f003 0201 	and.w	r2, r3, #1
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0xfc>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b12      	cmp	r3, #18
 8000bde:	d123      	bne.n	8000c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	08da      	lsrs	r2, r3, #3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3208      	adds	r2, #8
 8000c22:	69b9      	ldr	r1, [r7, #24]
 8000c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0203 	and.w	r2, r3, #3
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80b4 	beq.w	8000dd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <HAL_GPIO_Init+0x308>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a5e      	ldr	r2, [pc, #376]	; (8000dec <HAL_GPIO_Init+0x308>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b5c      	ldr	r3, [pc, #368]	; (8000dec <HAL_GPIO_Init+0x308>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c86:	4a5a      	ldr	r2, [pc, #360]	; (8000df0 <HAL_GPIO_Init+0x30c>)
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <HAL_GPIO_Init+0x310>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d02b      	beq.n	8000d0a <HAL_GPIO_Init+0x226>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a50      	ldr	r2, [pc, #320]	; (8000df8 <HAL_GPIO_Init+0x314>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d025      	beq.n	8000d06 <HAL_GPIO_Init+0x222>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4f      	ldr	r2, [pc, #316]	; (8000dfc <HAL_GPIO_Init+0x318>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d01f      	beq.n	8000d02 <HAL_GPIO_Init+0x21e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4e      	ldr	r2, [pc, #312]	; (8000e00 <HAL_GPIO_Init+0x31c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d019      	beq.n	8000cfe <HAL_GPIO_Init+0x21a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a4d      	ldr	r2, [pc, #308]	; (8000e04 <HAL_GPIO_Init+0x320>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d013      	beq.n	8000cfa <HAL_GPIO_Init+0x216>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4c      	ldr	r2, [pc, #304]	; (8000e08 <HAL_GPIO_Init+0x324>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d00d      	beq.n	8000cf6 <HAL_GPIO_Init+0x212>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4b      	ldr	r2, [pc, #300]	; (8000e0c <HAL_GPIO_Init+0x328>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d007      	beq.n	8000cf2 <HAL_GPIO_Init+0x20e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4a      	ldr	r2, [pc, #296]	; (8000e10 <HAL_GPIO_Init+0x32c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d101      	bne.n	8000cee <HAL_GPIO_Init+0x20a>
 8000cea:	2307      	movs	r3, #7
 8000cec:	e00e      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000cee:	2308      	movs	r3, #8
 8000cf0:	e00c      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	e00a      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	e008      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e004      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e002      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <HAL_GPIO_Init+0x228>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	f002 0203 	and.w	r2, r2, #3
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4093      	lsls	r3, r2
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d1c:	4934      	ldr	r1, [pc, #208]	; (8000df0 <HAL_GPIO_Init+0x30c>)
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d4e:	4a31      	ldr	r2, [pc, #196]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d54:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d78:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	f67f ae90 	bls.w	8000b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000de0:	bf00      	nop
 8000de2:	3724      	adds	r7, #36	; 0x24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020c00 	.word	0x40020c00
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40021400 	.word	0x40021400
 8000e0c:	40021800 	.word	0x40021800
 8000e10:	40021c00 	.word	0x40021c00
 8000e14:	40013c00 	.word	0x40013c00

08000e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
 8000e24:	4613      	mov	r3, r2
 8000e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e28:	787b      	ldrb	r3, [r7, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e34:	e003      	b.n	8000e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e36:	887b      	ldrh	r3, [r7, #2]
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	619a      	str	r2, [r3, #24]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d104      	bne.n	8000e6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	041a      	lsls	r2, r3, #16
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000e6e:	887a      	ldrh	r2, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	619a      	str	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e25b      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d075      	beq.n	8000f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9e:	4ba3      	ldr	r3, [pc, #652]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d00c      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eaa:	4ba0      	ldr	r3, [pc, #640]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d112      	bne.n	8000edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eb6:	4b9d      	ldr	r3, [pc, #628]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ec2:	d10b      	bne.n	8000edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	4b99      	ldr	r3, [pc, #612]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d05b      	beq.n	8000f88 <HAL_RCC_OscConfig+0x108>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d157      	bne.n	8000f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e236      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee4:	d106      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x74>
 8000ee6:	4b91      	ldr	r3, [pc, #580]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a90      	ldr	r2, [pc, #576]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e01d      	b.n	8000f30 <HAL_RCC_OscConfig+0xb0>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x98>
 8000efe:	4b8b      	ldr	r3, [pc, #556]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a8a      	ldr	r2, [pc, #552]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b88      	ldr	r3, [pc, #544]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a87      	ldr	r2, [pc, #540]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e00b      	b.n	8000f30 <HAL_RCC_OscConfig+0xb0>
 8000f18:	4b84      	ldr	r3, [pc, #528]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a83      	ldr	r2, [pc, #524]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b81      	ldr	r3, [pc, #516]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a80      	ldr	r2, [pc, #512]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d013      	beq.n	8000f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fce2 	bl	8000900 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fcde 	bl	8000900 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e1fb      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0xc0>
 8000f5e:	e014      	b.n	8000f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fcce 	bl	8000900 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fcca 	bl	8000900 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e1e7      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	4b6c      	ldr	r3, [pc, #432]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f0      	bne.n	8000f68 <HAL_RCC_OscConfig+0xe8>
 8000f86:	e000      	b.n	8000f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d063      	beq.n	800105e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f96:	4b65      	ldr	r3, [pc, #404]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00b      	beq.n	8000fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fa2:	4b62      	ldr	r3, [pc, #392]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d11c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fae:	4b5f      	ldr	r3, [pc, #380]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d116      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fba:	4b5c      	ldr	r3, [pc, #368]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x152>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e1bb      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd2:	4b56      	ldr	r3, [pc, #344]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4952      	ldr	r1, [pc, #328]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	e03a      	b.n	800105e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d020      	beq.n	8001032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <HAL_RCC_OscConfig+0x2b0>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fc83 	bl	8000900 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fc7f 	bl	8000900 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e19c      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101c:	4b43      	ldr	r3, [pc, #268]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4940      	ldr	r1, [pc, #256]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
 8001030:	e015      	b.n	800105e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_RCC_OscConfig+0x2b0>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001038:	f7ff fc62 	bl	8000900 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001040:	f7ff fc5e 	bl	8000900 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e17b      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	2b00      	cmp	r3, #0
 8001068:	d030      	beq.n	80010cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d016      	beq.n	80010a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001072:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_RCC_OscConfig+0x2b4>)
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001078:	f7ff fc42 	bl	8000900 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fc3e 	bl	8000900 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e15b      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 8001094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x200>
 800109e:	e015      	b.n	80010cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_RCC_OscConfig+0x2b4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fc2b 	bl	8000900 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc27 	bl	8000900 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e144      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 80010c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f0      	bne.n	80010ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a0 	beq.w	800121a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_RCC_OscConfig+0x2b8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d121      	bne.n	800115a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_RCC_OscConfig+0x2b8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_RCC_OscConfig+0x2b8>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fbed 	bl	8000900 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	e011      	b.n	800114e <HAL_RCC_OscConfig+0x2ce>
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	42470000 	.word	0x42470000
 8001134:	42470e80 	.word	0x42470e80
 8001138:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113c:	f7ff fbe0 	bl	8000900 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e0fd      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	4b81      	ldr	r3, [pc, #516]	; (8001354 <HAL_RCC_OscConfig+0x4d4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x2f0>
 8001162:	4b7d      	ldr	r3, [pc, #500]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001166:	4a7c      	ldr	r2, [pc, #496]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6713      	str	r3, [r2, #112]	; 0x70
 800116e:	e01c      	b.n	80011aa <HAL_RCC_OscConfig+0x32a>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x312>
 8001178:	4b77      	ldr	r3, [pc, #476]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117c:	4a76      	ldr	r2, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6713      	str	r3, [r2, #112]	; 0x70
 8001184:	4b74      	ldr	r3, [pc, #464]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001188:	4a73      	ldr	r2, [pc, #460]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6713      	str	r3, [r2, #112]	; 0x70
 8001190:	e00b      	b.n	80011aa <HAL_RCC_OscConfig+0x32a>
 8001192:	4b71      	ldr	r3, [pc, #452]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001196:	4a70      	ldr	r2, [pc, #448]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6713      	str	r3, [r2, #112]	; 0x70
 800119e:	4b6e      	ldr	r3, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 80011a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a2:	4a6d      	ldr	r2, [pc, #436]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d015      	beq.n	80011de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b2:	f7ff fba5 	bl	8000900 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fba1 	bl	8000900 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e0bc      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	4b61      	ldr	r3, [pc, #388]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0ee      	beq.n	80011ba <HAL_RCC_OscConfig+0x33a>
 80011dc:	e014      	b.n	8001208 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fb8f 	bl	8000900 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fb8b 	bl	8000900 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e0a6      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fc:	4b56      	ldr	r3, [pc, #344]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 80011fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ee      	bne.n	80011e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d105      	bne.n	800121a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120e:	4b52      	ldr	r3, [pc, #328]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a51      	ldr	r2, [pc, #324]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8092 	beq.w	8001348 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001224:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d05c      	beq.n	80012ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d141      	bne.n	80012bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001238:	4b48      	ldr	r3, [pc, #288]	; (800135c <HAL_RCC_OscConfig+0x4dc>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb5f 	bl	8000900 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb5b 	bl	8000900 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e078      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001258:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	085b      	lsrs	r3, r3, #1
 800127c:	3b01      	subs	r3, #1
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	061b      	lsls	r3, r3, #24
 8001288:	4933      	ldr	r1, [pc, #204]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <HAL_RCC_OscConfig+0x4dc>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fb34 	bl	8000900 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff fb30 	bl	8000900 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e04d      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x41c>
 80012ba:	e045      	b.n	8001348 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_OscConfig+0x4dc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fb1d 	bl	8000900 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff fb19 	bl	8000900 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e036      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCC_OscConfig+0x44a>
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e029      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_RCC_OscConfig+0x4d8>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	429a      	cmp	r2, r3
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d115      	bne.n	8001344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800131e:	4013      	ands	r3, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001324:	4293      	cmp	r3, r2
 8001326:	d10d      	bne.n	8001344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001332:	429a      	cmp	r2, r3
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40007000 	.word	0x40007000
 8001358:	40023800 	.word	0x40023800
 800135c:	42470060 	.word	0x42470060

08001360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0cc      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001374:	4b68      	ldr	r3, [pc, #416]	; (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d90c      	bls.n	800139c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b63      	ldr	r3, [pc, #396]	; (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0b8      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b4:	4b59      	ldr	r3, [pc, #356]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a58      	ldr	r2, [pc, #352]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013cc:	4b53      	ldr	r3, [pc, #332]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a52      	ldr	r2, [pc, #328]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	494d      	ldr	r1, [pc, #308]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d044      	beq.n	8001480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d119      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e07f      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d003      	beq.n	800141e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141a:	2b03      	cmp	r3, #3
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e06f      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e067      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f023 0203 	bic.w	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4934      	ldr	r1, [pc, #208]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001450:	f7ff fa56 	bl	8000900 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001456:	e00a      	b.n	800146e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001458:	f7ff fa52 	bl	8000900 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e04f      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 020c 	and.w	r2, r3, #12
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	429a      	cmp	r2, r3
 800147e:	d1eb      	bne.n	8001458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d20c      	bcs.n	80014a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e032      	b.n	800150e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4916      	ldr	r1, [pc, #88]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	490e      	ldr	r1, [pc, #56]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014e6:	f000 f821 	bl	800152c <HAL_RCC_GetSysClockFreq>
 80014ea:	4601      	mov	r1, r0
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	fa21 f303 	lsr.w	r3, r1, r3
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_RCC_ClockConfig+0x1c8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f9b6 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023c00 	.word	0x40023c00
 800151c:	40023800 	.word	0x40023800
 8001520:	08004010 	.word	0x08004010
 8001524:	20000000 	.word	0x20000000
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001542:	4b50      	ldr	r3, [pc, #320]	; (8001684 <HAL_RCC_GetSysClockFreq+0x158>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d007      	beq.n	800155e <HAL_RCC_GetSysClockFreq+0x32>
 800154e:	2b08      	cmp	r3, #8
 8001550:	d008      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x38>
 8001552:	2b00      	cmp	r3, #0
 8001554:	f040 808d 	bne.w	8001672 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001558:	4b4b      	ldr	r3, [pc, #300]	; (8001688 <HAL_RCC_GetSysClockFreq+0x15c>)
 800155a:	60bb      	str	r3, [r7, #8]
       break;
 800155c:	e08c      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800155e:	4b4b      	ldr	r3, [pc, #300]	; (800168c <HAL_RCC_GetSysClockFreq+0x160>)
 8001560:	60bb      	str	r3, [r7, #8]
      break;
 8001562:	e089      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001564:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_GetSysClockFreq+0x158>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800156c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <HAL_RCC_GetSysClockFreq+0x158>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d023      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800157a:	4b42      	ldr	r3, [pc, #264]	; (8001684 <HAL_RCC_GetSysClockFreq+0x158>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	099b      	lsrs	r3, r3, #6
 8001580:	f04f 0400 	mov.w	r4, #0
 8001584:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	ea03 0501 	and.w	r5, r3, r1
 8001590:	ea04 0602 	and.w	r6, r4, r2
 8001594:	4a3d      	ldr	r2, [pc, #244]	; (800168c <HAL_RCC_GetSysClockFreq+0x160>)
 8001596:	fb02 f106 	mul.w	r1, r2, r6
 800159a:	2200      	movs	r2, #0
 800159c:	fb02 f205 	mul.w	r2, r2, r5
 80015a0:	440a      	add	r2, r1
 80015a2:	493a      	ldr	r1, [pc, #232]	; (800168c <HAL_RCC_GetSysClockFreq+0x160>)
 80015a4:	fba5 0101 	umull	r0, r1, r5, r1
 80015a8:	1853      	adds	r3, r2, r1
 80015aa:	4619      	mov	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f04f 0400 	mov.w	r4, #0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4623      	mov	r3, r4
 80015b6:	f7fe fe0b 	bl	80001d0 <__aeabi_uldivmod>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e049      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_RCC_GetSysClockFreq+0x158>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	f04f 0400 	mov.w	r4, #0
 80015cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	ea03 0501 	and.w	r5, r3, r1
 80015d8:	ea04 0602 	and.w	r6, r4, r2
 80015dc:	4629      	mov	r1, r5
 80015de:	4632      	mov	r2, r6
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	f04f 0400 	mov.w	r4, #0
 80015e8:	0154      	lsls	r4, r2, #5
 80015ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015ee:	014b      	lsls	r3, r1, #5
 80015f0:	4619      	mov	r1, r3
 80015f2:	4622      	mov	r2, r4
 80015f4:	1b49      	subs	r1, r1, r5
 80015f6:	eb62 0206 	sbc.w	r2, r2, r6
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	f04f 0400 	mov.w	r4, #0
 8001602:	0194      	lsls	r4, r2, #6
 8001604:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001608:	018b      	lsls	r3, r1, #6
 800160a:	1a5b      	subs	r3, r3, r1
 800160c:	eb64 0402 	sbc.w	r4, r4, r2
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	00e2      	lsls	r2, r4, #3
 800161a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800161e:	00d9      	lsls	r1, r3, #3
 8001620:	460b      	mov	r3, r1
 8001622:	4614      	mov	r4, r2
 8001624:	195b      	adds	r3, r3, r5
 8001626:	eb44 0406 	adc.w	r4, r4, r6
 800162a:	f04f 0100 	mov.w	r1, #0
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	02a2      	lsls	r2, r4, #10
 8001634:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001638:	0299      	lsls	r1, r3, #10
 800163a:	460b      	mov	r3, r1
 800163c:	4614      	mov	r4, r2
 800163e:	4618      	mov	r0, r3
 8001640:	4621      	mov	r1, r4
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	f7fe fdc0 	bl	80001d0 <__aeabi_uldivmod>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_GetSysClockFreq+0x158>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	3301      	adds	r3, #1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	60bb      	str	r3, [r7, #8]
      break;
 8001670:	e002      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001674:	60bb      	str	r3, [r7, #8]
      break;
 8001676:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001678:	68bb      	ldr	r3, [r7, #8]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	00f42400 	.word	0x00f42400
 800168c:	017d7840 	.word	0x017d7840

08001690 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800169e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a2:	2b84      	cmp	r3, #132	; 0x84
 80016a4:	d005      	beq.n	80016b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80016a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4413      	add	r3, r2
 80016ae:	3303      	adds	r3, #3
 80016b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80016c4:	f000 ffac 	bl	8002620 <vTaskStartScheduler>
  
  return osOK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}

080016ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80016ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d0:	b089      	sub	sp, #36	; 0x24
 80016d2:	af04      	add	r7, sp, #16
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <osThreadCreate+0x54>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01c      	beq.n	8001722 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685c      	ldr	r4, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681d      	ldr	r5, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691e      	ldr	r6, [r3, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ffc8 	bl	8001690 <makeFreeRtosPriority>
 8001700:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800170a:	9202      	str	r2, [sp, #8]
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	9100      	str	r1, [sp, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4632      	mov	r2, r6
 8001714:	4629      	mov	r1, r5
 8001716:	4620      	mov	r0, r4
 8001718:	f000 fdbe 	bl	8002298 <xTaskCreateStatic>
 800171c:	4603      	mov	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e01c      	b.n	800175c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685c      	ldr	r4, [r3, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800172e:	b29e      	uxth	r6, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ffaa 	bl	8001690 <makeFreeRtosPriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	9200      	str	r2, [sp, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4632      	mov	r2, r6
 800174a:	4629      	mov	r1, r5
 800174c:	4620      	mov	r0, r4
 800174e:	f000 fdfd 	bl	800234c <xTaskCreate>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d001      	beq.n	800175c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001766 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <osDelay+0x16>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	e000      	b.n	800177e <osDelay+0x18>
 800177c:	2301      	movs	r3, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f000 ff1a 	bl	80025b8 <vTaskDelay>
  
  return osOK;
 8001784:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f103 0208 	add.w	r2, r3, #8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f04f 32ff 	mov.w	r2, #4294967295
 80017a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f103 0208 	add.w	r2, r3, #8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f103 0208 	add.w	r2, r3, #8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001846:	d103      	bne.n	8001850 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	e00c      	b.n	800186a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3308      	adds	r3, #8
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e002      	b.n	800185e <vListInsert+0x2e>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	d2f6      	bcs.n	8001858 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6892      	ldr	r2, [r2, #8]
 80018b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6852      	ldr	r2, [r2, #4]
 80018c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d103      	bne.n	80018d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800190c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001910:	f383 8811 	msr	BASEPRI, r3
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	f3bf 8f4f 	dsb	sy
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	e7fe      	b.n	800191e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001920:	f002 f80c 	bl	800393c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	441a      	add	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	3b01      	subs	r3, #1
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	441a      	add	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	22ff      	movs	r2, #255	; 0xff
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d114      	bne.n	80019a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01a      	beq.n	80019b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3310      	adds	r3, #16
 8001982:	4618      	mov	r0, r3
 8001984:	f001 f8ca 	bl	8002b1c <xTaskRemoveFromEventList>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d012      	beq.n	80019b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <xQueueGenericReset+0xcc>)
 8001990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f3bf 8f4f 	dsb	sy
 800199a:	f3bf 8f6f 	isb	sy
 800199e:	e009      	b.n	80019b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3310      	adds	r3, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fef2 	bl	800178e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3324      	adds	r3, #36	; 0x24
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff feed 	bl	800178e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80019b4:	f001 fff0 	bl	8003998 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000ed04 	.word	0xe000ed04

080019c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08e      	sub	sp, #56	; 0x38
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <xQueueGenericCreateStatic+0x28>
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ee:	e7fe      	b.n	80019ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <xQueueGenericCreateStatic+0x42>
 80019f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fa:	f383 8811 	msr	BASEPRI, r3
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	e7fe      	b.n	8001a08 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <xQueueGenericCreateStatic+0x4e>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <xQueueGenericCreateStatic+0x52>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <xQueueGenericCreateStatic+0x54>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <xQueueGenericCreateStatic+0x6c>
 8001a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a24:	f383 8811 	msr	BASEPRI, r3
 8001a28:	f3bf 8f6f 	isb	sy
 8001a2c:	f3bf 8f4f 	dsb	sy
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	e7fe      	b.n	8001a32 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <xQueueGenericCreateStatic+0x78>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <xQueueGenericCreateStatic+0x7c>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <xQueueGenericCreateStatic+0x7e>
 8001a44:	2300      	movs	r3, #0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <xQueueGenericCreateStatic+0x96>
 8001a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	e7fe      	b.n	8001a5c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001a5e:	2348      	movs	r3, #72	; 0x48
 8001a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b48      	cmp	r3, #72	; 0x48
 8001a66:	d009      	beq.n	8001a7c <xQueueGenericCreateStatic+0xb4>
 8001a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6c:	f383 8811 	msr	BASEPRI, r3
 8001a70:	f3bf 8f6f 	isb	sy
 8001a74:	f3bf 8f4f 	dsb	sy
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e7fe      	b.n	8001a7a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001a7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f805 	bl	8001aae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3730      	adds	r7, #48	; 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e002      	b.n	8001ad0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001adc:	2101      	movs	r1, #1
 8001ade:	69b8      	ldr	r0, [r7, #24]
 8001ae0:	f7ff ff0a 	bl	80018f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001afa:	2300      	movs	r3, #0
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <xQueueGenericSend+0x30>
 8001b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1a:	e7fe      	b.n	8001b1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <xQueueGenericSend+0x3e>
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <xQueueGenericSend+0x42>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <xQueueGenericSend+0x44>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <xQueueGenericSend+0x5c>
 8001b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b38:	f383 8811 	msr	BASEPRI, r3
 8001b3c:	f3bf 8f6f 	isb	sy
 8001b40:	f3bf 8f4f 	dsb	sy
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e7fe      	b.n	8001b46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d103      	bne.n	8001b56 <xQueueGenericSend+0x6a>
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <xQueueGenericSend+0x6e>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <xQueueGenericSend+0x70>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <xQueueGenericSend+0x88>
 8001b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	e7fe      	b.n	8001b72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b74:	f001 f988 	bl	8002e88 <xTaskGetSchedulerState>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <xQueueGenericSend+0x98>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <xQueueGenericSend+0x9c>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <xQueueGenericSend+0x9e>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <xQueueGenericSend+0xb6>
 8001b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	e7fe      	b.n	8001ba0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ba2:	f001 fecb 	bl	800393c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d302      	bcc.n	8001bb8 <xQueueGenericSend+0xcc>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d129      	bne.n	8001c0c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bbe:	f000 f9ff 	bl	8001fc0 <prvCopyDataToQueue>
 8001bc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d010      	beq.n	8001bee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bce:	3324      	adds	r3, #36	; 0x24
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 ffa3 	bl	8002b1c <xTaskRemoveFromEventList>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <xQueueGenericSend+0x1f0>)
 8001bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	e00a      	b.n	8001c04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001bf4:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <xQueueGenericSend+0x1f0>)
 8001bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001c04:	f001 fec8 	bl	8003998 <vPortExitCritical>
				return pdPASS;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e063      	b.n	8001cd4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c12:	f001 fec1 	bl	8003998 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e05c      	b.n	8001cd4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 ffdb 	bl	8002be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c2e:	f001 feb3 	bl	8003998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c32:	f000 fd59 	bl	80026e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c36:	f001 fe81 	bl	800393c <vPortEnterCritical>
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c46:	d103      	bne.n	8001c50 <xQueueGenericSend+0x164>
 8001c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d103      	bne.n	8001c66 <xQueueGenericSend+0x17a>
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c66:	f001 fe97 	bl	8003998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c6a:	1d3a      	adds	r2, r7, #4
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 ffca 	bl	8002c0c <xTaskCheckForTimeOut>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d124      	bne.n	8001cc8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c80:	f000 fa96 	bl	80021b0 <prvIsQueueFull>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d018      	beq.n	8001cbc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	3310      	adds	r3, #16
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fef4 	bl	8002a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c9a:	f000 fa21 	bl	80020e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001c9e:	f000 fd31 	bl	8002704 <xTaskResumeAll>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f47f af7c 	bne.w	8001ba2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <xQueueGenericSend+0x1f0>)
 8001cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	e772      	b.n	8001ba2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cbe:	f000 fa0f 	bl	80020e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cc2:	f000 fd1f 	bl	8002704 <xTaskResumeAll>
 8001cc6:	e76c      	b.n	8001ba2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cca:	f000 fa09 	bl	80020e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cce:	f000 fd19 	bl	8002704 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001cd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3738      	adds	r7, #56	; 0x38
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	e000ed04 	.word	0xe000ed04

08001ce0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08e      	sub	sp, #56	; 0x38
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d109      	bne.n	8001d0c <xQueueGenericSendFromISR+0x2c>
 8001cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfc:	f383 8811 	msr	BASEPRI, r3
 8001d00:	f3bf 8f6f 	isb	sy
 8001d04:	f3bf 8f4f 	dsb	sy
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	e7fe      	b.n	8001d0a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <xQueueGenericSendFromISR+0x3a>
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <xQueueGenericSendFromISR+0x3e>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <xQueueGenericSendFromISR+0x40>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <xQueueGenericSendFromISR+0x58>
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	e7fe      	b.n	8001d36 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d103      	bne.n	8001d46 <xQueueGenericSendFromISR+0x66>
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <xQueueGenericSendFromISR+0x6a>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <xQueueGenericSendFromISR+0x6c>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <xQueueGenericSendFromISR+0x84>
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e7fe      	b.n	8001d62 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d64:	f001 fec6 	bl	8003af4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001d68:	f3ef 8211 	mrs	r2, BASEPRI
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	61ba      	str	r2, [r7, #24]
 8001d7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001d80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d302      	bcc.n	8001d96 <xQueueGenericSendFromISR+0xb6>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d12c      	bne.n	8001df0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001da6:	f000 f90b 	bl	8001fc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001daa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db2:	d112      	bne.n	8001dda <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d016      	beq.n	8001dea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	3324      	adds	r3, #36	; 0x24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 feab 	bl	8002b1c <xTaskRemoveFromEventList>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00e      	beq.n	8001dea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001dda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	b25a      	sxtb	r2, r3
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001dea:	2301      	movs	r3, #1
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001dee:	e001      	b.n	8001df4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3738      	adds	r7, #56	; 0x38
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <xQueueReceive+0x2e>
	__asm volatile
 8001e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	e7fe      	b.n	8001e34 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d103      	bne.n	8001e44 <xQueueReceive+0x3c>
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <xQueueReceive+0x40>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <xQueueReceive+0x42>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <xQueueReceive+0x5a>
 8001e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	f3bf 8f6f 	isb	sy
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	e7fe      	b.n	8001e60 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e62:	f001 f811 	bl	8002e88 <xTaskGetSchedulerState>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <xQueueReceive+0x6a>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <xQueueReceive+0x6e>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <xQueueReceive+0x70>
 8001e76:	2300      	movs	r3, #0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <xQueueReceive+0x88>
 8001e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	e7fe      	b.n	8001e8e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e90:	f001 fd54 	bl	800393c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01f      	beq.n	8001ee0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ea4:	f000 f8f6 	bl	8002094 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00f      	beq.n	8001ed8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	3310      	adds	r3, #16
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fe2d 	bl	8002b1c <xTaskRemoveFromEventList>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001ec8:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <xQueueReceive+0x1b4>)
 8001eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001ed8:	f001 fd5e 	bl	8003998 <vPortExitCritical>
				return pdPASS;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e069      	b.n	8001fb4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ee6:	f001 fd57 	bl	8003998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e062      	b.n	8001fb4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fe71 	bl	8002be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001efe:	2301      	movs	r3, #1
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f02:	f001 fd49 	bl	8003998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f06:	f000 fbef 	bl	80026e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f0a:	f001 fd17 	bl	800393c <vPortEnterCritical>
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1a:	d103      	bne.n	8001f24 <xQueueReceive+0x11c>
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d103      	bne.n	8001f3a <xQueueReceive+0x132>
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f3a:	f001 fd2d 	bl	8003998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f3e:	1d3a      	adds	r2, r7, #4
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fe60 	bl	8002c0c <xTaskCheckForTimeOut>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d123      	bne.n	8001f9a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f54:	f000 f916 	bl	8002184 <prvIsQueueEmpty>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d017      	beq.n	8001f8e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f60:	3324      	adds	r3, #36	; 0x24
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fd8a 	bl	8002a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f6e:	f000 f8b7 	bl	80020e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001f72:	f000 fbc7 	bl	8002704 <xTaskResumeAll>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d189      	bne.n	8001e90 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <xQueueReceive+0x1b4>)
 8001f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	e780      	b.n	8001e90 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f90:	f000 f8a6 	bl	80020e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f94:	f000 fbb6 	bl	8002704 <xTaskResumeAll>
 8001f98:	e77a      	b.n	8001e90 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f9c:	f000 f8a0 	bl	80020e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fa0:	f000 fbb0 	bl	8002704 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fa6:	f000 f8ed 	bl	8002184 <prvIsQueueEmpty>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f43f af6f 	beq.w	8001e90 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001fb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	e000ed04 	.word	0xe000ed04

08001fc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d14d      	bne.n	8002082 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 ff6a 	bl	8002ec4 <xTaskPriorityDisinherit>
 8001ff0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	e043      	b.n	8002082 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d119      	bne.n	8002034 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6858      	ldr	r0, [r3, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	461a      	mov	r2, r3
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	f001 ffaa 	bl	8003f64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	441a      	add	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	d32b      	bcc.n	8002082 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e026      	b.n	8002082 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	68d8      	ldr	r0, [r3, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	461a      	mov	r2, r3
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	f001 ff90 	bl	8003f64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	425b      	negs	r3, r3
 800204e:	441a      	add	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	425b      	negs	r3, r3
 800206a:	441a      	add	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d105      	bne.n	8002082 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	3b01      	subs	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800208a:	697b      	ldr	r3, [r7, #20]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d018      	beq.n	80020d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	441a      	add	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d303      	bcc.n	80020c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68d9      	ldr	r1, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	461a      	mov	r2, r3
 80020d2:	6838      	ldr	r0, [r7, #0]
 80020d4:	f001 ff46 	bl	8003f64 <memcpy>
	}
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80020e8:	f001 fc28 	bl	800393c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020f4:	e011      	b.n	800211a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3324      	adds	r3, #36	; 0x24
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fd0a 	bl	8002b1c <xTaskRemoveFromEventList>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800210e:	f000 fddd 	bl	8002ccc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3b01      	subs	r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	dce9      	bgt.n	80020f6 <prvUnlockQueue+0x16>
 8002122:	e000      	b.n	8002126 <prvUnlockQueue+0x46>
					break;
 8002124:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	22ff      	movs	r2, #255	; 0xff
 800212a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800212e:	f001 fc33 	bl	8003998 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002132:	f001 fc03 	bl	800393c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800213c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800213e:	e011      	b.n	8002164 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d012      	beq.n	800216e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3310      	adds	r3, #16
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fce5 	bl	8002b1c <xTaskRemoveFromEventList>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002158:	f000 fdb8 	bl	8002ccc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	3b01      	subs	r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002164:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002168:	2b00      	cmp	r3, #0
 800216a:	dce9      	bgt.n	8002140 <prvUnlockQueue+0x60>
 800216c:	e000      	b.n	8002170 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800216e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	22ff      	movs	r2, #255	; 0xff
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002178:	f001 fc0e 	bl	8003998 <vPortExitCritical>
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800218c:	f001 fbd6 	bl	800393c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002198:	2301      	movs	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e001      	b.n	80021a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021a2:	f001 fbf9 	bl	8003998 <vPortExitCritical>

	return xReturn;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021b8:	f001 fbc0 	bl	800393c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d102      	bne.n	80021ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80021c8:	2301      	movs	r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e001      	b.n	80021d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021d2:	f001 fbe1 	bl	8003998 <vPortExitCritical>

	return xReturn;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e014      	b.n	800221a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80021f0:	4a0e      	ldr	r2, [pc, #56]	; (800222c <vQueueAddToRegistry+0x4c>)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80021fc:	490b      	ldr	r1, [pc, #44]	; (800222c <vQueueAddToRegistry+0x4c>)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <vQueueAddToRegistry+0x4c>)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002212:	e005      	b.n	8002220 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d9e7      	bls.n	80021f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20004528 	.word	0x20004528

08002230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002240:	f001 fb7c 	bl	800393c <vPortEnterCritical>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800224a:	b25b      	sxtb	r3, r3
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d103      	bne.n	800225a <vQueueWaitForMessageRestricted+0x2a>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002260:	b25b      	sxtb	r3, r3
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d103      	bne.n	8002270 <vQueueWaitForMessageRestricted+0x40>
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002270:	f001 fb92 	bl	8003998 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	2b00      	cmp	r3, #0
 800227a:	d106      	bne.n	800228a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3324      	adds	r3, #36	; 0x24
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fc1f 	bl	8002ac8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff28 	bl	80020e0 <prvUnlockQueue>
	}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08e      	sub	sp, #56	; 0x38
 800229c:	af04      	add	r7, sp, #16
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80022a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <xTaskCreateStatic+0x28>
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	623b      	str	r3, [r7, #32]
 80022be:	e7fe      	b.n	80022be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <xTaskCreateStatic+0x42>
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	e7fe      	b.n	80022d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80022da:	2354      	movs	r3, #84	; 0x54
 80022dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b54      	cmp	r3, #84	; 0x54
 80022e2:	d009      	beq.n	80022f8 <xTaskCreateStatic+0x60>
 80022e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e8:	f383 8811 	msr	BASEPRI, r3
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f3bf 8f4f 	dsb	sy
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e7fe      	b.n	80022f6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80022f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01e      	beq.n	800233e <xTaskCreateStatic+0xa6>
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01b      	beq.n	800233e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800230e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002318:	2300      	movs	r3, #0
 800231a:	9303      	str	r3, [sp, #12]
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f850 	bl	80023d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002338:	f000 f8d4 	bl	80024e4 <prvAddNewTaskToReadyList>
 800233c:	e001      	b.n	8002342 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002342:	697b      	ldr	r3, [r7, #20]
	}
 8002344:	4618      	mov	r0, r3
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af04      	add	r7, sp, #16
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4618      	mov	r0, r3
 8002362:	f001 fc05 	bl	8003b70 <pvPortMalloc>
 8002366:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00e      	beq.n	800238c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800236e:	2054      	movs	r0, #84	; 0x54
 8002370:	f001 fbfe 	bl	8003b70 <pvPortMalloc>
 8002374:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
 8002382:	e005      	b.n	8002390 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002384:	6978      	ldr	r0, [r7, #20]
 8002386:	f001 fcb5 	bl	8003cf4 <vPortFree>
 800238a:	e001      	b.n	8002390 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d017      	beq.n	80023c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9303      	str	r3, [sp, #12]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f80e 	bl	80023d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023ba:	69f8      	ldr	r0, [r7, #28]
 80023bc:	f000 f892 	bl	80024e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80023c0:	2301      	movs	r3, #1
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e002      	b.n	80023cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80023cc:	69bb      	ldr	r3, [r7, #24]
	}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023ee:	3b01      	subs	r3, #1
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f023 0307 	bic.w	r3, r3, #7
 80023fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <prvInitialiseNewTask+0x46>
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e7fe      	b.n	800241a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01f      	beq.n	8002462 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e012      	b.n	800244e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	7819      	ldrb	r1, [r3, #0]
 8002430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	3334      	adds	r3, #52	; 0x34
 8002438:	460a      	mov	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	3301      	adds	r3, #1
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d9e9      	bls.n	8002428 <prvInitialiseNewTask+0x52>
 8002454:	e000      	b.n	8002458 <prvInitialiseNewTask+0x82>
			{
				break;
 8002456:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002460:	e003      	b.n	800246a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	2b06      	cmp	r3, #6
 800246e:	d901      	bls.n	8002474 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002470:	2306      	movs	r3, #6
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002478:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800247e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	2200      	movs	r2, #0
 8002484:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	3304      	adds	r3, #4
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f99f 	bl	80017ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	3318      	adds	r3, #24
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f99a 	bl	80017ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	f1c3 0207 	rsb	r2, r3, #7
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	2200      	movs	r2, #0
 80024b4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	68f9      	ldr	r1, [r7, #12]
 80024c2:	69b8      	ldr	r0, [r7, #24]
 80024c4:	f001 f916 	bl	80036f4 <pxPortInitialiseStack>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024da:	bf00      	nop
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024ec:	f001 fa26 	bl	800393c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024f0:	4b2a      	ldr	r3, [pc, #168]	; (800259c <prvAddNewTaskToReadyList+0xb8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	4a29      	ldr	r2, [pc, #164]	; (800259c <prvAddNewTaskToReadyList+0xb8>)
 80024f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <prvAddNewTaskToReadyList+0xbc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002502:	4a27      	ldr	r2, [pc, #156]	; (80025a0 <prvAddNewTaskToReadyList+0xbc>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <prvAddNewTaskToReadyList+0xb8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d110      	bne.n	8002532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002510:	f000 fc00 	bl	8002d14 <prvInitialiseTaskLists>
 8002514:	e00d      	b.n	8002532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <prvAddNewTaskToReadyList+0xc0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <prvAddNewTaskToReadyList+0xbc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	429a      	cmp	r2, r3
 800252a:	d802      	bhi.n	8002532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <prvAddNewTaskToReadyList+0xbc>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <prvAddNewTaskToReadyList+0xc4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <prvAddNewTaskToReadyList+0xc4>)
 800253a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <prvAddNewTaskToReadyList+0xc8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <prvAddNewTaskToReadyList+0xc8>)
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <prvAddNewTaskToReadyList+0xcc>)
 800255c:	441a      	add	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3304      	adds	r3, #4
 8002562:	4619      	mov	r1, r3
 8002564:	4610      	mov	r0, r2
 8002566:	f7ff f93f 	bl	80017e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800256a:	f001 fa15 	bl	8003998 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <prvAddNewTaskToReadyList+0xc0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <prvAddNewTaskToReadyList+0xbc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <prvAddNewTaskToReadyList+0xd0>)
 8002586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200007d4 	.word	0x200007d4
 80025a0:	200006d4 	.word	0x200006d4
 80025a4:	200007e0 	.word	0x200007e0
 80025a8:	200007f0 	.word	0x200007f0
 80025ac:	200007dc 	.word	0x200007dc
 80025b0:	200006d8 	.word	0x200006d8
 80025b4:	e000ed04 	.word	0xe000ed04

080025b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <vTaskDelay+0x60>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <vTaskDelay+0x2e>
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	e7fe      	b.n	80025e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80025e6:	f000 f87f 	bl	80026e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025ea:	2100      	movs	r1, #0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fced 	bl	8002fcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025f2:	f000 f887 	bl	8002704 <xTaskResumeAll>
 80025f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d107      	bne.n	800260e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <vTaskDelay+0x64>)
 8002600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200007fc 	.word	0x200007fc
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800262e:	463a      	mov	r2, r7
 8002630:	1d39      	adds	r1, r7, #4
 8002632:	f107 0308 	add.w	r3, r7, #8
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff4a 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	9202      	str	r2, [sp, #8]
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2300      	movs	r3, #0
 800264c:	460a      	mov	r2, r1
 800264e:	4920      	ldr	r1, [pc, #128]	; (80026d0 <vTaskStartScheduler+0xb0>)
 8002650:	4820      	ldr	r0, [pc, #128]	; (80026d4 <vTaskStartScheduler+0xb4>)
 8002652:	f7ff fe21 	bl	8002298 <xTaskCreateStatic>
 8002656:	4602      	mov	r2, r0
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <vTaskStartScheduler+0xb8>)
 800265a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <vTaskStartScheduler+0xb8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002664:	2301      	movs	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e001      	b.n	800266e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d102      	bne.n	800267a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002674:	f000 fd10 	bl	8003098 <xTimerCreateTimerTask>
 8002678:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d115      	bne.n	80026ac <vTaskStartScheduler+0x8c>
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <vTaskStartScheduler+0xbc>)
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <vTaskStartScheduler+0xc0>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <vTaskStartScheduler+0xc4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026a6:	f001 f8ab 	bl	8003800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026aa:	e00d      	b.n	80026c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d109      	bne.n	80026c8 <vTaskStartScheduler+0xa8>
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e7fe      	b.n	80026c6 <vTaskStartScheduler+0xa6>
}
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	08003ff8 	.word	0x08003ff8
 80026d4:	08002ce5 	.word	0x08002ce5
 80026d8:	200007f8 	.word	0x200007f8
 80026dc:	200007f4 	.word	0x200007f4
 80026e0:	200007e0 	.word	0x200007e0
 80026e4:	200007d8 	.word	0x200007d8

080026e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <vTaskSuspendAll+0x18>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	4a03      	ldr	r2, [pc, #12]	; (8002700 <vTaskSuspendAll+0x18>)
 80026f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	200007fc 	.word	0x200007fc

08002704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <xTaskResumeAll+0x114>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <xTaskResumeAll+0x2a>
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	e7fe      	b.n	800272c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800272e:	f001 f905 	bl	800393c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002732:	4b39      	ldr	r3, [pc, #228]	; (8002818 <xTaskResumeAll+0x114>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3b01      	subs	r3, #1
 8002738:	4a37      	ldr	r2, [pc, #220]	; (8002818 <xTaskResumeAll+0x114>)
 800273a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <xTaskResumeAll+0x114>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d161      	bne.n	8002808 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <xTaskResumeAll+0x118>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05d      	beq.n	8002808 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800274c:	e02e      	b.n	80027ac <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800274e:	4b34      	ldr	r3, [pc, #208]	; (8002820 <xTaskResumeAll+0x11c>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3318      	adds	r3, #24
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f8a1 	bl	80018a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3304      	adds	r3, #4
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f89c 	bl	80018a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	2201      	movs	r2, #1
 8002770:	409a      	lsls	r2, r3
 8002772:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <xTaskResumeAll+0x120>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <xTaskResumeAll+0x120>)
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <xTaskResumeAll+0x124>)
 800278a:	441a      	add	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7ff f828 	bl	80017e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <xTaskResumeAll+0x128>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <xTaskResumeAll+0x12c>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <xTaskResumeAll+0x11c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1cc      	bne.n	800274e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80027ba:	f000 fb45 	bl	8002e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <xTaskResumeAll+0x130>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80027ca:	f000 f847 	bl	800285c <xTaskIncrementTick>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <xTaskResumeAll+0x12c>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3b01      	subs	r3, #1
 80027de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f1      	bne.n	80027ca <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <xTaskResumeAll+0x130>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <xTaskResumeAll+0x12c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <xTaskResumeAll+0x134>)
 80027fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002808:	f001 f8c6 	bl	8003998 <vPortExitCritical>

	return xAlreadyYielded;
 800280c:	68bb      	ldr	r3, [r7, #8]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200007fc 	.word	0x200007fc
 800281c:	200007d4 	.word	0x200007d4
 8002820:	20000794 	.word	0x20000794
 8002824:	200007dc 	.word	0x200007dc
 8002828:	200006d8 	.word	0x200006d8
 800282c:	200006d4 	.word	0x200006d4
 8002830:	200007e8 	.word	0x200007e8
 8002834:	200007e4 	.word	0x200007e4
 8002838:	e000ed04 	.word	0xe000ed04

0800283c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <xTaskGetTickCount+0x1c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002848:	687b      	ldr	r3, [r7, #4]
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200007d8 	.word	0x200007d8

0800285c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002866:	4b4e      	ldr	r3, [pc, #312]	; (80029a0 <xTaskIncrementTick+0x144>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 8087 	bne.w	800297e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <xTaskIncrementTick+0x148>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <xTaskIncrementTick+0x148>)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d11f      	bne.n	80028c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <xTaskIncrementTick+0x14c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <xTaskIncrementTick+0x46>
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	e7fe      	b.n	80028a0 <xTaskIncrementTick+0x44>
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	4b40      	ldr	r3, [pc, #256]	; (80029ac <xTaskIncrementTick+0x150>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a3e      	ldr	r2, [pc, #248]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <xTaskIncrementTick+0x150>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <xTaskIncrementTick+0x154>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <xTaskIncrementTick+0x154>)
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	f000 fac2 	bl	8002e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <xTaskIncrementTick+0x158>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d348      	bcc.n	8002960 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d104      	bne.n	80028e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <xTaskIncrementTick+0x158>)
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	601a      	str	r2, [r3, #0]
					break;
 80028e0:	e03e      	b.n	8002960 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <xTaskIncrementTick+0x14c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d203      	bcs.n	8002902 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80028fa:	4a2e      	ldr	r2, [pc, #184]	; (80029b4 <xTaskIncrementTick+0x158>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002900:	e02e      	b.n	8002960 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3304      	adds	r3, #4
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe ffcb 	bl	80018a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	3318      	adds	r3, #24
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe ffc2 	bl	80018a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <xTaskIncrementTick+0x15c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <xTaskIncrementTick+0x15c>)
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <xTaskIncrementTick+0x160>)
 800293e:	441a      	add	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7fe ff4e 	bl	80017e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <xTaskIncrementTick+0x164>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	429a      	cmp	r2, r3
 8002958:	d3b9      	bcc.n	80028ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800295a:	2301      	movs	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800295e:	e7b6      	b.n	80028ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <xTaskIncrementTick+0x164>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	4915      	ldr	r1, [pc, #84]	; (80029bc <xTaskIncrementTick+0x160>)
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d907      	bls.n	8002988 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	e004      	b.n	8002988 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <xTaskIncrementTick+0x168>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <xTaskIncrementTick+0x168>)
 8002986:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <xTaskIncrementTick+0x16c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002990:	2301      	movs	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002994:	697b      	ldr	r3, [r7, #20]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200007fc 	.word	0x200007fc
 80029a4:	200007d8 	.word	0x200007d8
 80029a8:	2000078c 	.word	0x2000078c
 80029ac:	20000790 	.word	0x20000790
 80029b0:	200007ec 	.word	0x200007ec
 80029b4:	200007f4 	.word	0x200007f4
 80029b8:	200007dc 	.word	0x200007dc
 80029bc:	200006d8 	.word	0x200006d8
 80029c0:	200006d4 	.word	0x200006d4
 80029c4:	200007e4 	.word	0x200007e4
 80029c8:	200007e8 	.word	0x200007e8

080029cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <vTaskSwitchContext+0xa0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <vTaskSwitchContext+0xa4>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80029e0:	e03e      	b.n	8002a60 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <vTaskSwitchContext+0xa4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <vTaskSwitchContext+0xa8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	f1c3 031f 	rsb	r3, r3, #31
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	491e      	ldr	r1, [pc, #120]	; (8002a78 <vTaskSwitchContext+0xac>)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	607b      	str	r3, [r7, #4]
 8002a24:	e7fe      	b.n	8002a24 <vTaskSwitchContext+0x58>
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <vTaskSwitchContext+0xac>)
 8002a32:	4413      	add	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3308      	adds	r3, #8
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d104      	bne.n	8002a56 <vTaskSwitchContext+0x8a>
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <vTaskSwitchContext+0xb0>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	200007fc 	.word	0x200007fc
 8002a70:	200007e8 	.word	0x200007e8
 8002a74:	200007dc 	.word	0x200007dc
 8002a78:	200006d8 	.word	0x200006d8
 8002a7c:	200006d4 	.word	0x200006d4

08002a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <vTaskPlaceOnEventList+0x24>
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e7fe      	b.n	8002aa2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <vTaskPlaceOnEventList+0x44>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe febf 	bl	8001830 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	6838      	ldr	r0, [r7, #0]
 8002ab6:	f000 fa89 	bl	8002fcc <prvAddCurrentTaskToDelayedList>
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200006d4 	.word	0x200006d4

08002ac8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <vTaskPlaceOnEventListRestricted+0x26>
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e7fe      	b.n	8002aec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <vTaskPlaceOnEventListRestricted+0x50>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3318      	adds	r3, #24
 8002af4:	4619      	mov	r1, r3
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7fe fe76 	bl	80017e8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	68b8      	ldr	r0, [r7, #8]
 8002b0c:	f000 fa5e 	bl	8002fcc <prvAddCurrentTaskToDelayedList>
	}
 8002b10:	bf00      	nop
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200006d4 	.word	0x200006d4

08002b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <xTaskRemoveFromEventList+0x2a>
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e7fe      	b.n	8002b44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	3318      	adds	r3, #24
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fea9 	bl	80018a2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <xTaskRemoveFromEventList+0xac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11c      	bne.n	8002b92 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fea0 	bl	80018a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	2201      	movs	r2, #1
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <xTaskRemoveFromEventList+0xb0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <xTaskRemoveFromEventList+0xb0>)
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <xTaskRemoveFromEventList+0xb4>)
 8002b82:	441a      	add	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7fe fe2c 	bl	80017e8 <vListInsertEnd>
 8002b90:	e005      	b.n	8002b9e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	3318      	adds	r3, #24
 8002b96:	4619      	mov	r1, r3
 8002b98:	480e      	ldr	r0, [pc, #56]	; (8002bd4 <xTaskRemoveFromEventList+0xb8>)
 8002b9a:	f7fe fe25 	bl	80017e8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <xTaskRemoveFromEventList+0xbc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d905      	bls.n	8002bb8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <xTaskRemoveFromEventList+0xc0>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e001      	b.n	8002bbc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002bbc:	697b      	ldr	r3, [r7, #20]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200007fc 	.word	0x200007fc
 8002bcc:	200007dc 	.word	0x200007dc
 8002bd0:	200006d8 	.word	0x200006d8
 8002bd4:	20000794 	.word	0x20000794
 8002bd8:	200006d4 	.word	0x200006d4
 8002bdc:	200007e8 	.word	0x200007e8

08002be0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <vTaskInternalSetTimeOutState+0x24>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <vTaskInternalSetTimeOutState+0x28>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	605a      	str	r2, [r3, #4]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	200007ec 	.word	0x200007ec
 8002c08:	200007d8 	.word	0x200007d8

08002c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <xTaskCheckForTimeOut+0x24>
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	e7fe      	b.n	8002c2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <xTaskCheckForTimeOut+0x3e>
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e7fe      	b.n	8002c48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002c4a:	f000 fe77 	bl	800393c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <xTaskCheckForTimeOut+0xb8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d102      	bne.n	8002c6e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	e023      	b.n	8002cb6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <xTaskCheckForTimeOut+0xbc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d007      	beq.n	8002c8a <xTaskCheckForTimeOut+0x7e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d302      	bcc.n	8002c8a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002c84:	2301      	movs	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e015      	b.n	8002cb6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d20b      	bcs.n	8002cac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	1ad2      	subs	r2, r2, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff ff9d 	bl	8002be0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e004      	b.n	8002cb6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002cb6:	f000 fe6f 	bl	8003998 <vPortExitCritical>

	return xReturn;
 8002cba:	69fb      	ldr	r3, [r7, #28]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200007d8 	.word	0x200007d8
 8002cc8:	200007ec 	.word	0x200007ec

08002ccc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <vTaskMissedYield+0x14>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	200007e8 	.word	0x200007e8

08002ce4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002cec:	f000 f852 	bl	8002d94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <prvIdleTask+0x28>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d9f9      	bls.n	8002cec <prvIdleTask+0x8>
			{
				taskYIELD();
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <prvIdleTask+0x2c>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002d08:	e7f0      	b.n	8002cec <prvIdleTask+0x8>
 8002d0a:	bf00      	nop
 8002d0c:	200006d8 	.word	0x200006d8
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	e00c      	b.n	8002d3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <prvInitialiseTaskLists+0x60>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fd2d 	bl	800178e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3301      	adds	r3, #1
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d9ef      	bls.n	8002d20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d40:	480d      	ldr	r0, [pc, #52]	; (8002d78 <prvInitialiseTaskLists+0x64>)
 8002d42:	f7fe fd24 	bl	800178e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <prvInitialiseTaskLists+0x68>)
 8002d48:	f7fe fd21 	bl	800178e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <prvInitialiseTaskLists+0x6c>)
 8002d4e:	f7fe fd1e 	bl	800178e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d52:	480c      	ldr	r0, [pc, #48]	; (8002d84 <prvInitialiseTaskLists+0x70>)
 8002d54:	f7fe fd1b 	bl	800178e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d58:	480b      	ldr	r0, [pc, #44]	; (8002d88 <prvInitialiseTaskLists+0x74>)
 8002d5a:	f7fe fd18 	bl	800178e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <prvInitialiseTaskLists+0x78>)
 8002d60:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <prvInitialiseTaskLists+0x64>)
 8002d62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <prvInitialiseTaskLists+0x7c>)
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <prvInitialiseTaskLists+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200006d8 	.word	0x200006d8
 8002d78:	20000764 	.word	0x20000764
 8002d7c:	20000778 	.word	0x20000778
 8002d80:	20000794 	.word	0x20000794
 8002d84:	200007a8 	.word	0x200007a8
 8002d88:	200007c0 	.word	0x200007c0
 8002d8c:	2000078c 	.word	0x2000078c
 8002d90:	20000790 	.word	0x20000790

08002d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d9a:	e019      	b.n	8002dd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d9c:	f000 fdce 	bl	800393c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <prvCheckTasksWaitingTermination+0x4c>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fd78 	bl	80018a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <prvCheckTasksWaitingTermination+0x50>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <prvCheckTasksWaitingTermination+0x50>)
 8002dba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <prvCheckTasksWaitingTermination+0x54>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <prvCheckTasksWaitingTermination+0x54>)
 8002dc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002dc6:	f000 fde7 	bl	8003998 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f80e 	bl	8002dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <prvCheckTasksWaitingTermination+0x54>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e1      	bne.n	8002d9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200007a8 	.word	0x200007a8
 8002de4:	200007d4 	.word	0x200007d4
 8002de8:	200007bc 	.word	0x200007bc

08002dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 ff76 	bl	8003cf4 <vPortFree>
				vPortFree( pxTCB );
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 ff73 	bl	8003cf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e0e:	e017      	b.n	8002e40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d103      	bne.n	8002e22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 ff6a 	bl	8003cf4 <vPortFree>
	}
 8002e20:	e00e      	b.n	8002e40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d009      	beq.n	8002e40 <prvDeleteTCB+0x54>
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e7fe      	b.n	8002e3e <prvDeleteTCB+0x52>
	}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <prvResetNextTaskUnblockTime+0x38>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <prvResetNextTaskUnblockTime+0x3c>)
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e60:	e008      	b.n	8002e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <prvResetNextTaskUnblockTime+0x38>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <prvResetNextTaskUnblockTime+0x3c>)
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	2000078c 	.word	0x2000078c
 8002e84:	200007f4 	.word	0x200007f4

08002e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <xTaskGetSchedulerState+0x34>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e96:	2301      	movs	r3, #1
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	e008      	b.n	8002eae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <xTaskGetSchedulerState+0x38>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	e001      	b.n	8002eae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002eae:	687b      	ldr	r3, [r7, #4]
	}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	200007e0 	.word	0x200007e0
 8002ec0:	200007fc 	.word	0x200007fc

08002ec4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06c      	beq.n	8002fb4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <xTaskPriorityDisinherit+0xfc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d009      	beq.n	8002ef8 <xTaskPriorityDisinherit+0x34>
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e7fe      	b.n	8002ef6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <xTaskPriorityDisinherit+0x50>
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	e7fe      	b.n	8002f12 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f18:	1e5a      	subs	r2, r3, #1
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d044      	beq.n	8002fb4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d140      	bne.n	8002fb4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3304      	adds	r3, #4
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fcb3 	bl	80018a2 <uxListRemove>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d115      	bne.n	8002f6e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f46:	491f      	ldr	r1, [pc, #124]	; (8002fc4 <xTaskPriorityDisinherit+0x100>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10a      	bne.n	8002f6e <xTaskPriorityDisinherit+0xaa>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <xTaskPriorityDisinherit+0x104>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <xTaskPriorityDisinherit+0x104>)
 8002f6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	f1c3 0207 	rsb	r2, r3, #7
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	2201      	movs	r2, #1
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <xTaskPriorityDisinherit+0x104>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <xTaskPriorityDisinherit+0x104>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <xTaskPriorityDisinherit+0x100>)
 8002fa2:	441a      	add	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7fe fc1c 	bl	80017e8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002fb4:	697b      	ldr	r3, [r7, #20]
	}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	200006d4 	.word	0x200006d4
 8002fc4:	200006d8 	.word	0x200006d8
 8002fc8:	200007dc 	.word	0x200007dc

08002fcc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fc5d 	bl	80018a2 <uxListRemove>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4013      	ands	r3, r2
 8003002:	4a20      	ldr	r2, [pc, #128]	; (8003084 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003004:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d10a      	bne.n	8003024 <prvAddCurrentTaskToDelayedList+0x58>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3304      	adds	r3, #4
 800301a:	4619      	mov	r1, r3
 800301c:	481a      	ldr	r0, [pc, #104]	; (8003088 <prvAddCurrentTaskToDelayedList+0xbc>)
 800301e:	f7fe fbe3 	bl	80017e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003022:	e026      	b.n	8003072 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <prvAddCurrentTaskToDelayedList+0xb4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d209      	bcs.n	8003050 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <prvAddCurrentTaskToDelayedList+0xc0>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3304      	adds	r3, #4
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f7fe fbf1 	bl	8001830 <vListInsert>
}
 800304e:	e010      	b.n	8003072 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3304      	adds	r3, #4
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f7fe fbe7 	bl	8001830 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d202      	bcs.n	8003072 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800306c:	4a09      	ldr	r2, [pc, #36]	; (8003094 <prvAddCurrentTaskToDelayedList+0xc8>)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6013      	str	r3, [r2, #0]
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200007d8 	.word	0x200007d8
 8003080:	200006d4 	.word	0x200006d4
 8003084:	200007dc 	.word	0x200007dc
 8003088:	200007c0 	.word	0x200007c0
 800308c:	20000790 	.word	0x20000790
 8003090:	2000078c 	.word	0x2000078c
 8003094:	200007f4 	.word	0x200007f4

08003098 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80030a2:	f000 fae7 	bl	8003674 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <xTimerCreateTimerTask+0x80>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d021      	beq.n	80030f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80030b6:	1d3a      	adds	r2, r7, #4
 80030b8:	f107 0108 	add.w	r1, r7, #8
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fa1f 	bl	8000504 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	9202      	str	r2, [sp, #8]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	2302      	movs	r3, #2
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	460a      	mov	r2, r1
 80030d8:	4910      	ldr	r1, [pc, #64]	; (800311c <xTimerCreateTimerTask+0x84>)
 80030da:	4811      	ldr	r0, [pc, #68]	; (8003120 <xTimerCreateTimerTask+0x88>)
 80030dc:	f7ff f8dc 	bl	8002298 <xTaskCreateStatic>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <xTimerCreateTimerTask+0x8c>)
 80030e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <xTimerCreateTimerTask+0x8c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80030ee:	2301      	movs	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d109      	bne.n	800310c <xTimerCreateTimerTask+0x74>
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e7fe      	b.n	800310a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800310c:	697b      	ldr	r3, [r7, #20]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000830 	.word	0x20000830
 800311c:	08004000 	.word	0x08004000
 8003120:	08003259 	.word	0x08003259
 8003124:	20000834 	.word	0x20000834

08003128 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <xTimerGenericCommand+0x2c>
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	e7fe      	b.n	8003152 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <xTimerGenericCommand+0x94>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02a      	beq.n	80031b2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	dc18      	bgt.n	80031a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800316e:	f7ff fe8b 	bl	8002e88 <xTaskGetSchedulerState>
 8003172:	4603      	mov	r3, r0
 8003174:	2b02      	cmp	r3, #2
 8003176:	d109      	bne.n	800318c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <xTimerGenericCommand+0x94>)
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	f107 0114 	add.w	r1, r7, #20
 8003180:	2300      	movs	r3, #0
 8003182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003184:	f7fe fcb2 	bl	8001aec <xQueueGenericSend>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24
 800318a:	e012      	b.n	80031b2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <xTimerGenericCommand+0x94>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	f107 0114 	add.w	r1, r7, #20
 8003194:	2300      	movs	r3, #0
 8003196:	2200      	movs	r2, #0
 8003198:	f7fe fca8 	bl	8001aec <xQueueGenericSend>
 800319c:	6278      	str	r0, [r7, #36]	; 0x24
 800319e:	e008      	b.n	80031b2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <xTimerGenericCommand+0x94>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	f107 0114 	add.w	r1, r7, #20
 80031a8:	2300      	movs	r3, #0
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	f7fe fd98 	bl	8001ce0 <xQueueGenericSendFromISR>
 80031b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000830 	.word	0x20000830

080031c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <prvProcessExpiredTimer+0x94>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fb62 	bl	80018a2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d021      	beq.n	8003230 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	6978      	ldr	r0, [r7, #20]
 80031fa:	f000 f8d1 	bl	80033a0 <prvInsertTimerInActiveList>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01e      	beq.n	8003242 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003204:	2300      	movs	r3, #0
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	2100      	movs	r1, #0
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff ff8a 	bl	8003128 <xTimerGenericCommand>
 8003214:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d112      	bne.n	8003242 <prvProcessExpiredTimer+0x82>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e7fe      	b.n	800322e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	b2da      	uxtb	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	4798      	blx	r3
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000828 	.word	0x20000828

08003258 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003260:	f107 0308 	add.w	r3, r7, #8
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f857 	bl	8003318 <prvGetNextExpireTime>
 800326a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4619      	mov	r1, r3
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f803 	bl	800327c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003276:	f000 f8d5 	bl	8003424 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800327a:	e7f1      	b.n	8003260 <prvTimerTask+0x8>

0800327c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003286:	f7ff fa2f 	bl	80026e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f866 	bl	8003360 <prvSampleTimeNow>
 8003294:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d130      	bne.n	80032fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <prvProcessTimerOrBlockTask+0x3c>
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d806      	bhi.n	80032b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80032aa:	f7ff fa2b 	bl	8002704 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80032ae:	68f9      	ldr	r1, [r7, #12]
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff85 	bl	80031c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80032b6:	e024      	b.n	8003302 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <prvProcessTimerOrBlockTask+0x90>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <prvProcessTimerOrBlockTask+0x50>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <prvProcessTimerOrBlockTask+0x52>
 80032cc:	2300      	movs	r3, #0
 80032ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80032d0:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <prvProcessTimerOrBlockTask+0x94>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	f7fe ffa7 	bl	8002230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80032e2:	f7ff fa0f 	bl	8002704 <xTaskResumeAll>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <prvProcessTimerOrBlockTask+0x98>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
}
 80032fc:	e001      	b.n	8003302 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80032fe:	f7ff fa01 	bl	8002704 <xTaskResumeAll>
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000082c 	.word	0x2000082c
 8003310:	20000830 	.word	0x20000830
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003320:	4b0e      	ldr	r3, [pc, #56]	; (800335c <prvGetNextExpireTime+0x44>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <prvGetNextExpireTime+0x16>
 800332a:	2201      	movs	r2, #1
 800332c:	e000      	b.n	8003330 <prvGetNextExpireTime+0x18>
 800332e:	2200      	movs	r2, #0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <prvGetNextExpireTime+0x44>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e001      	b.n	800334c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800334c:	68fb      	ldr	r3, [r7, #12]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000828 	.word	0x20000828

08003360 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003368:	f7ff fa68 	bl	800283c <xTaskGetTickCount>
 800336c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <prvSampleTimeNow+0x3c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d205      	bcs.n	8003384 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003378:	f000 f918 	bl	80035ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e002      	b.n	800338a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <prvSampleTimeNow+0x3c>)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000838 	.word	0x20000838

080033a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d812      	bhi.n	80033ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	1ad2      	subs	r2, r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e01b      	b.n	8003412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <prvInsertTimerInActiveList+0x7c>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f7fe fa23 	bl	8001830 <vListInsert>
 80033ea:	e012      	b.n	8003412 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d206      	bcs.n	8003402 <prvInsertTimerInActiveList+0x62>
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e007      	b.n	8003412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <prvInsertTimerInActiveList+0x80>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7fe fa0f 	bl	8001830 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	2000082c 	.word	0x2000082c
 8003420:	20000828 	.word	0x20000828

08003424 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800342a:	e0ac      	b.n	8003586 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f2c0 80a8 	blt.w	8003584 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	3304      	adds	r3, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fa2c 	bl	80018a2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff87 	bl	8003360 <prvSampleTimeNow>
 8003452:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b09      	cmp	r3, #9
 8003458:	f200 8095 	bhi.w	8003586 <prvProcessReceivedCommands+0x162>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <prvProcessReceivedCommands+0x40>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	0800348d 	.word	0x0800348d
 8003468:	0800348d 	.word	0x0800348d
 800346c:	0800348d 	.word	0x0800348d
 8003470:	080034ff 	.word	0x080034ff
 8003474:	08003513 	.word	0x08003513
 8003478:	0800355b 	.word	0x0800355b
 800347c:	0800348d 	.word	0x0800348d
 8003480:	0800348d 	.word	0x0800348d
 8003484:	080034ff 	.word	0x080034ff
 8003488:	08003513 	.word	0x08003513
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	18d1      	adds	r1, r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a3a      	ldr	r2, [r7, #32]
 80034aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034ac:	f7ff ff78 	bl	80033a0 <prvInsertTimerInActiveList>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d067      	beq.n	8003586 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d05c      	beq.n	8003586 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	441a      	add	r2, r3
 80034d4:	2300      	movs	r3, #0
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2300      	movs	r3, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034de:	f7ff fe23 	bl	8003128 <xTimerGenericCommand>
 80034e2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d14d      	bne.n	8003586 <prvProcessReceivedCommands+0x162>
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	e7fe      	b.n	80034fc <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	b2da      	uxtb	r2, r3
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8003510:	e039      	b.n	8003586 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	b2da      	uxtb	r2, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d109      	bne.n	8003546 <prvProcessReceivedCommands+0x122>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e7fe      	b.n	8003544 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	18d1      	adds	r1, r2, r3
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003554:	f7ff ff24 	bl	80033a0 <prvInsertTimerInActiveList>
					break;
 8003558:	e015      	b.n	8003586 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800356a:	f000 fbc3 	bl	8003cf4 <vPortFree>
 800356e:	e00a      	b.n	8003586 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003582:	e000      	b.n	8003586 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003584:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <prvProcessReceivedCommands+0x184>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f107 0108 	add.w	r1, r7, #8
 800358e:	2200      	movs	r2, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe fc39 	bl	8001e08 <xQueueReceive>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f af47 	bne.w	800342c <prvProcessReceivedCommands+0x8>
	}
}
 800359e:	bf00      	nop
 80035a0:	3728      	adds	r7, #40	; 0x28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000830 	.word	0x20000830

080035ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035b2:	e047      	b.n	8003644 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <prvSwitchTimerLists+0xc0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035be:	4b2b      	ldr	r3, [pc, #172]	; (800366c <prvSwitchTimerLists+0xc0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe f968 	bl	80018a2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02d      	beq.n	8003644 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d90e      	bls.n	8003618 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003606:	4b19      	ldr	r3, [pc, #100]	; (800366c <prvSwitchTimerLists+0xc0>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7fe f90d 	bl	8001830 <vListInsert>
 8003616:	e015      	b.n	8003644 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	2100      	movs	r1, #0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff fd80 	bl	8003128 <xTimerGenericCommand>
 8003628:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d109      	bne.n	8003644 <prvSwitchTimerLists+0x98>
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	e7fe      	b.n	8003642 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <prvSwitchTimerLists+0xc0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1b2      	bne.n	80035b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <prvSwitchTimerLists+0xc0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <prvSwitchTimerLists+0xc4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <prvSwitchTimerLists+0xc0>)
 800365a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800365c:	4a04      	ldr	r2, [pc, #16]	; (8003670 <prvSwitchTimerLists+0xc4>)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	6013      	str	r3, [r2, #0]
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000828 	.word	0x20000828
 8003670:	2000082c 	.word	0x2000082c

08003674 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800367a:	f000 f95f 	bl	800393c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d120      	bne.n	80036c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <prvCheckForValidListAndQueue+0x64>)
 8003688:	f7fe f881 	bl	800178e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800368c:	4813      	ldr	r0, [pc, #76]	; (80036dc <prvCheckForValidListAndQueue+0x68>)
 800368e:	f7fe f87e 	bl	800178e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <prvCheckForValidListAndQueue+0x6c>)
 8003694:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <prvCheckForValidListAndQueue+0x64>)
 8003696:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <prvCheckForValidListAndQueue+0x70>)
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <prvCheckForValidListAndQueue+0x68>)
 800369c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <prvCheckForValidListAndQueue+0x74>)
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <prvCheckForValidListAndQueue+0x78>)
 80036a6:	210c      	movs	r1, #12
 80036a8:	200a      	movs	r0, #10
 80036aa:	f7fe f98d 	bl	80019c8 <xQueueGenericCreateStatic>
 80036ae:	4602      	mov	r2, r0
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 80036b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	490b      	ldr	r1, [pc, #44]	; (80036f0 <prvCheckForValidListAndQueue+0x7c>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fd8c 	bl	80021e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036c8:	f000 f966 	bl	8003998 <vPortExitCritical>
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000830 	.word	0x20000830
 80036d8:	20000800 	.word	0x20000800
 80036dc:	20000814 	.word	0x20000814
 80036e0:	20000828 	.word	0x20000828
 80036e4:	2000082c 	.word	0x2000082c
 80036e8:	200008b4 	.word	0x200008b4
 80036ec:	2000083c 	.word	0x2000083c
 80036f0:	08004008 	.word	0x08004008

080036f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b04      	subs	r3, #4
 8003704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800370c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3b04      	subs	r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b04      	subs	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <pxPortInitialiseStack+0x64>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3b14      	subs	r3, #20
 800372e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3b04      	subs	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f06f 0202 	mvn.w	r2, #2
 8003742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3b20      	subs	r3, #32
 8003748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	0800375d 	.word	0x0800375d

0800375c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <prvTaskExitError+0x50>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d009      	beq.n	8003784 <prvTaskExitError+0x28>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e7fe      	b.n	8003782 <prvTaskExitError+0x26>
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003796:	bf00      	nop
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0fc      	beq.n	8003798 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	2000000c 	.word	0x2000000c

080037b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <pxCurrentTCBConst2>)
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	6808      	ldr	r0, [r1, #0]
 80037b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ba:	f380 8809 	msr	PSP, r0
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8811 	msr	BASEPRI, r0
 80037ca:	4770      	bx	lr
 80037cc:	f3af 8000 	nop.w

080037d0 <pxCurrentTCBConst2>:
 80037d0:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop

080037d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <prvPortStartFirstTask+0x24>)
 80037da:	6800      	ldr	r0, [r0, #0]
 80037dc:	6800      	ldr	r0, [r0, #0]
 80037de:	f380 8808 	msr	MSP, r0
 80037e2:	f04f 0000 	mov.w	r0, #0
 80037e6:	f380 8814 	msr	CONTROL, r0
 80037ea:	b662      	cpsie	i
 80037ec:	b661      	cpsie	f
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	df00      	svc	0
 80037f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037fa:	bf00      	nop
 80037fc:	e000ed08 	.word	0xe000ed08

08003800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003806:	4b44      	ldr	r3, [pc, #272]	; (8003918 <xPortStartScheduler+0x118>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a44      	ldr	r2, [pc, #272]	; (800391c <xPortStartScheduler+0x11c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d109      	bne.n	8003824 <xPortStartScheduler+0x24>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e7fe      	b.n	8003822 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003824:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <xPortStartScheduler+0x118>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <xPortStartScheduler+0x120>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d109      	bne.n	8003842 <xPortStartScheduler+0x42>
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e7fe      	b.n	8003840 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <xPortStartScheduler+0x124>)
 8003844:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b30      	ldr	r3, [pc, #192]	; (8003928 <xPortStartScheduler+0x128>)
 8003868:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800386a:	4b30      	ldr	r3, [pc, #192]	; (800392c <xPortStartScheduler+0x12c>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003870:	e009      	b.n	8003886 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003872:	4b2e      	ldr	r3, [pc, #184]	; (800392c <xPortStartScheduler+0x12c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3b01      	subs	r3, #1
 8003878:	4a2c      	ldr	r2, [pc, #176]	; (800392c <xPortStartScheduler+0x12c>)
 800387a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d0ef      	beq.n	8003872 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <xPortStartScheduler+0x12c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f1c3 0307 	rsb	r3, r3, #7
 800389a:	2b04      	cmp	r3, #4
 800389c:	d009      	beq.n	80038b2 <xPortStartScheduler+0xb2>
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	e7fe      	b.n	80038b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038b2:	4b1e      	ldr	r3, [pc, #120]	; (800392c <xPortStartScheduler+0x12c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <xPortStartScheduler+0x12c>)
 80038ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <xPortStartScheduler+0x12c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038c4:	4a19      	ldr	r2, [pc, #100]	; (800392c <xPortStartScheduler+0x12c>)
 80038c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038d0:	4b17      	ldr	r3, [pc, #92]	; (8003930 <xPortStartScheduler+0x130>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a16      	ldr	r2, [pc, #88]	; (8003930 <xPortStartScheduler+0x130>)
 80038d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <xPortStartScheduler+0x130>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <xPortStartScheduler+0x130>)
 80038e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038e8:	f000 f8d6 	bl	8003a98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <xPortStartScheduler+0x134>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038f2:	f000 f8f5 	bl	8003ae0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <xPortStartScheduler+0x138>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <xPortStartScheduler+0x138>)
 80038fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003900:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003902:	f7ff ff69 	bl	80037d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003906:	f7ff f861 	bl	80029cc <vTaskSwitchContext>
	prvTaskExitError();
 800390a:	f7ff ff27 	bl	800375c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	e000ed00 	.word	0xe000ed00
 800391c:	410fc271 	.word	0x410fc271
 8003920:	410fc270 	.word	0x410fc270
 8003924:	e000e400 	.word	0xe000e400
 8003928:	200008fc 	.word	0x200008fc
 800392c:	20000900 	.word	0x20000900
 8003930:	e000ed20 	.word	0xe000ed20
 8003934:	2000000c 	.word	0x2000000c
 8003938:	e000ef34 	.word	0xe000ef34

0800393c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <vPortEnterCritical+0x54>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <vPortEnterCritical+0x54>)
 800395c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <vPortEnterCritical+0x54>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d10e      	bne.n	8003984 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <vPortEnterCritical+0x58>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <vPortEnterCritical+0x48>
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	e7fe      	b.n	8003982 <vPortEnterCritical+0x46>
	}
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	2000000c 	.word	0x2000000c
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <vPortExitCritical+0x4c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <vPortExitCritical+0x22>
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	e7fe      	b.n	80039b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <vPortExitCritical+0x4c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3b01      	subs	r3, #1
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <vPortExitCritical+0x4c>)
 80039c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <vPortExitCritical+0x4c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d104      	bne.n	80039d6 <vPortExitCritical+0x3e>
 80039cc:	2300      	movs	r3, #0
 80039ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c
	...

080039f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039f0:	f3ef 8009 	mrs	r0, PSP
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <pxCurrentTCBConst>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f01e 0f10 	tst.w	lr, #16
 8003a00:	bf08      	it	eq
 8003a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0a:	6010      	str	r0, [r2, #0]
 8003a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a14:	f380 8811 	msr	BASEPRI, r0
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f7fe ffd4 	bl	80029cc <vTaskSwitchContext>
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f380 8811 	msr	BASEPRI, r0
 8003a2c:	bc09      	pop	{r0, r3}
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	6808      	ldr	r0, [r1, #0]
 8003a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a36:	f01e 0f10 	tst.w	lr, #16
 8003a3a:	bf08      	it	eq
 8003a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a40:	f380 8809 	msr	PSP, r0
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	f3af 8000 	nop.w

08003a50 <pxCurrentTCBConst>:
 8003a50:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop

08003a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a70:	f7fe fef4 	bl	800285c <xTaskIncrementTick>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <xPortSysTickHandler+0x3c>)
 8003a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	e000ed04 	.word	0xe000ed04

08003a98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <vPortSetupTimerInterrupt+0x34>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <vPortSetupTimerInterrupt+0x38>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <vPortSetupTimerInterrupt+0x3c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <vPortSetupTimerInterrupt+0x40>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	099b      	lsrs	r3, r3, #6
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <vPortSetupTimerInterrupt+0x44>)
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003aba:	4b04      	ldr	r3, [pc, #16]	; (8003acc <vPortSetupTimerInterrupt+0x34>)
 8003abc:	2207      	movs	r2, #7
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e010 	.word	0xe000e010
 8003ad0:	e000e018 	.word	0xe000e018
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	10624dd3 	.word	0x10624dd3
 8003adc:	e000e014 	.word	0xe000e014

08003ae0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ae0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003af0 <vPortEnableVFP+0x10>
 8003ae4:	6801      	ldr	r1, [r0, #0]
 8003ae6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003aea:	6001      	str	r1, [r0, #0]
 8003aec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003aee:	bf00      	nop
 8003af0:	e000ed88 	.word	0xe000ed88

08003af4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003afa:	f3ef 8305 	mrs	r3, IPSR
 8003afe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	d913      	bls.n	8003b2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b06:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <vPortValidateInterruptPriority+0x6c>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <vPortValidateInterruptPriority+0x70>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	7afa      	ldrb	r2, [r7, #11]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d209      	bcs.n	8003b2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	e7fe      	b.n	8003b2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <vPortValidateInterruptPriority+0x74>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <vPortValidateInterruptPriority+0x78>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d909      	bls.n	8003b52 <vPortValidateInterruptPriority+0x5e>
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	e7fe      	b.n	8003b50 <vPortValidateInterruptPriority+0x5c>
	}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000e3f0 	.word	0xe000e3f0
 8003b64:	200008fc 	.word	0x200008fc
 8003b68:	e000ed0c 	.word	0xe000ed0c
 8003b6c:	20000900 	.word	0x20000900

08003b70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b7c:	f7fe fdb4 	bl	80026e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b80:	4b57      	ldr	r3, [pc, #348]	; (8003ce0 <pvPortMalloc+0x170>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b88:	f000 f90c 	bl	8003da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b8c:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <pvPortMalloc+0x174>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 808c 	bne.w	8003cb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d013      	beq.n	8003bda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f023 0307 	bic.w	r3, r3, #7
 8003bb8:	3308      	adds	r3, #8
 8003bba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <pvPortMalloc+0x6a>
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	e7fe      	b.n	8003bd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d068      	beq.n	8003cb2 <pvPortMalloc+0x142>
 8003be0:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <pvPortMalloc+0x178>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d863      	bhi.n	8003cb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003bea:	4b40      	ldr	r3, [pc, #256]	; (8003cec <pvPortMalloc+0x17c>)
 8003bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003bee:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <pvPortMalloc+0x17c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bf4:	e004      	b.n	8003c00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d903      	bls.n	8003c12 <pvPortMalloc+0xa2>
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f1      	bne.n	8003bf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c12:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <pvPortMalloc+0x170>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d04a      	beq.n	8003cb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2208      	movs	r2, #8
 8003c22:	4413      	add	r3, r2
 8003c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad2      	subs	r2, r2, r3
 8003c36:	2308      	movs	r3, #8
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d91e      	bls.n	8003c7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <pvPortMalloc+0xf4>
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	e7fe      	b.n	8003c62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	1ad2      	subs	r2, r2, r3
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c76:	69b8      	ldr	r0, [r7, #24]
 8003c78:	f000 f8f6 	bl	8003e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <pvPortMalloc+0x178>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <pvPortMalloc+0x178>)
 8003c88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <pvPortMalloc+0x178>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <pvPortMalloc+0x180>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d203      	bcs.n	8003c9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <pvPortMalloc+0x178>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <pvPortMalloc+0x180>)
 8003c9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <pvPortMalloc+0x174>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003cb2:	f7fe fd27 	bl	8002704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d009      	beq.n	8003cd4 <pvPortMalloc+0x164>
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e7fe      	b.n	8003cd2 <pvPortMalloc+0x162>
	return pvReturn;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3728      	adds	r7, #40	; 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000450c 	.word	0x2000450c
 8003ce4:	20004518 	.word	0x20004518
 8003ce8:	20004510 	.word	0x20004510
 8003cec:	20004504 	.word	0x20004504
 8003cf0:	20004514 	.word	0x20004514

08003cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d046      	beq.n	8003d94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d06:	2308      	movs	r3, #8
 8003d08:	425b      	negs	r3, r3
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <vPortFree+0xa8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <vPortFree+0x42>
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e7fe      	b.n	8003d34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <vPortFree+0x5e>
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	e7fe      	b.n	8003d50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <vPortFree+0xa8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d019      	beq.n	8003d94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d115      	bne.n	8003d94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <vPortFree+0xa8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	401a      	ands	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d78:	f7fe fcb6 	bl	80026e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <vPortFree+0xac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4413      	add	r3, r2
 8003d86:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <vPortFree+0xac>)
 8003d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d8a:	6938      	ldr	r0, [r7, #16]
 8003d8c:	f000 f86c 	bl	8003e68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d90:	f7fe fcb8 	bl	8002704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20004518 	.word	0x20004518
 8003da0:	20004510 	.word	0x20004510

08003da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003daa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003db0:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <prvHeapInit+0xac>)
 8003db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00c      	beq.n	8003dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3307      	adds	r3, #7
 8003dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0307 	bic.w	r3, r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <prvHeapInit+0xac>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <prvHeapInit+0xb0>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003de2:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <prvHeapInit+0xb0>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4413      	add	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003df0:	2208      	movs	r2, #8
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0307 	bic.w	r3, r3, #7
 8003dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a15      	ldr	r2, [pc, #84]	; (8003e58 <prvHeapInit+0xb4>)
 8003e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <prvHeapInit+0xb4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <prvHeapInit+0xb4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <prvHeapInit+0xb4>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <prvHeapInit+0xb8>)
 8003e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <prvHeapInit+0xbc>)
 8003e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <prvHeapInit+0xc0>)
 8003e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	20000904 	.word	0x20000904
 8003e54:	20004504 	.word	0x20004504
 8003e58:	2000450c 	.word	0x2000450c
 8003e5c:	20004514 	.word	0x20004514
 8003e60:	20004510 	.word	0x20004510
 8003e64:	20004518 	.word	0x20004518

08003e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <prvInsertBlockIntoFreeList+0xac>)
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e002      	b.n	8003e7c <prvInsertBlockIntoFreeList+0x14>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d8f7      	bhi.n	8003e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4413      	add	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d108      	bne.n	8003eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d118      	bne.n	8003ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d00d      	beq.n	8003ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e008      	b.n	8003ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	e003      	b.n	8003ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d002      	beq.n	8003f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20004504 	.word	0x20004504
 8003f18:	2000450c 	.word	0x2000450c

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4e0d      	ldr	r6, [pc, #52]	; (8003f54 <__libc_init_array+0x38>)
 8003f20:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f22:	1ba4      	subs	r4, r4, r6
 8003f24:	10a4      	asrs	r4, r4, #2
 8003f26:	2500      	movs	r5, #0
 8003f28:	42a5      	cmp	r5, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	4e0b      	ldr	r6, [pc, #44]	; (8003f5c <__libc_init_array+0x40>)
 8003f2e:	4c0c      	ldr	r4, [pc, #48]	; (8003f60 <__libc_init_array+0x44>)
 8003f30:	f000 f82c 	bl	8003f8c <_init>
 8003f34:	1ba4      	subs	r4, r4, r6
 8003f36:	10a4      	asrs	r4, r4, #2
 8003f38:	2500      	movs	r5, #0
 8003f3a:	42a5      	cmp	r5, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f44:	4798      	blx	r3
 8003f46:	3501      	adds	r5, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f4e:	4798      	blx	r3
 8003f50:	3501      	adds	r5, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	08004028 	.word	0x08004028
 8003f58:	08004028 	.word	0x08004028
 8003f5c:	08004028 	.word	0x08004028
 8003f60:	0800402c 	.word	0x0800402c

08003f64 <memcpy>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	1e43      	subs	r3, r0, #1
 8003f68:	440a      	add	r2, r1
 8003f6a:	4291      	cmp	r1, r2
 8003f6c:	d100      	bne.n	8003f70 <memcpy+0xc>
 8003f6e:	bd10      	pop	{r4, pc}
 8003f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f78:	e7f7      	b.n	8003f6a <memcpy+0x6>

08003f7a <memset>:
 8003f7a:	4402      	add	r2, r0
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d100      	bne.n	8003f84 <memset+0xa>
 8003f82:	4770      	bx	lr
 8003f84:	f803 1b01 	strb.w	r1, [r3], #1
 8003f88:	e7f9      	b.n	8003f7e <memset+0x4>
	...

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	bf00      	nop
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
