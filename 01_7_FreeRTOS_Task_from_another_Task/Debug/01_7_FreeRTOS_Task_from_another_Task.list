
01_7_FreeRTOS_Task_from_another_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003ad0  08003ad0  00013ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004560  20000070  08003c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045d0  08003c68  000245d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bddf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d02  00000000  00000000  0002be7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002db88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021cd9  00000000  00000000  0002ea30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d0e  00000000  00000000  00050709  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7a6b  00000000  00000000  00058417  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fe82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002308  00000000  00000000  0011ff00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ab8 	.word	0x08003ab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003ab8 	.word	0x08003ab8

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	200000e0 	.word	0x200000e0

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000222:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	200002e0 	.word	0x200002e0
 8000234:	20000334 	.word	0x20000334

08000238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d013      	beq.n	8000278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00b      	beq.n	8000278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000260:	e000      	b.n	8000264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800026e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	b2d2      	uxtb	r2, r2
 8000276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000278:	687b      	ldr	r3, [r7, #4]
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <_write>:
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core

#include <stdio.h>

int _write(int file,char *ptr, int len)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0
 800028c:	60f8      	str	r0, [r7, #12]
 800028e:	60b9      	str	r1, [r7, #8]
 8000290:	607a      	str	r2, [r7, #4]
	int i=0;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e009      	b.n	80002b0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	60ba      	str	r2, [r7, #8]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffc7 	bl	8000238 <ITM_SendChar>
	for(i=0;i<len;i++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf1      	blt.n	800029c <_write+0x16>
	return len;
 80002b8:	687b      	ldr	r3, [r7, #4]

}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <main>:
void  vRedLedControllerTask(void *pvParameters);
void  vOrangeLedControllerTask(void *pvParameters);
void  vGreenLedControllerTask(void *pvParameters);

int main()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af02      	add	r7, sp, #8
	 GPIO_Init();
 80002ca:	f000 f8af 	bl	800042c <GPIO_Init>

	 xTaskCreate(vBlueLedControllerTask,
 80002ce:	2300      	movs	r3, #0
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2300      	movs	r3, #0
 80002d8:	2264      	movs	r2, #100	; 0x64
 80002da:	4905      	ldr	r1, [pc, #20]	; (80002f0 <main+0x2c>)
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <main+0x30>)
 80002de:	f001 f98b 	bl	80015f8 <xTaskCreate>
								100,
								NULL,
								1,
								NULL
								);
	 printf("Lets Begins\n");
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <main+0x34>)
 80002e4:	f002 ffdc 	bl	80032a0 <puts>


   vTaskStartScheduler();
 80002e8:	f001 fabc 	bl	8001864 <vTaskStartScheduler>

	 while(1){};
 80002ec:	e7fe      	b.n	80002ec <main+0x28>
 80002ee:	bf00      	nop
 80002f0:	08003ad0 	.word	0x08003ad0
 80002f4:	080002fd 	.word	0x080002fd
 80002f8:	08003ae4 	.word	0x08003ae4

080002fc <vBlueLedControllerTask>:
}



void  vBlueLedControllerTask(void *pvParameters)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af02      	add	r7, sp, #8
 8000302:	6078      	str	r0, [r7, #4]
	int i;

		 xTaskCreate(vRedLedControllerTask,
 8000304:	2300      	movs	r3, #0
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	2301      	movs	r3, #1
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2300      	movs	r3, #0
 800030e:	2264      	movs	r2, #100	; 0x64
 8000310:	4910      	ldr	r1, [pc, #64]	; (8000354 <vBlueLedControllerTask+0x58>)
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <vBlueLedControllerTask+0x5c>)
 8000314:	f001 f970 	bl	80015f8 <xTaskCreate>
								NULL,
								1,
								NULL
								);

		 printf("Red Created\n");
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <vBlueLedControllerTask+0x60>)
 800031a:	f002 ffc1 	bl	80032a0 <puts>

	 xTaskCreate(vOrangeLedControllerTask,
 800031e:	2300      	movs	r3, #0
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2300      	movs	r3, #0
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <vBlueLedControllerTask+0x64>)
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <vBlueLedControllerTask+0x68>)
 800032e:	f001 f963 	bl	80015f8 <xTaskCreate>
								100,
								NULL,
								1,
								NULL
								);
	 printf("Orange Created\n");
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <vBlueLedControllerTask+0x6c>)
 8000334:	f002 ffb4 	bl	80032a0 <puts>

	 xTaskCreate(vGreenLedControllerTask,
 8000338:	2300      	movs	r3, #0
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2301      	movs	r3, #1
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2300      	movs	r3, #0
 8000342:	2264      	movs	r2, #100	; 0x64
 8000344:	4909      	ldr	r1, [pc, #36]	; (800036c <vBlueLedControllerTask+0x70>)
 8000346:	480a      	ldr	r0, [pc, #40]	; (8000370 <vBlueLedControllerTask+0x74>)
 8000348:	f001 f956 	bl	80015f8 <xTaskCreate>
								100,
								NULL,
								1,
								NULL
								);
	 printf("Green Created\n");
 800034c:	4809      	ldr	r0, [pc, #36]	; (8000374 <vBlueLedControllerTask+0x78>)
 800034e:	f002 ffa7 	bl	80032a0 <puts>


//	 printf("Tasks Has been Created from Another Task\n");

	while(1)
 8000352:	e7fe      	b.n	8000352 <vBlueLedControllerTask+0x56>
 8000354:	08003af0 	.word	0x08003af0
 8000358:	08000379 	.word	0x08000379
 800035c:	08003b04 	.word	0x08003b04
 8000360:	08003b10 	.word	0x08003b10
 8000364:	080003b5 	.word	0x080003b5
 8000368:	08003b28 	.word	0x08003b28
 800036c:	08003b38 	.word	0x08003b38
 8000370:	080003f1 	.word	0x080003f1
 8000374:	08003b50 	.word	0x08003b50

08000378 <vRedLedControllerTask>:

}


void  vRedLedControllerTask(void *pvParameters)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	int i;
	printf("Red\n");
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <vRedLedControllerTask+0x30>)
 8000382:	f002 ff8d 	bl	80032a0 <puts>
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD,RED);
 8000386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <vRedLedControllerTask+0x34>)
 800038c:	f000 fb3b 	bl	8000a06 <HAL_GPIO_TogglePin>
		for(i=0;i<70000;i++){}
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	e002      	b.n	800039c <vRedLedControllerTask+0x24>
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	3301      	adds	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <vRedLedControllerTask+0x38>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	ddf8      	ble.n	8000396 <vRedLedControllerTask+0x1e>
		HAL_GPIO_TogglePin(GPIOD,RED);
 80003a4:	e7ef      	b.n	8000386 <vRedLedControllerTask+0xe>
 80003a6:	bf00      	nop
 80003a8:	08003b60 	.word	0x08003b60
 80003ac:	40020c00 	.word	0x40020c00
 80003b0:	0001116f 	.word	0x0001116f

080003b4 <vOrangeLedControllerTask>:
	}
}

void  vOrangeLedControllerTask(void *pvParameters)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	int i;

	while(1)
	{
		printf("Orange\n");
 80003bc:	4809      	ldr	r0, [pc, #36]	; (80003e4 <vOrangeLedControllerTask+0x30>)
 80003be:	f002 ff6f 	bl	80032a0 <puts>

		HAL_GPIO_TogglePin(GPIOD,ORANGE);
 80003c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c6:	4808      	ldr	r0, [pc, #32]	; (80003e8 <vOrangeLedControllerTask+0x34>)
 80003c8:	f000 fb1d 	bl	8000a06 <HAL_GPIO_TogglePin>
		for(i=0;i<70000;i++){}
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	e002      	b.n	80003d8 <vOrangeLedControllerTask+0x24>
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	3301      	adds	r3, #1
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	4a04      	ldr	r2, [pc, #16]	; (80003ec <vOrangeLedControllerTask+0x38>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	ddf8      	ble.n	80003d2 <vOrangeLedControllerTask+0x1e>
		printf("Orange\n");
 80003e0:	e7ec      	b.n	80003bc <vOrangeLedControllerTask+0x8>
 80003e2:	bf00      	nop
 80003e4:	08003b64 	.word	0x08003b64
 80003e8:	40020c00 	.word	0x40020c00
 80003ec:	0001116f 	.word	0x0001116f

080003f0 <vGreenLedControllerTask>:
	}
}

void  vGreenLedControllerTask(void *pvParameters)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	int i;

	while(1)
	{
		printf("Green\n");
 80003f8:	4809      	ldr	r0, [pc, #36]	; (8000420 <vGreenLedControllerTask+0x30>)
 80003fa:	f002 ff51 	bl	80032a0 <puts>
		HAL_GPIO_TogglePin(GPIOD,GREEN);
 80003fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000402:	4808      	ldr	r0, [pc, #32]	; (8000424 <vGreenLedControllerTask+0x34>)
 8000404:	f000 faff 	bl	8000a06 <HAL_GPIO_TogglePin>
		for(i=0;i<70000;i++){}
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e002      	b.n	8000414 <vGreenLedControllerTask+0x24>
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	4a04      	ldr	r2, [pc, #16]	; (8000428 <vGreenLedControllerTask+0x38>)
 8000418:	4293      	cmp	r3, r2
 800041a:	ddf8      	ble.n	800040e <vGreenLedControllerTask+0x1e>
		printf("Green\n");
 800041c:	e7ec      	b.n	80003f8 <vGreenLedControllerTask+0x8>
 800041e:	bf00      	nop
 8000420:	08003b6c 	.word	0x08003b6c
 8000424:	40020c00 	.word	0x40020c00
 8000428:	0001116f 	.word	0x0001116f

0800042c <GPIO_Init>:
	}
}

void GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <GPIO_Init+0x70>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a18      	ldr	r2, [pc, #96]	; (800049c <GPIO_Init+0x70>)
 800043c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <GPIO_Init+0x70>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <GPIO_Init+0x70>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a11      	ldr	r2, [pc, #68]	; (800049c <GPIO_Init+0x70>)
 8000458:	f043 0308 	orr.w	r3, r3, #8
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <GPIO_Init+0x70>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f003 0308 	and.w	r3, r3, #8
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <GPIO_Init+0x74>)
 8000472:	f000 faaf 	bl	80009d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000476:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800047a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	4619      	mov	r1, r3
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <GPIO_Init+0x74>)
 8000490:	f000 f906 	bl	80006a0 <HAL_GPIO_Init>
}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020c00 	.word	0x40020c00

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d4:	f000 f8d0 	bl	8000678 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004d8:	f001 fdf8 	bl	80020cc <xTaskGetSchedulerState>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d001      	beq.n	80004e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004e2:	f002 fbe1 	bl	8002ca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b086      	sub	sp, #24
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e00a      	b.n	8000512 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004fc:	f3af 8000 	nop.w
 8000500:	4601      	mov	r1, r0
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	60ba      	str	r2, [r7, #8]
 8000508:	b2ca      	uxtb	r2, r1
 800050a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	429a      	cmp	r2, r3
 8000518:	dbf0      	blt.n	80004fc <_read+0x12>
	}

return len;
 800051a:	687b      	ldr	r3, [r7, #4]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	return -1;
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054c:	605a      	str	r2, [r3, #4]
	return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <_isatty>:

int _isatty(int file)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	return 1;
 8000564:	2301      	movs	r3, #1
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <_sbrk+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <_sbrk+0x60>)
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <_sbrk+0x64>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <_sbrk+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d207      	bcs.n	80005cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005bc:	f002 fdd6 	bl	800316c <__errno>
 80005c0:	4602      	mov	r2, r0
 80005c2:	230c      	movs	r3, #12
 80005c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	e009      	b.n	80005e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <_sbrk+0x64>)
 80005dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20020000 	.word	0x20020000
 80005ec:	00000400 	.word	0x00000400
 80005f0:	20000734 	.word	0x20000734
 80005f4:	200045d0 	.word	0x200045d0

080005f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SystemInit+0x28>)
 80005fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SystemInit+0x28>)
 8000604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <SystemInit+0x28>)
 800060e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000612:	609a      	str	r2, [r3, #8]
#endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800065c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000628:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800062a:	e003      	b.n	8000634 <LoopCopyDataInit>

0800062c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800062e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000630:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000632:	3104      	adds	r1, #4

08000634 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000638:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800063a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800063c:	d3f6      	bcc.n	800062c <CopyDataInit>
  ldr  r2, =_sbss
 800063e:	4a0b      	ldr	r2, [pc, #44]	; (800066c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000640:	e002      	b.n	8000648 <LoopFillZerobss>

08000642 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000642:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000644:	f842 3b04 	str.w	r3, [r2], #4

08000648 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800064a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800064c:	d3f9      	bcc.n	8000642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800064e:	f7ff ffd3 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000652:	f002 fd91 	bl	8003178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000656:	f7ff fe35 	bl	80002c4 <main>
  bx  lr    
 800065a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800065c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000660:	08003bf8 	.word	0x08003bf8
  ldr  r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000668:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800066c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000670:	200045d0 	.word	0x200045d0

08000674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC_IRQHandler>
	...

08000678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000004 	.word	0x20000004
 800069c:	20004588 	.word	0x20004588

080006a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	e16b      	b.n	8000994 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80006bc:	2201      	movs	r2, #1
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	4013      	ands	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	f040 815a 	bne.w	800098e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d00b      	beq.n	80006fa <HAL_GPIO_Init+0x5a>
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d007      	beq.n	80006fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ee:	2b11      	cmp	r3, #17
 80006f0:	d003      	beq.n	80006fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	2b12      	cmp	r3, #18
 80006f8:	d130      	bne.n	800075c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	2203      	movs	r2, #3
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43db      	mvns	r3, r3
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	4013      	ands	r3, r2
 8000710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	69ba      	ldr	r2, [r7, #24]
 8000720:	4313      	orrs	r3, r2
 8000722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	69ba      	ldr	r2, [r7, #24]
 8000728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000730:	2201      	movs	r2, #1
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	69ba      	ldr	r2, [r7, #24]
 800073c:	4013      	ands	r3, r2
 800073e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	f003 0201 	and.w	r2, r3, #1
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	4313      	orrs	r3, r2
 8000754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	2203      	movs	r2, #3
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	69ba      	ldr	r2, [r7, #24]
 8000770:	4013      	ands	r3, r2
 8000772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	4313      	orrs	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	69ba      	ldr	r2, [r7, #24]
 800078a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d003      	beq.n	800079c <HAL_GPIO_Init+0xfc>
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b12      	cmp	r3, #18
 800079a:	d123      	bne.n	80007e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	08da      	lsrs	r2, r3, #3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3208      	adds	r2, #8
 80007a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	f003 0307 	and.w	r3, r3, #7
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	220f      	movs	r2, #15
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	69ba      	ldr	r2, [r7, #24]
 80007bc:	4013      	ands	r3, r2
 80007be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	691a      	ldr	r2, [r3, #16]
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	08da      	lsrs	r2, r3, #3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3208      	adds	r2, #8
 80007de:	69b9      	ldr	r1, [r7, #24]
 80007e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	2203      	movs	r2, #3
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 0203 	and.w	r2, r3, #3
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4313      	orrs	r3, r2
 8000810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	2b00      	cmp	r3, #0
 8000822:	f000 80b4 	beq.w	800098e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b5f      	ldr	r3, [pc, #380]	; (80009a8 <HAL_GPIO_Init+0x308>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a5e      	ldr	r2, [pc, #376]	; (80009a8 <HAL_GPIO_Init+0x308>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b5c      	ldr	r3, [pc, #368]	; (80009a8 <HAL_GPIO_Init+0x308>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000842:	4a5a      	ldr	r2, [pc, #360]	; (80009ac <HAL_GPIO_Init+0x30c>)
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	3302      	adds	r3, #2
 800084a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800084e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	f003 0303 	and.w	r3, r3, #3
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	220f      	movs	r2, #15
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4013      	ands	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a51      	ldr	r2, [pc, #324]	; (80009b0 <HAL_GPIO_Init+0x310>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d02b      	beq.n	80008c6 <HAL_GPIO_Init+0x226>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a50      	ldr	r2, [pc, #320]	; (80009b4 <HAL_GPIO_Init+0x314>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d025      	beq.n	80008c2 <HAL_GPIO_Init+0x222>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a4f      	ldr	r2, [pc, #316]	; (80009b8 <HAL_GPIO_Init+0x318>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d01f      	beq.n	80008be <HAL_GPIO_Init+0x21e>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a4e      	ldr	r2, [pc, #312]	; (80009bc <HAL_GPIO_Init+0x31c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d019      	beq.n	80008ba <HAL_GPIO_Init+0x21a>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a4d      	ldr	r2, [pc, #308]	; (80009c0 <HAL_GPIO_Init+0x320>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d013      	beq.n	80008b6 <HAL_GPIO_Init+0x216>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a4c      	ldr	r2, [pc, #304]	; (80009c4 <HAL_GPIO_Init+0x324>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d00d      	beq.n	80008b2 <HAL_GPIO_Init+0x212>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a4b      	ldr	r2, [pc, #300]	; (80009c8 <HAL_GPIO_Init+0x328>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d007      	beq.n	80008ae <HAL_GPIO_Init+0x20e>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a4a      	ldr	r2, [pc, #296]	; (80009cc <HAL_GPIO_Init+0x32c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_GPIO_Init+0x20a>
 80008a6:	2307      	movs	r3, #7
 80008a8:	e00e      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008aa:	2308      	movs	r3, #8
 80008ac:	e00c      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008ae:	2306      	movs	r3, #6
 80008b0:	e00a      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008b2:	2305      	movs	r3, #5
 80008b4:	e008      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008b6:	2304      	movs	r3, #4
 80008b8:	e006      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008ba:	2303      	movs	r3, #3
 80008bc:	e004      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008be:	2302      	movs	r3, #2
 80008c0:	e002      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008c2:	2301      	movs	r3, #1
 80008c4:	e000      	b.n	80008c8 <HAL_GPIO_Init+0x228>
 80008c6:	2300      	movs	r3, #0
 80008c8:	69fa      	ldr	r2, [r7, #28]
 80008ca:	f002 0203 	and.w	r2, r2, #3
 80008ce:	0092      	lsls	r2, r2, #2
 80008d0:	4093      	lsls	r3, r2
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008d8:	4934      	ldr	r1, [pc, #208]	; (80009ac <HAL_GPIO_Init+0x30c>)
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	3302      	adds	r3, #2
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008e6:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <HAL_GPIO_Init+0x330>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800090a:	4a31      	ldr	r2, [pc, #196]	; (80009d0 <HAL_GPIO_Init+0x330>)
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <HAL_GPIO_Init+0x330>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	43db      	mvns	r3, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000934:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <HAL_GPIO_Init+0x330>)
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <HAL_GPIO_Init+0x330>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	43db      	mvns	r3, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4013      	ands	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <HAL_GPIO_Init+0x330>)
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <HAL_GPIO_Init+0x330>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <HAL_GPIO_Init+0x330>)
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3301      	adds	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	f67f ae90 	bls.w	80006bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800099c:	bf00      	nop
 800099e:	3724      	adds	r7, #36	; 0x24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40021400 	.word	0x40021400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40021c00 	.word	0x40021c00
 80009d0:	40013c00 	.word	0x40013c00

080009d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	4613      	mov	r3, r2
 80009e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009e4:	787b      	ldrb	r3, [r7, #1]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009ea:	887a      	ldrh	r2, [r7, #2]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80009f0:	e003      	b.n	80009fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009f2:	887b      	ldrh	r3, [r7, #2]
 80009f4:	041a      	lsls	r2, r3, #16
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	619a      	str	r2, [r3, #24]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	401a      	ands	r2, r3
 8000a1a:	887b      	ldrh	r3, [r7, #2]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d104      	bne.n	8000a2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000a20:	887b      	ldrh	r3, [r7, #2]
 8000a22:	041a      	lsls	r2, r3, #16
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000a28:	e002      	b.n	8000a30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000a2a:	887a      	ldrh	r2, [r7, #2]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	619a      	str	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f103 0208 	add.w	r2, r3, #8
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f103 0208 	add.w	r2, r3, #8
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f103 0208 	add.w	r2, r3, #8
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a96:	b480      	push	{r7}
 8000a98:	b085      	sub	sp, #20
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af4:	d103      	bne.n	8000afe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e00c      	b.n	8000b18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3308      	adds	r3, #8
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e002      	b.n	8000b0c <vListInsert+0x2e>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d2f6      	bcs.n	8000b06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	6892      	ldr	r2, [r2, #8]
 8000b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6852      	ldr	r2, [r2, #4]
 8000b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d103      	bne.n	8000b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d109      	bne.n	8000bcc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bbc:	f383 8811 	msr	BASEPRI, r3
 8000bc0:	f3bf 8f6f 	isb	sy
 8000bc4:	f3bf 8f4f 	dsb	sy
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e7fe      	b.n	8000bca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000bcc:	f001 ffde 	bl	8002b8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd8:	68f9      	ldr	r1, [r7, #12]
 8000bda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bdc:	fb01 f303 	mul.w	r3, r1, r3
 8000be0:	441a      	add	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2200      	movs	r2, #0
 8000bea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	68f9      	ldr	r1, [r7, #12]
 8000c00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c02:	fb01 f303 	mul.w	r3, r1, r3
 8000c06:	441a      	add	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	22ff      	movs	r2, #255	; 0xff
 8000c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d114      	bne.n	8000c4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d01a      	beq.n	8000c60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3310      	adds	r3, #16
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f896 	bl	8001d60 <xTaskRemoveFromEventList>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d012      	beq.n	8000c60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <xQueueGenericReset+0xcc>)
 8000c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	f3bf 8f4f 	dsb	sy
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	e009      	b.n	8000c60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3310      	adds	r3, #16
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fef3 	bl	8000a3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3324      	adds	r3, #36	; 0x24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff feee 	bl	8000a3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000c60:	f001 ffc2 	bl	8002be8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000c64:	2301      	movs	r3, #1
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000ed04 	.word	0xe000ed04

08000c74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d109      	bne.n	8000c9c <xQueueGenericCreateStatic+0x28>
 8000c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8c:	f383 8811 	msr	BASEPRI, r3
 8000c90:	f3bf 8f6f 	isb	sy
 8000c94:	f3bf 8f4f 	dsb	sy
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c9a:	e7fe      	b.n	8000c9a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d109      	bne.n	8000cb6 <xQueueGenericCreateStatic+0x42>
 8000ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca6:	f383 8811 	msr	BASEPRI, r3
 8000caa:	f3bf 8f6f 	isb	sy
 8000cae:	f3bf 8f4f 	dsb	sy
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb4:	e7fe      	b.n	8000cb4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <xQueueGenericCreateStatic+0x4e>
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <xQueueGenericCreateStatic+0x52>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <xQueueGenericCreateStatic+0x54>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d109      	bne.n	8000ce0 <xQueueGenericCreateStatic+0x6c>
 8000ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd0:	f383 8811 	msr	BASEPRI, r3
 8000cd4:	f3bf 8f6f 	isb	sy
 8000cd8:	f3bf 8f4f 	dsb	sy
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	e7fe      	b.n	8000cde <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <xQueueGenericCreateStatic+0x78>
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <xQueueGenericCreateStatic+0x7c>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <xQueueGenericCreateStatic+0x7e>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d109      	bne.n	8000d0a <xQueueGenericCreateStatic+0x96>
 8000cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfa:	f383 8811 	msr	BASEPRI, r3
 8000cfe:	f3bf 8f6f 	isb	sy
 8000d02:	f3bf 8f4f 	dsb	sy
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	e7fe      	b.n	8000d08 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000d0a:	2348      	movs	r3, #72	; 0x48
 8000d0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2b48      	cmp	r3, #72	; 0x48
 8000d12:	d009      	beq.n	8000d28 <xQueueGenericCreateStatic+0xb4>
 8000d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	e7fe      	b.n	8000d26 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000d28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00d      	beq.n	8000d50 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d36:	2201      	movs	r2, #1
 8000d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f805 	bl	8000d5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3730      	adds	r7, #48	; 0x30
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d103      	bne.n	8000d76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e002      	b.n	8000d7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d88:	2101      	movs	r1, #1
 8000d8a:	69b8      	ldr	r0, [r7, #24]
 8000d8c:	f7ff ff0a 	bl	8000ba4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <xQueueGenericSend+0x30>
 8000db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	f3bf 8f6f 	isb	sy
 8000dc0:	f3bf 8f4f 	dsb	sy
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc6:	e7fe      	b.n	8000dc6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <xQueueGenericSend+0x3e>
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <xQueueGenericSend+0x42>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <xQueueGenericSend+0x44>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d109      	bne.n	8000df4 <xQueueGenericSend+0x5c>
 8000de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de4:	f383 8811 	msr	BASEPRI, r3
 8000de8:	f3bf 8f6f 	isb	sy
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
 8000df2:	e7fe      	b.n	8000df2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d103      	bne.n	8000e02 <xQueueGenericSend+0x6a>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d101      	bne.n	8000e06 <xQueueGenericSend+0x6e>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <xQueueGenericSend+0x70>
 8000e06:	2300      	movs	r3, #0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <xQueueGenericSend+0x88>
 8000e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e10:	f383 8811 	msr	BASEPRI, r3
 8000e14:	f3bf 8f6f 	isb	sy
 8000e18:	f3bf 8f4f 	dsb	sy
 8000e1c:	623b      	str	r3, [r7, #32]
 8000e1e:	e7fe      	b.n	8000e1e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e20:	f001 f954 	bl	80020cc <xTaskGetSchedulerState>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <xQueueGenericSend+0x98>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <xQueueGenericSend+0x9c>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <xQueueGenericSend+0x9e>
 8000e34:	2300      	movs	r3, #0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <xQueueGenericSend+0xb6>
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	e7fe      	b.n	8000e4c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e4e:	f001 fe9d 	bl	8002b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d302      	bcc.n	8000e64 <xQueueGenericSend+0xcc>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d129      	bne.n	8000eb8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e6a:	f000 f9ff 	bl	800126c <prvCopyDataToQueue>
 8000e6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d010      	beq.n	8000e9a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7a:	3324      	adds	r3, #36	; 0x24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 ff6f 	bl	8001d60 <xTaskRemoveFromEventList>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d013      	beq.n	8000eb0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e88:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <xQueueGenericSend+0x1f0>)
 8000e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	f3bf 8f4f 	dsb	sy
 8000e94:	f3bf 8f6f 	isb	sy
 8000e98:	e00a      	b.n	8000eb0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <xQueueGenericSend+0x1f0>)
 8000ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	f3bf 8f4f 	dsb	sy
 8000eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000eb0:	f001 fe9a 	bl	8002be8 <vPortExitCritical>
				return pdPASS;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e063      	b.n	8000f80 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000ebe:	f001 fe93 	bl	8002be8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e05c      	b.n	8000f80 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 ffa7 	bl	8001e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000eda:	f001 fe85 	bl	8002be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000ede:	f000 fd25 	bl	800192c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ee2:	f001 fe53 	bl	8002b8c <vPortEnterCritical>
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef2:	d103      	bne.n	8000efc <xQueueGenericSend+0x164>
 8000ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d103      	bne.n	8000f12 <xQueueGenericSend+0x17a>
 8000f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f12:	f001 fe69 	bl	8002be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000f16:	1d3a      	adds	r2, r7, #4
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 ff96 	bl	8001e50 <xTaskCheckForTimeOut>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d124      	bne.n	8000f74 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f2c:	f000 fa96 	bl	800145c <prvIsQueueFull>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d018      	beq.n	8000f68 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f38:	3310      	adds	r3, #16
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fec0 	bl	8001cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f46:	f000 fa21 	bl	800138c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f4a:	f000 fcfd 	bl	8001948 <xTaskResumeAll>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f47f af7c 	bne.w	8000e4e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <xQueueGenericSend+0x1f0>)
 8000f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	f3bf 8f4f 	dsb	sy
 8000f62:	f3bf 8f6f 	isb	sy
 8000f66:	e772      	b.n	8000e4e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6a:	f000 fa0f 	bl	800138c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f6e:	f000 fceb 	bl	8001948 <xTaskResumeAll>
 8000f72:	e76c      	b.n	8000e4e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f76:	f000 fa09 	bl	800138c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f7a:	f000 fce5 	bl	8001948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000f7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3738      	adds	r7, #56	; 0x38
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	e000ed04 	.word	0xe000ed04

08000f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08e      	sub	sp, #56	; 0x38
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d109      	bne.n	8000fb8 <xQueueGenericSendFromISR+0x2c>
 8000fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fa8:	f383 8811 	msr	BASEPRI, r3
 8000fac:	f3bf 8f6f 	isb	sy
 8000fb0:	f3bf 8f4f 	dsb	sy
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb6:	e7fe      	b.n	8000fb6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <xQueueGenericSendFromISR+0x3a>
 8000fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <xQueueGenericSendFromISR+0x3e>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <xQueueGenericSendFromISR+0x40>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d109      	bne.n	8000fe4 <xQueueGenericSendFromISR+0x58>
 8000fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd4:	f383 8811 	msr	BASEPRI, r3
 8000fd8:	f3bf 8f6f 	isb	sy
 8000fdc:	f3bf 8f4f 	dsb	sy
 8000fe0:	623b      	str	r3, [r7, #32]
 8000fe2:	e7fe      	b.n	8000fe2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d103      	bne.n	8000ff2 <xQueueGenericSendFromISR+0x66>
 8000fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <xQueueGenericSendFromISR+0x6a>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <xQueueGenericSendFromISR+0x6c>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d109      	bne.n	8001010 <xQueueGenericSendFromISR+0x84>
 8000ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001000:	f383 8811 	msr	BASEPRI, r3
 8001004:	f3bf 8f6f 	isb	sy
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e7fe      	b.n	800100e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001010:	f001 fe98 	bl	8002d44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001014:	f3ef 8211 	mrs	r2, BASEPRI
 8001018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	61ba      	str	r2, [r7, #24]
 800102a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800102c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001038:	429a      	cmp	r2, r3
 800103a:	d302      	bcc.n	8001042 <xQueueGenericSendFromISR+0xb6>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d12c      	bne.n	800109c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001052:	f000 f90b 	bl	800126c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001056:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105e:	d112      	bne.n	8001086 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	2b00      	cmp	r3, #0
 8001066:	d016      	beq.n	8001096 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106a:	3324      	adds	r3, #36	; 0x24
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fe77 	bl	8001d60 <xTaskRemoveFromEventList>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00e      	beq.n	8001096 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e007      	b.n	8001096 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001086:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800108a:	3301      	adds	r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	b25a      	sxtb	r2, r3
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001096:	2301      	movs	r3, #1
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800109a:	e001      	b.n	80010a0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3738      	adds	r7, #56	; 0x38
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <xQueueReceive+0x2e>
	__asm volatile
 80010ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d2:	f383 8811 	msr	BASEPRI, r3
 80010d6:	f3bf 8f6f 	isb	sy
 80010da:	f3bf 8f4f 	dsb	sy
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e7fe      	b.n	80010e0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <xQueueReceive+0x3c>
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <xQueueReceive+0x40>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <xQueueReceive+0x42>
 80010f4:	2300      	movs	r3, #0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d109      	bne.n	800110e <xQueueReceive+0x5a>
 80010fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fe:	f383 8811 	msr	BASEPRI, r3
 8001102:	f3bf 8f6f 	isb	sy
 8001106:	f3bf 8f4f 	dsb	sy
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	e7fe      	b.n	800110c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800110e:	f000 ffdd 	bl	80020cc <xTaskGetSchedulerState>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <xQueueReceive+0x6a>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <xQueueReceive+0x6e>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <xQueueReceive+0x70>
 8001122:	2300      	movs	r3, #0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <xQueueReceive+0x88>
 8001128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112c:	f383 8811 	msr	BASEPRI, r3
 8001130:	f3bf 8f6f 	isb	sy
 8001134:	f3bf 8f4f 	dsb	sy
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	e7fe      	b.n	800113a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800113c:	f001 fd26 	bl	8002b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001144:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01f      	beq.n	800118c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001150:	f000 f8f6 	bl	8001340 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00f      	beq.n	8001184 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	3310      	adds	r3, #16
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fdf9 	bl	8001d60 <xTaskRemoveFromEventList>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <xQueueReceive+0x1b4>)
 8001176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f3bf 8f4f 	dsb	sy
 8001180:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001184:	f001 fd30 	bl	8002be8 <vPortExitCritical>
				return pdPASS;
 8001188:	2301      	movs	r3, #1
 800118a:	e069      	b.n	8001260 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d103      	bne.n	800119a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001192:	f001 fd29 	bl	8002be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001196:	2300      	movs	r3, #0
 8001198:	e062      	b.n	8001260 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800119a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fe3d 	bl	8001e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011ae:	f001 fd1b 	bl	8002be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011b2:	f000 fbbb 	bl	800192c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80011b6:	f001 fce9 	bl	8002b8c <vPortEnterCritical>
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c6:	d103      	bne.n	80011d0 <xQueueReceive+0x11c>
 80011c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d103      	bne.n	80011e6 <xQueueReceive+0x132>
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011e6:	f001 fcff 	bl	8002be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011ea:	1d3a      	adds	r2, r7, #4
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fe2c 	bl	8001e50 <xTaskCheckForTimeOut>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d123      	bne.n	8001246 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001200:	f000 f916 	bl	8001430 <prvIsQueueEmpty>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d017      	beq.n	800123a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	3324      	adds	r3, #36	; 0x24
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fd56 	bl	8001cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800121a:	f000 f8b7 	bl	800138c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800121e:	f000 fb93 	bl	8001948 <xTaskResumeAll>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d189      	bne.n	800113c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <xQueueReceive+0x1b4>)
 800122a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	f3bf 8f4f 	dsb	sy
 8001234:	f3bf 8f6f 	isb	sy
 8001238:	e780      	b.n	800113c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800123a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800123c:	f000 f8a6 	bl	800138c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001240:	f000 fb82 	bl	8001948 <xTaskResumeAll>
 8001244:	e77a      	b.n	800113c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001248:	f000 f8a0 	bl	800138c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800124c:	f000 fb7c 	bl	8001948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001252:	f000 f8ed 	bl	8001430 <prvIsQueueEmpty>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	f43f af6f 	beq.w	800113c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800125e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001260:	4618      	mov	r0, r3
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	e000ed04 	.word	0xe000ed04

0800126c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001280:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10d      	bne.n	80012a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d14d      	bne.n	800132e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 ff36 	bl	8002108 <xTaskPriorityDisinherit>
 800129c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e043      	b.n	800132e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d119      	bne.n	80012e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6858      	ldr	r0, [r3, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	461a      	mov	r2, r3
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	f001 ff82 	bl	80031c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	441a      	add	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d32b      	bcc.n	800132e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	e026      	b.n	800132e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	68d8      	ldr	r0, [r3, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	461a      	mov	r2, r3
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	f001 ff68 	bl	80031c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	425b      	negs	r3, r3
 80012fa:	441a      	add	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	425b      	negs	r3, r3
 8001316:	441a      	add	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d105      	bne.n	800132e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	3b01      	subs	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001336:	697b      	ldr	r3, [r7, #20]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2b00      	cmp	r3, #0
 8001350:	d018      	beq.n	8001384 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	441a      	add	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	d303      	bcc.n	8001374 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68d9      	ldr	r1, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	461a      	mov	r2, r3
 800137e:	6838      	ldr	r0, [r7, #0]
 8001380:	f001 ff1e 	bl	80031c0 <memcpy>
	}
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001394:	f001 fbfa 	bl	8002b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800139e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013a0:	e011      	b.n	80013c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d012      	beq.n	80013d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3324      	adds	r3, #36	; 0x24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fcd6 	bl	8001d60 <xTaskRemoveFromEventList>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80013ba:	f000 fda9 	bl	8001f10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dce9      	bgt.n	80013a2 <prvUnlockQueue+0x16>
 80013ce:	e000      	b.n	80013d2 <prvUnlockQueue+0x46>
					break;
 80013d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80013da:	f001 fc05 	bl	8002be8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013de:	f001 fbd5 	bl	8002b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013ea:	e011      	b.n	8001410 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d012      	beq.n	800141a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3310      	adds	r3, #16
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fcb1 	bl	8001d60 <xTaskRemoveFromEventList>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001404:	f000 fd84 	bl	8001f10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	3b01      	subs	r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001414:	2b00      	cmp	r3, #0
 8001416:	dce9      	bgt.n	80013ec <prvUnlockQueue+0x60>
 8001418:	e000      	b.n	800141c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800141a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001424:	f001 fbe0 	bl	8002be8 <vPortExitCritical>
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001438:	f001 fba8 	bl	8002b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001444:	2301      	movs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e001      	b.n	800144e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800144e:	f001 fbcb 	bl	8002be8 <vPortExitCritical>

	return xReturn;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001464:	f001 fb92 	bl	8002b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001470:	429a      	cmp	r2, r3
 8001472:	d102      	bne.n	800147a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001474:	2301      	movs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	e001      	b.n	800147e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800147e:	f001 fbb3 	bl	8002be8 <vPortExitCritical>

	return xReturn;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e014      	b.n	80014c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <vQueueAddToRegistry+0x4c>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80014a8:	490b      	ldr	r1, [pc, #44]	; (80014d8 <vQueueAddToRegistry+0x4c>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <vQueueAddToRegistry+0x4c>)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80014be:	e005      	b.n	80014cc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3301      	adds	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b07      	cmp	r3, #7
 80014ca:	d9e7      	bls.n	800149c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	2000458c 	.word	0x2000458c

080014dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014ec:	f001 fb4e 	bl	8002b8c <vPortEnterCritical>
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d103      	bne.n	8001506 <vQueueWaitForMessageRestricted+0x2a>
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150c:	b25b      	sxtb	r3, r3
 800150e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001512:	d103      	bne.n	800151c <vQueueWaitForMessageRestricted+0x40>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800151c:	f001 fb64 	bl	8002be8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001524:	2b00      	cmp	r3, #0
 8001526:	d106      	bne.n	8001536 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	3324      	adds	r3, #36	; 0x24
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fbeb 	bl	8001d0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff28 	bl	800138c <prvUnlockQueue>
	}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af04      	add	r7, sp, #16
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001554:	2b00      	cmp	r3, #0
 8001556:	d109      	bne.n	800156c <xTaskCreateStatic+0x28>
 8001558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800155c:	f383 8811 	msr	BASEPRI, r3
 8001560:	f3bf 8f6f 	isb	sy
 8001564:	f3bf 8f4f 	dsb	sy
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	e7fe      	b.n	800156a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <xTaskCreateStatic+0x42>
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	e7fe      	b.n	8001584 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001586:	2354      	movs	r3, #84	; 0x54
 8001588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2b54      	cmp	r3, #84	; 0x54
 800158e:	d009      	beq.n	80015a4 <xTaskCreateStatic+0x60>
 8001590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001594:	f383 8811 	msr	BASEPRI, r3
 8001598:	f3bf 8f6f 	isb	sy
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	e7fe      	b.n	80015a2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80015a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80015a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01e      	beq.n	80015ea <xTaskCreateStatic+0xa6>
 80015ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01b      	beq.n	80015ea <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80015b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80015c4:	2300      	movs	r3, #0
 80015c6:	9303      	str	r3, [sp, #12]
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f850 	bl	8001682 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80015e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015e4:	f000 f8d4 	bl	8001790 <prvAddNewTaskToReadyList>
 80015e8:	e001      	b.n	80015ee <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80015ee:	697b      	ldr	r3, [r7, #20]
	}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fbd7 	bl	8002dc0 <pvPortMalloc>
 8001612:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00e      	beq.n	8001638 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800161a:	2054      	movs	r0, #84	; 0x54
 800161c:	f001 fbd0 	bl	8002dc0 <pvPortMalloc>
 8001620:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
 800162e:	e005      	b.n	800163c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f001 fc87 	bl	8002f44 <vPortFree>
 8001636:	e001      	b.n	800163c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d017      	beq.n	8001672 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	2300      	movs	r3, #0
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f80e 	bl	8001682 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001666:	69f8      	ldr	r0, [r7, #28]
 8001668:	f000 f892 	bl	8001790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800166c:	2301      	movs	r3, #1
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	e002      	b.n	8001678 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001678:	69bb      	ldr	r3, [r7, #24]
	}
 800167a:	4618      	mov	r0, r3
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b088      	sub	sp, #32
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800169a:	3b01      	subs	r3, #1
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	f023 0307 	bic.w	r3, r3, #7
 80016a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <prvInitialiseNewTask+0x46>
 80016b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b8:	f383 8811 	msr	BASEPRI, r3
 80016bc:	f3bf 8f6f 	isb	sy
 80016c0:	f3bf 8f4f 	dsb	sy
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e7fe      	b.n	80016c6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01f      	beq.n	800170e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
 80016d2:	e012      	b.n	80016fa <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	7819      	ldrb	r1, [r3, #0]
 80016dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	3334      	adds	r3, #52	; 0x34
 80016e4:	460a      	mov	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	3301      	adds	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d9e9      	bls.n	80016d4 <prvInitialiseNewTask+0x52>
 8001700:	e000      	b.n	8001704 <prvInitialiseNewTask+0x82>
			{
				break;
 8001702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800170c:	e003      	b.n	8001716 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800170e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	2b06      	cmp	r3, #6
 800171a:	d901      	bls.n	8001720 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800171c:	2306      	movs	r3, #6
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172e:	2200      	movs	r2, #0
 8001730:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	3304      	adds	r3, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f9a0 	bl	8000a7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	3318      	adds	r3, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff f99b 	bl	8000a7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800174a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174e:	f1c3 0207 	rsb	r2, r3, #7
 8001752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800175a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175e:	2200      	movs	r2, #0
 8001760:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	69b8      	ldr	r0, [r7, #24]
 8001770:	f001 f8e2 	bl	8002938 <pxPortInitialiseStack>
 8001774:	4602      	mov	r2, r0
 8001776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001778:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001798:	f001 f9f8 	bl	8002b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <prvAddNewTaskToReadyList+0xb8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a29      	ldr	r2, [pc, #164]	; (8001848 <prvAddNewTaskToReadyList+0xb8>)
 80017a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017a6:	4b29      	ldr	r3, [pc, #164]	; (800184c <prvAddNewTaskToReadyList+0xbc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017ae:	4a27      	ldr	r2, [pc, #156]	; (800184c <prvAddNewTaskToReadyList+0xbc>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <prvAddNewTaskToReadyList+0xb8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d110      	bne.n	80017de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017bc:	f000 fbcc 	bl	8001f58 <prvInitialiseTaskLists>
 80017c0:	e00d      	b.n	80017de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <prvAddNewTaskToReadyList+0xc0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <prvAddNewTaskToReadyList+0xbc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d802      	bhi.n	80017de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017d8:	4a1c      	ldr	r2, [pc, #112]	; (800184c <prvAddNewTaskToReadyList+0xbc>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <prvAddNewTaskToReadyList+0xc4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <prvAddNewTaskToReadyList+0xc4>)
 80017e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2201      	movs	r2, #1
 80017ee:	409a      	lsls	r2, r3
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <prvAddNewTaskToReadyList+0xc8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <prvAddNewTaskToReadyList+0xc8>)
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <prvAddNewTaskToReadyList+0xcc>)
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3304      	adds	r3, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff f940 	bl	8000a96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001816:	f001 f9e7 	bl	8002be8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <prvAddNewTaskToReadyList+0xc0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00e      	beq.n	8001840 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <prvAddNewTaskToReadyList+0xbc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <prvAddNewTaskToReadyList+0xd0>)
 8001832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	f3bf 8f4f 	dsb	sy
 800183c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000838 	.word	0x20000838
 800184c:	20000738 	.word	0x20000738
 8001850:	20000844 	.word	0x20000844
 8001854:	20000854 	.word	0x20000854
 8001858:	20000840 	.word	0x20000840
 800185c:	2000073c 	.word	0x2000073c
 8001860:	e000ed04 	.word	0xe000ed04

08001864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001872:	463a      	mov	r2, r7
 8001874:	1d39      	adds	r1, r7, #4
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fca8 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	9202      	str	r2, [sp, #8]
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	2300      	movs	r3, #0
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2300      	movs	r3, #0
 8001890:	460a      	mov	r2, r1
 8001892:	4920      	ldr	r1, [pc, #128]	; (8001914 <vTaskStartScheduler+0xb0>)
 8001894:	4820      	ldr	r0, [pc, #128]	; (8001918 <vTaskStartScheduler+0xb4>)
 8001896:	f7ff fe55 	bl	8001544 <xTaskCreateStatic>
 800189a:	4602      	mov	r2, r0
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <vTaskStartScheduler+0xb8>)
 800189e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <vTaskStartScheduler+0xb8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e001      	b.n	80018b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80018b8:	f000 fd10 	bl	80022dc <xTimerCreateTimerTask>
 80018bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d115      	bne.n	80018f0 <vTaskStartScheduler+0x8c>
 80018c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c8:	f383 8811 	msr	BASEPRI, r3
 80018cc:	f3bf 8f6f 	isb	sy
 80018d0:	f3bf 8f4f 	dsb	sy
 80018d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <vTaskStartScheduler+0xbc>)
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <vTaskStartScheduler+0xc0>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <vTaskStartScheduler+0xc4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80018ea:	f001 f8b1 	bl	8002a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80018ee:	e00d      	b.n	800190c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f6:	d109      	bne.n	800190c <vTaskStartScheduler+0xa8>
 80018f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e7fe      	b.n	800190a <vTaskStartScheduler+0xa6>
}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08003b74 	.word	0x08003b74
 8001918:	08001f29 	.word	0x08001f29
 800191c:	2000085c 	.word	0x2000085c
 8001920:	20000858 	.word	0x20000858
 8001924:	20000844 	.word	0x20000844
 8001928:	2000083c 	.word	0x2000083c

0800192c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <vTaskSuspendAll+0x18>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	4a03      	ldr	r2, [pc, #12]	; (8001944 <vTaskSuspendAll+0x18>)
 8001938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	20000860 	.word	0x20000860

08001948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <xTaskResumeAll+0x114>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <xTaskResumeAll+0x2a>
 800195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	e7fe      	b.n	8001970 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001972:	f001 f90b 	bl	8002b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <xTaskResumeAll+0x114>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <xTaskResumeAll+0x114>)
 800197e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <xTaskResumeAll+0x114>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d161      	bne.n	8001a4c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <xTaskResumeAll+0x118>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d05d      	beq.n	8001a4c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001990:	e02e      	b.n	80019f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <xTaskResumeAll+0x11c>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3318      	adds	r3, #24
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f8d6 	bl	8000b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3304      	adds	r3, #4
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f8d1 	bl	8000b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	2201      	movs	r2, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <xTaskResumeAll+0x120>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <xTaskResumeAll+0x120>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <xTaskResumeAll+0x124>)
 80019ce:	441a      	add	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3304      	adds	r3, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff f85d 	bl	8000a96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <xTaskResumeAll+0x128>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <xTaskResumeAll+0x12c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <xTaskResumeAll+0x11c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1cc      	bne.n	8001992 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80019fe:	f000 fb45 	bl	800208c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <xTaskResumeAll+0x130>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d010      	beq.n	8001a30 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a0e:	f000 f847 	bl	8001aa0 <xTaskIncrementTick>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <xTaskResumeAll+0x12c>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f1      	bne.n	8001a0e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <xTaskResumeAll+0x130>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <xTaskResumeAll+0x12c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <xTaskResumeAll+0x134>)
 8001a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f3bf 8f4f 	dsb	sy
 8001a48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a4c:	f001 f8cc 	bl	8002be8 <vPortExitCritical>

	return xAlreadyYielded;
 8001a50:	68bb      	ldr	r3, [r7, #8]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000860 	.word	0x20000860
 8001a60:	20000838 	.word	0x20000838
 8001a64:	200007f8 	.word	0x200007f8
 8001a68:	20000840 	.word	0x20000840
 8001a6c:	2000073c 	.word	0x2000073c
 8001a70:	20000738 	.word	0x20000738
 8001a74:	2000084c 	.word	0x2000084c
 8001a78:	20000848 	.word	0x20000848
 8001a7c:	e000ed04 	.word	0xe000ed04

08001a80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <xTaskGetTickCount+0x1c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000083c 	.word	0x2000083c

08001aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	; (8001be4 <xTaskIncrementTick+0x144>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8087 	bne.w	8001bc2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <xTaskIncrementTick+0x148>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001abc:	4a4a      	ldr	r2, [pc, #296]	; (8001be8 <xTaskIncrementTick+0x148>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11f      	bne.n	8001b08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <xTaskIncrementTick+0x14c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <xTaskIncrementTick+0x46>
 8001ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad6:	f383 8811 	msr	BASEPRI, r3
 8001ada:	f3bf 8f6f 	isb	sy
 8001ade:	f3bf 8f4f 	dsb	sy
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	e7fe      	b.n	8001ae4 <xTaskIncrementTick+0x44>
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <xTaskIncrementTick+0x14c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <xTaskIncrementTick+0x150>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a3e      	ldr	r2, [pc, #248]	; (8001bec <xTaskIncrementTick+0x14c>)
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4a3e      	ldr	r2, [pc, #248]	; (8001bf0 <xTaskIncrementTick+0x150>)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <xTaskIncrementTick+0x154>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	4a3c      	ldr	r2, [pc, #240]	; (8001bf4 <xTaskIncrementTick+0x154>)
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	f000 fac2 	bl	800208c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <xTaskIncrementTick+0x158>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d348      	bcc.n	8001ba4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b12:	4b36      	ldr	r3, [pc, #216]	; (8001bec <xTaskIncrementTick+0x14c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <xTaskIncrementTick+0x158>)
 8001b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b22:	601a      	str	r2, [r3, #0]
					break;
 8001b24:	e03e      	b.n	8001ba4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <xTaskIncrementTick+0x14c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d203      	bcs.n	8001b46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <xTaskIncrementTick+0x158>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b44:	e02e      	b.n	8001ba4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f800 	bl	8000b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	3318      	adds	r3, #24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fff7 	bl	8000b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	2201      	movs	r2, #1
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <xTaskIncrementTick+0x15c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <xTaskIncrementTick+0x15c>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <xTaskIncrementTick+0x160>)
 8001b82:	441a      	add	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f7fe ff83 	bl	8000a96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <xTaskIncrementTick+0x164>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d3b9      	bcc.n	8001b12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ba2:	e7b6      	b.n	8001b12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <xTaskIncrementTick+0x164>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001baa:	4915      	ldr	r1, [pc, #84]	; (8001c00 <xTaskIncrementTick+0x160>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d907      	bls.n	8001bcc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e004      	b.n	8001bcc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <xTaskIncrementTick+0x168>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <xTaskIncrementTick+0x168>)
 8001bca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <xTaskIncrementTick+0x16c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001bd8:	697b      	ldr	r3, [r7, #20]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000860 	.word	0x20000860
 8001be8:	2000083c 	.word	0x2000083c
 8001bec:	200007f0 	.word	0x200007f0
 8001bf0:	200007f4 	.word	0x200007f4
 8001bf4:	20000850 	.word	0x20000850
 8001bf8:	20000858 	.word	0x20000858
 8001bfc:	20000840 	.word	0x20000840
 8001c00:	2000073c 	.word	0x2000073c
 8001c04:	20000738 	.word	0x20000738
 8001c08:	20000848 	.word	0x20000848
 8001c0c:	2000084c 	.word	0x2000084c

08001c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <vTaskSwitchContext+0xa0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <vTaskSwitchContext+0xa4>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c24:	e03e      	b.n	8001ca4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <vTaskSwitchContext+0xa4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <vTaskSwitchContext+0xa8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	fab3 f383 	clz	r3, r3
 8001c38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	f1c3 031f 	rsb	r3, r3, #31
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	491e      	ldr	r1, [pc, #120]	; (8001cbc <vTaskSwitchContext+0xac>)
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <vTaskSwitchContext+0x5a>
	__asm volatile
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	e7fe      	b.n	8001c68 <vTaskSwitchContext+0x58>
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <vTaskSwitchContext+0xac>)
 8001c76:	4413      	add	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d104      	bne.n	8001c9a <vTaskSwitchContext+0x8a>
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <vTaskSwitchContext+0xb0>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20000860 	.word	0x20000860
 8001cb4:	2000084c 	.word	0x2000084c
 8001cb8:	20000840 	.word	0x20000840
 8001cbc:	2000073c 	.word	0x2000073c
 8001cc0:	20000738 	.word	0x20000738

08001cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <vTaskPlaceOnEventList+0x24>
 8001cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e7fe      	b.n	8001ce6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <vTaskPlaceOnEventList+0x44>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3318      	adds	r3, #24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7fe fef4 	bl	8000ade <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f000 fa89 	bl	8002210 <prvAddCurrentTaskToDelayedList>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000738 	.word	0x20000738

08001d0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <vTaskPlaceOnEventListRestricted+0x26>
 8001d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e7fe      	b.n	8001d30 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <vTaskPlaceOnEventListRestricted+0x50>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	3318      	adds	r3, #24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7fe feab 	bl	8000a96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	68b8      	ldr	r0, [r7, #8]
 8001d50:	f000 fa5e 	bl	8002210 <prvAddCurrentTaskToDelayedList>
	}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000738 	.word	0x20000738

08001d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <xTaskRemoveFromEventList+0x2a>
 8001d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e7fe      	b.n	8001d88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fede 	bl	8000b50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <xTaskRemoveFromEventList+0xac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11c      	bne.n	8001dd6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fed5 	bl	8000b50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	2201      	movs	r2, #1
 8001dac:	409a      	lsls	r2, r3
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <xTaskRemoveFromEventList+0xb0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <xTaskRemoveFromEventList+0xb0>)
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <xTaskRemoveFromEventList+0xb4>)
 8001dc6:	441a      	add	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f7fe fe61 	bl	8000a96 <vListInsertEnd>
 8001dd4:	e005      	b.n	8001de2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480e      	ldr	r0, [pc, #56]	; (8001e18 <xTaskRemoveFromEventList+0xb8>)
 8001dde:	f7fe fe5a 	bl	8000a96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <xTaskRemoveFromEventList+0xbc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d905      	bls.n	8001dfc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <xTaskRemoveFromEventList+0xc0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e001      	b.n	8001e00 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001e00:	697b      	ldr	r3, [r7, #20]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000860 	.word	0x20000860
 8001e10:	20000840 	.word	0x20000840
 8001e14:	2000073c 	.word	0x2000073c
 8001e18:	200007f8 	.word	0x200007f8
 8001e1c:	20000738 	.word	0x20000738
 8001e20:	2000084c 	.word	0x2000084c

08001e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <vTaskInternalSetTimeOutState+0x24>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <vTaskInternalSetTimeOutState+0x28>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000850 	.word	0x20000850
 8001e4c:	2000083c 	.word	0x2000083c

08001e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <xTaskCheckForTimeOut+0x24>
 8001e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e64:	f383 8811 	msr	BASEPRI, r3
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e7fe      	b.n	8001e72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <xTaskCheckForTimeOut+0x3e>
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e7fe      	b.n	8001e8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001e8e:	f000 fe7d 	bl	8002b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <xTaskCheckForTimeOut+0xb8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eaa:	d102      	bne.n	8001eb2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	e023      	b.n	8001efa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <xTaskCheckForTimeOut+0xbc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d007      	beq.n	8001ece <xTaskCheckForTimeOut+0x7e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d302      	bcc.n	8001ece <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	e015      	b.n	8001efa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d20b      	bcs.n	8001ef0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1ad2      	subs	r2, r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff9d 	bl	8001e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e004      	b.n	8001efa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001efa:	f000 fe75 	bl	8002be8 <vPortExitCritical>

	return xReturn;
 8001efe:	69fb      	ldr	r3, [r7, #28]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000083c 	.word	0x2000083c
 8001f0c:	20000850 	.word	0x20000850

08001f10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <vTaskMissedYield+0x14>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	2000084c 	.word	0x2000084c

08001f28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f30:	f000 f852 	bl	8001fd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <prvIdleTask+0x28>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d9f9      	bls.n	8001f30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <prvIdleTask+0x2c>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001f4c:	e7f0      	b.n	8001f30 <prvIdleTask+0x8>
 8001f4e:	bf00      	nop
 8001f50:	2000073c 	.word	0x2000073c
 8001f54:	e000ed04 	.word	0xe000ed04

08001f58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	e00c      	b.n	8001f7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <prvInitialiseTaskLists+0x60>)
 8001f70:	4413      	add	r3, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fd62 	bl	8000a3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	d9ef      	bls.n	8001f64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <prvInitialiseTaskLists+0x64>)
 8001f86:	f7fe fd59 	bl	8000a3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <prvInitialiseTaskLists+0x68>)
 8001f8c:	f7fe fd56 	bl	8000a3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <prvInitialiseTaskLists+0x6c>)
 8001f92:	f7fe fd53 	bl	8000a3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f96:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <prvInitialiseTaskLists+0x70>)
 8001f98:	f7fe fd50 	bl	8000a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <prvInitialiseTaskLists+0x74>)
 8001f9e:	f7fe fd4d 	bl	8000a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <prvInitialiseTaskLists+0x78>)
 8001fa4:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <prvInitialiseTaskLists+0x64>)
 8001fa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <prvInitialiseTaskLists+0x7c>)
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <prvInitialiseTaskLists+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000073c 	.word	0x2000073c
 8001fbc:	200007c8 	.word	0x200007c8
 8001fc0:	200007dc 	.word	0x200007dc
 8001fc4:	200007f8 	.word	0x200007f8
 8001fc8:	2000080c 	.word	0x2000080c
 8001fcc:	20000824 	.word	0x20000824
 8001fd0:	200007f0 	.word	0x200007f0
 8001fd4:	200007f4 	.word	0x200007f4

08001fd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fde:	e019      	b.n	8002014 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001fe0:	f000 fdd4 	bl	8002b8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <prvCheckTasksWaitingTermination+0x4c>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fdad 	bl	8000b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <prvCheckTasksWaitingTermination+0x50>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <prvCheckTasksWaitingTermination+0x50>)
 8001ffe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <prvCheckTasksWaitingTermination+0x54>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3b01      	subs	r3, #1
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <prvCheckTasksWaitingTermination+0x54>)
 8002008:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800200a:	f000 fded 	bl	8002be8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f80e 	bl	8002030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <prvCheckTasksWaitingTermination+0x54>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e1      	bne.n	8001fe0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000080c 	.word	0x2000080c
 8002028:	20000838 	.word	0x20000838
 800202c:	20000820 	.word	0x20000820

08002030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4618      	mov	r0, r3
 8002048:	f000 ff7c 	bl	8002f44 <vPortFree>
				vPortFree( pxTCB );
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 ff79 	bl	8002f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002052:	e017      	b.n	8002084 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800205a:	2b01      	cmp	r3, #1
 800205c:	d103      	bne.n	8002066 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 ff70 	bl	8002f44 <vPortFree>
	}
 8002064:	e00e      	b.n	8002084 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800206c:	2b02      	cmp	r3, #2
 800206e:	d009      	beq.n	8002084 <prvDeleteTCB+0x54>
 8002070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002074:	f383 8811 	msr	BASEPRI, r3
 8002078:	f3bf 8f6f 	isb	sy
 800207c:	f3bf 8f4f 	dsb	sy
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e7fe      	b.n	8002082 <prvDeleteTCB+0x52>
	}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <prvResetNextTaskUnblockTime+0x38>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <prvResetNextTaskUnblockTime+0x3c>)
 800209e:	f04f 32ff 	mov.w	r2, #4294967295
 80020a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020a4:	e008      	b.n	80020b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <prvResetNextTaskUnblockTime+0x38>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <prvResetNextTaskUnblockTime+0x3c>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	200007f0 	.word	0x200007f0
 80020c8:	20000858 	.word	0x20000858

080020cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <xTaskGetSchedulerState+0x34>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80020da:	2301      	movs	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	e008      	b.n	80020f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <xTaskGetSchedulerState+0x38>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80020e8:	2302      	movs	r3, #2
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	e001      	b.n	80020f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80020f2:	687b      	ldr	r3, [r7, #4]
	}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000844 	.word	0x20000844
 8002104:	20000860 	.word	0x20000860

08002108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d06c      	beq.n	80021f8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <xTaskPriorityDisinherit+0xfc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d009      	beq.n	800213c <xTaskPriorityDisinherit+0x34>
 8002128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e7fe      	b.n	800213a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <xTaskPriorityDisinherit+0x50>
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	e7fe      	b.n	8002156 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	429a      	cmp	r2, r3
 800216c:	d044      	beq.n	80021f8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d140      	bne.n	80021f8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	3304      	adds	r3, #4
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fce8 	bl	8000b50 <uxListRemove>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218a:	491f      	ldr	r1, [pc, #124]	; (8002208 <xTaskPriorityDisinherit+0x100>)
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <xTaskPriorityDisinherit+0xaa>
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	2201      	movs	r2, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <xTaskPriorityDisinherit+0x104>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4013      	ands	r3, r2
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <xTaskPriorityDisinherit+0x104>)
 80021b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f1c3 0207 	rsb	r2, r3, #7
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <xTaskPriorityDisinherit+0x104>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <xTaskPriorityDisinherit+0x104>)
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4a08      	ldr	r2, [pc, #32]	; (8002208 <xTaskPriorityDisinherit+0x100>)
 80021e6:	441a      	add	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f7fe fc51 	bl	8000a96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80021f8:	697b      	ldr	r3, [r7, #20]
	}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000738 	.word	0x20000738
 8002208:	2000073c 	.word	0x2000073c
 800220c:	20000840 	.word	0x20000840

08002210 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3304      	adds	r3, #4
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fc92 	bl	8000b50 <uxListRemove>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	2201      	movs	r2, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4013      	ands	r3, r2
 8002246:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002248:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d10a      	bne.n	8002268 <prvAddCurrentTaskToDelayedList+0x58>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	4619      	mov	r1, r3
 8002260:	481a      	ldr	r0, [pc, #104]	; (80022cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002262:	f7fe fc18 	bl	8000a96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002266:	e026      	b.n	80022b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d209      	bcs.n	8002294 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3304      	adds	r3, #4
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f7fe fc26 	bl	8000ade <vListInsert>
}
 8002292:	e010      	b.n	80022b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3304      	adds	r3, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f7fe fc1c 	bl	8000ade <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d202      	bcs.n	80022b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	6013      	str	r3, [r2, #0]
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000083c 	.word	0x2000083c
 80022c4:	20000738 	.word	0x20000738
 80022c8:	20000840 	.word	0x20000840
 80022cc:	20000824 	.word	0x20000824
 80022d0:	200007f4 	.word	0x200007f4
 80022d4:	200007f0 	.word	0x200007f0
 80022d8:	20000858 	.word	0x20000858

080022dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80022e6:	f000 fae7 	bl	80028b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <xTimerCreateTimerTask+0x80>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d021      	beq.n	8002336 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80022fa:	1d3a      	adds	r2, r7, #4
 80022fc:	f107 0108 	add.w	r1, r7, #8
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	4618      	mov	r0, r3
 8002306:	f7fd ff7d 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	9202      	str	r2, [sp, #8]
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2300      	movs	r3, #0
 800231a:	460a      	mov	r2, r1
 800231c:	4910      	ldr	r1, [pc, #64]	; (8002360 <xTimerCreateTimerTask+0x84>)
 800231e:	4811      	ldr	r0, [pc, #68]	; (8002364 <xTimerCreateTimerTask+0x88>)
 8002320:	f7ff f910 	bl	8001544 <xTaskCreateStatic>
 8002324:	4602      	mov	r2, r0
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <xTimerCreateTimerTask+0x8c>)
 8002328:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <xTimerCreateTimerTask+0x8c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002332:	2301      	movs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <xTimerCreateTimerTask+0x74>
 800233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	e7fe      	b.n	800234e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8002350:	697b      	ldr	r3, [r7, #20]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000894 	.word	0x20000894
 8002360:	08003b7c 	.word	0x08003b7c
 8002364:	0800249d 	.word	0x0800249d
 8002368:	20000898 	.word	0x20000898

0800236c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <xTimerGenericCommand+0x2c>
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	e7fe      	b.n	8002396 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <xTimerGenericCommand+0x94>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02a      	beq.n	80023f6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	dc18      	bgt.n	80023e4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80023b2:	f7ff fe8b 	bl	80020cc <xTaskGetSchedulerState>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d109      	bne.n	80023d0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <xTimerGenericCommand+0x94>)
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	f107 0114 	add.w	r1, r7, #20
 80023c4:	2300      	movs	r3, #0
 80023c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023c8:	f7fe fce6 	bl	8000d98 <xQueueGenericSend>
 80023cc:	6278      	str	r0, [r7, #36]	; 0x24
 80023ce:	e012      	b.n	80023f6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <xTimerGenericCommand+0x94>)
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	f107 0114 	add.w	r1, r7, #20
 80023d8:	2300      	movs	r3, #0
 80023da:	2200      	movs	r2, #0
 80023dc:	f7fe fcdc 	bl	8000d98 <xQueueGenericSend>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24
 80023e2:	e008      	b.n	80023f6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <xTimerGenericCommand+0x94>)
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	f107 0114 	add.w	r1, r7, #20
 80023ec:	2300      	movs	r3, #0
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f7fe fdcc 	bl	8000f8c <xQueueGenericSendFromISR>
 80023f4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000894 	.word	0x20000894

08002404 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <prvProcessExpiredTimer+0x94>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3304      	adds	r3, #4
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fb97 	bl	8000b50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d021      	beq.n	8002474 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	18d1      	adds	r1, r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f000 f8d1 	bl	80025e4 <prvInsertTimerInActiveList>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01e      	beq.n	8002486 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002448:	2300      	movs	r3, #0
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2300      	movs	r3, #0
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	2100      	movs	r1, #0
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff8a 	bl	800236c <xTimerGenericCommand>
 8002458:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d112      	bne.n	8002486 <prvProcessExpiredTimer+0x82>
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e7fe      	b.n	8002472 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	4798      	blx	r3
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000088c 	.word	0x2000088c

0800249c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024a4:	f107 0308 	add.w	r3, r7, #8
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f857 	bl	800255c <prvGetNextExpireTime>
 80024ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4619      	mov	r1, r3
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f803 	bl	80024c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80024ba:	f000 f8d5 	bl	8002668 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024be:	e7f1      	b.n	80024a4 <prvTimerTask+0x8>

080024c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80024ca:	f7ff fa2f 	bl	800192c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f866 	bl	80025a4 <prvSampleTimeNow>
 80024d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d130      	bne.n	8002542 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <prvProcessTimerOrBlockTask+0x3c>
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d806      	bhi.n	80024fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80024ee:	f7ff fa2b 	bl	8001948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff85 	bl	8002404 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80024fa:	e024      	b.n	8002546 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <prvProcessTimerOrBlockTask+0x90>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <prvProcessTimerOrBlockTask+0x50>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <prvProcessTimerOrBlockTask+0x52>
 8002510:	2300      	movs	r3, #0
 8002512:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <prvProcessTimerOrBlockTask+0x94>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe ffdb 	bl	80014dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002526:	f7ff fa0f 	bl	8001948 <xTaskResumeAll>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <prvProcessTimerOrBlockTask+0x98>)
 8002532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	f3bf 8f6f 	isb	sy
}
 8002540:	e001      	b.n	8002546 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002542:	f7ff fa01 	bl	8001948 <xTaskResumeAll>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000890 	.word	0x20000890
 8002554:	20000894 	.word	0x20000894
 8002558:	e000ed04 	.word	0xe000ed04

0800255c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <prvGetNextExpireTime+0x44>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <prvGetNextExpireTime+0x16>
 800256e:	2201      	movs	r2, #1
 8002570:	e000      	b.n	8002574 <prvGetNextExpireTime+0x18>
 8002572:	2200      	movs	r2, #0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <prvGetNextExpireTime+0x44>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	e001      	b.n	8002590 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000088c 	.word	0x2000088c

080025a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80025ac:	f7ff fa68 	bl	8001a80 <xTaskGetTickCount>
 80025b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <prvSampleTimeNow+0x3c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d205      	bcs.n	80025c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80025bc:	f000 f918 	bl	80027f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e002      	b.n	80025ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <prvSampleTimeNow+0x3c>)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80025d4:	68fb      	ldr	r3, [r7, #12]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000089c 	.word	0x2000089c

080025e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d812      	bhi.n	8002630 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	429a      	cmp	r2, r3
 8002616:	d302      	bcc.n	800261e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002618:	2301      	movs	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e01b      	b.n	8002656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <prvInsertTimerInActiveList+0x7c>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3304      	adds	r3, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f7fe fa58 	bl	8000ade <vListInsert>
 800262e:	e012      	b.n	8002656 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d206      	bcs.n	8002646 <prvInsertTimerInActiveList+0x62>
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d302      	bcc.n	8002646 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002640:	2301      	movs	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	e007      	b.n	8002656 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <prvInsertTimerInActiveList+0x80>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3304      	adds	r3, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7fe fa44 	bl	8000ade <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002656:	697b      	ldr	r3, [r7, #20]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000890 	.word	0x20000890
 8002664:	2000088c 	.word	0x2000088c

08002668 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800266e:	e0ac      	b.n	80027ca <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f2c0 80a8 	blt.w	80027c8 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	3304      	adds	r3, #4
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fa61 	bl	8000b50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff87 	bl	80025a4 <prvSampleTimeNow>
 8002696:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b09      	cmp	r3, #9
 800269c:	f200 8095 	bhi.w	80027ca <prvProcessReceivedCommands+0x162>
 80026a0:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <prvProcessReceivedCommands+0x40>)
 80026a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a6:	bf00      	nop
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	080026d1 	.word	0x080026d1
 80026b0:	080026d1 	.word	0x080026d1
 80026b4:	08002743 	.word	0x08002743
 80026b8:	08002757 	.word	0x08002757
 80026bc:	0800279f 	.word	0x0800279f
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026d1 	.word	0x080026d1
 80026c8:	08002743 	.word	0x08002743
 80026cc:	08002757 	.word	0x08002757
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	18d1      	adds	r1, r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a3a      	ldr	r2, [r7, #32]
 80026ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026f0:	f7ff ff78 	bl	80025e4 <prvInsertTimerInActiveList>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d067      	beq.n	80027ca <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d05c      	beq.n	80027ca <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	441a      	add	r2, r3
 8002718:	2300      	movs	r3, #0
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2300      	movs	r3, #0
 800271e:	2100      	movs	r1, #0
 8002720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002722:	f7ff fe23 	bl	800236c <xTimerGenericCommand>
 8002726:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d14d      	bne.n	80027ca <prvProcessReceivedCommands+0x162>
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e7fe      	b.n	8002740 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8002754:	e039      	b.n	80027ca <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <prvProcessReceivedCommands+0x122>
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e7fe      	b.n	8002788 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	18d1      	adds	r1, r2, r3
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002798:	f7ff ff24 	bl	80025e4 <prvInsertTimerInActiveList>
					break;
 800279c:	e015      	b.n	80027ca <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80027ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ae:	f000 fbc9 	bl	8002f44 <vPortFree>
 80027b2:	e00a      	b.n	80027ca <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80027c6:	e000      	b.n	80027ca <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80027c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <prvProcessReceivedCommands+0x184>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f107 0108 	add.w	r1, r7, #8
 80027d2:	2200      	movs	r2, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fc6d 	bl	80010b4 <xQueueReceive>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f af47 	bne.w	8002670 <prvProcessReceivedCommands+0x8>
	}
}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000894 	.word	0x20000894

080027f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80027f6:	e047      	b.n	8002888 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3304      	adds	r3, #4
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe f99d 	bl	8000b50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02d      	beq.n	8002888 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90e      	bls.n	800285c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3304      	adds	r3, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7fe f942 	bl	8000ade <vListInsert>
 800285a:	e015      	b.n	8002888 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2300      	movs	r3, #0
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	2100      	movs	r1, #0
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff fd80 	bl	800236c <xTimerGenericCommand>
 800286c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <prvSwitchTimerLists+0x98>
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	e7fe      	b.n	8002886 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1b2      	bne.n	80027f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <prvSwitchTimerLists+0xc4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <prvSwitchTimerLists+0xc0>)
 800289e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <prvSwitchTimerLists+0xc4>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	6013      	str	r3, [r2, #0]
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000088c 	.word	0x2000088c
 80028b4:	20000890 	.word	0x20000890

080028b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028be:	f000 f965 	bl	8002b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d120      	bne.n	800290c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80028ca:	4814      	ldr	r0, [pc, #80]	; (800291c <prvCheckForValidListAndQueue+0x64>)
 80028cc:	f7fe f8b6 	bl	8000a3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <prvCheckForValidListAndQueue+0x68>)
 80028d2:	f7fe f8b3 	bl	8000a3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <prvCheckForValidListAndQueue+0x6c>)
 80028d8:	4a10      	ldr	r2, [pc, #64]	; (800291c <prvCheckForValidListAndQueue+0x64>)
 80028da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <prvCheckForValidListAndQueue+0x70>)
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <prvCheckForValidListAndQueue+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <prvCheckForValidListAndQueue+0x74>)
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <prvCheckForValidListAndQueue+0x78>)
 80028ea:	210c      	movs	r1, #12
 80028ec:	200a      	movs	r0, #10
 80028ee:	f7fe f9c1 	bl	8000c74 <xQueueGenericCreateStatic>
 80028f2:	4602      	mov	r2, r0
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 80028f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <prvCheckForValidListAndQueue+0x60>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	490b      	ldr	r1, [pc, #44]	; (8002934 <prvCheckForValidListAndQueue+0x7c>)
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fdc0 	bl	800148c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800290c:	f000 f96c 	bl	8002be8 <vPortExitCritical>
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000894 	.word	0x20000894
 800291c:	20000864 	.word	0x20000864
 8002920:	20000878 	.word	0x20000878
 8002924:	2000088c 	.word	0x2000088c
 8002928:	20000890 	.word	0x20000890
 800292c:	20000918 	.word	0x20000918
 8002930:	200008a0 	.word	0x200008a0
 8002934:	08003b84 	.word	0x08003b84

08002938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3b04      	subs	r3, #4
 8002948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3b04      	subs	r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f023 0201 	bic.w	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b04      	subs	r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <pxPortInitialiseStack+0x64>)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b14      	subs	r3, #20
 8002972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3b04      	subs	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f06f 0202 	mvn.w	r2, #2
 8002986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3b20      	subs	r3, #32
 800298c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	080029a1 	.word	0x080029a1

080029a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <prvTaskExitError+0x50>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d009      	beq.n	80029c8 <prvTaskExitError+0x28>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	e7fe      	b.n	80029c6 <prvTaskExitError+0x26>
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80029da:	bf00      	nop
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0fc      	beq.n	80029dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000008 	.word	0x20000008
	...

08002a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <pxCurrentTCBConst2>)
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	6808      	ldr	r0, [r1, #0]
 8002a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0a:	f380 8809 	msr	PSP, r0
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f380 8811 	msr	BASEPRI, r0
 8002a1a:	4770      	bx	lr
 8002a1c:	f3af 8000 	nop.w

08002a20 <pxCurrentTCBConst2>:
 8002a20:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop

08002a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002a28:	4808      	ldr	r0, [pc, #32]	; (8002a4c <prvPortStartFirstTask+0x24>)
 8002a2a:	6800      	ldr	r0, [r0, #0]
 8002a2c:	6800      	ldr	r0, [r0, #0]
 8002a2e:	f380 8808 	msr	MSP, r0
 8002a32:	f04f 0000 	mov.w	r0, #0
 8002a36:	f380 8814 	msr	CONTROL, r0
 8002a3a:	b662      	cpsie	i
 8002a3c:	b661      	cpsie	f
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	df00      	svc	0
 8002a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002a4a:	bf00      	nop
 8002a4c:	e000ed08 	.word	0xe000ed08

08002a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a56:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <xPortStartScheduler+0x118>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a44      	ldr	r2, [pc, #272]	; (8002b6c <xPortStartScheduler+0x11c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d109      	bne.n	8002a74 <xPortStartScheduler+0x24>
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	e7fe      	b.n	8002a72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a74:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <xPortStartScheduler+0x118>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3d      	ldr	r2, [pc, #244]	; (8002b70 <xPortStartScheduler+0x120>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d109      	bne.n	8002a92 <xPortStartScheduler+0x42>
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e7fe      	b.n	8002a90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a92:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <xPortStartScheduler+0x124>)
 8002a94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <xPortStartScheduler+0x128>)
 8002ab8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002aba:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002abc:	2207      	movs	r2, #7
 8002abe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ac0:	e009      	b.n	8002ad6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	4a2c      	ldr	r2, [pc, #176]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002aca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d0ef      	beq.n	8002ac2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d009      	beq.n	8002b02 <xPortStartScheduler+0xb2>
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	e7fe      	b.n	8002b00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b14:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <xPortStartScheduler+0x12c>)
 8002b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <xPortStartScheduler+0x130>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <xPortStartScheduler+0x130>)
 8002b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <xPortStartScheduler+0x130>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <xPortStartScheduler+0x130>)
 8002b32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002b38:	f000 f8d6 	bl	8002ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <xPortStartScheduler+0x134>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002b42:	f000 f8f5 	bl	8002d30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <xPortStartScheduler+0x138>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <xPortStartScheduler+0x138>)
 8002b4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002b52:	f7ff ff69 	bl	8002a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002b56:	f7ff f85b 	bl	8001c10 <vTaskSwitchContext>
	prvTaskExitError();
 8002b5a:	f7ff ff21 	bl	80029a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	e000ed00 	.word	0xe000ed00
 8002b6c:	410fc271 	.word	0x410fc271
 8002b70:	410fc270 	.word	0x410fc270
 8002b74:	e000e400 	.word	0xe000e400
 8002b78:	20000960 	.word	0x20000960
 8002b7c:	20000964 	.word	0x20000964
 8002b80:	e000ed20 	.word	0xe000ed20
 8002b84:	20000008 	.word	0x20000008
 8002b88:	e000ef34 	.word	0xe000ef34

08002b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <vPortEnterCritical+0x54>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <vPortEnterCritical+0x54>)
 8002bac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <vPortEnterCritical+0x54>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10e      	bne.n	8002bd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <vPortEnterCritical+0x58>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <vPortEnterCritical+0x48>
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	e7fe      	b.n	8002bd2 <vPortEnterCritical+0x46>
	}
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	20000008 	.word	0x20000008
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <vPortExitCritical+0x4c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <vPortExitCritical+0x22>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	e7fe      	b.n	8002c08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <vPortExitCritical+0x4c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <vPortExitCritical+0x4c>)
 8002c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <vPortExitCritical+0x4c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <vPortExitCritical+0x3e>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000008 	.word	0x20000008
	...

08002c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c40:	f3ef 8009 	mrs	r0, PSP
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <pxCurrentTCBConst>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f01e 0f10 	tst.w	lr, #16
 8002c50:	bf08      	it	eq
 8002c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5a:	6010      	str	r0, [r2, #0]
 8002c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c64:	f380 8811 	msr	BASEPRI, r0
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f7fe ffce 	bl	8001c10 <vTaskSwitchContext>
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f380 8811 	msr	BASEPRI, r0
 8002c7c:	bc09      	pop	{r0, r3}
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	6808      	ldr	r0, [r1, #0]
 8002c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c86:	f01e 0f10 	tst.w	lr, #16
 8002c8a:	bf08      	it	eq
 8002c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c90:	f380 8809 	msr	PSP, r0
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w

08002ca0 <pxCurrentTCBConst>:
 8002ca0:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop

08002ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002cc0:	f7fe feee 	bl	8001aa0 <xTaskIncrementTick>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <xPortSysTickHandler+0x3c>)
 8002ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <vPortSetupTimerInterrupt+0x34>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <vPortSetupTimerInterrupt+0x38>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <vPortSetupTimerInterrupt+0x3c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <vPortSetupTimerInterrupt+0x40>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <vPortSetupTimerInterrupt+0x44>)
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <vPortSetupTimerInterrupt+0x34>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010
 8002d20:	e000e018 	.word	0xe000e018
 8002d24:	20000000 	.word	0x20000000
 8002d28:	10624dd3 	.word	0x10624dd3
 8002d2c:	e000e014 	.word	0xe000e014

08002d30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d40 <vPortEnableVFP+0x10>
 8002d34:	6801      	ldr	r1, [r0, #0]
 8002d36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d3a:	6001      	str	r1, [r0, #0]
 8002d3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002d3e:	bf00      	nop
 8002d40:	e000ed88 	.word	0xe000ed88

08002d44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002d4a:	f3ef 8305 	mrs	r3, IPSR
 8002d4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	d913      	bls.n	8002d7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d56:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <vPortValidateInterruptPriority+0x6c>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <vPortValidateInterruptPriority+0x70>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	7afa      	ldrb	r2, [r7, #11]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d209      	bcs.n	8002d7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	e7fe      	b.n	8002d7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <vPortValidateInterruptPriority+0x74>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <vPortValidateInterruptPriority+0x78>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d909      	bls.n	8002da2 <vPortValidateInterruptPriority+0x5e>
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	e7fe      	b.n	8002da0 <vPortValidateInterruptPriority+0x5c>
	}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e3f0 	.word	0xe000e3f0
 8002db4:	20000960 	.word	0x20000960
 8002db8:	e000ed0c 	.word	0xe000ed0c
 8002dbc:	20000964 	.word	0x20000964

08002dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002dcc:	f7fe fdae 	bl	800192c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002dd0:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <pvPortMalloc+0x170>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002dd8:	f000 f90c 	bl	8002ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <pvPortMalloc+0x174>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 808c 	bne.w	8002f02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002df0:	2208      	movs	r2, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d013      	beq.n	8002e2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f023 0307 	bic.w	r3, r3, #7
 8002e08:	3308      	adds	r3, #8
 8002e0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <pvPortMalloc+0x6a>
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e7fe      	b.n	8002e28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d068      	beq.n	8002f02 <pvPortMalloc+0x142>
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <pvPortMalloc+0x178>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d863      	bhi.n	8002f02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e3a:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <pvPortMalloc+0x17c>)
 8002e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <pvPortMalloc+0x17c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e44:	e004      	b.n	8002e50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d903      	bls.n	8002e62 <pvPortMalloc+0xa2>
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f1      	bne.n	8002e46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <pvPortMalloc+0x170>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d04a      	beq.n	8002f02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2208      	movs	r2, #8
 8002e72:	4413      	add	r3, r2
 8002e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad2      	subs	r2, r2, r3
 8002e86:	2308      	movs	r3, #8
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d91e      	bls.n	8002ecc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <pvPortMalloc+0xf4>
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	e7fe      	b.n	8002eb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	1ad2      	subs	r2, r2, r3
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ec6:	69b8      	ldr	r0, [r7, #24]
 8002ec8:	f000 f8f6 	bl	80030b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <pvPortMalloc+0x178>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <pvPortMalloc+0x178>)
 8002ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <pvPortMalloc+0x178>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <pvPortMalloc+0x180>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d203      	bcs.n	8002eee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <pvPortMalloc+0x178>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <pvPortMalloc+0x180>)
 8002eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <pvPortMalloc+0x174>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f02:	f7fe fd21 	bl	8001948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <pvPortMalloc+0x164>
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e7fe      	b.n	8002f22 <pvPortMalloc+0x162>
	return pvReturn;
 8002f24:	69fb      	ldr	r3, [r7, #28]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3728      	adds	r7, #40	; 0x28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20004570 	.word	0x20004570
 8002f34:	2000457c 	.word	0x2000457c
 8002f38:	20004574 	.word	0x20004574
 8002f3c:	20004568 	.word	0x20004568
 8002f40:	20004578 	.word	0x20004578

08002f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d046      	beq.n	8002fe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002f56:	2308      	movs	r3, #8
 8002f58:	425b      	negs	r3, r3
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <vPortFree+0xa8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <vPortFree+0x42>
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e7fe      	b.n	8002f84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <vPortFree+0x5e>
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e7fe      	b.n	8002fa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <vPortFree+0xa8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d019      	beq.n	8002fe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d115      	bne.n	8002fe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <vPortFree+0xa8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002fc8:	f7fe fcb0 	bl	800192c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <vPortFree+0xac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <vPortFree+0xac>)
 8002fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002fda:	6938      	ldr	r0, [r7, #16]
 8002fdc:	f000 f86c 	bl	80030b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002fe0:	f7fe fcb2 	bl	8001948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000457c 	.word	0x2000457c
 8002ff0:	20004574 	.word	0x20004574

08002ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <prvHeapInit+0xac>)
 8003002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3307      	adds	r3, #7
 8003012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	4a1f      	ldr	r2, [pc, #124]	; (80030a0 <prvHeapInit+0xac>)
 8003024:	4413      	add	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800302c:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <prvHeapInit+0xb0>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <prvHeapInit+0xb0>)
 8003034:	2200      	movs	r2, #0
 8003036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003040:	2208      	movs	r2, #8
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <prvHeapInit+0xb4>)
 8003054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <prvHeapInit+0xb4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800305e:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <prvHeapInit+0xb4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	1ad2      	subs	r2, r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <prvHeapInit+0xb4>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <prvHeapInit+0xb8>)
 8003082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <prvHeapInit+0xbc>)
 800308a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <prvHeapInit+0xc0>)
 800308e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	20000968 	.word	0x20000968
 80030a4:	20004568 	.word	0x20004568
 80030a8:	20004570 	.word	0x20004570
 80030ac:	20004578 	.word	0x20004578
 80030b0:	20004574 	.word	0x20004574
 80030b4:	2000457c 	.word	0x2000457c

080030b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <prvInsertBlockIntoFreeList+0xac>)
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e002      	b.n	80030cc <prvInsertBlockIntoFreeList+0x14>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d8f7      	bhi.n	80030c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d108      	bne.n	80030fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	441a      	add	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	441a      	add	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d118      	bne.n	8003140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <prvInsertBlockIntoFreeList+0xb0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d00d      	beq.n	8003136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e008      	b.n	8003148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <prvInsertBlockIntoFreeList+0xb0>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	e003      	b.n	8003148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d002      	beq.n	8003156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20004568 	.word	0x20004568
 8003168:	20004570 	.word	0x20004570

0800316c <__errno>:
 800316c:	4b01      	ldr	r3, [pc, #4]	; (8003174 <__errno+0x8>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	2000000c 	.word	0x2000000c

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4e0d      	ldr	r6, [pc, #52]	; (80031b0 <__libc_init_array+0x38>)
 800317c:	4c0d      	ldr	r4, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 800317e:	1ba4      	subs	r4, r4, r6
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	2500      	movs	r5, #0
 8003184:	42a5      	cmp	r5, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	4e0b      	ldr	r6, [pc, #44]	; (80031b8 <__libc_init_array+0x40>)
 800318a:	4c0c      	ldr	r4, [pc, #48]	; (80031bc <__libc_init_array+0x44>)
 800318c:	f000 fc94 	bl	8003ab8 <_init>
 8003190:	1ba4      	subs	r4, r4, r6
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	2500      	movs	r5, #0
 8003196:	42a5      	cmp	r5, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031a0:	4798      	blx	r3
 80031a2:	3501      	adds	r5, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031aa:	4798      	blx	r3
 80031ac:	3501      	adds	r5, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	08003bf0 	.word	0x08003bf0
 80031b4:	08003bf0 	.word	0x08003bf0
 80031b8:	08003bf0 	.word	0x08003bf0
 80031bc:	08003bf4 	.word	0x08003bf4

080031c0 <memcpy>:
 80031c0:	b510      	push	{r4, lr}
 80031c2:	1e43      	subs	r3, r0, #1
 80031c4:	440a      	add	r2, r1
 80031c6:	4291      	cmp	r1, r2
 80031c8:	d100      	bne.n	80031cc <memcpy+0xc>
 80031ca:	bd10      	pop	{r4, pc}
 80031cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031d4:	e7f7      	b.n	80031c6 <memcpy+0x6>

080031d6 <memset>:
 80031d6:	4402      	add	r2, r0
 80031d8:	4603      	mov	r3, r0
 80031da:	4293      	cmp	r3, r2
 80031dc:	d100      	bne.n	80031e0 <memset+0xa>
 80031de:	4770      	bx	lr
 80031e0:	f803 1b01 	strb.w	r1, [r3], #1
 80031e4:	e7f9      	b.n	80031da <memset+0x4>
	...

080031e8 <_puts_r>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	460e      	mov	r6, r1
 80031ec:	4605      	mov	r5, r0
 80031ee:	b118      	cbz	r0, 80031f8 <_puts_r+0x10>
 80031f0:	6983      	ldr	r3, [r0, #24]
 80031f2:	b90b      	cbnz	r3, 80031f8 <_puts_r+0x10>
 80031f4:	f000 fa0c 	bl	8003610 <__sinit>
 80031f8:	69ab      	ldr	r3, [r5, #24]
 80031fa:	68ac      	ldr	r4, [r5, #8]
 80031fc:	b913      	cbnz	r3, 8003204 <_puts_r+0x1c>
 80031fe:	4628      	mov	r0, r5
 8003200:	f000 fa06 	bl	8003610 <__sinit>
 8003204:	4b23      	ldr	r3, [pc, #140]	; (8003294 <_puts_r+0xac>)
 8003206:	429c      	cmp	r4, r3
 8003208:	d117      	bne.n	800323a <_puts_r+0x52>
 800320a:	686c      	ldr	r4, [r5, #4]
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	071b      	lsls	r3, r3, #28
 8003210:	d51d      	bpl.n	800324e <_puts_r+0x66>
 8003212:	6923      	ldr	r3, [r4, #16]
 8003214:	b1db      	cbz	r3, 800324e <_puts_r+0x66>
 8003216:	3e01      	subs	r6, #1
 8003218:	68a3      	ldr	r3, [r4, #8]
 800321a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800321e:	3b01      	subs	r3, #1
 8003220:	60a3      	str	r3, [r4, #8]
 8003222:	b9e9      	cbnz	r1, 8003260 <_puts_r+0x78>
 8003224:	2b00      	cmp	r3, #0
 8003226:	da2e      	bge.n	8003286 <_puts_r+0x9e>
 8003228:	4622      	mov	r2, r4
 800322a:	210a      	movs	r1, #10
 800322c:	4628      	mov	r0, r5
 800322e:	f000 f83f 	bl	80032b0 <__swbuf_r>
 8003232:	3001      	adds	r0, #1
 8003234:	d011      	beq.n	800325a <_puts_r+0x72>
 8003236:	200a      	movs	r0, #10
 8003238:	e011      	b.n	800325e <_puts_r+0x76>
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <_puts_r+0xb0>)
 800323c:	429c      	cmp	r4, r3
 800323e:	d101      	bne.n	8003244 <_puts_r+0x5c>
 8003240:	68ac      	ldr	r4, [r5, #8]
 8003242:	e7e3      	b.n	800320c <_puts_r+0x24>
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <_puts_r+0xb4>)
 8003246:	429c      	cmp	r4, r3
 8003248:	bf08      	it	eq
 800324a:	68ec      	ldreq	r4, [r5, #12]
 800324c:	e7de      	b.n	800320c <_puts_r+0x24>
 800324e:	4621      	mov	r1, r4
 8003250:	4628      	mov	r0, r5
 8003252:	f000 f87f 	bl	8003354 <__swsetup_r>
 8003256:	2800      	cmp	r0, #0
 8003258:	d0dd      	beq.n	8003216 <_puts_r+0x2e>
 800325a:	f04f 30ff 	mov.w	r0, #4294967295
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	2b00      	cmp	r3, #0
 8003262:	da04      	bge.n	800326e <_puts_r+0x86>
 8003264:	69a2      	ldr	r2, [r4, #24]
 8003266:	429a      	cmp	r2, r3
 8003268:	dc06      	bgt.n	8003278 <_puts_r+0x90>
 800326a:	290a      	cmp	r1, #10
 800326c:	d004      	beq.n	8003278 <_puts_r+0x90>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	6022      	str	r2, [r4, #0]
 8003274:	7019      	strb	r1, [r3, #0]
 8003276:	e7cf      	b.n	8003218 <_puts_r+0x30>
 8003278:	4622      	mov	r2, r4
 800327a:	4628      	mov	r0, r5
 800327c:	f000 f818 	bl	80032b0 <__swbuf_r>
 8003280:	3001      	adds	r0, #1
 8003282:	d1c9      	bne.n	8003218 <_puts_r+0x30>
 8003284:	e7e9      	b.n	800325a <_puts_r+0x72>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	200a      	movs	r0, #10
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	6022      	str	r2, [r4, #0]
 800328e:	7018      	strb	r0, [r3, #0]
 8003290:	e7e5      	b.n	800325e <_puts_r+0x76>
 8003292:	bf00      	nop
 8003294:	08003bb0 	.word	0x08003bb0
 8003298:	08003bd0 	.word	0x08003bd0
 800329c:	08003b90 	.word	0x08003b90

080032a0 <puts>:
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <puts+0xc>)
 80032a2:	4601      	mov	r1, r0
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	f7ff bf9f 	b.w	80031e8 <_puts_r>
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <__swbuf_r>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	460e      	mov	r6, r1
 80032b4:	4614      	mov	r4, r2
 80032b6:	4605      	mov	r5, r0
 80032b8:	b118      	cbz	r0, 80032c2 <__swbuf_r+0x12>
 80032ba:	6983      	ldr	r3, [r0, #24]
 80032bc:	b90b      	cbnz	r3, 80032c2 <__swbuf_r+0x12>
 80032be:	f000 f9a7 	bl	8003610 <__sinit>
 80032c2:	4b21      	ldr	r3, [pc, #132]	; (8003348 <__swbuf_r+0x98>)
 80032c4:	429c      	cmp	r4, r3
 80032c6:	d12a      	bne.n	800331e <__swbuf_r+0x6e>
 80032c8:	686c      	ldr	r4, [r5, #4]
 80032ca:	69a3      	ldr	r3, [r4, #24]
 80032cc:	60a3      	str	r3, [r4, #8]
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	071a      	lsls	r2, r3, #28
 80032d2:	d52e      	bpl.n	8003332 <__swbuf_r+0x82>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	b363      	cbz	r3, 8003332 <__swbuf_r+0x82>
 80032d8:	6923      	ldr	r3, [r4, #16]
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	1ac0      	subs	r0, r0, r3
 80032de:	6963      	ldr	r3, [r4, #20]
 80032e0:	b2f6      	uxtb	r6, r6
 80032e2:	4283      	cmp	r3, r0
 80032e4:	4637      	mov	r7, r6
 80032e6:	dc04      	bgt.n	80032f2 <__swbuf_r+0x42>
 80032e8:	4621      	mov	r1, r4
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 f926 	bl	800353c <_fflush_r>
 80032f0:	bb28      	cbnz	r0, 800333e <__swbuf_r+0x8e>
 80032f2:	68a3      	ldr	r3, [r4, #8]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	60a3      	str	r3, [r4, #8]
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	6022      	str	r2, [r4, #0]
 80032fe:	701e      	strb	r6, [r3, #0]
 8003300:	6963      	ldr	r3, [r4, #20]
 8003302:	3001      	adds	r0, #1
 8003304:	4283      	cmp	r3, r0
 8003306:	d004      	beq.n	8003312 <__swbuf_r+0x62>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	07db      	lsls	r3, r3, #31
 800330c:	d519      	bpl.n	8003342 <__swbuf_r+0x92>
 800330e:	2e0a      	cmp	r6, #10
 8003310:	d117      	bne.n	8003342 <__swbuf_r+0x92>
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 f911 	bl	800353c <_fflush_r>
 800331a:	b190      	cbz	r0, 8003342 <__swbuf_r+0x92>
 800331c:	e00f      	b.n	800333e <__swbuf_r+0x8e>
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <__swbuf_r+0x9c>)
 8003320:	429c      	cmp	r4, r3
 8003322:	d101      	bne.n	8003328 <__swbuf_r+0x78>
 8003324:	68ac      	ldr	r4, [r5, #8]
 8003326:	e7d0      	b.n	80032ca <__swbuf_r+0x1a>
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <__swbuf_r+0xa0>)
 800332a:	429c      	cmp	r4, r3
 800332c:	bf08      	it	eq
 800332e:	68ec      	ldreq	r4, [r5, #12]
 8003330:	e7cb      	b.n	80032ca <__swbuf_r+0x1a>
 8003332:	4621      	mov	r1, r4
 8003334:	4628      	mov	r0, r5
 8003336:	f000 f80d 	bl	8003354 <__swsetup_r>
 800333a:	2800      	cmp	r0, #0
 800333c:	d0cc      	beq.n	80032d8 <__swbuf_r+0x28>
 800333e:	f04f 37ff 	mov.w	r7, #4294967295
 8003342:	4638      	mov	r0, r7
 8003344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003346:	bf00      	nop
 8003348:	08003bb0 	.word	0x08003bb0
 800334c:	08003bd0 	.word	0x08003bd0
 8003350:	08003b90 	.word	0x08003b90

08003354 <__swsetup_r>:
 8003354:	4b32      	ldr	r3, [pc, #200]	; (8003420 <__swsetup_r+0xcc>)
 8003356:	b570      	push	{r4, r5, r6, lr}
 8003358:	681d      	ldr	r5, [r3, #0]
 800335a:	4606      	mov	r6, r0
 800335c:	460c      	mov	r4, r1
 800335e:	b125      	cbz	r5, 800336a <__swsetup_r+0x16>
 8003360:	69ab      	ldr	r3, [r5, #24]
 8003362:	b913      	cbnz	r3, 800336a <__swsetup_r+0x16>
 8003364:	4628      	mov	r0, r5
 8003366:	f000 f953 	bl	8003610 <__sinit>
 800336a:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <__swsetup_r+0xd0>)
 800336c:	429c      	cmp	r4, r3
 800336e:	d10f      	bne.n	8003390 <__swsetup_r+0x3c>
 8003370:	686c      	ldr	r4, [r5, #4]
 8003372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003376:	b29a      	uxth	r2, r3
 8003378:	0715      	lsls	r5, r2, #28
 800337a:	d42c      	bmi.n	80033d6 <__swsetup_r+0x82>
 800337c:	06d0      	lsls	r0, r2, #27
 800337e:	d411      	bmi.n	80033a4 <__swsetup_r+0x50>
 8003380:	2209      	movs	r2, #9
 8003382:	6032      	str	r2, [r6, #0]
 8003384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003388:	81a3      	strh	r3, [r4, #12]
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	e03e      	b.n	800340e <__swsetup_r+0xba>
 8003390:	4b25      	ldr	r3, [pc, #148]	; (8003428 <__swsetup_r+0xd4>)
 8003392:	429c      	cmp	r4, r3
 8003394:	d101      	bne.n	800339a <__swsetup_r+0x46>
 8003396:	68ac      	ldr	r4, [r5, #8]
 8003398:	e7eb      	b.n	8003372 <__swsetup_r+0x1e>
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <__swsetup_r+0xd8>)
 800339c:	429c      	cmp	r4, r3
 800339e:	bf08      	it	eq
 80033a0:	68ec      	ldreq	r4, [r5, #12]
 80033a2:	e7e6      	b.n	8003372 <__swsetup_r+0x1e>
 80033a4:	0751      	lsls	r1, r2, #29
 80033a6:	d512      	bpl.n	80033ce <__swsetup_r+0x7a>
 80033a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033aa:	b141      	cbz	r1, 80033be <__swsetup_r+0x6a>
 80033ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b0:	4299      	cmp	r1, r3
 80033b2:	d002      	beq.n	80033ba <__swsetup_r+0x66>
 80033b4:	4630      	mov	r0, r6
 80033b6:	f000 fa19 	bl	80037ec <_free_r>
 80033ba:	2300      	movs	r3, #0
 80033bc:	6363      	str	r3, [r4, #52]	; 0x34
 80033be:	89a3      	ldrh	r3, [r4, #12]
 80033c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	2300      	movs	r3, #0
 80033c8:	6063      	str	r3, [r4, #4]
 80033ca:	6923      	ldr	r3, [r4, #16]
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	81a3      	strh	r3, [r4, #12]
 80033d6:	6923      	ldr	r3, [r4, #16]
 80033d8:	b94b      	cbnz	r3, 80033ee <__swsetup_r+0x9a>
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e4:	d003      	beq.n	80033ee <__swsetup_r+0x9a>
 80033e6:	4621      	mov	r1, r4
 80033e8:	4630      	mov	r0, r6
 80033ea:	f000 f9bf 	bl	800376c <__smakebuf_r>
 80033ee:	89a2      	ldrh	r2, [r4, #12]
 80033f0:	f012 0301 	ands.w	r3, r2, #1
 80033f4:	d00c      	beq.n	8003410 <__swsetup_r+0xbc>
 80033f6:	2300      	movs	r3, #0
 80033f8:	60a3      	str	r3, [r4, #8]
 80033fa:	6963      	ldr	r3, [r4, #20]
 80033fc:	425b      	negs	r3, r3
 80033fe:	61a3      	str	r3, [r4, #24]
 8003400:	6923      	ldr	r3, [r4, #16]
 8003402:	b953      	cbnz	r3, 800341a <__swsetup_r+0xc6>
 8003404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003408:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800340c:	d1ba      	bne.n	8003384 <__swsetup_r+0x30>
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	0792      	lsls	r2, r2, #30
 8003412:	bf58      	it	pl
 8003414:	6963      	ldrpl	r3, [r4, #20]
 8003416:	60a3      	str	r3, [r4, #8]
 8003418:	e7f2      	b.n	8003400 <__swsetup_r+0xac>
 800341a:	2000      	movs	r0, #0
 800341c:	e7f7      	b.n	800340e <__swsetup_r+0xba>
 800341e:	bf00      	nop
 8003420:	2000000c 	.word	0x2000000c
 8003424:	08003bb0 	.word	0x08003bb0
 8003428:	08003bd0 	.word	0x08003bd0
 800342c:	08003b90 	.word	0x08003b90

08003430 <__sflush_r>:
 8003430:	898a      	ldrh	r2, [r1, #12]
 8003432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003436:	4605      	mov	r5, r0
 8003438:	0710      	lsls	r0, r2, #28
 800343a:	460c      	mov	r4, r1
 800343c:	d458      	bmi.n	80034f0 <__sflush_r+0xc0>
 800343e:	684b      	ldr	r3, [r1, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	dc05      	bgt.n	8003450 <__sflush_r+0x20>
 8003444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	dc02      	bgt.n	8003450 <__sflush_r+0x20>
 800344a:	2000      	movs	r0, #0
 800344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003452:	2e00      	cmp	r6, #0
 8003454:	d0f9      	beq.n	800344a <__sflush_r+0x1a>
 8003456:	2300      	movs	r3, #0
 8003458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800345c:	682f      	ldr	r7, [r5, #0]
 800345e:	6a21      	ldr	r1, [r4, #32]
 8003460:	602b      	str	r3, [r5, #0]
 8003462:	d032      	beq.n	80034ca <__sflush_r+0x9a>
 8003464:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	075a      	lsls	r2, r3, #29
 800346a:	d505      	bpl.n	8003478 <__sflush_r+0x48>
 800346c:	6863      	ldr	r3, [r4, #4]
 800346e:	1ac0      	subs	r0, r0, r3
 8003470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003472:	b10b      	cbz	r3, 8003478 <__sflush_r+0x48>
 8003474:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003476:	1ac0      	subs	r0, r0, r3
 8003478:	2300      	movs	r3, #0
 800347a:	4602      	mov	r2, r0
 800347c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800347e:	6a21      	ldr	r1, [r4, #32]
 8003480:	4628      	mov	r0, r5
 8003482:	47b0      	blx	r6
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	d106      	bne.n	8003498 <__sflush_r+0x68>
 800348a:	6829      	ldr	r1, [r5, #0]
 800348c:	291d      	cmp	r1, #29
 800348e:	d848      	bhi.n	8003522 <__sflush_r+0xf2>
 8003490:	4a29      	ldr	r2, [pc, #164]	; (8003538 <__sflush_r+0x108>)
 8003492:	40ca      	lsrs	r2, r1
 8003494:	07d6      	lsls	r6, r2, #31
 8003496:	d544      	bpl.n	8003522 <__sflush_r+0xf2>
 8003498:	2200      	movs	r2, #0
 800349a:	6062      	str	r2, [r4, #4]
 800349c:	04d9      	lsls	r1, r3, #19
 800349e:	6922      	ldr	r2, [r4, #16]
 80034a0:	6022      	str	r2, [r4, #0]
 80034a2:	d504      	bpl.n	80034ae <__sflush_r+0x7e>
 80034a4:	1c42      	adds	r2, r0, #1
 80034a6:	d101      	bne.n	80034ac <__sflush_r+0x7c>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	b903      	cbnz	r3, 80034ae <__sflush_r+0x7e>
 80034ac:	6560      	str	r0, [r4, #84]	; 0x54
 80034ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034b0:	602f      	str	r7, [r5, #0]
 80034b2:	2900      	cmp	r1, #0
 80034b4:	d0c9      	beq.n	800344a <__sflush_r+0x1a>
 80034b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034ba:	4299      	cmp	r1, r3
 80034bc:	d002      	beq.n	80034c4 <__sflush_r+0x94>
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 f994 	bl	80037ec <_free_r>
 80034c4:	2000      	movs	r0, #0
 80034c6:	6360      	str	r0, [r4, #52]	; 0x34
 80034c8:	e7c0      	b.n	800344c <__sflush_r+0x1c>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4628      	mov	r0, r5
 80034ce:	47b0      	blx	r6
 80034d0:	1c41      	adds	r1, r0, #1
 80034d2:	d1c8      	bne.n	8003466 <__sflush_r+0x36>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0c5      	beq.n	8003466 <__sflush_r+0x36>
 80034da:	2b1d      	cmp	r3, #29
 80034dc:	d001      	beq.n	80034e2 <__sflush_r+0xb2>
 80034de:	2b16      	cmp	r3, #22
 80034e0:	d101      	bne.n	80034e6 <__sflush_r+0xb6>
 80034e2:	602f      	str	r7, [r5, #0]
 80034e4:	e7b1      	b.n	800344a <__sflush_r+0x1a>
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ec:	81a3      	strh	r3, [r4, #12]
 80034ee:	e7ad      	b.n	800344c <__sflush_r+0x1c>
 80034f0:	690f      	ldr	r7, [r1, #16]
 80034f2:	2f00      	cmp	r7, #0
 80034f4:	d0a9      	beq.n	800344a <__sflush_r+0x1a>
 80034f6:	0793      	lsls	r3, r2, #30
 80034f8:	680e      	ldr	r6, [r1, #0]
 80034fa:	bf08      	it	eq
 80034fc:	694b      	ldreq	r3, [r1, #20]
 80034fe:	600f      	str	r7, [r1, #0]
 8003500:	bf18      	it	ne
 8003502:	2300      	movne	r3, #0
 8003504:	eba6 0807 	sub.w	r8, r6, r7
 8003508:	608b      	str	r3, [r1, #8]
 800350a:	f1b8 0f00 	cmp.w	r8, #0
 800350e:	dd9c      	ble.n	800344a <__sflush_r+0x1a>
 8003510:	4643      	mov	r3, r8
 8003512:	463a      	mov	r2, r7
 8003514:	6a21      	ldr	r1, [r4, #32]
 8003516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003518:	4628      	mov	r0, r5
 800351a:	47b0      	blx	r6
 800351c:	2800      	cmp	r0, #0
 800351e:	dc06      	bgt.n	800352e <__sflush_r+0xfe>
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	e78e      	b.n	800344c <__sflush_r+0x1c>
 800352e:	4407      	add	r7, r0
 8003530:	eba8 0800 	sub.w	r8, r8, r0
 8003534:	e7e9      	b.n	800350a <__sflush_r+0xda>
 8003536:	bf00      	nop
 8003538:	20400001 	.word	0x20400001

0800353c <_fflush_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	690b      	ldr	r3, [r1, #16]
 8003540:	4605      	mov	r5, r0
 8003542:	460c      	mov	r4, r1
 8003544:	b1db      	cbz	r3, 800357e <_fflush_r+0x42>
 8003546:	b118      	cbz	r0, 8003550 <_fflush_r+0x14>
 8003548:	6983      	ldr	r3, [r0, #24]
 800354a:	b90b      	cbnz	r3, 8003550 <_fflush_r+0x14>
 800354c:	f000 f860 	bl	8003610 <__sinit>
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <_fflush_r+0x48>)
 8003552:	429c      	cmp	r4, r3
 8003554:	d109      	bne.n	800356a <_fflush_r+0x2e>
 8003556:	686c      	ldr	r4, [r5, #4]
 8003558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355c:	b17b      	cbz	r3, 800357e <_fflush_r+0x42>
 800355e:	4621      	mov	r1, r4
 8003560:	4628      	mov	r0, r5
 8003562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003566:	f7ff bf63 	b.w	8003430 <__sflush_r>
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <_fflush_r+0x4c>)
 800356c:	429c      	cmp	r4, r3
 800356e:	d101      	bne.n	8003574 <_fflush_r+0x38>
 8003570:	68ac      	ldr	r4, [r5, #8]
 8003572:	e7f1      	b.n	8003558 <_fflush_r+0x1c>
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <_fflush_r+0x50>)
 8003576:	429c      	cmp	r4, r3
 8003578:	bf08      	it	eq
 800357a:	68ec      	ldreq	r4, [r5, #12]
 800357c:	e7ec      	b.n	8003558 <_fflush_r+0x1c>
 800357e:	2000      	movs	r0, #0
 8003580:	bd38      	pop	{r3, r4, r5, pc}
 8003582:	bf00      	nop
 8003584:	08003bb0 	.word	0x08003bb0
 8003588:	08003bd0 	.word	0x08003bd0
 800358c:	08003b90 	.word	0x08003b90

08003590 <std>:
 8003590:	2300      	movs	r3, #0
 8003592:	b510      	push	{r4, lr}
 8003594:	4604      	mov	r4, r0
 8003596:	e9c0 3300 	strd	r3, r3, [r0]
 800359a:	6083      	str	r3, [r0, #8]
 800359c:	8181      	strh	r1, [r0, #12]
 800359e:	6643      	str	r3, [r0, #100]	; 0x64
 80035a0:	81c2      	strh	r2, [r0, #14]
 80035a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035a6:	6183      	str	r3, [r0, #24]
 80035a8:	4619      	mov	r1, r3
 80035aa:	2208      	movs	r2, #8
 80035ac:	305c      	adds	r0, #92	; 0x5c
 80035ae:	f7ff fe12 	bl	80031d6 <memset>
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <std+0x38>)
 80035b4:	6263      	str	r3, [r4, #36]	; 0x24
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <std+0x3c>)
 80035b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <std+0x40>)
 80035bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <std+0x44>)
 80035c0:	6224      	str	r4, [r4, #32]
 80035c2:	6323      	str	r3, [r4, #48]	; 0x30
 80035c4:	bd10      	pop	{r4, pc}
 80035c6:	bf00      	nop
 80035c8:	0800395d 	.word	0x0800395d
 80035cc:	0800397f 	.word	0x0800397f
 80035d0:	080039b7 	.word	0x080039b7
 80035d4:	080039db 	.word	0x080039db

080035d8 <_cleanup_r>:
 80035d8:	4901      	ldr	r1, [pc, #4]	; (80035e0 <_cleanup_r+0x8>)
 80035da:	f000 b885 	b.w	80036e8 <_fwalk_reent>
 80035de:	bf00      	nop
 80035e0:	0800353d 	.word	0x0800353d

080035e4 <__sfmoreglue>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	1e4a      	subs	r2, r1, #1
 80035e8:	2568      	movs	r5, #104	; 0x68
 80035ea:	4355      	muls	r5, r2
 80035ec:	460e      	mov	r6, r1
 80035ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035f2:	f000 f949 	bl	8003888 <_malloc_r>
 80035f6:	4604      	mov	r4, r0
 80035f8:	b140      	cbz	r0, 800360c <__sfmoreglue+0x28>
 80035fa:	2100      	movs	r1, #0
 80035fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003600:	300c      	adds	r0, #12
 8003602:	60a0      	str	r0, [r4, #8]
 8003604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003608:	f7ff fde5 	bl	80031d6 <memset>
 800360c:	4620      	mov	r0, r4
 800360e:	bd70      	pop	{r4, r5, r6, pc}

08003610 <__sinit>:
 8003610:	6983      	ldr	r3, [r0, #24]
 8003612:	b510      	push	{r4, lr}
 8003614:	4604      	mov	r4, r0
 8003616:	bb33      	cbnz	r3, 8003666 <__sinit+0x56>
 8003618:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800361c:	6503      	str	r3, [r0, #80]	; 0x50
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <__sinit+0x58>)
 8003620:	4a12      	ldr	r2, [pc, #72]	; (800366c <__sinit+0x5c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6282      	str	r2, [r0, #40]	; 0x28
 8003626:	4298      	cmp	r0, r3
 8003628:	bf04      	itt	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	6183      	streq	r3, [r0, #24]
 800362e:	f000 f81f 	bl	8003670 <__sfp>
 8003632:	6060      	str	r0, [r4, #4]
 8003634:	4620      	mov	r0, r4
 8003636:	f000 f81b 	bl	8003670 <__sfp>
 800363a:	60a0      	str	r0, [r4, #8]
 800363c:	4620      	mov	r0, r4
 800363e:	f000 f817 	bl	8003670 <__sfp>
 8003642:	2200      	movs	r2, #0
 8003644:	60e0      	str	r0, [r4, #12]
 8003646:	2104      	movs	r1, #4
 8003648:	6860      	ldr	r0, [r4, #4]
 800364a:	f7ff ffa1 	bl	8003590 <std>
 800364e:	2201      	movs	r2, #1
 8003650:	2109      	movs	r1, #9
 8003652:	68a0      	ldr	r0, [r4, #8]
 8003654:	f7ff ff9c 	bl	8003590 <std>
 8003658:	2202      	movs	r2, #2
 800365a:	2112      	movs	r1, #18
 800365c:	68e0      	ldr	r0, [r4, #12]
 800365e:	f7ff ff97 	bl	8003590 <std>
 8003662:	2301      	movs	r3, #1
 8003664:	61a3      	str	r3, [r4, #24]
 8003666:	bd10      	pop	{r4, pc}
 8003668:	08003b8c 	.word	0x08003b8c
 800366c:	080035d9 	.word	0x080035d9

08003670 <__sfp>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <__sfp+0x70>)
 8003674:	681e      	ldr	r6, [r3, #0]
 8003676:	69b3      	ldr	r3, [r6, #24]
 8003678:	4607      	mov	r7, r0
 800367a:	b913      	cbnz	r3, 8003682 <__sfp+0x12>
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff ffc7 	bl	8003610 <__sinit>
 8003682:	3648      	adds	r6, #72	; 0x48
 8003684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003688:	3b01      	subs	r3, #1
 800368a:	d503      	bpl.n	8003694 <__sfp+0x24>
 800368c:	6833      	ldr	r3, [r6, #0]
 800368e:	b133      	cbz	r3, 800369e <__sfp+0x2e>
 8003690:	6836      	ldr	r6, [r6, #0]
 8003692:	e7f7      	b.n	8003684 <__sfp+0x14>
 8003694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003698:	b16d      	cbz	r5, 80036b6 <__sfp+0x46>
 800369a:	3468      	adds	r4, #104	; 0x68
 800369c:	e7f4      	b.n	8003688 <__sfp+0x18>
 800369e:	2104      	movs	r1, #4
 80036a0:	4638      	mov	r0, r7
 80036a2:	f7ff ff9f 	bl	80035e4 <__sfmoreglue>
 80036a6:	6030      	str	r0, [r6, #0]
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d1f1      	bne.n	8003690 <__sfp+0x20>
 80036ac:	230c      	movs	r3, #12
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4604      	mov	r4, r0
 80036b2:	4620      	mov	r0, r4
 80036b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <__sfp+0x74>)
 80036b8:	6665      	str	r5, [r4, #100]	; 0x64
 80036ba:	e9c4 5500 	strd	r5, r5, [r4]
 80036be:	60a5      	str	r5, [r4, #8]
 80036c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80036c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80036c8:	2208      	movs	r2, #8
 80036ca:	4629      	mov	r1, r5
 80036cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036d0:	f7ff fd81 	bl	80031d6 <memset>
 80036d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036dc:	e7e9      	b.n	80036b2 <__sfp+0x42>
 80036de:	bf00      	nop
 80036e0:	08003b8c 	.word	0x08003b8c
 80036e4:	ffff0001 	.word	0xffff0001

080036e8 <_fwalk_reent>:
 80036e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036ec:	4680      	mov	r8, r0
 80036ee:	4689      	mov	r9, r1
 80036f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036f4:	2600      	movs	r6, #0
 80036f6:	b914      	cbnz	r4, 80036fe <_fwalk_reent+0x16>
 80036f8:	4630      	mov	r0, r6
 80036fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003702:	3f01      	subs	r7, #1
 8003704:	d501      	bpl.n	800370a <_fwalk_reent+0x22>
 8003706:	6824      	ldr	r4, [r4, #0]
 8003708:	e7f5      	b.n	80036f6 <_fwalk_reent+0xe>
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d907      	bls.n	8003720 <_fwalk_reent+0x38>
 8003710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003714:	3301      	adds	r3, #1
 8003716:	d003      	beq.n	8003720 <_fwalk_reent+0x38>
 8003718:	4629      	mov	r1, r5
 800371a:	4640      	mov	r0, r8
 800371c:	47c8      	blx	r9
 800371e:	4306      	orrs	r6, r0
 8003720:	3568      	adds	r5, #104	; 0x68
 8003722:	e7ee      	b.n	8003702 <_fwalk_reent+0x1a>

08003724 <__swhatbuf_r>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	460e      	mov	r6, r1
 8003728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800372c:	2900      	cmp	r1, #0
 800372e:	b096      	sub	sp, #88	; 0x58
 8003730:	4614      	mov	r4, r2
 8003732:	461d      	mov	r5, r3
 8003734:	da07      	bge.n	8003746 <__swhatbuf_r+0x22>
 8003736:	2300      	movs	r3, #0
 8003738:	602b      	str	r3, [r5, #0]
 800373a:	89b3      	ldrh	r3, [r6, #12]
 800373c:	061a      	lsls	r2, r3, #24
 800373e:	d410      	bmi.n	8003762 <__swhatbuf_r+0x3e>
 8003740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003744:	e00e      	b.n	8003764 <__swhatbuf_r+0x40>
 8003746:	466a      	mov	r2, sp
 8003748:	f000 f96e 	bl	8003a28 <_fstat_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	dbf2      	blt.n	8003736 <__swhatbuf_r+0x12>
 8003750:	9a01      	ldr	r2, [sp, #4]
 8003752:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003756:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800375a:	425a      	negs	r2, r3
 800375c:	415a      	adcs	r2, r3
 800375e:	602a      	str	r2, [r5, #0]
 8003760:	e7ee      	b.n	8003740 <__swhatbuf_r+0x1c>
 8003762:	2340      	movs	r3, #64	; 0x40
 8003764:	2000      	movs	r0, #0
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	b016      	add	sp, #88	; 0x58
 800376a:	bd70      	pop	{r4, r5, r6, pc}

0800376c <__smakebuf_r>:
 800376c:	898b      	ldrh	r3, [r1, #12]
 800376e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003770:	079d      	lsls	r5, r3, #30
 8003772:	4606      	mov	r6, r0
 8003774:	460c      	mov	r4, r1
 8003776:	d507      	bpl.n	8003788 <__smakebuf_r+0x1c>
 8003778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	6123      	str	r3, [r4, #16]
 8003780:	2301      	movs	r3, #1
 8003782:	6163      	str	r3, [r4, #20]
 8003784:	b002      	add	sp, #8
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	ab01      	add	r3, sp, #4
 800378a:	466a      	mov	r2, sp
 800378c:	f7ff ffca 	bl	8003724 <__swhatbuf_r>
 8003790:	9900      	ldr	r1, [sp, #0]
 8003792:	4605      	mov	r5, r0
 8003794:	4630      	mov	r0, r6
 8003796:	f000 f877 	bl	8003888 <_malloc_r>
 800379a:	b948      	cbnz	r0, 80037b0 <__smakebuf_r+0x44>
 800379c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037a0:	059a      	lsls	r2, r3, #22
 80037a2:	d4ef      	bmi.n	8003784 <__smakebuf_r+0x18>
 80037a4:	f023 0303 	bic.w	r3, r3, #3
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	e7e3      	b.n	8003778 <__smakebuf_r+0xc>
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <__smakebuf_r+0x7c>)
 80037b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	6020      	str	r0, [r4, #0]
 80037b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037bc:	81a3      	strh	r3, [r4, #12]
 80037be:	9b00      	ldr	r3, [sp, #0]
 80037c0:	6163      	str	r3, [r4, #20]
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	6120      	str	r0, [r4, #16]
 80037c6:	b15b      	cbz	r3, 80037e0 <__smakebuf_r+0x74>
 80037c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037cc:	4630      	mov	r0, r6
 80037ce:	f000 f93d 	bl	8003a4c <_isatty_r>
 80037d2:	b128      	cbz	r0, 80037e0 <__smakebuf_r+0x74>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	81a3      	strh	r3, [r4, #12]
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	431d      	orrs	r5, r3
 80037e4:	81a5      	strh	r5, [r4, #12]
 80037e6:	e7cd      	b.n	8003784 <__smakebuf_r+0x18>
 80037e8:	080035d9 	.word	0x080035d9

080037ec <_free_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4605      	mov	r5, r0
 80037f0:	2900      	cmp	r1, #0
 80037f2:	d045      	beq.n	8003880 <_free_r+0x94>
 80037f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037f8:	1f0c      	subs	r4, r1, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfb8      	it	lt
 80037fe:	18e4      	addlt	r4, r4, r3
 8003800:	f000 f946 	bl	8003a90 <__malloc_lock>
 8003804:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <_free_r+0x98>)
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	4610      	mov	r0, r2
 800380a:	b933      	cbnz	r3, 800381a <_free_r+0x2e>
 800380c:	6063      	str	r3, [r4, #4]
 800380e:	6014      	str	r4, [r2, #0]
 8003810:	4628      	mov	r0, r5
 8003812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003816:	f000 b93c 	b.w	8003a92 <__malloc_unlock>
 800381a:	42a3      	cmp	r3, r4
 800381c:	d90c      	bls.n	8003838 <_free_r+0x4c>
 800381e:	6821      	ldr	r1, [r4, #0]
 8003820:	1862      	adds	r2, r4, r1
 8003822:	4293      	cmp	r3, r2
 8003824:	bf04      	itt	eq
 8003826:	681a      	ldreq	r2, [r3, #0]
 8003828:	685b      	ldreq	r3, [r3, #4]
 800382a:	6063      	str	r3, [r4, #4]
 800382c:	bf04      	itt	eq
 800382e:	1852      	addeq	r2, r2, r1
 8003830:	6022      	streq	r2, [r4, #0]
 8003832:	6004      	str	r4, [r0, #0]
 8003834:	e7ec      	b.n	8003810 <_free_r+0x24>
 8003836:	4613      	mov	r3, r2
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	b10a      	cbz	r2, 8003840 <_free_r+0x54>
 800383c:	42a2      	cmp	r2, r4
 800383e:	d9fa      	bls.n	8003836 <_free_r+0x4a>
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	1858      	adds	r0, r3, r1
 8003844:	42a0      	cmp	r0, r4
 8003846:	d10b      	bne.n	8003860 <_free_r+0x74>
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	4401      	add	r1, r0
 800384c:	1858      	adds	r0, r3, r1
 800384e:	4282      	cmp	r2, r0
 8003850:	6019      	str	r1, [r3, #0]
 8003852:	d1dd      	bne.n	8003810 <_free_r+0x24>
 8003854:	6810      	ldr	r0, [r2, #0]
 8003856:	6852      	ldr	r2, [r2, #4]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	4401      	add	r1, r0
 800385c:	6019      	str	r1, [r3, #0]
 800385e:	e7d7      	b.n	8003810 <_free_r+0x24>
 8003860:	d902      	bls.n	8003868 <_free_r+0x7c>
 8003862:	230c      	movs	r3, #12
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	e7d3      	b.n	8003810 <_free_r+0x24>
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	1821      	adds	r1, r4, r0
 800386c:	428a      	cmp	r2, r1
 800386e:	bf04      	itt	eq
 8003870:	6811      	ldreq	r1, [r2, #0]
 8003872:	6852      	ldreq	r2, [r2, #4]
 8003874:	6062      	str	r2, [r4, #4]
 8003876:	bf04      	itt	eq
 8003878:	1809      	addeq	r1, r1, r0
 800387a:	6021      	streq	r1, [r4, #0]
 800387c:	605c      	str	r4, [r3, #4]
 800387e:	e7c7      	b.n	8003810 <_free_r+0x24>
 8003880:	bd38      	pop	{r3, r4, r5, pc}
 8003882:	bf00      	nop
 8003884:	20004580 	.word	0x20004580

08003888 <_malloc_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	1ccd      	adds	r5, r1, #3
 800388c:	f025 0503 	bic.w	r5, r5, #3
 8003890:	3508      	adds	r5, #8
 8003892:	2d0c      	cmp	r5, #12
 8003894:	bf38      	it	cc
 8003896:	250c      	movcc	r5, #12
 8003898:	2d00      	cmp	r5, #0
 800389a:	4606      	mov	r6, r0
 800389c:	db01      	blt.n	80038a2 <_malloc_r+0x1a>
 800389e:	42a9      	cmp	r1, r5
 80038a0:	d903      	bls.n	80038aa <_malloc_r+0x22>
 80038a2:	230c      	movs	r3, #12
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	f000 f8f1 	bl	8003a90 <__malloc_lock>
 80038ae:	4a21      	ldr	r2, [pc, #132]	; (8003934 <_malloc_r+0xac>)
 80038b0:	6814      	ldr	r4, [r2, #0]
 80038b2:	4621      	mov	r1, r4
 80038b4:	b991      	cbnz	r1, 80038dc <_malloc_r+0x54>
 80038b6:	4c20      	ldr	r4, [pc, #128]	; (8003938 <_malloc_r+0xb0>)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	b91b      	cbnz	r3, 80038c4 <_malloc_r+0x3c>
 80038bc:	4630      	mov	r0, r6
 80038be:	f000 f83d 	bl	800393c <_sbrk_r>
 80038c2:	6020      	str	r0, [r4, #0]
 80038c4:	4629      	mov	r1, r5
 80038c6:	4630      	mov	r0, r6
 80038c8:	f000 f838 	bl	800393c <_sbrk_r>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	d124      	bne.n	800391a <_malloc_r+0x92>
 80038d0:	230c      	movs	r3, #12
 80038d2:	6033      	str	r3, [r6, #0]
 80038d4:	4630      	mov	r0, r6
 80038d6:	f000 f8dc 	bl	8003a92 <__malloc_unlock>
 80038da:	e7e4      	b.n	80038a6 <_malloc_r+0x1e>
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	1b5b      	subs	r3, r3, r5
 80038e0:	d418      	bmi.n	8003914 <_malloc_r+0x8c>
 80038e2:	2b0b      	cmp	r3, #11
 80038e4:	d90f      	bls.n	8003906 <_malloc_r+0x7e>
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	50cd      	str	r5, [r1, r3]
 80038ea:	18cc      	adds	r4, r1, r3
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f8d0 	bl	8003a92 <__malloc_unlock>
 80038f2:	f104 000b 	add.w	r0, r4, #11
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	f020 0007 	bic.w	r0, r0, #7
 80038fc:	1ac3      	subs	r3, r0, r3
 80038fe:	d0d3      	beq.n	80038a8 <_malloc_r+0x20>
 8003900:	425a      	negs	r2, r3
 8003902:	50e2      	str	r2, [r4, r3]
 8003904:	e7d0      	b.n	80038a8 <_malloc_r+0x20>
 8003906:	428c      	cmp	r4, r1
 8003908:	684b      	ldr	r3, [r1, #4]
 800390a:	bf16      	itet	ne
 800390c:	6063      	strne	r3, [r4, #4]
 800390e:	6013      	streq	r3, [r2, #0]
 8003910:	460c      	movne	r4, r1
 8003912:	e7eb      	b.n	80038ec <_malloc_r+0x64>
 8003914:	460c      	mov	r4, r1
 8003916:	6849      	ldr	r1, [r1, #4]
 8003918:	e7cc      	b.n	80038b4 <_malloc_r+0x2c>
 800391a:	1cc4      	adds	r4, r0, #3
 800391c:	f024 0403 	bic.w	r4, r4, #3
 8003920:	42a0      	cmp	r0, r4
 8003922:	d005      	beq.n	8003930 <_malloc_r+0xa8>
 8003924:	1a21      	subs	r1, r4, r0
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f808 	bl	800393c <_sbrk_r>
 800392c:	3001      	adds	r0, #1
 800392e:	d0cf      	beq.n	80038d0 <_malloc_r+0x48>
 8003930:	6025      	str	r5, [r4, #0]
 8003932:	e7db      	b.n	80038ec <_malloc_r+0x64>
 8003934:	20004580 	.word	0x20004580
 8003938:	20004584 	.word	0x20004584

0800393c <_sbrk_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4c06      	ldr	r4, [pc, #24]	; (8003958 <_sbrk_r+0x1c>)
 8003940:	2300      	movs	r3, #0
 8003942:	4605      	mov	r5, r0
 8003944:	4608      	mov	r0, r1
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	f7fc fe20 	bl	800058c <_sbrk>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d102      	bne.n	8003956 <_sbrk_r+0x1a>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	b103      	cbz	r3, 8003956 <_sbrk_r+0x1a>
 8003954:	602b      	str	r3, [r5, #0]
 8003956:	bd38      	pop	{r3, r4, r5, pc}
 8003958:	200045cc 	.word	0x200045cc

0800395c <__sread>:
 800395c:	b510      	push	{r4, lr}
 800395e:	460c      	mov	r4, r1
 8003960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003964:	f000 f896 	bl	8003a94 <_read_r>
 8003968:	2800      	cmp	r0, #0
 800396a:	bfab      	itete	ge
 800396c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800396e:	89a3      	ldrhlt	r3, [r4, #12]
 8003970:	181b      	addge	r3, r3, r0
 8003972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003976:	bfac      	ite	ge
 8003978:	6563      	strge	r3, [r4, #84]	; 0x54
 800397a:	81a3      	strhlt	r3, [r4, #12]
 800397c:	bd10      	pop	{r4, pc}

0800397e <__swrite>:
 800397e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003982:	461f      	mov	r7, r3
 8003984:	898b      	ldrh	r3, [r1, #12]
 8003986:	05db      	lsls	r3, r3, #23
 8003988:	4605      	mov	r5, r0
 800398a:	460c      	mov	r4, r1
 800398c:	4616      	mov	r6, r2
 800398e:	d505      	bpl.n	800399c <__swrite+0x1e>
 8003990:	2302      	movs	r3, #2
 8003992:	2200      	movs	r2, #0
 8003994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003998:	f000 f868 	bl	8003a6c <_lseek_r>
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a6:	81a3      	strh	r3, [r4, #12]
 80039a8:	4632      	mov	r2, r6
 80039aa:	463b      	mov	r3, r7
 80039ac:	4628      	mov	r0, r5
 80039ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039b2:	f000 b817 	b.w	80039e4 <_write_r>

080039b6 <__sseek>:
 80039b6:	b510      	push	{r4, lr}
 80039b8:	460c      	mov	r4, r1
 80039ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039be:	f000 f855 	bl	8003a6c <_lseek_r>
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	bf15      	itete	ne
 80039c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80039ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039d2:	81a3      	strheq	r3, [r4, #12]
 80039d4:	bf18      	it	ne
 80039d6:	81a3      	strhne	r3, [r4, #12]
 80039d8:	bd10      	pop	{r4, pc}

080039da <__sclose>:
 80039da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039de:	f000 b813 	b.w	8003a08 <_close_r>
	...

080039e4 <_write_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4c07      	ldr	r4, [pc, #28]	; (8003a04 <_write_r+0x20>)
 80039e8:	4605      	mov	r5, r0
 80039ea:	4608      	mov	r0, r1
 80039ec:	4611      	mov	r1, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	6022      	str	r2, [r4, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f7fc fc47 	bl	8000286 <_write>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_write_r+0x1e>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_write_r+0x1e>
 8003a00:	602b      	str	r3, [r5, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	200045cc 	.word	0x200045cc

08003a08 <_close_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4c06      	ldr	r4, [pc, #24]	; (8003a24 <_close_r+0x1c>)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	4605      	mov	r5, r0
 8003a10:	4608      	mov	r0, r1
 8003a12:	6023      	str	r3, [r4, #0]
 8003a14:	f7fc fd86 	bl	8000524 <_close>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_close_r+0x1a>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_close_r+0x1a>
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	200045cc 	.word	0x200045cc

08003a28 <_fstat_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4c07      	ldr	r4, [pc, #28]	; (8003a48 <_fstat_r+0x20>)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	4605      	mov	r5, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	f7fc fd81 	bl	800053c <_fstat>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	d102      	bne.n	8003a44 <_fstat_r+0x1c>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	b103      	cbz	r3, 8003a44 <_fstat_r+0x1c>
 8003a42:	602b      	str	r3, [r5, #0]
 8003a44:	bd38      	pop	{r3, r4, r5, pc}
 8003a46:	bf00      	nop
 8003a48:	200045cc 	.word	0x200045cc

08003a4c <_isatty_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4c06      	ldr	r4, [pc, #24]	; (8003a68 <_isatty_r+0x1c>)
 8003a50:	2300      	movs	r3, #0
 8003a52:	4605      	mov	r5, r0
 8003a54:	4608      	mov	r0, r1
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	f7fc fd80 	bl	800055c <_isatty>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d102      	bne.n	8003a66 <_isatty_r+0x1a>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	b103      	cbz	r3, 8003a66 <_isatty_r+0x1a>
 8003a64:	602b      	str	r3, [r5, #0]
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	200045cc 	.word	0x200045cc

08003a6c <_lseek_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4c07      	ldr	r4, [pc, #28]	; (8003a8c <_lseek_r+0x20>)
 8003a70:	4605      	mov	r5, r0
 8003a72:	4608      	mov	r0, r1
 8003a74:	4611      	mov	r1, r2
 8003a76:	2200      	movs	r2, #0
 8003a78:	6022      	str	r2, [r4, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f7fc fd79 	bl	8000572 <_lseek>
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	d102      	bne.n	8003a8a <_lseek_r+0x1e>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	b103      	cbz	r3, 8003a8a <_lseek_r+0x1e>
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
 8003a8c:	200045cc 	.word	0x200045cc

08003a90 <__malloc_lock>:
 8003a90:	4770      	bx	lr

08003a92 <__malloc_unlock>:
 8003a92:	4770      	bx	lr

08003a94 <_read_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4c07      	ldr	r4, [pc, #28]	; (8003ab4 <_read_r+0x20>)
 8003a98:	4605      	mov	r5, r0
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	6022      	str	r2, [r4, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7fc fd21 	bl	80004ea <_read>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_read_r+0x1e>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_read_r+0x1e>
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	200045cc 	.word	0x200045cc

08003ab8 <_init>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr

08003ac4 <_fini>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	bf00      	nop
 8003ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aca:	bc08      	pop	{r3}
 8003acc:	469e      	mov	lr, r3
 8003ace:	4770      	bx	lr
