
01_2_FreeRTOS_MultiThreading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001540  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080075d0  080075d0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075d0  080075d0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080075d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006420  20000080  08007658  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064a0  08007658  000264a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131b0  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026d4  00000000  00000000  00033260  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  00036440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a95  00000000  00000000  00036e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbe4  00000000  00000000  0005b8d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d389f  00000000  00000000  000674b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ad58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000313c  00000000  00000000  0013add4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006078 	.word	0x08006078

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006078 	.word	0x08006078

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000009c 	.word	0x2000009c
 8000200:	200000f8 	.word	0x200000f8

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000222:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	200002f8 	.word	0x200002f8
 8000234:	20000354 	.word	0x20000354

08000238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d013      	beq.n	8000278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00b      	beq.n	8000278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000260:	e000      	b.n	8000264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800026e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	b2d2      	uxtb	r2, r2
 8000276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000278:	687b      	ldr	r3, [r7, #4]
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <_write>:
#include "FreeRTOS.h"                   // ARM.FreeRTOS::RTOS:Core
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core
#include <stdio.h>

int _write(int file,char *ptr, int len)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0
 800028c:	60f8      	str	r0, [r7, #12]
 800028e:	60b9      	str	r1, [r7, #8]
 8000290:	607a      	str	r2, [r7, #4]
	int i=0;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e009      	b.n	80002b0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	60ba      	str	r2, [r7, #8]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffc7 	bl	8000238 <ITM_SendChar>
	for(i=0;i<len;i++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf1      	blt.n	800029c <_write+0x16>
	return len;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <main>:
void  vGreenLedControllerTask(void *pvParameters);



int main()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af02      	add	r7, sp, #8
	 GPIO_Init();
 80002ca:	f000 f8bd 	bl	8000448 <GPIO_Init>

	 vTraceEnable(TRC_START);
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 fb28 	bl	8000924 <vTraceEnable>

	 xTaskCreate(vBlueLedControllerTask,
 80002d4:	2300      	movs	r3, #0
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	2300      	movs	r3, #0
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	4912      	ldr	r1, [pc, #72]	; (800032c <main+0x68>)
 80002e2:	4813      	ldr	r0, [pc, #76]	; (8000330 <main+0x6c>)
 80002e4:	f003 f9d8 	bl	8003698 <xTaskCreate>
								NULL,
								1,
								NULL
								);

	xTaskCreate(vRedLedControllerTask,
 80002e8:	2300      	movs	r3, #0
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2302      	movs	r3, #2
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2300      	movs	r3, #0
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	490f      	ldr	r1, [pc, #60]	; (8000334 <main+0x70>)
 80002f6:	4810      	ldr	r0, [pc, #64]	; (8000338 <main+0x74>)
 80002f8:	f003 f9ce 	bl	8003698 <xTaskCreate>
								);




	xTaskCreate(vOrangeLedControllerTask,
 80002fc:	2300      	movs	r3, #0
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	2303      	movs	r3, #3
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2300      	movs	r3, #0
 8000306:	2280      	movs	r2, #128	; 0x80
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <main+0x78>)
 800030a:	480d      	ldr	r0, [pc, #52]	; (8000340 <main+0x7c>)
 800030c:	f003 f9c4 	bl	8003698 <xTaskCreate>
								NULL,
								3,
								NULL
								);

	 xTaskCreate(vGreenLedControllerTask,
 8000310:	2300      	movs	r3, #0
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	2304      	movs	r3, #4
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2300      	movs	r3, #0
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	4909      	ldr	r1, [pc, #36]	; (8000344 <main+0x80>)
 800031e:	480a      	ldr	r0, [pc, #40]	; (8000348 <main+0x84>)
 8000320:	f003 f9ba 	bl	8003698 <xTaskCreate>
								);




   vTaskStartScheduler();
 8000324:	f003 fbcc 	bl	8003ac0 <vTaskStartScheduler>

	 while(1){};
 8000328:	e7fe      	b.n	8000328 <main+0x64>
 800032a:	bf00      	nop
 800032c:	08006090 	.word	0x08006090
 8000330:	0800034d 	.word	0x0800034d
 8000334:	080060a4 	.word	0x080060a4
 8000338:	0800038d 	.word	0x0800038d
 800033c:	080060b8 	.word	0x080060b8
 8000340:	080003cd 	.word	0x080003cd
 8000344:	080060d0 	.word	0x080060d0
 8000348:	0800040d 	.word	0x0800040d

0800034c <vBlueLedControllerTask>:
}



void  vBlueLedControllerTask(void *pvParameters)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
				printf("Blue\n");
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <vBlueLedControllerTask+0x38>)
 8000356:	f005 fa83 	bl	8005860 <puts>
				HAL_GPIO_WritePin(GPIOD,BLUE,1);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000360:	4809      	ldr	r0, [pc, #36]	; (8000388 <vBlueLedControllerTask+0x3c>)
 8000362:	f002 f82f 	bl	80023c4 <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 8000366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800036a:	f003 fb3d 	bl	80039e8 <vTaskDelay>
				//for(i=0;i<100000;i++){}
				HAL_GPIO_WritePin(GPIOD,BLUE,0);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <vBlueLedControllerTask+0x3c>)
 8000376:	f002 f825 	bl	80023c4 <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 800037a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037e:	f003 fb33 	bl	80039e8 <vTaskDelay>
				printf("Blue\n");
 8000382:	e7e7      	b.n	8000354 <vBlueLedControllerTask+0x8>
 8000384:	080060e8 	.word	0x080060e8
 8000388:	40020c00 	.word	0x40020c00

0800038c <vRedLedControllerTask>:
	}
}


void  vRedLedControllerTask(void *pvParameters)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{

		printf("Red\n");
 8000394:	480b      	ldr	r0, [pc, #44]	; (80003c4 <vRedLedControllerTask+0x38>)
 8000396:	f005 fa63 	bl	8005860 <puts>


				HAL_GPIO_WritePin(GPIOD,RED,1);
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a0:	4809      	ldr	r0, [pc, #36]	; (80003c8 <vRedLedControllerTask+0x3c>)
 80003a2:	f002 f80f 	bl	80023c4 <HAL_GPIO_WritePin>
				vTaskDelay( 1000);
 80003a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003aa:	f003 fb1d 	bl	80039e8 <vTaskDelay>
				//		for(i=0;i<500000;i++){}

				HAL_GPIO_WritePin(GPIOD,RED,0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <vRedLedControllerTask+0x3c>)
 80003b6:	f002 f805 	bl	80023c4 <HAL_GPIO_WritePin>
				vTaskDelay( 1000 );
 80003ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003be:	f003 fb13 	bl	80039e8 <vTaskDelay>
		printf("Red\n");
 80003c2:	e7e7      	b.n	8000394 <vRedLedControllerTask+0x8>
 80003c4:	080060f0 	.word	0x080060f0
 80003c8:	40020c00 	.word	0x40020c00

080003cc <vOrangeLedControllerTask>:
	}
}


void  vOrangeLedControllerTask(void *pvParameters)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		printf("Orange\n");
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <vOrangeLedControllerTask+0x38>)
 80003d6:	f005 fa43 	bl	8005860 <puts>

				HAL_GPIO_WritePin(GPIOD,ORANGE,1);
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	4809      	ldr	r0, [pc, #36]	; (8000408 <vOrangeLedControllerTask+0x3c>)
 80003e2:	f001 ffef 	bl	80023c4 <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 80003e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ea:	f003 fafd 	bl	80039e8 <vTaskDelay>
			//			for(i=0;i<700000;i++){}

				HAL_GPIO_WritePin(GPIOD,ORANGE,0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <vOrangeLedControllerTask+0x3c>)
 80003f6:	f001 ffe5 	bl	80023c4 <HAL_GPIO_WritePin>
		vTaskDelay( 500 );
 80003fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003fe:	f003 faf3 	bl	80039e8 <vTaskDelay>
		printf("Orange\n");
 8000402:	e7e7      	b.n	80003d4 <vOrangeLedControllerTask+0x8>
 8000404:	080060f4 	.word	0x080060f4
 8000408:	40020c00 	.word	0x40020c00

0800040c <vGreenLedControllerTask>:
	}
}


void  vGreenLedControllerTask(void *pvParameters)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
		printf("Green\n");
 8000414:	480a      	ldr	r0, [pc, #40]	; (8000440 <vGreenLedControllerTask+0x34>)
 8000416:	f005 fa23 	bl	8005860 <puts>


				HAL_GPIO_WritePin(GPIOD,GREEN,1);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000420:	4808      	ldr	r0, [pc, #32]	; (8000444 <vGreenLedControllerTask+0x38>)
 8000422:	f001 ffcf 	bl	80023c4 <HAL_GPIO_WritePin>
				vTaskDelay( 50 );
 8000426:	2032      	movs	r0, #50	; 0x32
 8000428:	f003 fade 	bl	80039e8 <vTaskDelay>
			//			for(i=0;i<800000;i++){}

				HAL_GPIO_WritePin(GPIOD,GREEN,0);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <vGreenLedControllerTask+0x38>)
 8000434:	f001 ffc6 	bl	80023c4 <HAL_GPIO_WritePin>
			vTaskDelay( 50 );
 8000438:	2032      	movs	r0, #50	; 0x32
 800043a:	f003 fad5 	bl	80039e8 <vTaskDelay>
		printf("Green\n");
 800043e:	e7e9      	b.n	8000414 <vGreenLedControllerTask+0x8>
 8000440:	080060fc 	.word	0x080060fc
 8000444:	40020c00 	.word	0x40020c00

08000448 <GPIO_Init>:

	}
}

void GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <GPIO_Init+0x70>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <GPIO_Init+0x70>)
 8000458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <GPIO_Init+0x70>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <GPIO_Init+0x70>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <GPIO_Init+0x70>)
 8000474:	f043 0308 	orr.w	r3, r3, #8
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <GPIO_Init+0x70>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	f003 0308 	and.w	r3, r3, #8
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <GPIO_Init+0x74>)
 800048e:	f001 ff99 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000492:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <GPIO_Init+0x74>)
 80004ac:	f001 fdf0 	bl	8002090 <HAL_GPIO_Init>
}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40020c00 	.word	0x40020c00

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f0:	f001 fdba 	bl	8002068 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004f4:	f004 f866 	bl	80045c4 <xTaskGetSchedulerState>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d001      	beq.n	8000502 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004fe:	f004 fe9b 	bl	8005238 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}

08000506 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b086      	sub	sp, #24
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	e00a      	b.n	800052e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000518:	f3af 8000 	nop.w
 800051c:	4601      	mov	r1, r0
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	60ba      	str	r2, [r7, #8]
 8000524:	b2ca      	uxtb	r2, r1
 8000526:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	3301      	adds	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	dbf0      	blt.n	8000518 <_read+0x12>
	}

return len;
 8000536:	687b      	ldr	r3, [r7, #4]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	return -1;
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000568:	605a      	str	r2, [r3, #4]
	return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <_isatty>:

int _isatty(int file)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	return 1;
 8000580:	2301      	movs	r3, #1
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	60f8      	str	r0, [r7, #12]
 8000596:	60b9      	str	r1, [r7, #8]
 8000598:	607a      	str	r2, [r7, #4]
	return 0;
 800059a:	2300      	movs	r3, #0
}
 800059c:	4618      	mov	r0, r3
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <_sbrk+0x5c>)
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <_sbrk+0x60>)
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <_sbrk+0x64>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <_sbrk+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d207      	bcs.n	80005e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d8:	f005 f8a8 	bl	800572c <__errno>
 80005dc:	4602      	mov	r2, r0
 80005de:	230c      	movs	r3, #12
 80005e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e009      	b.n	80005fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <_sbrk+0x64>)
 80005f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20020000 	.word	0x20020000
 8000608:	00000400 	.word	0x00000400
 800060c:	20000754 	.word	0x20000754
 8000610:	200064a0 	.word	0x200064a0

08000614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <SystemInit+0x28>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <SystemInit+0x28>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <SystemInit+0x28>)
 800062a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800062e:	609a      	str	r2, [r3, #8]
#endif
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000678 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000644:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000646:	e003      	b.n	8000650 <LoopCopyDataInit>

08000648 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800064a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800064c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800064e:	3104      	adds	r1, #4

08000650 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000654:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000656:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000658:	d3f6      	bcc.n	8000648 <CopyDataInit>
  ldr  r2, =_sbss
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800065c:	e002      	b.n	8000664 <LoopFillZerobss>

0800065e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800065e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000660:	f842 3b04 	str.w	r3, [r2], #4

08000664 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000666:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000668:	d3f9      	bcc.n	800065e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800066a:	f7ff ffd3 	bl	8000614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066e:	f005 f863 	bl	8005738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000672:	f7ff fe27 	bl	80002c4 <main>
  bx  lr    
 8000676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000678:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800067c:	080075d8 	.word	0x080075d8
  ldr  r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000684:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000688:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800068c:	200064a0 	.word	0x200064a0

08000690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC_IRQHandler>

08000692 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f002 fdfc 	bl	8003298 <uxQueueGetQueueNumber>
 80006a0:	4603      	mov	r3, r0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f002 fe0a 	bl	80032cc <ucQueueGetQueueType>
 80006b8:	4603      	mov	r3, r0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f003 fe36 	bl	800433c <uxTaskGetTaskNumber>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29b      	uxth	r3, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f003 fe29 	bl	800433c <uxTaskGetTaskNumber>
 80006ea:	4603      	mov	r3, r0
 80006ec:	0c1b      	lsrs	r3, r3, #16
 80006ee:	b29b      	uxth	r3, r3
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f003 fe19 	bl	800433c <uxTaskGetTaskNumber>
 800070a:	4603      	mov	r3, r0
 800070c:	0c1b      	lsrs	r3, r3, #16
 800070e:	041b      	lsls	r3, r3, #16
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	4313      	orrs	r3, r2
 8000714:	4619      	mov	r1, r3
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f003 fe26 	bl	8004368 <vTaskSetTaskNumber>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f003 fe03 	bl	800433c <uxTaskGetTaskNumber>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	887b      	ldrh	r3, [r7, #2]
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	4313      	orrs	r3, r2
 8000740:	4619      	mov	r1, r3
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f003 fe10 	bl	8004368 <vTaskSetTaskNumber>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9a 	bl	8000692 <prvTraceGetQueueNumber>
 800075e:	4603      	mov	r3, r0
 8000760:	b29b      	uxth	r3, r3
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff8d 	bl	8000692 <prvTraceGetQueueNumber>
 8000778:	4603      	mov	r3, r0
 800077a:	0c1b      	lsrs	r3, r3, #16
 800077c:	b29b      	uxth	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff7d 	bl	8000692 <prvTraceGetQueueNumber>
 8000798:	4603      	mov	r3, r0
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	041b      	lsls	r3, r3, #16
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f002 fd83 	bl	80032b0 <vQueueSetQueueNumber>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	807b      	strh	r3, [r7, #2]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff67 	bl	8000692 <prvTraceGetQueueNumber>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	887b      	ldrh	r3, [r7, #2]
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4619      	mov	r1, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f002 fd6d 	bl	80032b0 <vQueueSetQueueNumber>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { { NULL } };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	int i;
	int foundEmptySlot = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]

	// find an empty slot
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e017      	b.n	8000822 <prvAddTaskToStackMonitor+0x42>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <prvAddTaskToStackMonitor+0x64>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10e      	bne.n	800081c <prvAddTaskToStackMonitor+0x3c>
		{
			tasksInStackMonitor[i].tcb = task;
 80007fe:	4911      	ldr	r1, [pc, #68]	; (8000844 <prvAddTaskToStackMonitor+0x64>)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <prvAddTaskToStackMonitor+0x64>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	4413      	add	r3, r2
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	605a      	str	r2, [r3, #4]
			foundEmptySlot = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
			break;
 800081a:	e005      	b.n	8000828 <prvAddTaskToStackMonitor+0x48>
	for (i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2b09      	cmp	r3, #9
 8000826:	dde4      	ble.n	80007f2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d104      	bne.n	8000838 <prvAddTaskToStackMonitor+0x58>
	{
		tasksNotIncluded++;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <prvAddTaskToStackMonitor+0x68>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <prvAddTaskToStackMonitor+0x68>)
 8000836:	6013      	str	r3, [r2, #0]
	}
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000bb8 	.word	0x20000bb8
 8000848:	20000c08 	.word	0x20000c08

0800084c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <prvReportStackUsage+0xbc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <prvReportStackUsage+0xbc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a2a      	ldr	r2, [pc, #168]	; (800090c <prvReportStackUsage+0xc0>)
 8000862:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d031      	beq.n	80008ce <prvReportStackUsage+0x82>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <prvReportStackUsage+0xbc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a27      	ldr	r2, [pc, #156]	; (800090c <prvReportStackUsage+0xc0>)
 8000870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fe2b 	bl	80044d0 <uxTaskGetStackHighWaterMark>
 800087a:	6078      	str	r0, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <prvReportStackUsage+0xbc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a22      	ldr	r2, [pc, #136]	; (800090c <prvReportStackUsage+0xc0>)
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	4413      	add	r3, r2
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	429a      	cmp	r2, r3
 800088c:	d206      	bcs.n	800089c <prvReportStackUsage+0x50>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <prvReportStackUsage+0xbc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <prvReportStackUsage+0xc0>)
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	4413      	add	r3, r2
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	605a      	str	r2, [r3, #4]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <prvReportStackUsage+0xbc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1a      	ldr	r2, [pc, #104]	; (800090c <prvReportStackUsage+0xc0>)
 80008a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff0b 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <prvReportStackUsage+0xbc>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <prvReportStackUsage+0xc0>)
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	4413      	add	r3, r2
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	460a      	mov	r2, r1
 80008c0:	2103      	movs	r1, #3
 80008c2:	20ea      	movs	r0, #234	; 0xea
 80008c4:	f000 fc06 	bl	80010d4 <prvTraceStoreKernelCallWithParam>
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <prvReportStackUsage+0xbc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	1c59      	adds	r1, r3, #1
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <prvReportStackUsage+0xc4>)
 80008d6:	fb83 2301 	smull	r2, r3, r3, r1
 80008da:	109a      	asrs	r2, r3, #2
 80008dc:	17cb      	asrs	r3, r1, #31
 80008de:	1ad2      	subs	r2, r2, r3
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	1aca      	subs	r2, r1, r3
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <prvReportStackUsage+0xbc>)
 80008ec:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dc04      	bgt.n	80008fe <prvReportStackUsage+0xb2>
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <prvReportStackUsage+0xbc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d1ae      	bne.n	800085c <prvReportStackUsage+0x10>
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000c0c 	.word	0x20000c0c
 800090c:	20000bb8 	.word	0x20000bb8
 8000910:	66666667 	.word	0x66666667

08000914 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8000918:	f003 fe44 	bl	80045a4 <xTaskGetCurrentTaskHandle>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af04      	add	r7, sp, #16
 800092a:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
 800092c:	f000 fe86 	bl	800163c <prvTraceInitTraceData>

	if (startOption == TRC_START)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d102      	bne.n	800093c <vTraceEnable+0x18>
	{
		vTraceStart();
 8000936:	f000 fa31 	bl	8000d9c <vTraceStart>
 800093a:	e00c      	b.n	8000956 <vTraceEnable+0x32>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d103      	bne.n	800094a <vTraceEnable+0x26>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <vTraceEnable+0x64>)
 8000944:	f001 f95a 	bl	8001bfc <prvTraceError>
 8000948:	e005      	b.n	8000956 <vTraceEnable+0x32>
	}
	else if (startOption != TRC_INIT)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <vTraceEnable+0x32>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8000950:	480e      	ldr	r0, [pc, #56]	; (800098c <vTraceEnable+0x68>)
 8000952:	f001 f953 	bl	8001bfc <prvTraceError>
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <vTraceEnable+0x6c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <vTraceEnable+0x5a>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <vTraceEnable+0x70>)
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <vTraceEnable+0x74>)
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	2301      	movs	r3, #1
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2300      	movs	r3, #0
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	490a      	ldr	r1, [pc, #40]	; (800099c <vTraceEnable+0x78>)
 8000972:	480b      	ldr	r0, [pc, #44]	; (80009a0 <vTraceEnable+0x7c>)
 8000974:	f002 fe36 	bl	80035e4 <xTaskCreateStatic>
 8000978:	4602      	mov	r2, r0
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <vTraceEnable+0x6c>)
 800097c:	601a      	str	r2, [r3, #0]
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08006104 	.word	0x08006104
 800098c:	08006144 	.word	0x08006144
 8000990:	20000758 	.word	0x20000758
 8000994:	20000b5c 	.word	0x20000b5c
 8000998:	2000075c 	.word	0x2000075c
 800099c:	08006178 	.word	0x08006178
 80009a0:	080009a5 	.word	0x080009a5

080009a4 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
 80009ac:	f000 fa14 	bl	8000dd8 <xTraceIsRecordingEnabled>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <TzCtrl+0x16>
		{
			prvReportStackUsage();
 80009b6:	f7ff ff49 	bl	800084c <prvReportStackUsage>
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 80009ba:	200a      	movs	r0, #10
 80009bc:	f003 f814 	bl	80039e8 <vTaskDelay>
		if (xTraceIsRecordingEnabled())
 80009c0:	e7f4      	b.n	80009ac <TzCtrl+0x8>
	...

080009c4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 80009c8:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2209      	movs	r2, #9
 80009ce:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 80009d0:	4b62      	ldr	r3, [pc, #392]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	220a      	movs	r2, #10
 80009d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	220a      	movs	r2, #10
 80009e0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 80009e4:	4b5d      	ldr	r3, [pc, #372]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	220a      	movs	r2, #10
 80009ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 80009ee:	4b5b      	ldr	r3, [pc, #364]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	220f      	movs	r2, #15
 80009f4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 80009f8:	4b58      	ldr	r3, [pc, #352]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2205      	movs	r2, #5
 80009fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 8000a02:	4b56      	ldr	r3, [pc, #344]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2205      	movs	r2, #5
 8000a08:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8000a0c:	4b53      	ldr	r3, [pc, #332]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2205      	movs	r2, #5
 8000a12:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8000a16:	4b51      	ldr	r3, [pc, #324]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2205      	movs	r2, #5
 8000a1c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8000a20:	4b4e      	ldr	r3, [pc, #312]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2205      	movs	r2, #5
 8000a26:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8000a2a:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	220f      	movs	r2, #15
 8000a30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 8000a34:	4b49      	ldr	r3, [pc, #292]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	220f      	movs	r2, #15
 8000a3a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 8000a3e:	4b47      	ldr	r3, [pc, #284]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	220f      	movs	r2, #15
 8000a44:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 8000a48:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	220f      	movs	r2, #15
 8000a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	220f      	movs	r2, #15
 8000a62:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 8000a66:	4b3d      	ldr	r3, [pc, #244]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 8000a70:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	220f      	movs	r2, #15
 8000a76:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8000a7a:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	220f      	movs	r2, #15
 8000a80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8000a84:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2210      	movs	r2, #16
 8000a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 8000a8e:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2210      	movs	r2, #16
 8000a94:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8000a98:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2213      	movs	r2, #19
 8000aa8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2211      	movs	r2, #17
 8000ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2210      	movs	r2, #16
 8000abc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2213      	movs	r2, #19
 8000ac6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2213      	movs	r2, #19
 8000ad0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2213      	movs	r2, #19
 8000ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	22a0      	movs	r2, #160	; 0xa0
 8000aee:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000afa:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000b06:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f240 22fd 	movw	r2, #765	; 0x2fd
 8000b12:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f240 3252 	movw	r2, #850	; 0x352
 8000b1e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f240 32a2 	movw	r2, #930	; 0x3a2
 8000b2a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f240 4201 	movw	r2, #1025	; 0x401
 8000b36:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8000b42:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <vTraceInitObjectPropertyTable+0x198>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8000b4e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000ccc 	.word	0x20000ccc

08000b60 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	825a      	strh	r2, [r3, #18]
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b6c:	8a5a      	ldrh	r2, [r3, #18]
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b70:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	829a      	strh	r2, [r3, #20]
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b7a:	8a9a      	ldrh	r2, [r3, #20]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b7e:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b82:	2214      	movs	r2, #20
 8000b84:	82da      	strh	r2, [r3, #22]
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b88:	8ada      	ldrh	r2, [r3, #22]
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b8c:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b90:	221e      	movs	r2, #30
 8000b92:	831a      	strh	r2, [r3, #24]
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b96:	8b1a      	ldrh	r2, [r3, #24]
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b9a:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000b9e:	222d      	movs	r2, #45	; 0x2d
 8000ba0:	835a      	strh	r2, [r3, #26]
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000ba4:	8b5a      	ldrh	r2, [r3, #26]
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000ba8:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bac:	2232      	movs	r2, #50	; 0x32
 8000bae:	839a      	strh	r2, [r3, #28]
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bb2:	8b9a      	ldrh	r2, [r3, #28]
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bb6:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bba:	2237      	movs	r2, #55	; 0x37
 8000bbc:	83da      	strh	r2, [r3, #30]
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bc0:	8bda      	ldrh	r2, [r3, #30]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bc4:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bc8:	223c      	movs	r2, #60	; 0x3c
 8000bca:	841a      	strh	r2, [r3, #32]
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bce:	8c1a      	ldrh	r2, [r3, #32]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bd2:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bd6:	2241      	movs	r2, #65	; 0x41
 8000bd8:	845a      	strh	r2, [r3, #34]	; 0x22
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bdc:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000be0:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000be4:	2209      	movs	r2, #9
 8000be6:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bea:	2213      	movs	r2, #19
 8000bec:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bf0:	221d      	movs	r2, #29
 8000bf2:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bf6:	222c      	movs	r2, #44	; 0x2c
 8000bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000bfc:	2231      	movs	r2, #49	; 0x31
 8000bfe:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000c02:	2236      	movs	r2, #54	; 0x36
 8000c04:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000c08:	223b      	movs	r2, #59	; 0x3b
 8000c0a:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000c0e:	2240      	movs	r2, #64	; 0x40
 8000c10:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <vTraceInitObjectHandleStack+0xc4>)
 8000c14:	2245      	movs	r2, #69	; 0x45
 8000c16:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000c3c 	.word	0x20000c3c

08000c28 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	switch(objectclass)
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	d827      	bhi.n	8000c88 <pszTraceGetErrorNotEnoughHandles+0x60>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <pszTraceGetErrorNotEnoughHandles+0x18>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c75 	.word	0x08000c75
 8000c44:	08000c6d 	.word	0x08000c6d
 8000c48:	08000c71 	.word	0x08000c71
 8000c4c:	08000c65 	.word	0x08000c65
 8000c50:	08000c69 	.word	0x08000c69
 8000c54:	08000c79 	.word	0x08000c79
 8000c58:	08000c7d 	.word	0x08000c7d
 8000c5c:	08000c81 	.word	0x08000c81
 8000c60:	08000c85 	.word	0x08000c85
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8000c66:	e010      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <pszTraceGetErrorNotEnoughHandles+0x74>)
 8000c6a:	e00e      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <pszTraceGetErrorNotEnoughHandles+0x78>)
 8000c6e:	e00c      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <pszTraceGetErrorNotEnoughHandles+0x7c>)
 8000c72:	e00a      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <pszTraceGetErrorNotEnoughHandles+0x80>)
 8000c76:	e008      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <pszTraceGetErrorNotEnoughHandles+0x84>)
 8000c7a:	e006      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <pszTraceGetErrorNotEnoughHandles+0x88>)
 8000c7e:	e004      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <pszTraceGetErrorNotEnoughHandles+0x8c>)
 8000c82:	e002      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <pszTraceGetErrorNotEnoughHandles+0x90>)
 8000c86:	e000      	b.n	8000c8a <pszTraceGetErrorNotEnoughHandles+0x62>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <pszTraceGetErrorNotEnoughHandles+0x94>)
	}
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	08006180 	.word	0x08006180
 8000c9c:	080061c8 	.word	0x080061c8
 8000ca0:	08006210 	.word	0x08006210
 8000ca4:	08006264 	.word	0x08006264
 8000ca8:	080062b0 	.word	0x080062b0
 8000cac:	080062fc 	.word	0x080062fc
 8000cb0:	08006348 	.word	0x08006348
 8000cb4:	0800639c 	.word	0x0800639c
 8000cb8:	080063f4 	.word	0x080063f4
 8000cbc:	08006450 	.word	0x08006450

08000cc0 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	75fb      	strb	r3, [r7, #23]

	if (RecorderDataPtr == NULL)
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <uiTraceStart+0xc8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10a      	bne.n	8000ce8 <uiTraceStart+0x28>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <uiTraceStart+0xc8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d104      	bne.n	8000ce4 <uiTraceStart+0x24>
 8000cda:	482c      	ldr	r0, [pc, #176]	; (8000d8c <uiTraceStart+0xcc>)
 8000cdc:	f000 ff8e 	bl	8001bfc <prvTraceError>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e04c      	b.n	8000d7e <uiTraceStart+0xbe>
		return 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e04a      	b.n	8000d7e <uiTraceStart+0xbe>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <uiTraceStart+0xc8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <uiTraceStart+0x36>
		return 1; /* Already running */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e043      	b.n	8000d7e <uiTraceStart+0xbe>

	if (traceErrorMessage == NULL)
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <uiTraceStart+0xd0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d13c      	bne.n	8000d78 <uiTraceStart+0xb8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8000d02:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d04:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f383 8810 	msr	PRIMASK, r3
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <uiTraceStart+0xd4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <uiTraceStart+0xd4>)
 8000d1a:	6013      	str	r3, [r2, #0]
		RecorderDataPtr->recorderActive = 1;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <uiTraceStart+0xc8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2201      	movs	r2, #1
 8000d22:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8000d24:	f7ff fdf6 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcc9 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8000d30:	4603      	mov	r3, r0
 8000d32:	75fb      	strb	r3, [r7, #23]
		if (handle == 0)
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d110      	bne.n	8000d5c <uiTraceStart+0x9c>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 fe10 	bl	8001960 <prvTraceGetObjectHandle>
 8000d40:	4603      	mov	r3, r0
 8000d42:	75fb      	strb	r3, [r7, #23]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <uiTraceStart+0xd8>)
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 fef8 	bl	8001b40 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 8000d50:	7dfb      	ldrb	r3, [r7, #23]
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 fb54 	bl	8001404 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fae0 	bl	8001324 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <uiTraceStart+0xd4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <uiTraceStart+0xd4>)
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <uiTraceStart+0xc8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000ccc 	.word	0x20000ccc
 8000d8c:	08006480 	.word	0x08006480
 8000d90:	20000c2c 	.word	0x20000c2c
 8000d94:	20000c24 	.word	0x20000c24
 8000d98:	080064c4 	.word	0x080064c4

08000d9c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8000da0:	f7ff ff8e 	bl	8000cc0 <uiTraceStart>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <vTraceStop+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <vTraceStop+0x28>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <vTraceStop+0x2c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <vTraceStop+0x2c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4798      	blx	r3
	}
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000ccc 	.word	0x20000ccc
 8000dd4:	20000c34 	.word	0x20000c34

08000dd8 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <xTraceIsRecordingEnabled+0x20>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <xTraceIsRecordingEnabled+0x20>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	e000      	b.n	8000dee <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
 8000dec:	2300      	movs	r3, #0
	}
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	20000ccc 	.word	0x20000ccc

08000dfc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d04a      	beq.n	8000ea2 <prvTraceStoreTaskReady+0xa6>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <prvTraceStoreTaskReady+0xb4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d048      	beq.n	8000ea6 <prvTraceStoreTaskReady+0xaa>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b0f      	cmp	r3, #15
 8000e18:	d903      	bls.n	8000e22 <prvTraceStoreTaskReady+0x26>
 8000e1a:	4826      	ldr	r0, [pc, #152]	; (8000eb4 <prvTraceStoreTaskReady+0xb8>)
 8000e1c:	f000 feee 	bl	8001bfc <prvTraceError>
 8000e20:	e042      	b.n	8000ea8 <prvTraceStoreTaskReady+0xac>

	if (recorder_busy)
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <prvTraceStoreTaskReady+0xbc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <prvTraceStoreTaskReady+0x36>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8000e2a:	4824      	ldr	r0, [pc, #144]	; (8000ebc <prvTraceStoreTaskReady+0xc0>)
 8000e2c:	f000 fee6 	bl	8001bfc <prvTraceError>
		return;
 8000e30:	e03a      	b.n	8000ea8 <prvTraceStoreTaskReady+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e32:	f3ef 8310 	mrs	r3, PRIMASK
 8000e36:	60fb      	str	r3, [r7, #12]
  return(result);
 8000e38:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	f383 8810 	msr	PRIMASK, r3
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <prvTraceStoreTaskReady+0xbc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <prvTraceStoreTaskReady+0xbc>)
 8000e4e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <prvTraceStoreTaskReady+0xc4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d018      	beq.n	8000e8c <prvTraceStoreTaskReady+0x90>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8000e5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e5e:	f000 ffab 	bl	8001db8 <prvTraceGetDTS>
 8000e62:	4603      	mov	r3, r0
 8000e64:	837b      	strh	r3, [r7, #26]
		hnd8 = prvTraceGet8BitHandle(handle);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	767b      	strb	r3, [r7, #25]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8000e6a:	f000 fcfd 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8000e6e:	6178      	str	r0, [r7, #20]
		if (tr != NULL)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00a      	beq.n	8000e8c <prvTraceStoreTaskReady+0x90>
		{
			tr->type = DIV_TASK_READY;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	8b7a      	ldrh	r2, [r7, #26]
 8000e80:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	7e7a      	ldrb	r2, [r7, #25]
 8000e86:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8000e88:	f000 ff6e 	bl	8001d68 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <prvTraceStoreTaskReady+0xbc>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <prvTraceStoreTaskReady+0xbc>)
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	f383 8810 	msr	PRIMASK, r3
 8000ea0:	e002      	b.n	8000ea8 <prvTraceStoreTaskReady+0xac>
		return;
 8000ea2:	bf00      	nop
 8000ea4:	e000      	b.n	8000ea8 <prvTraceStoreTaskReady+0xac>
		return;
 8000ea6:	bf00      	nop
}
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000000c 	.word	0x2000000c
 8000eb4:	0800682c 	.word	0x0800682c
 8000eb8:	20000c24 	.word	0x20000c24
 8000ebc:	0800686c 	.word	0x0800686c
 8000ec0:	20000ccc 	.word	0x20000ccc

08000ec4 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 8000ed0:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <vTraceStoreMemMangEvent+0x10c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d077      	beq.n	8000fc8 <vTraceStoreMemMangEvent+0x104>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da03      	bge.n	8000ee6 <vTraceStoreMemMangEvent+0x22>
		size = (uint32_t)(- signed_size);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8000ee4:	e001      	b.n	8000eea <vTraceStoreMemMangEvent+0x26>
	else
		size = (uint32_t)(signed_size);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000eea:	f3ef 8310 	mrs	r3, PRIMASK
 8000eee:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ef0:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f383 8810 	msr	PRIMASK, r3
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <vTraceStoreMemMangEvent+0x110>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <vTraceStoreMemMangEvent+0x110>)
 8000f06:	6013      	str	r3, [r2, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <vTraceStoreMemMangEvent+0x56>
		heapMemUsage += (uint32_t)signed_size;
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <vTraceStoreMemMangEvent+0x114>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <vTraceStoreMemMangEvent+0x114>)
 8000f18:	6013      	str	r3, [r2, #0]
	
	if (RecorderDataPtr->recorderActive)
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <vTraceStoreMemMangEvent+0x10c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d046      	beq.n	8000fb2 <vTraceStoreMemMangEvent+0xee>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8000f24:	20ff      	movs	r0, #255	; 0xff
 8000f26:	f000 ff47 	bl	8001db8 <prvTraceGetDTS>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8000f30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000f32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f36:	f000 f955 	bl	80011e4 <prvTraceGetParam>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8000f3e:	f000 fc93 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8000f42:	62b8      	str	r0, [r7, #40]	; 0x28

		if (ms != NULL)
 8000f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d033      	beq.n	8000fb2 <vTraceStoreMemMangEvent+0xee>
		{
			ms->dts = dts1;
 8000f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f4c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f50:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f5c:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8000f5e:	f000 ff03 	bl	8001d68 <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f68:	f000 f93c 	bl	80011e4 <prvTraceGetParam>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
				addr_high = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8000f76:	f000 fc77 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8000f7a:	6238      	str	r0, [r7, #32]
			if (ma != NULL)
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d017      	beq.n	8000fb2 <vTraceStoreMemMangEvent+0xee>
			{
				ma->addr_low = addr_low;
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f86:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000f8e:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
 8000fa4:	f000 fee0 	bl	8001d68 <prvTraceUpdateCounters>
				RecorderDataPtr->heapMemUsage = heapMemUsage;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <vTraceStoreMemMangEvent+0x10c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <vTraceStoreMemMangEvent+0x114>)
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <vTraceStoreMemMangEvent+0x110>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <vTraceStoreMemMangEvent+0x110>)
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f383 8810 	msr	PRIMASK, r3
 8000fc6:	e000      	b.n	8000fca <vTraceStoreMemMangEvent+0x106>
		return;
 8000fc8:	bf00      	nop
}
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000ccc 	.word	0x20000ccc
 8000fd4:	20000c24 	.word	0x20000c24
 8000fd8:	20000c38 	.word	0x20000c38

08000fdc <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	72fb      	strb	r3, [r7, #11]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2bfe      	cmp	r3, #254	; 0xfe
 8000fee:	d903      	bls.n	8000ff8 <prvTraceStoreKernelCall+0x1c>
 8000ff0:	4831      	ldr	r0, [pc, #196]	; (80010b8 <prvTraceStoreKernelCall+0xdc>)
 8000ff2:	f000 fe03 	bl	8001bfc <prvTraceError>
 8000ff6:	e05c      	b.n	80010b2 <prvTraceStoreKernelCall+0xd6>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d903      	bls.n	8001006 <prvTraceStoreKernelCall+0x2a>
 8000ffe:	482f      	ldr	r0, [pc, #188]	; (80010bc <prvTraceStoreKernelCall+0xe0>)
 8001000:	f000 fdfc 	bl	8001bfc <prvTraceError>
 8001004:	e055      	b.n	80010b2 <prvTraceStoreKernelCall+0xd6>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <prvTraceStoreKernelCall+0xe4>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	4413      	add	r3, r2
 800100e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4293      	cmp	r3, r2
 8001018:	d903      	bls.n	8001022 <prvTraceStoreKernelCall+0x46>
 800101a:	482a      	ldr	r0, [pc, #168]	; (80010c4 <prvTraceStoreKernelCall+0xe8>)
 800101c:	f000 fdee 	bl	8001bfc <prvTraceError>
 8001020:	e047      	b.n	80010b2 <prvTraceStoreKernelCall+0xd6>

	if (recorder_busy)
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <prvTraceStoreKernelCall+0xec>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <prvTraceStoreKernelCall+0x56>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 800102a:	4828      	ldr	r0, [pc, #160]	; (80010cc <prvTraceStoreKernelCall+0xf0>)
 800102c:	f000 fde6 	bl	8001bfc <prvTraceError>
		return;
 8001030:	e03f      	b.n	80010b2 <prvTraceStoreKernelCall+0xd6>
	}

	if (handle_of_last_logged_task == 0)
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <prvTraceStoreKernelCall+0xf4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d03a      	beq.n	80010b0 <prvTraceStoreKernelCall+0xd4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800103a:	f3ef 8310 	mrs	r3, PRIMASK
 800103e:	617b      	str	r3, [r7, #20]
  return(result);
 8001040:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	f383 8810 	msr	PRIMASK, r3
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <prvTraceStoreKernelCall+0xec>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <prvTraceStoreKernelCall+0xec>)
 8001056:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <prvTraceStoreKernelCall+0xe4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	2b00      	cmp	r3, #0
 8001060:	d01b      	beq.n	800109a <prvTraceStoreKernelCall+0xbe>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001062:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001066:	f000 fea7 	bl	8001db8 <prvTraceGetDTS>
 800106a:	4603      	mov	r3, r0
 800106c:	847b      	strh	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8001074:	f000 fbf8 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8001078:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <prvTraceStoreKernelCall+0xbe>
		{
			kse->dts = dts1;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001084:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001094:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8001096:	f000 fe67 	bl	8001d68 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <prvTraceStoreKernelCall+0xec>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3b01      	subs	r3, #1
 80010a0:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <prvTraceStoreKernelCall+0xec>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f383 8810 	msr	PRIMASK, r3
 80010ae:	e000      	b.n	80010b2 <prvTraceStoreKernelCall+0xd6>
		return;
 80010b0:	bf00      	nop
}
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	080068dc 	.word	0x080068dc
 80010bc:	08006914 	.word	0x08006914
 80010c0:	20000ccc 	.word	0x20000ccc
 80010c4:	0800695c 	.word	0x0800695c
 80010c8:	20000c24 	.word	0x20000c24
 80010cc:	080069a4 	.word	0x080069a4
 80010d0:	20000c30 	.word	0x20000c30

080010d4 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2bfe      	cmp	r3, #254	; 0xfe
 80010e8:	d903      	bls.n	80010f2 <prvTraceStoreKernelCallWithParam+0x1e>
 80010ea:	4837      	ldr	r0, [pc, #220]	; (80011c8 <prvTraceStoreKernelCallWithParam+0xf4>)
 80010ec:	f000 fd86 	bl	8001bfc <prvTraceError>
 80010f0:	e066      	b.n	80011c0 <prvTraceStoreKernelCallWithParam+0xec>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d903      	bls.n	8001100 <prvTraceStoreKernelCallWithParam+0x2c>
 80010f8:	4834      	ldr	r0, [pc, #208]	; (80011cc <prvTraceStoreKernelCallWithParam+0xf8>)
 80010fa:	f000 fd7f 	bl	8001bfc <prvTraceError>
 80010fe:	e05f      	b.n	80011c0 <prvTraceStoreKernelCallWithParam+0xec>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8001100:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <prvTraceStoreKernelCallWithParam+0xfc>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	4413      	add	r3, r2
 8001108:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800110c:	461a      	mov	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4293      	cmp	r3, r2
 8001112:	d903      	bls.n	800111c <prvTraceStoreKernelCallWithParam+0x48>
 8001114:	482f      	ldr	r0, [pc, #188]	; (80011d4 <prvTraceStoreKernelCallWithParam+0x100>)
 8001116:	f000 fd71 	bl	8001bfc <prvTraceError>
 800111a:	e051      	b.n	80011c0 <prvTraceStoreKernelCallWithParam+0xec>

	if (recorder_busy)
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <prvTraceStoreKernelCallWithParam+0x104>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <prvTraceStoreKernelCallWithParam+0x58>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 8001124:	482d      	ldr	r0, [pc, #180]	; (80011dc <prvTraceStoreKernelCallWithParam+0x108>)
 8001126:	f000 fd69 	bl	8001bfc <prvTraceError>
		return;
 800112a:	e049      	b.n	80011c0 <prvTraceStoreKernelCallWithParam+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800112c:	f3ef 8310 	mrs	r3, PRIMASK
 8001130:	617b      	str	r3, [r7, #20]
  return(result);
 8001132:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	f383 8810 	msr	PRIMASK, r3
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <prvTraceStoreKernelCallWithParam+0x104>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <prvTraceStoreKernelCallWithParam+0x104>)
 8001148:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <prvTraceStoreKernelCallWithParam+0xfc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02b      	beq.n	80011ac <prvTraceStoreKernelCallWithParam+0xd8>
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <prvTraceStoreKernelCallWithParam+0x10c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d027      	beq.n	80011ac <prvTraceStoreKernelCallWithParam+0xd8>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 800115c:	20ff      	movs	r0, #255	; 0xff
 800115e:	f000 fe2b 	bl	8001db8 <prvTraceGetDTS>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	20ff      	movs	r0, #255	; 0xff
 800116c:	f000 f83a 	bl	80011e4 <prvTraceGetParam>
 8001170:	4603      	mov	r3, r0
 8001172:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 800117c:	f000 fb74 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8001180:	61f8      	str	r0, [r7, #28]
		if (kse != NULL)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d011      	beq.n	80011ac <prvTraceStoreKernelCallWithParam+0xd8>
		{
			kse->dts = dts2;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800118e:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800119e:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80011a6:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 80011a8:	f000 fdde 	bl	8001d68 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <prvTraceStoreKernelCallWithParam+0x104>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <prvTraceStoreKernelCallWithParam+0x104>)
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f383 8810 	msr	PRIMASK, r3
}
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	080069dc 	.word	0x080069dc
 80011cc:	08006a1c 	.word	0x08006a1c
 80011d0:	20000ccc 	.word	0x20000ccc
 80011d4:	08006a6c 	.word	0x08006a6c
 80011d8:	20000c24 	.word	0x20000c24
 80011dc:	08006abc 	.word	0x08006abc
 80011e0:	20000c30 	.word	0x20000c30

080011e4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2bff      	cmp	r3, #255	; 0xff
 80011f2:	d009      	beq.n	8001208 <prvTraceGetParam+0x24>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d004      	beq.n	8001208 <prvTraceGetParam+0x24>
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <prvTraceGetParam+0x74>)
 8001200:	f000 fcfc 	bl	8001bfc <prvTraceError>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	e023      	b.n	8001250 <prvTraceGetParam+0x6c>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	d801      	bhi.n	8001214 <prvTraceGetParam+0x30>
	{
		return param;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	e01d      	b.n	8001250 <prvTraceGetParam+0x6c>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 8001214:	f000 fb28 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8001218:	60f8      	str	r0, [r7, #12]
		if (xps != NULL)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d014      	beq.n	800124a <prvTraceGetParam+0x66>
		{
			xps->type = DIV_XPS;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	43da      	mvns	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4013      	ands	r3, r2
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b2da      	uxtb	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	43da      	mvns	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	4013      	ands	r3, r2
 800123e:	0c1b      	lsrs	r3, r3, #16
 8001240:	b29a      	uxth	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8001246:	f000 fd8f 	bl	8001d68 <prvTraceUpdateCounters>
		}

		return param & param_max;
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4013      	ands	r3, r2
	}
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08006af4 	.word	0x08006af4

0800125c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	84fb      	strh	r3, [r7, #38]	; 0x26

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2bfe      	cmp	r3, #254	; 0xfe
 800126e:	d903      	bls.n	8001278 <prvTraceStoreKernelCallWithNumericParamOnly+0x1c>
 8001270:	4827      	ldr	r0, [pc, #156]	; (8001310 <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>)
 8001272:	f000 fcc3 	bl	8001bfc <prvTraceError>
 8001276:	e047      	b.n	8001308 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>

	if (recorder_busy)
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <prvTraceStoreKernelCallWithNumericParamOnly+0x2c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8001280:	4825      	ldr	r0, [pc, #148]	; (8001318 <prvTraceStoreKernelCallWithNumericParamOnly+0xbc>)
 8001282:	f000 fcbb 	bl	8001bfc <prvTraceError>
		return;
 8001286:	e03f      	b.n	8001308 <prvTraceStoreKernelCallWithNumericParamOnly+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001288:	f3ef 8310 	mrs	r3, PRIMASK
 800128c:	613b      	str	r3, [r7, #16]
  return(result);
 800128e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8001290:	623b      	str	r3, [r7, #32]
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f383 8810 	msr	PRIMASK, r3
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 80012a4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <prvTraceStoreKernelCallWithNumericParamOnly+0xc0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d021      	beq.n	80012f4 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <prvTraceStoreKernelCallWithNumericParamOnly+0xc4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01d      	beq.n	80012f4 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 80012b8:	20ff      	movs	r0, #255	; 0xff
 80012ba:	f000 fd7d 	bl	8001db8 <prvTraceGetDTS>
 80012be:	4603      	mov	r3, r0
 80012c0:	77fb      	strb	r3, [r7, #31]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012c8:	f7ff ff8c 	bl	80011e4 <prvTraceGetParam>
 80012cc:	4603      	mov	r3, r0
 80012ce:	84fb      	strh	r3, [r7, #38]	; 0x26
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 80012d0:	f000 faca 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 80012d4:	61b8      	str	r0, [r7, #24]
		if (kse != NULL)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>
		{
			kse->dts = dts6;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	7ffa      	ldrb	r2, [r7, #31]
 80012e0:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012ee:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80012f0:	f000 fd3a 	bl	8001d68 <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	4a06      	ldr	r2, [pc, #24]	; (8001314 <prvTraceStoreKernelCallWithNumericParamOnly+0xb8>)
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f383 8810 	msr	PRIMASK, r3
}
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	08006b30 	.word	0x08006b30
 8001314:	20000c24 	.word	0x20000c24
 8001318:	08006b88 	.word	0x08006b88
 800131c:	20000ccc 	.word	0x20000ccc
 8001320:	20000c30 	.word	0x20000c30

08001324 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d903      	bls.n	800133c <prvTraceStoreTaskswitch+0x18>
 8001334:	482e      	ldr	r0, [pc, #184]	; (80013f0 <prvTraceStoreTaskswitch+0xcc>)
 8001336:	f000 fc61 	bl	8001bfc <prvTraceError>
 800133a:	e056      	b.n	80013ea <prvTraceStoreTaskswitch+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800133c:	f3ef 8310 	mrs	r3, PRIMASK
 8001340:	60fb      	str	r3, [r7, #12]
  return(result);
 8001342:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	2301      	movs	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f383 8810 	msr	PRIMASK, r3
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <prvTraceStoreTaskswitch+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <prvTraceStoreTaskswitch+0xd0>)
 8001358:	6013      	str	r3, [r2, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <prvTraceStoreTaskswitch+0xd4>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	79fa      	ldrb	r2, [r7, #7]
 8001360:	429a      	cmp	r2, r3
 8001362:	d038      	beq.n	80013d6 <prvTraceStoreTaskswitch+0xb2>
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <prvTraceStoreTaskswitch+0xd8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	2b00      	cmp	r3, #0
 800136c:	d033      	beq.n	80013d6 <prvTraceStoreTaskswitch+0xb2>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <prvTraceStoreTaskswitch+0xdc>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8001374:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001378:	f000 fd1e 	bl	8001db8 <prvTraceGetDTS>
 800137c:	4603      	mov	r3, r0
 800137e:	837b      	strh	r3, [r7, #26]
		handle_of_last_logged_task = task_handle;
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <prvTraceStoreTaskswitch+0xd4>)
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	7013      	strb	r3, [r2, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <prvTraceStoreTaskswitch+0xd4>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	767b      	strb	r3, [r7, #25]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 800138c:	f000 fa6c 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8001390:	6178      	str	r0, [r7, #20]

		if (ts != NULL)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01e      	beq.n	80013d6 <prvTraceStoreTaskswitch+0xb2>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <prvTraceStoreTaskswitch+0xd4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	2003      	movs	r0, #3
 80013a0:	f000 f8e6 	bl	8001570 <prvTraceGetObjectState>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d103      	bne.n	80013b2 <prvTraceStoreTaskswitch+0x8e>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2207      	movs	r2, #7
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e002      	b.n	80013b8 <prvTraceStoreTaskswitch+0x94>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2206      	movs	r2, #6
 80013b6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	8b7a      	ldrh	r2, [r7, #26]
 80013bc:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	7e7a      	ldrb	r2, [r7, #25]
 80013c2:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <prvTraceStoreTaskswitch+0xd4>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f893 	bl	80014f8 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80013d2:	f000 fcc9 	bl	8001d68 <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <prvTraceStoreTaskswitch+0xd0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <prvTraceStoreTaskswitch+0xd0>)
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f383 8810 	msr	PRIMASK, r3
}
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	08006bc0 	.word	0x08006bc0
 80013f4:	20000c24 	.word	0x20000c24
 80013f8:	20000c30 	.word	0x20000c30
 80013fc:	20000ccc 	.word	0x20000ccc
 8001400:	20000c10 	.word	0x20000c10

08001404 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	460b      	mov	r3, r1
 8001410:	71bb      	strb	r3, [r7, #6]
 8001412:	4613      	mov	r3, r2
 8001414:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b08      	cmp	r3, #8
 800141a:	d903      	bls.n	8001424 <prvTraceSetPriorityProperty+0x20>
 800141c:	4814      	ldr	r0, [pc, #80]	; (8001470 <prvTraceSetPriorityProperty+0x6c>)
 800141e:	f000 fbed 	bl	8001bfc <prvTraceError>
 8001422:	e022      	b.n	800146a <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <prvTraceSetPriorityProperty+0x70>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4413      	add	r3, r2
 800142c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001430:	79ba      	ldrb	r2, [r7, #6]
 8001432:	429a      	cmp	r2, r3
 8001434:	d903      	bls.n	800143e <prvTraceSetPriorityProperty+0x3a>
 8001436:	4810      	ldr	r0, [pc, #64]	; (8001478 <prvTraceSetPriorityProperty+0x74>)
 8001438:	f000 fbe0 	bl	8001bfc <prvTraceError>
 800143c:	e015      	b.n	800146a <prvTraceSetPriorityProperty+0x66>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <prvTraceSetPriorityProperty+0x70>)
 8001440:	681c      	ldr	r4, [r3, #0]
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fa31 	bl	80018b0 <uiIndexOfObject>
 800144e:	4603      	mov	r3, r0
 8001450:	4619      	mov	r1, r3
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <prvTraceSetPriorityProperty+0x70>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4413      	add	r3, r2
 800145a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800145e:	440b      	add	r3, r1
 8001460:	3301      	adds	r3, #1
 8001462:	4423      	add	r3, r4
 8001464:	797a      	ldrb	r2, [r7, #5]
 8001466:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	08006d54 	.word	0x08006d54
 8001474:	20000ccc 	.word	0x20000ccc
 8001478:	08006da0 	.word	0x08006da0

0800147c <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b08      	cmp	r3, #8
 8001490:	d904      	bls.n	800149c <prvTraceGetPriorityProperty+0x20>
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <prvTraceGetPriorityProperty+0x70>)
 8001494:	f000 fbb2 	bl	8001bfc <prvTraceError>
 8001498:	2300      	movs	r3, #0
 800149a:	e022      	b.n	80014e2 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <prvTraceGetPriorityProperty+0x74>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4413      	add	r3, r2
 80014a4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80014a8:	79ba      	ldrb	r2, [r7, #6]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d904      	bls.n	80014b8 <prvTraceGetPriorityProperty+0x3c>
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <prvTraceGetPriorityProperty+0x78>)
 80014b0:	f000 fba4 	bl	8001bfc <prvTraceError>
 80014b4:	2300      	movs	r3, #0
 80014b6:	e014      	b.n	80014e2 <prvTraceGetPriorityProperty+0x66>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <prvTraceGetPriorityProperty+0x74>)
 80014ba:	681c      	ldr	r4, [r3, #0]
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f9f4 	bl	80018b0 <uiIndexOfObject>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <prvTraceGetPriorityProperty+0x74>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4413      	add	r3, r2
 80014d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80014d8:	440b      	add	r3, r1
 80014da:	3301      	adds	r3, #1
 80014dc:	4423      	add	r3, r4
 80014de:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	08006de0 	.word	0x08006de0
 80014f0:	20000ccc 	.word	0x20000ccc
 80014f4:	08006e2c 	.word	0x08006e2c

080014f8 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	460b      	mov	r3, r1
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	4613      	mov	r3, r2
 8001508:	717b      	strb	r3, [r7, #5]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b08      	cmp	r3, #8
 800150e:	d903      	bls.n	8001518 <prvTraceSetObjectState+0x20>
 8001510:	4814      	ldr	r0, [pc, #80]	; (8001564 <prvTraceSetObjectState+0x6c>)
 8001512:	f000 fb73 	bl	8001bfc <prvTraceError>
 8001516:	e021      	b.n	800155c <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <prvTraceSetObjectState+0x70>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4413      	add	r3, r2
 8001520:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001524:	79ba      	ldrb	r2, [r7, #6]
 8001526:	429a      	cmp	r2, r3
 8001528:	d903      	bls.n	8001532 <prvTraceSetObjectState+0x3a>
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <prvTraceSetObjectState+0x74>)
 800152c:	f000 fb66 	bl	8001bfc <prvTraceError>
 8001530:	e014      	b.n	800155c <prvTraceSetObjectState+0x64>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <prvTraceSetObjectState+0x70>)
 8001534:	681c      	ldr	r4, [r3, #0]
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f9b7 	bl	80018b0 <uiIndexOfObject>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <prvTraceSetObjectState+0x70>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4413      	add	r3, r2
 800154e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001552:	440b      	add	r3, r1
 8001554:	4423      	add	r3, r4
 8001556:	797a      	ldrb	r2, [r7, #5]
 8001558:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	08006e6c 	.word	0x08006e6c
 8001568:	20000ccc 	.word	0x20000ccc
 800156c:	08006eb0 	.word	0x08006eb0

08001570 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	4613      	mov	r3, r2
 800157e:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b08      	cmp	r3, #8
 8001584:	d904      	bls.n	8001590 <prvTraceGetObjectState+0x20>
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <prvTraceGetObjectState+0x6c>)
 8001588:	f000 fb38 	bl	8001bfc <prvTraceError>
 800158c:	2300      	movs	r3, #0
 800158e:	e021      	b.n	80015d4 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <prvTraceGetObjectState+0x70>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4413      	add	r3, r2
 8001598:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800159c:	79ba      	ldrb	r2, [r7, #6]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d904      	bls.n	80015ac <prvTraceGetObjectState+0x3c>
 80015a2:	4810      	ldr	r0, [pc, #64]	; (80015e4 <prvTraceGetObjectState+0x74>)
 80015a4:	f000 fb2a 	bl	8001bfc <prvTraceError>
 80015a8:	2300      	movs	r3, #0
 80015aa:	e013      	b.n	80015d4 <prvTraceGetObjectState+0x64>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <prvTraceGetObjectState+0x70>)
 80015ae:	681c      	ldr	r4, [r3, #0]
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f97a 	bl	80018b0 <uiIndexOfObject>
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <prvTraceGetObjectState+0x70>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	4413      	add	r3, r2
 80015c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80015cc:	440b      	add	r3, r1
 80015ce:	4423      	add	r3, r4
 80015d0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	08006eec 	.word	0x08006eec
 80015e0:	20000ccc 	.word	0x20000ccc
 80015e4:	08006f30 	.word	0x08006f30

080015e8 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <prvTraceSetTaskInstanceFinished+0x4c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d903      	bls.n	8001608 <prvTraceSetTaskInstanceFinished+0x20>
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <prvTraceSetTaskInstanceFinished+0x50>)
 8001602:	f000 fafb 	bl	8001bfc <prvTraceError>
 8001606:	e011      	b.n	800162c <prvTraceSetTaskInstanceFinished+0x44>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <prvTraceSetTaskInstanceFinished+0x4c>)
 800160a:	681c      	ldr	r4, [r3, #0]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2103      	movs	r1, #3
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f94d 	bl	80018b0 <uiIndexOfObject>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <prvTraceSetTaskInstanceFinished+0x4c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001622:	4413      	add	r3, r2
 8001624:	4423      	add	r3, r4
 8001626:	2200      	movs	r2, #0
 8001628:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
#endif
}
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}
 8001632:	bf00      	nop
 8001634:	20000ccc 	.word	0x20000ccc
 8001638:	08006f6c 	.word	0x08006f6c

0800163c <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
 8001640:	4b83      	ldr	r3, [pc, #524]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <prvTraceInitTraceData+0x214>)
 800164a:	4a82      	ldr	r2, [pc, #520]	; (8001854 <prvTraceInitTraceData+0x218>)
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e006      	b.n	800165e <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
 8001650:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b01      	cmp	r3, #1
 800165a:	f000 80f6 	beq.w	800184a <prvTraceInitTraceData+0x20e>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
 800165e:	4b7e      	ldr	r3, [pc, #504]	; (8001858 <prvTraceInitTraceData+0x21c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7e      	ldr	r2, [pc, #504]	; (800185c <prvTraceInitTraceData+0x220>)
 8001664:	6013      	str	r3, [r2, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8001666:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f641 1218 	movw	r2, #6424	; 0x1918
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f004 f890 	bl	8005796 <memset>
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8001676:	4b76      	ldr	r3, [pc, #472]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 800167e:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8001680:	4b73      	ldr	r3, [pc, #460]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2205      	movs	r2, #5
 8001686:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8001688:	4b71      	ldr	r3, [pc, #452]	; (8001850 <prvTraceInitTraceData+0x214>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8001690:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f641 1218 	movw	r2, #6424	; 0x1918
 8001698:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800169a:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <prvTraceInitTraceData+0x214>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016a2:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 80016b6:	4b66      	ldr	r3, [pc, #408]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 80016be:	f7ff f981 	bl	80009c4 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f04f 32f1 	mov.w	r2, #4059165169	; 0xf1f1f1f1
 80016ca:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016d6:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 80016e4:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f04f 32f2 	mov.w	r2, #4076008178	; 0xf2f2f2f2
 80016ec:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 80016f0:	4b57      	ldr	r3, [pc, #348]	; (8001850 <prvTraceInitTraceData+0x214>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80016f8:	2250      	movs	r2, #80	; 0x50
 80016fa:	4959      	ldr	r1, [pc, #356]	; (8001860 <prvTraceInitTraceData+0x224>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f9f9 	bl	8001af4 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8001702:	4b53      	ldr	r3, [pc, #332]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 800170a:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 800170e:	4b50      	ldr	r3, [pc, #320]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001716:	330c      	adds	r3, #12
 8001718:	220a      	movs	r2, #10
 800171a:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker1 = 0x0B;
 800171c:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <prvTraceInitTraceData+0x214>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001724:	330d      	adds	r3, #13
 8001726:	220b      	movs	r2, #11
 8001728:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker2 = 0x0C;
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <prvTraceInitTraceData+0x214>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001732:	330e      	adds	r3, #14
 8001734:	220c      	movs	r2, #12
 8001736:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker3 = 0x0D;
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <prvTraceInitTraceData+0x214>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001740:	330f      	adds	r3, #15
 8001742:	220d      	movs	r2, #13
 8001744:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker4 = 0x71;
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 800174e:	3310      	adds	r3, #16
 8001750:	2271      	movs	r2, #113	; 0x71
 8001752:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker5 = 0x72;
 8001754:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 800175c:	3311      	adds	r3, #17
 800175e:	2272      	movs	r2, #114	; 0x72
 8001760:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker6 = 0x73;
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 800176a:	3312      	adds	r3, #18
 800176c:	2273      	movs	r2, #115	; 0x73
 800176e:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker7 = 0x74;
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001778:	3313      	adds	r3, #19
 800177a:	2274      	movs	r2, #116	; 0x74
 800177c:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker8 = 0xF1;
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001786:	3314      	adds	r3, #20
 8001788:	22f1      	movs	r2, #241	; 0xf1
 800178a:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker9 = 0xF2;
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <prvTraceInitTraceData+0x214>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8001794:	3315      	adds	r3, #21
 8001796:	22f2      	movs	r2, #242	; 0xf2
 8001798:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker10 = 0xF3;
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <prvTraceInitTraceData+0x214>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 80017a2:	3316      	adds	r3, #22
 80017a4:	22f3      	movs	r2, #243	; 0xf3
 80017a6:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->endmarker11 = 0xF4;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 80017b0:	3317      	adds	r3, #23
 80017b2:	22f4      	movs	r2, #244	; 0xf4
 80017b4:	701a      	strb	r2, [r3, #0]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 80017b6:	f7ff f9d3 	bl	8000b60 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	22f4      	movs	r2, #244	; 0xf4
 80017c0:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	22f3      	movs	r2, #243	; 0xf3
 80017c8:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	22f2      	movs	r2, #242	; 0xf2
 80017d0:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	22f1      	movs	r2, #241	; 0xf1
 80017d8:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2274      	movs	r2, #116	; 0x74
 80017e0:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2273      	movs	r2, #115	; 0x73
 80017e8:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2272      	movs	r2, #114	; 0x72
 80017f0:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2271      	movs	r2, #113	; 0x71
 80017f8:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <prvTraceInitTraceData+0x214>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2204      	movs	r2, #4
 8001800:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2203      	movs	r2, #3
 8001808:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <prvTraceInitTraceData+0x214>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2202      	movs	r2, #2
 8001810:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <prvTraceInitTraceData+0x228>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d010      	beq.n	8001844 <prvTraceInitTraceData+0x208>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f603 1014 	addw	r0, r3, #2324	; 0x914
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <prvTraceInitTraceData+0x228>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2250      	movs	r2, #80	; 0x50
 8001830:	4619      	mov	r1, r3
 8001832:	f000 f95f 	bl	8001af4 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <prvTraceInitTraceData+0x214>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		vTraceStop();
 8001840:	f7ff fab2 	bl	8000da8 <vTraceStop>
	}


	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
 8001844:	f000 fb90 	bl	8001f68 <prvTraceInitCortexM>
 8001848:	e000      	b.n	800184c <prvTraceInitTraceData+0x210>
			return;
 800184a:	bf00      	nop
#endif
}
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000ccc 	.word	0x20000ccc
 8001854:	20004b3c 	.word	0x20004b3c
 8001858:	e0001004 	.word	0xe0001004
 800185c:	20006454 	.word	0x20006454
 8001860:	08006fb4 	.word	0x08006fb4
 8001864:	20000c2c 	.word	0x20000c2c

08001868 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <prvTraceNextFreeEventBufferSlot+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 8001876:	2300      	movs	r3, #0
 8001878:	e013      	b.n	80018a2 <prvTraceNextFreeEventBufferSlot+0x3a>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <prvTraceNextFreeEventBufferSlot+0x40>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001884:	d304      	bcc.n	8001890 <prvTraceNextFreeEventBufferSlot+0x28>
	{
		prvTraceError("Attempt to index outside event buffer!");
 8001886:	4809      	ldr	r0, [pc, #36]	; (80018ac <prvTraceNextFreeEventBufferSlot+0x44>)
 8001888:	f000 f9b8 	bl	8001bfc <prvTraceError>
		return NULL;
 800188c:	2300      	movs	r3, #0
 800188e:	e008      	b.n	80018a2 <prvTraceNextFreeEventBufferSlot+0x3a>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <prvTraceNextFreeEventBufferSlot+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80018a0:	4413      	add	r3, r2
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000ccc 	.word	0x20000ccc
 80018ac:	08006fc8 	.word	0x08006fc8

080018b0 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	460a      	mov	r2, r1
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	4613      	mov	r3, r2
 80018be:	71bb      	strb	r3, [r7, #6]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80018c0:	79bb      	ldrb	r3, [r7, #6]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d904      	bls.n	80018d0 <uiIndexOfObject+0x20>
 80018c6:	4822      	ldr	r0, [pc, #136]	; (8001950 <uiIndexOfObject+0xa0>)
 80018c8:	f000 f998 	bl	8001bfc <prvTraceError>
 80018cc:	2300      	movs	r3, #0
 80018ce:	e03a      	b.n	8001946 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <uiIndexOfObject+0x38>
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <uiIndexOfObject+0xa4>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	4413      	add	r3, r2
 80018de:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d904      	bls.n	80018f2 <uiIndexOfObject+0x42>
 80018e8:	481b      	ldr	r0, [pc, #108]	; (8001958 <uiIndexOfObject+0xa8>)
 80018ea:	f000 f987 	bl	8001bfc <prvTraceError>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e029      	b.n	8001946 <uiIndexOfObject+0x96>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d822      	bhi.n	800193e <uiIndexOfObject+0x8e>
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01f      	beq.n	800193e <uiIndexOfObject+0x8e>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <uiIndexOfObject+0xa4>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	4413      	add	r3, r2
 8001906:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	429a      	cmp	r2, r3
 800190e:	d816      	bhi.n	800193e <uiIndexOfObject+0x8e>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <uiIndexOfObject+0xa4>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	3340      	adds	r3, #64	; 0x40
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	891a      	ldrh	r2, [r3, #8]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <uiIndexOfObject+0xa4>)
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	79bb      	ldrb	r3, [r7, #6]
 8001924:	440b      	add	r3, r1
 8001926:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800192a:	b299      	uxth	r1, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	3b01      	subs	r3, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8001930:	b29b      	uxth	r3, r3
 8001932:	fb11 f303 	smulbb	r3, r1, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	4413      	add	r3, r2
 800193a:	b29b      	uxth	r3, r3
 800193c:	e003      	b.n	8001946 <uiIndexOfObject+0x96>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 800193e:	4807      	ldr	r0, [pc, #28]	; (800195c <uiIndexOfObject+0xac>)
 8001940:	f000 f95c 	bl	8001bfc <prvTraceError>
	return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	08006ff0 	.word	0x08006ff0
 8001954:	20000ccc 	.word	0x20000ccc
 8001958:	08007030 	.word	0x08007030
 800195c:	08007070 	.word	0x08007070

08001960 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 800196a:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <prvTraceGetObjectHandle+0x140>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d104      	bne.n	800197c <prvTraceGetObjectHandle+0x1c>
 8001972:	484c      	ldr	r0, [pc, #304]	; (8001aa4 <prvTraceGetObjectHandle+0x144>)
 8001974:	f000 f942 	bl	8001bfc <prvTraceError>
 8001978:	2300      	movs	r3, #0
 800197a:	e08d      	b.n	8001a98 <prvTraceGetObjectHandle+0x138>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b08      	cmp	r3, #8
 8001980:	d904      	bls.n	800198c <prvTraceGetObjectHandle+0x2c>
 8001982:	4849      	ldr	r0, [pc, #292]	; (8001aa8 <prvTraceGetObjectHandle+0x148>)
 8001984:	f000 f93a 	bl	8001bfc <prvTraceError>
 8001988:	2300      	movs	r3, #0
 800198a:	e085      	b.n	8001a98 <prvTraceGetObjectHandle+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800198c:	f3ef 8310 	mrs	r3, PRIMASK
 8001990:	60fb      	str	r3, [r7, #12]
  return(result);
 8001992:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	2301      	movs	r3, #1
 8001998:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f383 8810 	msr	PRIMASK, r3
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <prvTraceGetObjectHandle+0x14c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a41      	ldr	r2, [pc, #260]	; (8001aac <prvTraceGetObjectHandle+0x14c>)
 80019a8:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4a40      	ldr	r2, [pc, #256]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 80019ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <prvTraceGetObjectHandle+0x154>)
 80019b6:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80019b8:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <prvTraceGetObjectHandle+0x154>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 80019be:	4413      	add	r3, r2
 80019c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d114      	bne.n	80019f2 <prvTraceGetObjectHandle+0x92>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <prvTraceGetObjectHandle+0x154>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4937      	ldr	r1, [pc, #220]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 80019d2:	3308      	adds	r3, #8
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	440b      	add	r3, r1
 80019d8:	885b      	ldrh	r3, [r3, #2]
			(traceHandle)(1 + indexOfHandle -
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <prvTraceGetObjectHandle+0x154>)
 80019e2:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 80019e4:	3201      	adds	r2, #1
 80019e6:	b2d1      	uxtb	r1, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 80019e8:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 80019ea:	4413      	add	r3, r2
 80019ec:	460a      	mov	r2, r1
 80019ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 80019f2:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <prvTraceGetObjectHandle+0x154>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 80019f8:	4413      	add	r3, r2
 80019fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019fe:	77fb      	strb	r3, [r7, #31]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a04:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4929      	ldr	r1, [pc, #164]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a0c:	3310      	adds	r3, #16
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	440b      	add	r3, r1
 8001a12:	889b      	ldrh	r3, [r3, #4]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d90a      	bls.n	8001a2e <prvTraceGetObjectHandle+0xce>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f904 	bl	8000c28 <pszTraceGetErrorNotEnoughHandles>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f8ea 	bl	8001bfc <prvTraceError>
		handle = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	77fb      	strb	r3, [r7, #31]
 8001a2c:	e029      	b.n	8001a82 <prvTraceGetObjectHandle+0x122>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a36:	3201      	adds	r2, #1
 8001a38:	b291      	uxth	r1, r2
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a48:	4619      	mov	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a4e:	3308      	adds	r3, #8
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	885b      	ldrh	r3, [r3, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a5e:	3318      	adds	r3, #24
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	88db      	ldrh	r3, [r3, #6]
 8001a66:	461a      	mov	r2, r3
		if (hndCount >
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	dd09      	ble.n	8001a82 <prvTraceGetObjectHandle+0x122>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001a72:	79fb      	ldrb	r3, [r7, #7]
				(traceHandle)hndCount;
 8001a74:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <prvTraceGetObjectHandle+0x150>)
 8001a78:	3318      	adds	r3, #24
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	460a      	mov	r2, r1
 8001a80:	80da      	strh	r2, [r3, #6]
		}
	}
	trcCRITICAL_SECTION_END();
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <prvTraceGetObjectHandle+0x14c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <prvTraceGetObjectHandle+0x14c>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f383 8810 	msr	PRIMASK, r3

	return handle;
 8001a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000ccc 	.word	0x20000ccc
 8001aa4:	080064d0 	.word	0x080064d0
 8001aa8:	080070b0 	.word	0x080070b0
 8001aac:	20000c24 	.word	0x20000c24
 8001ab0:	20000c3c 	.word	0x20000c3c
 8001ab4:	20000cd0 	.word	0x20000cd0

08001ab8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff feee 	bl	80018b0 <uiIndexOfObject>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	81fb      	strh	r3, [r7, #14]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <prvMarkObjectAsUsed+0x38>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	4413      	add	r3, r2
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000ccc 	.word	0x20000ccc

08001af4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e010      	b.n	8001b28 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	441a      	add	r2, r3
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	440b      	add	r3, r1
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d3ea      	bcc.n	8001b06 <prvStrncpy+0x12>
			break;
	}
}
 8001b30:	e000      	b.n	8001b34 <prvStrncpy+0x40>
			break;
 8001b32:	bf00      	nop
}
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	603a      	str	r2, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	71bb      	strb	r3, [r7, #6]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <prvTraceSetObjectName+0x1e>
 8001b56:	4823      	ldr	r0, [pc, #140]	; (8001be4 <prvTraceSetObjectName+0xa4>)
 8001b58:	f000 f850 	bl	8001bfc <prvTraceError>
 8001b5c:	e03e      	b.n	8001bdc <prvTraceSetObjectName+0x9c>

	if (objectclass >= TRACE_NCLASSES)
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d903      	bls.n	8001b6c <prvTraceSetObjectName+0x2c>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8001b64:	4820      	ldr	r0, [pc, #128]	; (8001be8 <prvTraceSetObjectName+0xa8>)
 8001b66:	f000 f849 	bl	8001bfc <prvTraceError>
		return;
 8001b6a:	e037      	b.n	8001bdc <prvTraceSetObjectName+0x9c>
	}

	if (handle == 0)
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <prvTraceSetObjectName+0x3a>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8001b72:	481e      	ldr	r0, [pc, #120]	; (8001bec <prvTraceSetObjectName+0xac>)
 8001b74:	f000 f842 	bl	8001bfc <prvTraceError>
		return;
 8001b78:	e030      	b.n	8001bdc <prvTraceSetObjectName+0x9c>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <prvTraceSetObjectName+0xb0>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4413      	add	r3, r2
 8001b82:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001b86:	79ba      	ldrb	r2, [r7, #6]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d908      	bls.n	8001b9e <prvTraceSetObjectName+0x5e>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f84a 	bl	8000c28 <pszTraceGetErrorNotEnoughHandles>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f830 	bl	8001bfc <prvTraceError>
 8001b9c:	e01e      	b.n	8001bdc <prvTraceSetObjectName+0x9c>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fe83 	bl	80018b0 <uiIndexOfObject>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <prvTraceSetObjectName+0xb4>)
 8001bb0:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <prvTraceSetObjectName+0xb8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d110      	bne.n	8001bdc <prvTraceSetObjectName+0x9c>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <prvTraceSetObjectName+0xb0>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <prvTraceSetObjectName+0xb4>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	3398      	adds	r3, #152	; 0x98
 8001bc4:	4413      	add	r3, r2
 8001bc6:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <prvTraceSetObjectName+0xb0>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	f7ff ff8c 	bl	8001af4 <prvStrncpy>
		}
	}
}
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	080071b4 	.word	0x080071b4
 8001be8:	080071e8 	.word	0x080071e8
 8001bec:	08007218 	.word	0x08007218
 8001bf0:	20000ccc 	.word	0x20000ccc
 8001bf4:	20000cd4 	.word	0x20000cd4
 8001bf8:	20000c2c 	.word	0x20000c2c

08001bfc <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <prvTraceError+0x50>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <prvTraceError+0x14>
	{
		vTraceStop();
 8001c0c:	f7ff f8cc 	bl	8000da8 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <prvTraceError+0x54>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d115      	bne.n	8001c44 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <prvTraceError+0x54>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <prvTraceError+0x50>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00e      	beq.n	8001c44 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <prvTraceError+0x50>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f603 1014 	addw	r0, r3, #2324	; 0x914
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <prvTraceError+0x54>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2250      	movs	r2, #80	; 0x50
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <prvTraceError+0x50>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
		}
	}
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000ccc 	.word	0x20000ccc
 8001c50:	20000c2c 	.word	0x20000c2c

08001c54 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d172      	bne.n	8001d52 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xfe>
 8001c6c:	483c      	ldr	r0, [pc, #240]	; (8001d60 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x10c>)
 8001c6e:	f7ff ffc5 	bl	8001bfc <prvTraceError>
 8001c72:	e072      	b.n	8001d5a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x106>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8001c8e:	2b98      	cmp	r3, #152	; 0x98
 8001c90:	d928      	bls.n	8001ce4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8001ca0:	2ba7      	cmp	r3, #167	; 0xa7
 8001ca2:	d81f      	bhi.n	8001ce4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8001cb2:	3368      	adds	r3, #104	; 0x68
 8001cb4:	73fb      	strb	r3, [r7, #15]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	441a      	add	r2, r3
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d241      	bcs.n	8001d4a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8001cc6:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8001cd2:	18d0      	adds	r0, r2, r3
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f003 fd5a 	bl	8005796 <memset>
		{
 8001ce2:	e032      	b.n	8001d4a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	f893 3968 	ldrb.w	r3, [r3, #2408]	; 0x968
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d12a      	bne.n	8001d4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d20c      	bcs.n	8001d1e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xca>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8001d10:	4413      	add	r3, r2
 8001d12:	2208      	movs	r2, #8
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fd3d 	bl	8005796 <memset>
 8001d1c:	e016      	b.n	8001d4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8001d26:	2204      	movs	r2, #4
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fd33 	bl	8005796 <memset>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x110>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8001d3c:	4413      	add	r3, r2
 8001d3e:	2204      	movs	r2, #4
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fd27 	bl	8005796 <memset>
 8001d48:	e000      	b.n	8001d4c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf8>
		{
 8001d4a:	bf00      	nop
			}
		}
		i++;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d38c      	bcc.n	8001c74 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x20>
	}
}
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	08007278 	.word	0x08007278
 8001d64:	20000ccc 	.word	0x20000ccc

08001d68 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <prvTraceUpdateCounters+0x4c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01b      	beq.n	8001dae <prvTraceUpdateCounters+0x46>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <prvTraceUpdateCounters+0x4c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695a      	ldr	r2, [r3, #20]
 8001d7c:	3201      	adds	r2, #1
 8001d7e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <prvTraceUpdateCounters+0x4c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	3201      	adds	r2, #1
 8001d88:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <prvTraceUpdateCounters+0x4c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d94:	d307      	bcc.n	8001da6 <prvTraceUpdateCounters+0x3e>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <prvTraceUpdateCounters+0x4c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <prvTraceUpdateCounters+0x4c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff ff54 	bl	8001c54 <prvCheckDataToBeOverwrittenForMultiEntryEvents>
 8001dac:	e000      	b.n	8001db0 <prvTraceUpdateCounters+0x48>
		return;
 8001dae:	bf00      	nop
#endif
}
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000ccc 	.word	0x20000ccc

08001db8 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2bff      	cmp	r3, #255	; 0xff
 8001dd2:	d009      	beq.n	8001de8 <prvTraceGetDTS+0x30>
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <prvTraceGetDTS+0x30>
 8001dde:	485a      	ldr	r0, [pc, #360]	; (8001f48 <prvTraceGetDTS+0x190>)
 8001de0:	f7ff ff0c 	bl	8001bfc <prvTraceError>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e0ab      	b.n	8001f40 <prvTraceGetDTS+0x188>

	
	if (RecorderDataPtr->frequency == 0)
 8001de8:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d116      	bne.n	8001e20 <prvTraceGetDTS+0x68>
	{	
		if (timestampFrequency != 0)
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <prvTraceGetDTS+0x198>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <prvTraceGetDTS+0x50>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <prvTraceGetDTS+0x198>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0892      	lsrs	r2, r2, #2
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
 8001e06:	e00b      	b.n	8001e20 <prvTraceGetDTS+0x68>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8001e08:	4b52      	ldr	r3, [pc, #328]	; (8001f54 <prvTraceGetDTS+0x19c>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b52      	ldr	r3, [pc, #328]	; (8001f58 <prvTraceGetDTS+0x1a0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d005      	beq.n	8001e20 <prvTraceGetDTS+0x68>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8001e14:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <prvTraceGetDTS+0x1a4>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0892      	lsrs	r2, r2, #2
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 f8d5 	bl	8001fd4 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <prvTraceGetDTS+0x1a8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a4a      	ldr	r2, [pc, #296]	; (8001f60 <prvTraceGetDTS+0x1a8>)
 8001e38:	6013      	str	r3, [r2, #0]

	if (RecorderDataPtr->frequency > 0)
 8001e3a:	4b44      	ldr	r3, [pc, #272]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d043      	beq.n	8001ecc <prvTraceGetDTS+0x114>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d91d      	bls.n	8001e8c <prvTraceGetDTS+0xd4>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8001e50:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	440a      	add	r2, r1
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e70:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fbb3 f0f2 	udiv	r0, r3, r2
 8001e7c:	fb02 f200 	mul.w	r2, r2, r0
 8001e80:	1a9a      	subs	r2, r3, r2
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	440a      	add	r2, r1
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
 8001e8a:	e007      	b.n	8001e9c <prvTraceGetDTS+0xe4>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	440a      	add	r2, r1
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d313      	bcc.n	8001ed4 <prvTraceGetDTS+0x11c>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb2:	3201      	adds	r2, #1
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	1a8a      	subs	r2, r1, r2
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8001eca:	e003      	b.n	8001ed4 <prvTraceGetDTS+0x11c>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <prvTraceGetDTS+0x194>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d92c      	bls.n	8001f36 <prvTraceGetDTS+0x17e>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8001edc:	f7ff fcc4 	bl	8001868 <prvTraceNextFreeEventBufferSlot>
 8001ee0:	6178      	str	r0, [r7, #20]

		if (xts != NULL)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d026      	beq.n	8001f36 <prvTraceGetDTS+0x17e>
		{
			if (param_maxDTS == 0xFFFF)
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10b      	bne.n	8001f0a <prvTraceGetDTS+0x152>
			{
				xts->type = XTS16;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	22a9      	movs	r2, #169	; 0xa9
 8001ef6:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e013      	b.n	8001f32 <prvTraceGetDTS+0x17a>
			}
			else if (param_maxDTS == 0xFF)
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	2bff      	cmp	r3, #255	; 0xff
 8001f0e:	d10d      	bne.n	8001f2c <prvTraceGetDTS+0x174>
			{
				xts->type = XTS8;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	22a8      	movs	r2, #168	; 0xa8
 8001f14:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	0e1b      	lsrs	r3, r3, #24
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	705a      	strb	r2, [r3, #1]
 8001f2a:	e002      	b.n	8001f32 <prvTraceGetDTS+0x17a>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <prvTraceGetDTS+0x1ac>)
 8001f2e:	f7ff fe65 	bl	8001bfc <prvTraceError>
			}
			prvTraceUpdateCounters();
 8001f32:	f7ff ff19 	bl	8001d68 <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	b29b      	uxth	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	080072d0 	.word	0x080072d0
 8001f4c:	20000ccc 	.word	0x20000ccc
 8001f50:	20000c28 	.word	0x20000c28
 8001f54:	e0001004 	.word	0xe0001004
 8001f58:	20006454 	.word	0x20006454
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000cd8 	.word	0x20000cd8
 8001f64:	08007310 	.word	0x08007310

08001f68 <prvTraceInitCortexM>:

/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
void prvTraceInitCortexM()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	/* Ensure that the DWT registers are unlocked and can be modified. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <prvTraceInitCortexM+0x50>)
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <prvTraceInitCortexM+0x54>)
 8001f70:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <prvTraceInitCortexM+0x58>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <prvTraceInitCortexM+0x58>)
 8001f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	6013      	str	r3, [r2, #0]

	do{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <prvTraceInitCortexM+0x58>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError("DWT unit not available, see code comment.");
 8001f86:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <prvTraceInitCortexM+0x5c>)
 8001f88:	f7ff fe38 	bl	8001bfc <prvTraceError>
			break;
 8001f8c:	e012      	b.n	8001fb4 <prvTraceInitCortexM+0x4c>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <prvTraceInitCortexM+0x60>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError("DWT_CYCCNT not available, see code comment.");
 8001f9a:	480c      	ldr	r0, [pc, #48]	; (8001fcc <prvTraceInitCortexM+0x64>)
 8001f9c:	f7ff fe2e 	bl	8001bfc <prvTraceError>
			break;
 8001fa0:	e008      	b.n	8001fb4 <prvTraceInitCortexM+0x4c>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <prvTraceInitCortexM+0x68>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <prvTraceInitCortexM+0x60>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <prvTraceInitCortexM+0x60>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6013      	str	r3, [r2, #0]

	}while(0);	/* breaks above jump here */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	e0001fb0 	.word	0xe0001fb0
 8001fbc:	c5acce55 	.word	0xc5acce55
 8001fc0:	e000edfc 	.word	0xe000edfc
 8001fc4:	080074fc 	.word	0x080074fc
 8001fc8:	e0001000 	.word	0xe0001000
 8001fcc:	08007528 	.word	0x08007528
 8001fd0:	e0001004 	.word	0xe0001004

08001fd4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
#else /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/
	/* Free running timer */
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
	uint32_t diff_scaled = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <prvTracePortGetTimeStamp+0x80>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <prvTracePortGetTimeStamp+0x2c>
	{
		if (pTimestamp)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d028      	beq.n	8002048 <prvTracePortGetTimeStamp+0x74>
			*pTimestamp = last_timestamp;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <prvTracePortGetTimeStamp+0x84>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	601a      	str	r2, [r3, #0]
		return;
 8001ffe:	e023      	b.n	8002048 <prvTracePortGetTimeStamp+0x74>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <prvTracePortGetTimeStamp+0x88>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <prvTracePortGetTimeStamp+0x8c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	1ad2      	subs	r2, r2, r3
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <prvTracePortGetTimeStamp+0x90>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
	
	/* Scale down the diff */
	diff_scaled = diff / (TRC_HWTC_DIVISOR);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	60fb      	str	r3, [r7, #12]
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	4a10      	ldr	r2, [pc, #64]	; (8002064 <prvTracePortGetTimeStamp+0x90>)
 8002024:	6013      	str	r3, [r2, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <prvTracePortGetTimeStamp+0x84>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <prvTracePortGetTimeStamp+0x84>)
 8002030:	6013      	str	r3, [r2, #0]
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <prvTracePortGetTimeStamp+0x6c>
		*pTimestamp = last_timestamp;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <prvTracePortGetTimeStamp+0x84>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <prvTracePortGetTimeStamp+0x8c>)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e000      	b.n	800204a <prvTracePortGetTimeStamp+0x76>
		return;
 8002048:	bf00      	nop
}
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	20000c18 	.word	0x20000c18
 8002058:	20000c1c 	.word	0x20000c1c
 800205c:	e0001004 	.word	0xe0001004
 8002060:	20000cdc 	.word	0x20000cdc
 8002064:	20000ce0 	.word	0x20000ce0

08002068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000014 	.word	0x20000014
 800208c:	20006458 	.word	0x20006458

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e16b      	b.n	8002384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 815a 	bne.w	800237e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d00b      	beq.n	80020ea <HAL_GPIO_Init+0x5a>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020de:	2b11      	cmp	r3, #17
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d130      	bne.n	800214c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 0201 	and.w	r2, r3, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0xfc>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b12      	cmp	r3, #18
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80b4 	beq.w	800237e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b5f      	ldr	r3, [pc, #380]	; (8002398 <HAL_GPIO_Init+0x308>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a5e      	ldr	r2, [pc, #376]	; (8002398 <HAL_GPIO_Init+0x308>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <HAL_GPIO_Init+0x308>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a5a      	ldr	r2, [pc, #360]	; (800239c <HAL_GPIO_Init+0x30c>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a51      	ldr	r2, [pc, #324]	; (80023a0 <HAL_GPIO_Init+0x310>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a50      	ldr	r2, [pc, #320]	; (80023a4 <HAL_GPIO_Init+0x314>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d025      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4f      	ldr	r2, [pc, #316]	; (80023a8 <HAL_GPIO_Init+0x318>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01f      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <HAL_GPIO_Init+0x31c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4d      	ldr	r2, [pc, #308]	; (80023b0 <HAL_GPIO_Init+0x320>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x216>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4c      	ldr	r2, [pc, #304]	; (80023b4 <HAL_GPIO_Init+0x324>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x212>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4b      	ldr	r2, [pc, #300]	; (80023b8 <HAL_GPIO_Init+0x328>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x20e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4a      	ldr	r2, [pc, #296]	; (80023bc <HAL_GPIO_Init+0x32c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x20a>
 8002296:	2307      	movs	r3, #7
 8002298:	e00e      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 800229a:	2308      	movs	r3, #8
 800229c:	e00c      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 800229e:	2306      	movs	r3, #6
 80022a0:	e00a      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022a2:	2305      	movs	r3, #5
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_GPIO_Init+0x30c>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d6:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_GPIO_Init+0x330>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022fa:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_GPIO_Init+0x330>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_GPIO_Init+0x330>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_GPIO_Init+0x330>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f ae90 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	3724      	adds	r7, #36	; 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f103 0208 	add.w	r2, r3, #8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f04f 32ff 	mov.w	r2, #4294967295
 800240e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 0208 	add.w	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0208 	add.w	r2, r3, #8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	601a      	str	r2, [r3, #0]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d103      	bne.n	80024b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e00c      	b.n	80024d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3308      	adds	r3, #8
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e002      	b.n	80024c6 <vListInsert+0x2e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d2f6      	bcs.n	80024c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800250a:	b480      	push	{r7}
 800250c:	b085      	sub	sp, #20
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6892      	ldr	r2, [r2, #8]
 8002520:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6852      	ldr	r2, [r2, #4]
 800252a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d103      	bne.n	800253e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	e7fe      	b.n	8002586 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002588:	f002 fdc8 	bl	800511c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	3b01      	subs	r3, #1
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	441a      	add	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	22ff      	movs	r2, #255	; 0xff
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d114      	bne.n	8002608 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3310      	adds	r3, #16
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 fdae 	bl	800414c <xTaskRemoveFromEventList>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <xQueueGenericReset+0xcc>)
 80025f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	e009      	b.n	800261c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3310      	adds	r3, #16
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fef2 	bl	80023f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3324      	adds	r3, #36	; 0x24
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff feed 	bl	80023f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800261c:	f002 fdac 	bl	8005178 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000ed04 	.word	0xe000ed04

08002630 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08e      	sub	sp, #56	; 0x38
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <xQueueGenericCreateStatic+0x28>
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
 8002656:	e7fe      	b.n	8002656 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <xQueueGenericCreateStatic+0x42>
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	e7fe      	b.n	8002670 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <xQueueGenericCreateStatic+0x4e>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <xQueueGenericCreateStatic+0x52>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <xQueueGenericCreateStatic+0x54>
 8002682:	2300      	movs	r3, #0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <xQueueGenericCreateStatic+0x6c>
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	e7fe      	b.n	800269a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <xQueueGenericCreateStatic+0x78>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <xQueueGenericCreateStatic+0x7c>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <xQueueGenericCreateStatic+0x7e>
 80026ac:	2300      	movs	r3, #0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <xQueueGenericCreateStatic+0x96>
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	e7fe      	b.n	80026c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026c6:	2350      	movs	r3, #80	; 0x50
 80026c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b50      	cmp	r3, #80	; 0x50
 80026ce:	d009      	beq.n	80026e4 <xQueueGenericCreateStatic+0xb4>
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e7fe      	b.n	80026e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80026ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00e      	beq.n	800270e <xQueueGenericCreateStatic+0xde>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f822 	bl	8002750 <prvInitialiseNewQueue>
 800270c:	e017      	b.n	800273e <xQueueGenericCreateStatic+0x10e>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 800270e:	f7fe f901 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8002712:	4603      	mov	r3, r0
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ffe1 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <xQueueGenericCreateStatic+0x118>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	4013      	ands	r3, r2
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <xQueueGenericCreateStatic+0x10e>
 800272a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <xQueueGenericCreateStatic+0x11c>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	3340      	adds	r3, #64	; 0x40
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fd8f 	bl	800125c <prvTraceStoreKernelCallWithNumericParamOnly>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002740:	4618      	mov	r0, r3
 8002742:	3730      	adds	r7, #48	; 0x30
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000010 	.word	0x20000010
 800274c:	20000004 	.word	0x20000004

08002750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	6a3a      	ldr	r2, [r7, #32]
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e002      	b.n	8002772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800277e:	2101      	movs	r1, #1
 8002780:	6a38      	ldr	r0, [r7, #32]
 8002782:	f7ff feed 	bl	8002560 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800278e:	6a38      	ldr	r0, [r7, #32]
 8002790:	f7fd ff8b 	bl	80006aa <prvTraceGetQueueType>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	4b34      	ldr	r3, [pc, #208]	; (800286c <prvInitialiseNewQueue+0x11c>)
 800279a:	5c9b      	ldrb	r3, [r3, r2]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f8df 	bl	8001960 <prvTraceGetObjectHandle>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	6a38      	ldr	r0, [r7, #32]
 80027aa:	f7fd ffec 	bl	8000786 <prvTraceSetQueueNumberLow16>
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <prvInitialiseNewQueue+0x120>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	4619      	mov	r1, r3
 80027b4:	6a38      	ldr	r0, [r7, #32]
 80027b6:	f7fd fffc 	bl	80007b2 <prvTraceSetQueueNumberHigh16>
 80027ba:	6a38      	ldr	r0, [r7, #32]
 80027bc:	f7fd ff75 	bl	80006aa <prvTraceGetQueueType>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b29      	ldr	r3, [pc, #164]	; (800286c <prvInitialiseNewQueue+0x11c>)
 80027c6:	5c9c      	ldrb	r4, [r3, r2]
 80027c8:	6a38      	ldr	r0, [r7, #32]
 80027ca:	f7fd ffc1 	bl	8000750 <prvTraceGetQueueNumberLow16>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	4619      	mov	r1, r3
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7ff f96f 	bl	8001ab8 <prvMarkObjectAsUsed>
 80027da:	f7fe f89b 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 80027de:	4603      	mov	r3, r0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd ff7b 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <prvInitialiseNewQueue+0x124>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	4013      	ands	r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d025      	beq.n	8002842 <prvInitialiseNewQueue+0xf2>
 80027f6:	6a38      	ldr	r0, [r7, #32]
 80027f8:	f7fd ffb7 	bl	800076a <prvTraceGetQueueNumberHigh16>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <prvInitialiseNewQueue+0x124>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01a      	beq.n	8002842 <prvInitialiseNewQueue+0xf2>
 800280c:	6a38      	ldr	r0, [r7, #32]
 800280e:	f7fd ff4c 	bl	80006aa <prvTraceGetQueueType>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <prvInitialiseNewQueue+0x11c>)
 8002818:	5c9b      	ldrb	r3, [r3, r2]
 800281a:	3318      	adds	r3, #24
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461d      	mov	r5, r3
 8002820:	6a38      	ldr	r0, [r7, #32]
 8002822:	f7fd ff42 	bl	80006aa <prvTraceGetQueueType>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <prvInitialiseNewQueue+0x11c>)
 800282c:	5c9c      	ldrb	r4, [r3, r2]
 800282e:	6a38      	ldr	r0, [r7, #32]
 8002830:	f7fd ff8e 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002834:	4603      	mov	r3, r0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	4621      	mov	r1, r4
 800283c:	4628      	mov	r0, r5
 800283e:	f7fe fbcd 	bl	8000fdc <prvTraceStoreKernelCall>
 8002842:	6a38      	ldr	r0, [r7, #32]
 8002844:	f7fd ff31 	bl	80006aa <prvTraceGetQueueType>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <prvInitialiseNewQueue+0x11c>)
 800284e:	5c9c      	ldrb	r4, [r3, r2]
 8002850:	6a38      	ldr	r0, [r7, #32]
 8002852:	f7fd ff7d 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002856:	4603      	mov	r3, r0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2200      	movs	r2, #0
 800285c:	4619      	mov	r1, r3
 800285e:	4620      	mov	r0, r4
 8002860:	f7fe fe4a 	bl	80014f8 <prvTraceSetObjectState>
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bdb0      	pop	{r4, r5, r7, pc}
 800286c:	20000004 	.word	0x20000004
 8002870:	20000012 	.word	0x20000012
 8002874:	20000010 	.word	0x20000010

08002878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b08e      	sub	sp, #56	; 0x38
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <xQueueGenericSend+0x30>
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a6:	e7fe      	b.n	80028a6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <xQueueGenericSend+0x3e>
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <xQueueGenericSend+0x42>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <xQueueGenericSend+0x44>
 80028ba:	2300      	movs	r3, #0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <xQueueGenericSend+0x5c>
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	e7fe      	b.n	80028d2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d103      	bne.n	80028e2 <xQueueGenericSend+0x6a>
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <xQueueGenericSend+0x6e>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <xQueueGenericSend+0x70>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <xQueueGenericSend+0x88>
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	e7fe      	b.n	80028fe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002900:	f001 fe60 	bl	80045c4 <xTaskGetSchedulerState>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <xQueueGenericSend+0x98>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <xQueueGenericSend+0x9c>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <xQueueGenericSend+0x9e>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <xQueueGenericSend+0xb6>
 800291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	e7fe      	b.n	800292c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800292e:	f002 fbf5 	bl	800511c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	429a      	cmp	r2, r3
 800293c:	d303      	bcc.n	8002946 <xQueueGenericSend+0xce>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b02      	cmp	r3, #2
 8002942:	f040 8084 	bne.w	8002a4e <xQueueGenericSend+0x1d6>
			{
				traceQUEUE_SEND( pxQueue );
 8002946:	f7fd ffe5 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 800294a:	4603      	mov	r3, r0
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fec5 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	4ba6      	ldr	r3, [pc, #664]	; (8002bf0 <xQueueGenericSend+0x378>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	4013      	ands	r3, r2
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d02a      	beq.n	80029b8 <xQueueGenericSend+0x140>
 8002962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002964:	f7fd ff01 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	4ba0      	ldr	r3, [pc, #640]	; (8002bf0 <xQueueGenericSend+0x378>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	4013      	ands	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01f      	beq.n	80029b8 <xQueueGenericSend+0x140>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <xQueueGenericSend+0x11c>
 800297e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002980:	f7fd fe93 	bl	80006aa <prvTraceGetQueueType>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	4b9a      	ldr	r3, [pc, #616]	; (8002bf4 <xQueueGenericSend+0x37c>)
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	3320      	adds	r3, #32
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461d      	mov	r5, r3
 8002992:	e000      	b.n	8002996 <xQueueGenericSend+0x11e>
 8002994:	2525      	movs	r5, #37	; 0x25
 8002996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002998:	f7fd fe87 	bl	80006aa <prvTraceGetQueueType>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	4b94      	ldr	r3, [pc, #592]	; (8002bf4 <xQueueGenericSend+0x37c>)
 80029a2:	5c9c      	ldrb	r4, [r3, r2]
 80029a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029a6:	f7fd fed3 	bl	8000750 <prvTraceGetQueueNumberLow16>
 80029aa:	4603      	mov	r3, r0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	4621      	mov	r1, r4
 80029b2:	4628      	mov	r0, r5
 80029b4:	f7fe fb12 	bl	8000fdc <prvTraceStoreKernelCall>
 80029b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ba:	f7fd fe76 	bl	80006aa <prvTraceGetQueueType>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b8c      	ldr	r3, [pc, #560]	; (8002bf4 <xQueueGenericSend+0x37c>)
 80029c4:	5c9c      	ldrb	r4, [r3, r2]
 80029c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029c8:	f7fd fec2 	bl	8000750 <prvTraceGetQueueNumberLow16>
 80029cc:	4603      	mov	r3, r0
 80029ce:	b2dd      	uxtb	r5, r3
 80029d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d2:	f7fd fe6a 	bl	80006aa <prvTraceGetQueueType>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <xQueueGenericSend+0x37c>)
 80029dc:	5c9b      	ldrb	r3, [r3, r2]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d005      	beq.n	80029ee <xQueueGenericSend+0x176>
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3301      	adds	r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	e000      	b.n	80029f0 <xQueueGenericSend+0x178>
 80029ee:	2300      	movs	r3, #0
 80029f0:	461a      	mov	r2, r3
 80029f2:	4629      	mov	r1, r5
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7fe fd7f 	bl	80014f8 <prvTraceSetObjectState>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a00:	f000 fc71 	bl	80032e6 <prvCopyDataToQueue>
 8002a04:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <xQueueGenericSend+0x1b8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 fb9a 	bl	800414c <xTaskRemoveFromEventList>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d013      	beq.n	8002a46 <xQueueGenericSend+0x1ce>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a1e:	4b76      	ldr	r3, [pc, #472]	; (8002bf8 <xQueueGenericSend+0x380>)
 8002a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	e00a      	b.n	8002a46 <xQueueGenericSend+0x1ce>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <xQueueGenericSend+0x1ce>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <xQueueGenericSend+0x380>)
 8002a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a46:	f002 fb97 	bl	8005178 <vPortExitCritical>
				return pdPASS;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e115      	b.n	8002c7a <xQueueGenericSend+0x402>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d13c      	bne.n	8002ace <xQueueGenericSend+0x256>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a54:	f002 fb90 	bl	8005178 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002a58:	f7fd ff5c 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fe3c 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <xQueueGenericSend+0x378>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02a      	beq.n	8002aca <xQueueGenericSend+0x252>
 8002a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a76:	f7fd fe78 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <xQueueGenericSend+0x378>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01f      	beq.n	8002aca <xQueueGenericSend+0x252>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <xQueueGenericSend+0x22e>
 8002a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a92:	f7fd fe0a 	bl	80006aa <prvTraceGetQueueType>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <xQueueGenericSend+0x37c>)
 8002a9c:	5c9b      	ldrb	r3, [r3, r2]
 8002a9e:	3348      	adds	r3, #72	; 0x48
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	e000      	b.n	8002aa8 <xQueueGenericSend+0x230>
 8002aa6:	254d      	movs	r5, #77	; 0x4d
 8002aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aaa:	f7fd fdfe 	bl	80006aa <prvTraceGetQueueType>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <xQueueGenericSend+0x37c>)
 8002ab4:	5c9c      	ldrb	r4, [r3, r2]
 8002ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab8:	f7fd fe4a 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f7fe fa89 	bl	8000fdc <prvTraceStoreKernelCall>
					return errQUEUE_FULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e0d5      	b.n	8002c7a <xQueueGenericSend+0x402>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <xQueueGenericSend+0x26a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 fbad 	bl	8004238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ae2:	f002 fb49 	bl	8005178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ae6:	f001 f873 	bl	8003bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aea:	f002 fb17 	bl	800511c <vPortEnterCritical>
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d103      	bne.n	8002b04 <xQueueGenericSend+0x28c>
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d103      	bne.n	8002b1a <xQueueGenericSend+0x2a2>
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b1a:	f002 fb2d 	bl	8005178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b1e:	1d3a      	adds	r2, r7, #4
 8002b20:	f107 0314 	add.w	r3, r7, #20
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 fb9c 	bl	8004264 <xTaskCheckForTimeOut>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d164      	bne.n	8002bfc <xQueueGenericSend+0x384>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b34:	f000 fccf 	bl	80034d6 <prvIsQueueFull>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d051      	beq.n	8002be2 <xQueueGenericSend+0x36a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8002b3e:	f7fd fee9 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fdc9 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <xQueueGenericSend+0x378>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	4013      	ands	r3, r2
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d02a      	beq.n	8002bb0 <xQueueGenericSend+0x338>
 8002b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5c:	f7fd fe05 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <xQueueGenericSend+0x378>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01f      	beq.n	8002bb0 <xQueueGenericSend+0x338>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <xQueueGenericSend+0x314>
 8002b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b78:	f7fd fd97 	bl	80006aa <prvTraceGetQueueType>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <xQueueGenericSend+0x37c>)
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	3370      	adds	r3, #112	; 0x70
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461d      	mov	r5, r3
 8002b8a:	e000      	b.n	8002b8e <xQueueGenericSend+0x316>
 8002b8c:	2575      	movs	r5, #117	; 0x75
 8002b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b90:	f7fd fd8b 	bl	80006aa <prvTraceGetQueueType>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <xQueueGenericSend+0x37c>)
 8002b9a:	5c9c      	ldrb	r4, [r3, r2]
 8002b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b9e:	f7fd fdd7 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4628      	mov	r0, r5
 8002bac:	f7fe fa16 	bl	8000fdc <prvTraceStoreKernelCall>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 fa3d 	bl	8004038 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc0:	f000 fc21 	bl	8003406 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002bc4:	f001 f812 	bl	8003bec <xTaskResumeAll>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f47f aeaf 	bne.w	800292e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <xQueueGenericSend+0x380>)
 8002bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	e6a5      	b.n	800292e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002be4:	f000 fc0f 	bl	8003406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002be8:	f001 f800 	bl	8003bec <xTaskResumeAll>
 8002bec:	e69f      	b.n	800292e <xQueueGenericSend+0xb6>
 8002bee:	bf00      	nop
 8002bf0:	20000010 	.word	0x20000010
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	e000ed04 	.word	0xe000ed04
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfe:	f000 fc02 	bl	8003406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c02:	f000 fff3 	bl	8003bec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002c06:	f7fd fe85 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fd65 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <xQueueGenericSend+0x40c>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d02a      	beq.n	8002c78 <xQueueGenericSend+0x400>
 8002c22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c24:	f7fd fda1 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <xQueueGenericSend+0x40c>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01f      	beq.n	8002c78 <xQueueGenericSend+0x400>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <xQueueGenericSend+0x3dc>
 8002c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c40:	f7fd fd33 	bl	80006aa <prvTraceGetQueueType>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <xQueueGenericSend+0x410>)
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	3348      	adds	r3, #72	; 0x48
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461d      	mov	r5, r3
 8002c52:	e000      	b.n	8002c56 <xQueueGenericSend+0x3de>
 8002c54:	254d      	movs	r5, #77	; 0x4d
 8002c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c58:	f7fd fd27 	bl	80006aa <prvTraceGetQueueType>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <xQueueGenericSend+0x410>)
 8002c62:	5c9c      	ldrb	r4, [r3, r2]
 8002c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c66:	f7fd fd73 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4621      	mov	r1, r4
 8002c72:	4628      	mov	r0, r5
 8002c74:	f7fe f9b2 	bl	8000fdc <prvTraceStoreKernelCall>
			return errQUEUE_FULL;
 8002c78:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3738      	adds	r7, #56	; 0x38
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bdb0      	pop	{r4, r5, r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000010 	.word	0x20000010
 8002c88:	20000004 	.word	0x20000004

08002c8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <xQueueGenericSendFromISR+0x2c>
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e7fe      	b.n	8002cb6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <xQueueGenericSendFromISR+0x3a>
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <xQueueGenericSendFromISR+0x3e>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <xQueueGenericSendFromISR+0x40>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x58>
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	623b      	str	r3, [r7, #32]
 8002ce2:	e7fe      	b.n	8002ce2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d103      	bne.n	8002cf2 <xQueueGenericSendFromISR+0x66>
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <xQueueGenericSendFromISR+0x6a>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueGenericSendFromISR+0x6c>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <xQueueGenericSendFromISR+0x84>
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e7fe      	b.n	8002d0e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d10:	f002 fae0 	bl	80052d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d14:	f3ef 8211 	mrs	r2, BASEPRI
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61ba      	str	r2, [r7, #24]
 8002d2a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <xQueueGenericSendFromISR+0xb6>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d16c      	bne.n	8002e1c <xQueueGenericSendFromISR+0x190>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d4e:	f7fd fd0c 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b4d      	ldr	r3, [pc, #308]	; (8002e8c <xQueueGenericSendFromISR+0x200>)
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01f      	beq.n	8002da2 <xQueueGenericSendFromISR+0x116>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueGenericSendFromISR+0xf2>
 8002d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6a:	f7fd fc9e 	bl	80006aa <prvTraceGetQueueType>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <xQueueGenericSendFromISR+0x204>)
 8002d74:	5c9b      	ldrb	r3, [r3, r2]
 8002d76:	3330      	adds	r3, #48	; 0x30
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	e000      	b.n	8002d80 <xQueueGenericSendFromISR+0xf4>
 8002d7e:	2535      	movs	r5, #53	; 0x35
 8002d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d82:	f7fd fc92 	bl	80006aa <prvTraceGetQueueType>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <xQueueGenericSendFromISR+0x204>)
 8002d8c:	5c9c      	ldrb	r4, [r3, r2]
 8002d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d90:	f7fd fcde 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002d94:	4603      	mov	r3, r0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f7fe f91d 	bl	8000fdc <prvTraceStoreKernelCall>
 8002da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da4:	f7fd fc81 	bl	80006aa <prvTraceGetQueueType>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <xQueueGenericSendFromISR+0x204>)
 8002dae:	5c9c      	ldrb	r4, [r3, r2]
 8002db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002db2:	f7fd fccd 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002db6:	4603      	mov	r3, r0
 8002db8:	b2d9      	uxtb	r1, r3
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7fe fb96 	bl	80014f8 <prvTraceSetObjectState>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd2:	f000 fa88 	bl	80032e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d112      	bne.n	8002e06 <xQueueGenericSendFromISR+0x17a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d016      	beq.n	8002e16 <xQueueGenericSendFromISR+0x18a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	3324      	adds	r3, #36	; 0x24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 f9ad 	bl	800414c <xTaskRemoveFromEventList>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <xQueueGenericSendFromISR+0x18a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <xQueueGenericSendFromISR+0x18a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e007      	b.n	8002e16 <xQueueGenericSendFromISR+0x18a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	b25a      	sxtb	r2, r3
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e16:	2301      	movs	r3, #1
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e1a:	e02c      	b.n	8002e76 <xQueueGenericSendFromISR+0x1ea>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1e:	f7fd fca4 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <xQueueGenericSendFromISR+0x200>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01f      	beq.n	8002e72 <xQueueGenericSendFromISR+0x1e6>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericSendFromISR+0x1c2>
 8002e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3a:	f7fd fc36 	bl	80006aa <prvTraceGetQueueType>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <xQueueGenericSendFromISR+0x204>)
 8002e44:	5c9b      	ldrb	r3, [r3, r2]
 8002e46:	3358      	adds	r3, #88	; 0x58
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	e000      	b.n	8002e50 <xQueueGenericSendFromISR+0x1c4>
 8002e4e:	255d      	movs	r5, #93	; 0x5d
 8002e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e52:	f7fd fc2a 	bl	80006aa <prvTraceGetQueueType>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <xQueueGenericSendFromISR+0x204>)
 8002e5c:	5c9c      	ldrb	r4, [r3, r2]
 8002e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e60:	f7fd fc76 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f7fe f8b5 	bl	8000fdc <prvTraceStoreKernelCall>
			xReturn = errQUEUE_FULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3738      	adds	r7, #56	; 0x38
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000010 	.word	0x20000010
 8002e90:	20000004 	.word	0x20000004

08002e94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b08c      	sub	sp, #48	; 0x30
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <xQueueReceive+0x2e>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	e7fe      	b.n	8002ec0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <xQueueReceive+0x3c>
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <xQueueReceive+0x40>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <xQueueReceive+0x42>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <xQueueReceive+0x5a>
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	e7fe      	b.n	8002eec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eee:	f001 fb69 	bl	80045c4 <xTaskGetSchedulerState>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <xQueueReceive+0x6a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <xQueueReceive+0x6e>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <xQueueReceive+0x70>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <xQueueReceive+0x88>
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	e7fe      	b.n	8002f1a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f1c:	f002 f8fe 	bl	800511c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d07b      	beq.n	8003024 <xQueueReceive+0x190>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f30:	f000 fa43 	bl	80033ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8002f34:	f7fd fcee 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fbce 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	4bac      	ldr	r3, [pc, #688]	; (80031f8 <xQueueReceive+0x364>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d025      	beq.n	8002f9c <xQueueReceive+0x108>
 8002f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f52:	f7fd fc0a 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4ba7      	ldr	r3, [pc, #668]	; (80031f8 <xQueueReceive+0x364>)
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01a      	beq.n	8002f9c <xQueueReceive+0x108>
 8002f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f68:	f7fd fb9f 	bl	80006aa <prvTraceGetQueueType>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4ba2      	ldr	r3, [pc, #648]	; (80031fc <xQueueReceive+0x368>)
 8002f72:	5c9b      	ldrb	r3, [r3, r2]
 8002f74:	3328      	adds	r3, #40	; 0x28
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461d      	mov	r5, r3
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7c:	f7fd fb95 	bl	80006aa <prvTraceGetQueueType>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b9d      	ldr	r3, [pc, #628]	; (80031fc <xQueueReceive+0x368>)
 8002f86:	5c9c      	ldrb	r4, [r3, r2]
 8002f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8a:	f7fd fbe1 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	4621      	mov	r1, r4
 8002f96:	4628      	mov	r0, r5
 8002f98:	f7fe f820 	bl	8000fdc <prvTraceStoreKernelCall>
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9e:	f7fd fb84 	bl	80006aa <prvTraceGetQueueType>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b95      	ldr	r3, [pc, #596]	; (80031fc <xQueueReceive+0x368>)
 8002fa8:	5c9c      	ldrb	r4, [r3, r2]
 8002faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fac:	f7fd fbd0 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	b2dd      	uxtb	r5, r3
 8002fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb6:	f7fd fb78 	bl	80006aa <prvTraceGetQueueType>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b8f      	ldr	r3, [pc, #572]	; (80031fc <xQueueReceive+0x368>)
 8002fc0:	5c9b      	ldrb	r3, [r3, r2]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d108      	bne.n	8002fd8 <xQueueReceive+0x144>
 8002fc6:	f7fd fca5 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fb78 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	e004      	b.n	8002fe2 <xQueueReceive+0x14e>
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f7fe fa86 	bl	80014f8 <prvTraceSetObjectState>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00f      	beq.n	800301c <xQueueReceive+0x188>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	3310      	adds	r3, #16
 8003000:	4618      	mov	r0, r3
 8003002:	f001 f8a3 	bl	800414c <xTaskRemoveFromEventList>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <xQueueReceive+0x188>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800300c:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <xQueueReceive+0x36c>)
 800300e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800301c:	f002 f8ac 	bl	8005178 <vPortExitCritical>
				return pdPASS;
 8003020:	2301      	movs	r3, #1
 8003022:	e130      	b.n	8003286 <xQueueReceive+0x3f2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d137      	bne.n	800309a <xQueueReceive+0x206>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800302a:	f002 f8a5 	bl	8005178 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800302e:	f7fd fc71 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003032:	4603      	mov	r3, r0
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fb51 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <xQueueReceive+0x364>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	4013      	ands	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d025      	beq.n	8003096 <xQueueReceive+0x202>
 800304a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304c:	f7fd fb8d 	bl	800076a <prvTraceGetQueueNumberHigh16>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	4b68      	ldr	r3, [pc, #416]	; (80031f8 <xQueueReceive+0x364>)
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01a      	beq.n	8003096 <xQueueReceive+0x202>
 8003060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003062:	f7fd fb22 	bl	80006aa <prvTraceGetQueueType>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	4b64      	ldr	r3, [pc, #400]	; (80031fc <xQueueReceive+0x368>)
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	3350      	adds	r3, #80	; 0x50
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461d      	mov	r5, r3
 8003074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003076:	f7fd fb18 	bl	80006aa <prvTraceGetQueueType>
 800307a:	4603      	mov	r3, r0
 800307c:	461a      	mov	r2, r3
 800307e:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <xQueueReceive+0x368>)
 8003080:	5c9c      	ldrb	r4, [r3, r2]
 8003082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003084:	f7fd fb64 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8003088:	4603      	mov	r3, r0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	4621      	mov	r1, r4
 8003090:	4628      	mov	r0, r5
 8003092:	f7fd ffa3 	bl	8000fdc <prvTraceStoreKernelCall>
					return errQUEUE_EMPTY;
 8003096:	2300      	movs	r3, #0
 8003098:	e0f5      	b.n	8003286 <xQueueReceive+0x3f2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <xQueueReceive+0x21a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 f8c7 	bl	8004238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ae:	f002 f863 	bl	8005178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030b2:	f000 fd8d 	bl	8003bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030b6:	f002 f831 	bl	800511c <vPortEnterCritical>
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d103      	bne.n	80030d0 <xQueueReceive+0x23c>
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d103      	bne.n	80030e6 <xQueueReceive+0x252>
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e6:	f002 f847 	bl	8005178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ea:	1d3a      	adds	r2, r7, #4
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f8b6 	bl	8004264 <xTaskCheckForTimeOut>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8082 	bne.w	8003204 <xQueueReceive+0x370>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003102:	f000 f9d2 	bl	80034aa <prvIsQueueEmpty>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d06e      	beq.n	80031ea <xQueueReceive+0x356>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800310c:	f7fd fc02 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003110:	4603      	mov	r3, r0
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fae2 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <xQueueReceive+0x364>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	4013      	ands	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d025      	beq.n	8003174 <xQueueReceive+0x2e0>
 8003128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312a:	f7fd fb1e 	bl	800076a <prvTraceGetQueueNumberHigh16>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
 8003132:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <xQueueReceive+0x364>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01a      	beq.n	8003174 <xQueueReceive+0x2e0>
 800313e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003140:	f7fd fab3 	bl	80006aa <prvTraceGetQueueType>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <xQueueReceive+0x368>)
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	3368      	adds	r3, #104	; 0x68
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461d      	mov	r5, r3
 8003152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003154:	f7fd faa9 	bl	80006aa <prvTraceGetQueueType>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <xQueueReceive+0x368>)
 800315e:	5c9c      	ldrb	r4, [r3, r2]
 8003160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003162:	f7fd faf5 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8003166:	4603      	mov	r3, r0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	4621      	mov	r1, r4
 800316e:	4628      	mov	r0, r5
 8003170:	f7fd ff34 	bl	8000fdc <prvTraceStoreKernelCall>
 8003174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003176:	f7fd fa98 	bl	80006aa <prvTraceGetQueueType>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <xQueueReceive+0x368>)
 8003180:	5c9b      	ldrb	r3, [r3, r2]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d018      	beq.n	80031b8 <xQueueReceive+0x324>
 8003186:	f7fd fbc5 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 800318a:	4603      	mov	r3, r0
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd faa5 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <xQueueReceive+0x364>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4013      	ands	r3, r2
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <xQueueReceive+0x324>
 80031a2:	f7fd fbb7 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fa8a 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80031ae:	4603      	mov	r3, r0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fa18 	bl	80015e8 <prvTraceSetTaskInstanceFinished>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	3324      	adds	r3, #36	; 0x24
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 ff39 	bl	8004038 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c8:	f000 f91d 	bl	8003406 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031cc:	f000 fd0e 	bl	8003bec <xTaskResumeAll>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f47f aea2 	bne.w	8002f1c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <xQueueReceive+0x36c>)
 80031da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	e698      	b.n	8002f1c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ec:	f000 f90b 	bl	8003406 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031f0:	f000 fcfc 	bl	8003bec <xTaskResumeAll>
 80031f4:	e692      	b.n	8002f1c <xQueueReceive+0x88>
 80031f6:	bf00      	nop
 80031f8:	20000010 	.word	0x20000010
 80031fc:	20000004 	.word	0x20000004
 8003200:	e000ed04 	.word	0xe000ed04
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003206:	f000 f8fe 	bl	8003406 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800320a:	f000 fcef 	bl	8003bec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003210:	f000 f94b 	bl	80034aa <prvIsQueueEmpty>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	f43f ae80 	beq.w	8002f1c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800321c:	f7fd fb7a 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003220:	4603      	mov	r3, r0
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fa5a 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	4b18      	ldr	r3, [pc, #96]	; (8003290 <xQueueReceive+0x3fc>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d025      	beq.n	8003284 <xQueueReceive+0x3f0>
 8003238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800323a:	f7fd fa96 	bl	800076a <prvTraceGetQueueNumberHigh16>
 800323e:	4603      	mov	r3, r0
 8003240:	461a      	mov	r2, r3
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <xQueueReceive+0x3fc>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	4013      	ands	r3, r2
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01a      	beq.n	8003284 <xQueueReceive+0x3f0>
 800324e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003250:	f7fd fa2b 	bl	80006aa <prvTraceGetQueueType>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <xQueueReceive+0x400>)
 800325a:	5c9b      	ldrb	r3, [r3, r2]
 800325c:	3350      	adds	r3, #80	; 0x50
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461d      	mov	r5, r3
 8003262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003264:	f7fd fa21 	bl	80006aa <prvTraceGetQueueType>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <xQueueReceive+0x400>)
 800326e:	5c9c      	ldrb	r4, [r3, r2]
 8003270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003272:	f7fd fa6d 	bl	8000750 <prvTraceGetQueueNumberLow16>
 8003276:	4603      	mov	r3, r0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	4621      	mov	r1, r4
 800327e:	4628      	mov	r0, r5
 8003280:	f7fd feac 	bl	8000fdc <prvTraceStoreKernelCall>
				return errQUEUE_EMPTY;
 8003284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003286:	4618      	mov	r0, r3
 8003288:	3730      	adds	r7, #48	; 0x30
 800328a:	46bd      	mov	sp, r7
 800328c:	bdb0      	pop	{r4, r5, r7, pc}
 800328e:	bf00      	nop
 8003290:	20000010 	.word	0x20000010
 8003294:	20000004 	.word	0x20000004

08003298 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	649a      	str	r2, [r3, #72]	; 0x48
	}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d14d      	bne.n	80033a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f001 f975 	bl	8004600 <xTaskPriorityDisinherit>
 8003316:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	e043      	b.n	80033a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d119      	bne.n	800335a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6858      	ldr	r0, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	461a      	mov	r2, r3
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	f002 fa25 	bl	8005780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	441a      	add	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d32b      	bcc.n	80033a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	e026      	b.n	80033a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68d8      	ldr	r0, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	461a      	mov	r2, r3
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	f002 fa0b 	bl	8005780 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	425b      	negs	r3, r3
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d207      	bcs.n	8003396 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	425b      	negs	r3, r3
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d105      	bne.n	80033a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033b0:	697b      	ldr	r3, [r7, #20]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d018      	beq.n	80033fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d303      	bcc.n	80033ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68d9      	ldr	r1, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	461a      	mov	r2, r3
 80033f8:	6838      	ldr	r0, [r7, #0]
 80033fa:	f002 f9c1 	bl	8005780 <memcpy>
	}
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800340e:	f001 fe85 	bl	800511c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003418:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800341a:	e011      	b.n	8003440 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fe8f 	bl	800414c <xTaskRemoveFromEventList>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003434:	f000 ff76 	bl	8004324 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	3b01      	subs	r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	dce9      	bgt.n	800341c <prvUnlockQueue+0x16>
 8003448:	e000      	b.n	800344c <prvUnlockQueue+0x46>
					break;
 800344a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	22ff      	movs	r2, #255	; 0xff
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003454:	f001 fe90 	bl	8005178 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003458:	f001 fe60 	bl	800511c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003462:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003464:	e011      	b.n	800348a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3310      	adds	r3, #16
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fe6a 	bl	800414c <xTaskRemoveFromEventList>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800347e:	f000 ff51 	bl	8004324 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003482:	7bbb      	ldrb	r3, [r7, #14]
 8003484:	3b01      	subs	r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800348a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800348e:	2b00      	cmp	r3, #0
 8003490:	dce9      	bgt.n	8003466 <prvUnlockQueue+0x60>
 8003492:	e000      	b.n	8003496 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003494:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	22ff      	movs	r2, #255	; 0xff
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800349e:	f001 fe6b 	bl	8005178 <vPortExitCritical>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b2:	f001 fe33 	bl	800511c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e001      	b.n	80034c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034c8:	f001 fe56 	bl	8005178 <vPortExitCritical>

	return xReturn;
 80034cc:	68fb      	ldr	r3, [r7, #12]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034de:	f001 fe1d 	bl	800511c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d102      	bne.n	80034f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e001      	b.n	80034f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034f8:	f001 fe3e 	bl	8005178 <vPortExitCritical>

	return xReturn;
 80034fc:	68fb      	ldr	r3, [r7, #12]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e025      	b.n	8003564 <vQueueAddToRegistry+0x5c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003518:	4a16      	ldr	r2, [pc, #88]	; (8003574 <vQueueAddToRegistry+0x6c>)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11c      	bne.n	800355e <vQueueAddToRegistry+0x56>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003524:	4913      	ldr	r1, [pc, #76]	; (8003574 <vQueueAddToRegistry+0x6c>)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800352e:	4a11      	ldr	r2, [pc, #68]	; (8003574 <vQueueAddToRegistry+0x6c>)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd f8b5 	bl	80006aa <prvTraceGetQueueType>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <vQueueAddToRegistry+0x70>)
 8003546:	5c9c      	ldrb	r4, [r3, r2]
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fd f901 	bl	8000750 <prvTraceGetQueueNumberLow16>
 800354e:	4603      	mov	r3, r0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4619      	mov	r1, r3
 8003556:	4620      	mov	r0, r4
 8003558:	f7fe faf2 	bl	8001b40 <prvTraceSetObjectName>
				break;
 800355c:	e005      	b.n	800356a <vQueueAddToRegistry+0x62>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3301      	adds	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b07      	cmp	r3, #7
 8003568:	d9d6      	bls.n	8003518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
 8003572:	bf00      	nop
 8003574:	2000645c 	.word	0x2000645c
 8003578:	20000004 	.word	0x20000004

0800357c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800358c:	f001 fdc6 	bl	800511c <vPortEnterCritical>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003596:	b25b      	sxtb	r3, r3
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d103      	bne.n	80035a6 <vQueueWaitForMessageRestricted+0x2a>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d103      	bne.n	80035bc <vQueueWaitForMessageRestricted+0x40>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035bc:	f001 fddc 	bl	8005178 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	3324      	adds	r3, #36	; 0x24
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fd55 	bl	8004080 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f7ff ff15 	bl	8003406 <prvUnlockQueue>
	}
 80035dc:	bf00      	nop
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08e      	sub	sp, #56	; 0x38
 80035e8:	af04      	add	r7, sp, #16
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <xTaskCreateStatic+0x28>
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	e7fe      	b.n	800360a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <xTaskCreateStatic+0x42>
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e7fe      	b.n	8003624 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003626:	235c      	movs	r3, #92	; 0x5c
 8003628:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b5c      	cmp	r3, #92	; 0x5c
 800362e:	d009      	beq.n	8003644 <xTaskCreateStatic+0x60>
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e7fe      	b.n	8003642 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003644:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01e      	beq.n	800368a <xTaskCreateStatic+0xa6>
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01b      	beq.n	800368a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800365a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003664:	2300      	movs	r3, #0
 8003666:	9303      	str	r3, [sp, #12]
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	9302      	str	r3, [sp, #8]
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f850 	bl	8003722 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003684:	f000 f8dc 	bl	8003840 <prvAddNewTaskToReadyList>
 8003688:	e001      	b.n	800368e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800368e:	697b      	ldr	r3, [r7, #20]
	}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	; 0x30
 800369c:	af04      	add	r7, sp, #16
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fe4f 	bl	8005350 <pvPortMalloc>
 80036b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036ba:	205c      	movs	r0, #92	; 0x5c
 80036bc:	f001 fe48 	bl	8005350 <pvPortMalloc>
 80036c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	631a      	str	r2, [r3, #48]	; 0x30
 80036ce:	e005      	b.n	80036dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036d0:	6978      	ldr	r0, [r7, #20]
 80036d2:	f001 ff0f 	bl	80054f4 <vPortFree>
 80036d6:	e001      	b.n	80036dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	2300      	movs	r3, #0
 80036ee:	9303      	str	r3, [sp, #12]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	9302      	str	r3, [sp, #8]
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f80e 	bl	8003722 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003706:	69f8      	ldr	r0, [r7, #28]
 8003708:	f000 f89a 	bl	8003840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800370c:	2301      	movs	r3, #1
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e002      	b.n	8003718 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003718:	69bb      	ldr	r3, [r7, #24]
	}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b088      	sub	sp, #32
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	461a      	mov	r2, r3
 800373a:	21a5      	movs	r1, #165	; 0xa5
 800373c:	f002 f82b 	bl	8005796 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800374a:	3b01      	subs	r3, #1
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f023 0307 	bic.w	r3, r3, #7
 8003758:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <prvInitialiseNewTask+0x56>
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e7fe      	b.n	8003776 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01f      	beq.n	80037be <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e012      	b.n	80037aa <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	7819      	ldrb	r1, [r3, #0]
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	3334      	adds	r3, #52	; 0x34
 8003794:	460a      	mov	r2, r1
 8003796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d9e9      	bls.n	8003784 <prvInitialiseNewTask+0x62>
 80037b0:	e000      	b.n	80037b4 <prvInitialiseNewTask+0x92>
			{
				break;
 80037b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037bc:	e003      	b.n	80037c6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	2b06      	cmp	r3, #6
 80037ca:	d901      	bls.n	80037d0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037cc:	2306      	movs	r3, #6
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	2200      	movs	r2, #0
 80037e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fe25 	bl	8002436 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	3318      	adds	r3, #24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fe20 	bl	8002436 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	f1c3 0207 	rsb	r2, r3, #7
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	69b8      	ldr	r0, [r7, #24]
 8003820:	f001 fb48 	bl	8004eb4 <pxPortInitialiseStack>
 8003824:	4602      	mov	r2, r0
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003836:	bf00      	nop
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003848:	f001 fc68 	bl	800511c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800384c:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <prvAddNewTaskToReadyList+0x184>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <prvAddNewTaskToReadyList+0x184>)
 8003854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003856:	4b5c      	ldr	r3, [pc, #368]	; (80039c8 <prvAddNewTaskToReadyList+0x188>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800385e:	4a5a      	ldr	r2, [pc, #360]	; (80039c8 <prvAddNewTaskToReadyList+0x188>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003864:	4b57      	ldr	r3, [pc, #348]	; (80039c4 <prvAddNewTaskToReadyList+0x184>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d110      	bne.n	800388e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800386c:	f000 fda8 	bl	80043c0 <prvInitialiseTaskLists>
 8003870:	e00d      	b.n	800388e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <prvAddNewTaskToReadyList+0x18c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800387a:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <prvAddNewTaskToReadyList+0x188>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	429a      	cmp	r2, r3
 8003886:	d802      	bhi.n	800388e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003888:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <prvAddNewTaskToReadyList+0x188>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800388e:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <prvAddNewTaskToReadyList+0x190>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a4e      	ldr	r2, [pc, #312]	; (80039d0 <prvAddNewTaskToReadyList+0x190>)
 8003896:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003898:	4b4d      	ldr	r3, [pc, #308]	; (80039d0 <prvAddNewTaskToReadyList+0x190>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04b      	beq.n	800393e <prvAddNewTaskToReadyList+0xfe>
 80038a6:	2003      	movs	r0, #3
 80038a8:	f7fe f85a 	bl	8001960 <prvTraceGetObjectHandle>
 80038ac:	4603      	mov	r3, r0
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fc ff20 	bl	80006f8 <prvTraceSetTaskNumberLow16>
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <prvAddNewTaskToReadyList+0x194>)
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fc ff30 	bl	8000724 <prvTraceSetTaskNumberHigh16>
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7fc fefc 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80038ca:	4603      	mov	r3, r0
 80038cc:	b2d9      	uxtb	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3334      	adds	r3, #52	; 0x34
 80038d2:	461a      	mov	r2, r3
 80038d4:	2003      	movs	r0, #3
 80038d6:	f7fe f933 	bl	8001b40 <prvTraceSetObjectName>
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fc fef1 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80038e0:	4603      	mov	r3, r0
 80038e2:	b2d9      	uxtb	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	2003      	movs	r0, #3
 80038ee:	f7fd fd89 	bl	8001404 <prvTraceSetPriorityProperty>
 80038f2:	f7fd f80f 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc feef 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 80038fe:	4603      	mov	r3, r0
 8003900:	461a      	mov	r2, r3
 8003902:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <prvAddNewTaskToReadyList+0x198>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	4013      	ands	r3, r2
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d014      	beq.n	8003938 <prvAddNewTaskToReadyList+0xf8>
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fc fee4 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003914:	4603      	mov	r3, r0
 8003916:	461a      	mov	r2, r3
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <prvAddNewTaskToReadyList+0x198>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	4013      	ands	r3, r2
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <prvAddNewTaskToReadyList+0xf8>
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fc fecc 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 800392a:	4603      	mov	r3, r0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	2103      	movs	r1, #3
 8003932:	201b      	movs	r0, #27
 8003934:	f7fd fb52 	bl	8000fdc <prvTraceStoreKernelCall>
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fc ff51 	bl	80007e0 <prvAddTaskToStackMonitor>

		prvAddTaskToReadyList( pxNewTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fc fecc 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <prvAddNewTaskToReadyList+0x198>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	4013      	ands	r3, r2
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <prvAddNewTaskToReadyList+0x124>
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fc feb4 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 800395a:	4603      	mov	r3, r0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd fa4c 	bl	8000dfc <prvTraceStoreTaskReady>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	2201      	movs	r2, #1
 800396a:	409a      	lsls	r2, r3
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <prvAddNewTaskToReadyList+0x19c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <prvAddNewTaskToReadyList+0x19c>)
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <prvAddNewTaskToReadyList+0x1a0>)
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f7fe fd5f 	bl	8002450 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003992:	f001 fbf1 	bl	8005178 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <prvAddNewTaskToReadyList+0x18c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00e      	beq.n	80039bc <prvAddNewTaskToReadyList+0x17c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <prvAddNewTaskToReadyList+0x188>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d207      	bcs.n	80039bc <prvAddNewTaskToReadyList+0x17c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <prvAddNewTaskToReadyList+0x1a4>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000de4 	.word	0x20000de4
 80039c8:	20000ce4 	.word	0x20000ce4
 80039cc:	20000df0 	.word	0x20000df0
 80039d0:	20000e00 	.word	0x20000e00
 80039d4:	20000012 	.word	0x20000012
 80039d8:	20000010 	.word	0x20000010
 80039dc:	20000dec 	.word	0x20000dec
 80039e0:	20000ce8 	.word	0x20000ce8
 80039e4:	e000ed04 	.word	0xe000ed04

080039e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d04a      	beq.n	8003a90 <vTaskDelay+0xa8>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <vTaskDelay+0xc8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <vTaskDelay+0x2e>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	e7fe      	b.n	8003a14 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003a16:	f000 f8db 	bl	8003bd0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <vTaskDelay+0xcc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fe5c 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <vTaskDelay+0xd0>)
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <vTaskDelay+0x68>
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	2089      	movs	r0, #137	; 0x89
 8003a38:	f7fd fc10 	bl	800125c <prvTraceStoreKernelCallWithNumericParamOnly>
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <vTaskDelay+0xcc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fe3e 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8003a46:	4603      	mov	r3, r0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fdcc 	bl	80015e8 <prvTraceSetTaskInstanceFinished>
 8003a50:	f7fc ff60 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fe40 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <vTaskDelay+0xd0>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <vTaskDelay+0x9a>
 8003a6c:	f7fc ff52 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fe25 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd fdb3 	bl	80015e8 <prvTraceSetTaskInstanceFinished>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a82:	2100      	movs	r1, #0
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fe81 	bl	800478c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a8a:	f000 f8af 	bl	8003bec <xTaskResumeAll>
 8003a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <vTaskDelay+0xbe>
		{
			portYIELD_WITHIN_API();
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <vTaskDelay+0xd4>)
 8003a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000e0c 	.word	0x20000e0c
 8003ab4:	20000ce4 	.word	0x20000ce4
 8003ab8:	20000010 	.word	0x20000010
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ace:	463a      	mov	r2, r7
 8003ad0:	1d39      	adds	r1, r7, #4
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fb7a 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003adc:	6839      	ldr	r1, [r7, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	9202      	str	r2, [sp, #8]
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	460a      	mov	r2, r1
 8003aee:	4930      	ldr	r1, [pc, #192]	; (8003bb0 <vTaskStartScheduler+0xf0>)
 8003af0:	4830      	ldr	r0, [pc, #192]	; (8003bb4 <vTaskStartScheduler+0xf4>)
 8003af2:	f7ff fd77 	bl	80035e4 <xTaskCreateStatic>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <vTaskStartScheduler+0xf8>)
 8003afa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003afc:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <vTaskStartScheduler+0xf8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b04:	2301      	movs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e001      	b.n	8003b0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d102      	bne.n	8003b1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b14:	f000 fea0 	bl	8004858 <xTimerCreateTimerTask>
 8003b18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d134      	bne.n	8003b8a <vTaskStartScheduler+0xca>
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b32:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <vTaskStartScheduler+0xfc>)
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295
 8003b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b3a:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <vTaskStartScheduler+0x100>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b40:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <vTaskStartScheduler+0x104>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <vTaskStartScheduler+0x108>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f7fc fee2 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fdc2 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <vTaskStartScheduler+0x10c>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	4013      	ands	r3, r2
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <vTaskStartScheduler+0xbe>
 8003b68:	f7fc fed4 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fc fda7 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8003b74:	4603      	mov	r3, r0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd fbd3 	bl	8001324 <prvTraceStoreTaskswitch>
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <vTaskStartScheduler+0x108>)
 8003b80:	2202      	movs	r2, #2
 8003b82:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b84:	f001 fa1c 	bl	8004fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b88:	e00d      	b.n	8003ba6 <vTaskStartScheduler+0xe6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d109      	bne.n	8003ba6 <vTaskStartScheduler+0xe6>
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e7fe      	b.n	8003ba4 <vTaskStartScheduler+0xe4>
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	08007554 	.word	0x08007554
 8003bb4:	08004391 	.word	0x08004391
 8003bb8:	20000e08 	.word	0x20000e08
 8003bbc:	20000e04 	.word	0x20000e04
 8003bc0:	20000df0 	.word	0x20000df0
 8003bc4:	20000de8 	.word	0x20000de8
 8003bc8:	20000c20 	.word	0x20000c20
 8003bcc:	20000010 	.word	0x20000010

08003bd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <vTaskSuspendAll+0x18>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	4a03      	ldr	r2, [pc, #12]	; (8003be8 <vTaskSuspendAll+0x18>)
 8003bdc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	20000e0c 	.word	0x20000e0c

08003bec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <xTaskResumeAll+0x138>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <xTaskResumeAll+0x2a>
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	e7fe      	b.n	8003c14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c16:	f001 fa81 	bl	800511c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <xTaskResumeAll+0x138>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	4a40      	ldr	r2, [pc, #256]	; (8003d24 <xTaskResumeAll+0x138>)
 8003c22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c24:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <xTaskResumeAll+0x138>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d174      	bne.n	8003d16 <xTaskResumeAll+0x12a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c2c:	4b3e      	ldr	r3, [pc, #248]	; (8003d28 <xTaskResumeAll+0x13c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d070      	beq.n	8003d16 <xTaskResumeAll+0x12a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c34:	e041      	b.n	8003cba <xTaskResumeAll+0xce>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <xTaskResumeAll+0x140>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3318      	adds	r3, #24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fc61 	bl	800250a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fc5c 	bl	800250a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7fc fd42 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b34      	ldr	r3, [pc, #208]	; (8003d30 <xTaskResumeAll+0x144>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <xTaskResumeAll+0x8c>
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7fc fd2a 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd f8c2 	bl	8000dfc <prvTraceStoreTaskReady>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <xTaskResumeAll+0x148>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4a2b      	ldr	r2, [pc, #172]	; (8003d34 <xTaskResumeAll+0x148>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a28      	ldr	r2, [pc, #160]	; (8003d38 <xTaskResumeAll+0x14c>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe fbd5 	bl	8002450 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <xTaskResumeAll+0x150>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <xTaskResumeAll+0xce>
					{
						xYieldPending = pdTRUE;
 8003cb4:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <xTaskResumeAll+0x154>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cba:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <xTaskResumeAll+0x140>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1b9      	bne.n	8003c36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <xTaskResumeAll+0xe0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cc8:	f000 fc4c 	bl	8004564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <xTaskResumeAll+0x158>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <xTaskResumeAll+0x10e>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cd8:	f000 f848 	bl	8003d6c <xTaskIncrementTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <xTaskResumeAll+0xfc>
							{
								xYieldPending = pdTRUE;
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <xTaskResumeAll+0x154>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f1      	bne.n	8003cd8 <xTaskResumeAll+0xec>

						uxPendedTicks = 0;
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <xTaskResumeAll+0x158>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <xTaskResumeAll+0x154>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <xTaskResumeAll+0x12a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <xTaskResumeAll+0x15c>)
 8003d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d16:	f001 fa2f 	bl	8005178 <vPortExitCritical>

	return xAlreadyYielded;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000e0c 	.word	0x20000e0c
 8003d28:	20000de4 	.word	0x20000de4
 8003d2c:	20000da4 	.word	0x20000da4
 8003d30:	20000010 	.word	0x20000010
 8003d34:	20000dec 	.word	0x20000dec
 8003d38:	20000ce8 	.word	0x20000ce8
 8003d3c:	20000ce4 	.word	0x20000ce4
 8003d40:	20000df8 	.word	0x20000df8
 8003d44:	20000df4 	.word	0x20000df4
 8003d48:	e000ed04 	.word	0xe000ed04

08003d4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <xTaskGetTickCount+0x1c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d58:	687b      	ldr	r3, [r7, #4]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000de8 	.word	0x20000de8

08003d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <xTaskIncrementTick+0x1a0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d003      	beq.n	8003d86 <xTaskIncrementTick+0x1a>
 8003d7e:	4b64      	ldr	r3, [pc, #400]	; (8003f10 <xTaskIncrementTick+0x1a4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <xTaskIncrementTick+0x2a>
 8003d86:	4b63      	ldr	r3, [pc, #396]	; (8003f14 <xTaskIncrementTick+0x1a8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	4a61      	ldr	r2, [pc, #388]	; (8003f14 <xTaskIncrementTick+0x1a8>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7fe f91f 	bl	8001fd4 <prvTracePortGetTimeStamp>
 8003d96:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <xTaskIncrementTick+0x1a0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <xTaskIncrementTick+0x40>
 8003d9e:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <xTaskIncrementTick+0x1ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	4619      	mov	r1, r3
 8003da6:	2003      	movs	r0, #3
 8003da8:	f7fd fa58 	bl	800125c <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dac:	4b57      	ldr	r3, [pc, #348]	; (8003f0c <xTaskIncrementTick+0x1a0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 809a 	bne.w	8003eea <xTaskIncrementTick+0x17e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003db6:	4b58      	ldr	r3, [pc, #352]	; (8003f18 <xTaskIncrementTick+0x1ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dbe:	4a56      	ldr	r2, [pc, #344]	; (8003f18 <xTaskIncrementTick+0x1ac>)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11f      	bne.n	8003e0a <xTaskIncrementTick+0x9e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dca:	4b54      	ldr	r3, [pc, #336]	; (8003f1c <xTaskIncrementTick+0x1b0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <xTaskIncrementTick+0x7c>
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	e7fe      	b.n	8003de6 <xTaskIncrementTick+0x7a>
 8003de8:	4b4c      	ldr	r3, [pc, #304]	; (8003f1c <xTaskIncrementTick+0x1b0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <xTaskIncrementTick+0x1b4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <xTaskIncrementTick+0x1b0>)
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4a4a      	ldr	r2, [pc, #296]	; (8003f20 <xTaskIncrementTick+0x1b4>)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <xTaskIncrementTick+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	4a48      	ldr	r2, [pc, #288]	; (8003f24 <xTaskIncrementTick+0x1b8>)
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	f000 fbad 	bl	8004564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e0a:	4b47      	ldr	r3, [pc, #284]	; (8003f28 <xTaskIncrementTick+0x1bc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d35b      	bcc.n	8003ecc <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e14:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <xTaskIncrementTick+0x1b0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1e:	4b42      	ldr	r3, [pc, #264]	; (8003f28 <xTaskIncrementTick+0x1bc>)
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	601a      	str	r2, [r3, #0]
					break;
 8003e26:	e051      	b.n	8003ecc <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	4b3c      	ldr	r3, [pc, #240]	; (8003f1c <xTaskIncrementTick+0x1b0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d203      	bcs.n	8003e48 <xTaskIncrementTick+0xdc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e40:	4a39      	ldr	r2, [pc, #228]	; (8003f28 <xTaskIncrementTick+0x1bc>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e46:	e041      	b.n	8003ecc <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fb5c 	bl	800250a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <xTaskIncrementTick+0xf8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3318      	adds	r3, #24
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fb53 	bl	800250a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e64:	68b8      	ldr	r0, [r7, #8]
 8003e66:	f7fc fc39 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <xTaskIncrementTick+0x1c0>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	4013      	ands	r3, r2
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <xTaskIncrementTick+0x11e>
 8003e7a:	68b8      	ldr	r0, [r7, #8]
 8003e7c:	f7fc fc21 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc ffb9 	bl	8000dfc <prvTraceStoreTaskReady>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	2201      	movs	r2, #1
 8003e90:	409a      	lsls	r2, r3
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <xTaskIncrementTick+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	4a25      	ldr	r2, [pc, #148]	; (8003f30 <xTaskIncrementTick+0x1c4>)
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <xTaskIncrementTick+0x1c8>)
 8003eaa:	441a      	add	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe facc 	bl	8002450 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <xTaskIncrementTick+0x1cc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d3a6      	bcc.n	8003e14 <xTaskIncrementTick+0xa8>
						{
							xSwitchRequired = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eca:	e7a3      	b.n	8003e14 <xTaskIncrementTick+0xa8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <xTaskIncrementTick+0x1cc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	4918      	ldr	r1, [pc, #96]	; (8003f34 <xTaskIncrementTick+0x1c8>)
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d907      	bls.n	8003ef4 <xTaskIncrementTick+0x188>
			{
				xSwitchRequired = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e004      	b.n	8003ef4 <xTaskIncrementTick+0x188>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <xTaskIncrementTick+0x1a4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <xTaskIncrementTick+0x1a4>)
 8003ef2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <xTaskIncrementTick+0x1d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <xTaskIncrementTick+0x194>
		{
			xSwitchRequired = pdTRUE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f00:	697b      	ldr	r3, [r7, #20]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000e0c 	.word	0x20000e0c
 8003f10:	20000df4 	.word	0x20000df4
 8003f14:	20000c14 	.word	0x20000c14
 8003f18:	20000de8 	.word	0x20000de8
 8003f1c:	20000d9c 	.word	0x20000d9c
 8003f20:	20000da0 	.word	0x20000da0
 8003f24:	20000dfc 	.word	0x20000dfc
 8003f28:	20000e04 	.word	0x20000e04
 8003f2c:	20000010 	.word	0x20000010
 8003f30:	20000dec 	.word	0x20000dec
 8003f34:	20000ce8 	.word	0x20000ce8
 8003f38:	20000ce4 	.word	0x20000ce4
 8003f3c:	20000df8 	.word	0x20000df8

08003f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f46:	4b35      	ldr	r3, [pc, #212]	; (800401c <vTaskSwitchContext+0xdc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f4e:	4b34      	ldr	r3, [pc, #208]	; (8004020 <vTaskSwitchContext+0xe0>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f54:	e05d      	b.n	8004012 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8003f56:	4b32      	ldr	r3, [pc, #200]	; (8004020 <vTaskSwitchContext+0xe0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f5c:	4b31      	ldr	r3, [pc, #196]	; (8004024 <vTaskSwitchContext+0xe4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	f1c3 031f 	rsb	r3, r3, #31
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	492d      	ldr	r1, [pc, #180]	; (8004028 <vTaskSwitchContext+0xe8>)
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	e7fe      	b.n	8003f98 <vTaskSwitchContext+0x58>
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4a20      	ldr	r2, [pc, #128]	; (8004028 <vTaskSwitchContext+0xe8>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d104      	bne.n	8003fca <vTaskSwitchContext+0x8a>
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <vTaskSwitchContext+0xec>)
 8003fd2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <vTaskSwitchContext+0xf0>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f7fc fc9b 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fb7b 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <vTaskSwitchContext+0xf4>)
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <vTaskSwitchContext+0xcc>
 8003ff6:	f7fc fc8d 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc fb60 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8004002:	4603      	mov	r3, r0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4618      	mov	r0, r3
 8004008:	f7fd f98c 	bl	8001324 <prvTraceStoreTaskswitch>
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <vTaskSwitchContext+0xf0>)
 800400e:	2202      	movs	r2, #2
 8004010:	601a      	str	r2, [r3, #0]
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000e0c 	.word	0x20000e0c
 8004020:	20000df8 	.word	0x20000df8
 8004024:	20000dec 	.word	0x20000dec
 8004028:	20000ce8 	.word	0x20000ce8
 800402c:	20000ce4 	.word	0x20000ce4
 8004030:	20000c20 	.word	0x20000c20
 8004034:	20000010 	.word	0x20000010

08004038 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <vTaskPlaceOnEventList+0x24>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	e7fe      	b.n	800405a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <vTaskPlaceOnEventList+0x44>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3318      	adds	r3, #24
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7fe fa17 	bl	8002498 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800406a:	2101      	movs	r1, #1
 800406c:	6838      	ldr	r0, [r7, #0]
 800406e:	f000 fb8d 	bl	800478c <prvAddCurrentTaskToDelayedList>
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000ce4 	.word	0x20000ce4

08004080 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <vTaskPlaceOnEventListRestricted+0x26>
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	e7fe      	b.n	80040a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040a6:	4b26      	ldr	r3, [pc, #152]	; (8004140 <vTaskPlaceOnEventListRestricted+0xc0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3318      	adds	r3, #24
 80040ac:	4619      	mov	r1, r3
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7fe f9ce 	bl	8002450 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80040c0:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <vTaskPlaceOnEventListRestricted+0xc0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fb09 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <vTaskPlaceOnEventListRestricted+0xc4>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	4013      	ands	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d011      	beq.n	80040fe <vTaskPlaceOnEventListRestricted+0x7e>
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <vTaskPlaceOnEventListRestricted+0xc8>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4413      	add	r3, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	2088      	movs	r0, #136	; 0x88
 80040e6:	f7fd f8b9 	bl	800125c <prvTraceStoreKernelCallWithNumericParamOnly>
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <vTaskPlaceOnEventListRestricted+0xc0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc fae7 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80040f4:	4603      	mov	r3, r0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd fa75 	bl	80015e8 <prvTraceSetTaskInstanceFinished>
 80040fe:	f7fc fc09 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 8004102:	4603      	mov	r3, r0
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fae9 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 800410a:	4603      	mov	r3, r0
 800410c:	461a      	mov	r2, r3
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <vTaskPlaceOnEventListRestricted+0xc4>)
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	4013      	ands	r3, r2
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <vTaskPlaceOnEventListRestricted+0xb0>
 800411a:	f7fc fbfb 	bl	8000914 <prvTraceGetCurrentTaskHandle>
 800411e:	4603      	mov	r3, r0
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc face 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8004126:	4603      	mov	r3, r0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fa5c 	bl	80015e8 <prvTraceSetTaskInstanceFinished>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	68b8      	ldr	r0, [r7, #8]
 8004134:	f000 fb2a 	bl	800478c <prvAddCurrentTaskToDelayedList>
	}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000ce4 	.word	0x20000ce4
 8004144:	20000010 	.word	0x20000010
 8004148:	20000de8 	.word	0x20000de8

0800414c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <xTaskRemoveFromEventList+0x2a>
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e7fe      	b.n	8004174 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3318      	adds	r3, #24
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe f9c5 	bl	800250a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004180:	4b26      	ldr	r3, [pc, #152]	; (800421c <xTaskRemoveFromEventList+0xd0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d12f      	bne.n	80041e8 <xTaskRemoveFromEventList+0x9c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	3304      	adds	r3, #4
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe f9bc 	bl	800250a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004192:	6938      	ldr	r0, [r7, #16]
 8004194:	f7fc faa2 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <xTaskRemoveFromEventList+0xd4>)
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <xTaskRemoveFromEventList+0x6c>
 80041a8:	6938      	ldr	r0, [r7, #16]
 80041aa:	f7fc fa8a 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80041ae:	4603      	mov	r3, r0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fc fe22 	bl	8000dfc <prvTraceStoreTaskReady>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	2201      	movs	r2, #1
 80041be:	409a      	lsls	r2, r3
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <xTaskRemoveFromEventList+0xd8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <xTaskRemoveFromEventList+0xd8>)
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <xTaskRemoveFromEventList+0xdc>)
 80041d8:	441a      	add	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3304      	adds	r3, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fe f935 	bl	8002450 <vListInsertEnd>
 80041e6:	e005      	b.n	80041f4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3318      	adds	r3, #24
 80041ec:	4619      	mov	r1, r3
 80041ee:	480f      	ldr	r0, [pc, #60]	; (800422c <xTaskRemoveFromEventList+0xe0>)
 80041f0:	f7fe f92e 	bl	8002450 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <xTaskRemoveFromEventList+0xe4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d905      	bls.n	800420e <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <xTaskRemoveFromEventList+0xe8>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e001      	b.n	8004212 <xTaskRemoveFromEventList+0xc6>
	}
	else
	{
		xReturn = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004212:	697b      	ldr	r3, [r7, #20]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000e0c 	.word	0x20000e0c
 8004220:	20000010 	.word	0x20000010
 8004224:	20000dec 	.word	0x20000dec
 8004228:	20000ce8 	.word	0x20000ce8
 800422c:	20000da4 	.word	0x20000da4
 8004230:	20000ce4 	.word	0x20000ce4
 8004234:	20000df8 	.word	0x20000df8

08004238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <vTaskInternalSetTimeOutState+0x24>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <vTaskInternalSetTimeOutState+0x28>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	605a      	str	r2, [r3, #4]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000dfc 	.word	0x20000dfc
 8004260:	20000de8 	.word	0x20000de8

08004264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <xTaskCheckForTimeOut+0x24>
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	e7fe      	b.n	8004286 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <xTaskCheckForTimeOut+0x3e>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e7fe      	b.n	80042a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80042a2:	f000 ff3b 	bl	800511c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <xTaskCheckForTimeOut+0xb8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d102      	bne.n	80042c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e023      	b.n	800430e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <xTaskCheckForTimeOut+0xbc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d007      	beq.n	80042e2 <xTaskCheckForTimeOut+0x7e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	e015      	b.n	800430e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d20b      	bcs.n	8004304 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad2      	subs	r2, r2, r3
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff9d 	bl	8004238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	e004      	b.n	800430e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800430e:	f000 ff33 	bl	8005178 <vPortExitCritical>

	return xReturn;
 8004312:	69fb      	ldr	r3, [r7, #28]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000de8 	.word	0x20000de8
 8004320:	20000dfc 	.word	0x20000dfc

08004324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <vTaskMissedYield+0x14>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]
}
 800432e:	bf00      	nop
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	20000df8 	.word	0x20000df8

0800433c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e001      	b.n	800435a <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 800435a:	68fb      	ldr	r3, [r7, #12]
	}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004398:	f000 f852 	bl	8004440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <prvIdleTask+0x28>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d9f9      	bls.n	8004398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <prvIdleTask+0x2c>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043b4:	e7f0      	b.n	8004398 <prvIdleTask+0x8>
 80043b6:	bf00      	nop
 80043b8:	20000ce8 	.word	0x20000ce8
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c6:	2300      	movs	r3, #0
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	e00c      	b.n	80043e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a12      	ldr	r2, [pc, #72]	; (8004420 <prvInitialiseTaskLists+0x60>)
 80043d8:	4413      	add	r3, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe f80b 	bl	80023f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3301      	adds	r3, #1
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d9ef      	bls.n	80043cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043ec:	480d      	ldr	r0, [pc, #52]	; (8004424 <prvInitialiseTaskLists+0x64>)
 80043ee:	f7fe f802 	bl	80023f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043f2:	480d      	ldr	r0, [pc, #52]	; (8004428 <prvInitialiseTaskLists+0x68>)
 80043f4:	f7fd ffff 	bl	80023f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <prvInitialiseTaskLists+0x6c>)
 80043fa:	f7fd fffc 	bl	80023f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043fe:	480c      	ldr	r0, [pc, #48]	; (8004430 <prvInitialiseTaskLists+0x70>)
 8004400:	f7fd fff9 	bl	80023f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004404:	480b      	ldr	r0, [pc, #44]	; (8004434 <prvInitialiseTaskLists+0x74>)
 8004406:	f7fd fff6 	bl	80023f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <prvInitialiseTaskLists+0x78>)
 800440c:	4a05      	ldr	r2, [pc, #20]	; (8004424 <prvInitialiseTaskLists+0x64>)
 800440e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvInitialiseTaskLists+0x7c>)
 8004412:	4a05      	ldr	r2, [pc, #20]	; (8004428 <prvInitialiseTaskLists+0x68>)
 8004414:	601a      	str	r2, [r3, #0]
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000ce8 	.word	0x20000ce8
 8004424:	20000d74 	.word	0x20000d74
 8004428:	20000d88 	.word	0x20000d88
 800442c:	20000da4 	.word	0x20000da4
 8004430:	20000db8 	.word	0x20000db8
 8004434:	20000dd0 	.word	0x20000dd0
 8004438:	20000d9c 	.word	0x20000d9c
 800443c:	20000da0 	.word	0x20000da0

08004440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004446:	e019      	b.n	800447c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004448:	f000 fe68 	bl	800511c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <prvCheckTasksWaitingTermination+0x4c>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe f856 	bl	800250a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <prvCheckTasksWaitingTermination+0x50>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3b01      	subs	r3, #1
 8004464:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <prvCheckTasksWaitingTermination+0x50>)
 8004466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3b01      	subs	r3, #1
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 8004470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004472:	f000 fe81 	bl	8005178 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f846 	bl	8004508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <prvCheckTasksWaitingTermination+0x54>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e1      	bne.n	8004448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000db8 	.word	0x20000db8
 8004490:	20000de4 	.word	0x20000de4
 8004494:	20000dcc 	.word	0x20000dcc

08004498 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80044a4:	e005      	b.n	80044b2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3301      	adds	r3, #1
 80044aa:	607b      	str	r3, [r7, #4]
			ulCount++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2ba5      	cmp	r3, #165	; 0xa5
 80044b8:	d0f5      	beq.n	80044a6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	b29b      	uxth	r3, r3
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <uxTaskGetStackHighWaterMark+0x14>
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <uxTaskGetStackHighWaterMark+0x34>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	e000      	b.n	80044e6 <uxTaskGetStackHighWaterMark+0x16>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80044ee:	6938      	ldr	r0, [r7, #16]
 80044f0:	f7ff ffd2 	bl	8004498 <prvTaskCheckFreeStackSpace>
 80044f4:	4603      	mov	r3, r0
 80044f6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80044f8:	68fb      	ldr	r3, [r7, #12]
	}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000ce4 	.word	0x20000ce4

08004508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004516:	2b00      	cmp	r3, #0
 8004518:	d108      	bne.n	800452c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4618      	mov	r0, r3
 8004520:	f000 ffe8 	bl	80054f4 <vPortFree>
				vPortFree( pxTCB );
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 ffe5 	bl	80054f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800452a:	e017      	b.n	800455c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004532:	2b01      	cmp	r3, #1
 8004534:	d103      	bne.n	800453e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 ffdc 	bl	80054f4 <vPortFree>
	}
 800453c:	e00e      	b.n	800455c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004544:	2b02      	cmp	r3, #2
 8004546:	d009      	beq.n	800455c <prvDeleteTCB+0x54>
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e7fe      	b.n	800455a <prvDeleteTCB+0x52>
	}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800456a:	4b0c      	ldr	r3, [pc, #48]	; (800459c <prvResetNextTaskUnblockTime+0x38>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800457c:	e008      	b.n	8004590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <prvResetNextTaskUnblockTime+0x38>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <prvResetNextTaskUnblockTime+0x3c>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000d9c 	.word	0x20000d9c
 80045a0:	20000e04 	.word	0x20000e04

080045a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80045b0:	687b      	ldr	r3, [r7, #4]
	}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000ce4 	.word	0x20000ce4

080045c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <xTaskGetSchedulerState+0x34>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045d2:	2301      	movs	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	e008      	b.n	80045ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <xTaskGetSchedulerState+0x38>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045e0:	2302      	movs	r3, #2
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	e001      	b.n	80045ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ea:	687b      	ldr	r3, [r7, #4]
	}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	20000df0 	.word	0x20000df0
 80045fc:	20000e0c 	.word	0x20000e0c

08004600 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80ad 	beq.w	8004772 <xTaskPriorityDisinherit+0x172>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004618:	4b58      	ldr	r3, [pc, #352]	; (800477c <xTaskPriorityDisinherit+0x17c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	429a      	cmp	r2, r3
 8004620:	d009      	beq.n	8004636 <xTaskPriorityDisinherit+0x36>
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e7fe      	b.n	8004634 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <xTaskPriorityDisinherit+0x52>
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	e7fe      	b.n	8004650 <xTaskPriorityDisinherit+0x50>
			( pxTCB->uxMutexesHeld )--;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004664:	429a      	cmp	r2, r3
 8004666:	f000 8084 	beq.w	8004772 <xTaskPriorityDisinherit+0x172>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d17f      	bne.n	8004772 <xTaskPriorityDisinherit+0x172>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3304      	adds	r3, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd ff47 	bl	800250a <uxListRemove>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d115      	bne.n	80046ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	493e      	ldr	r1, [pc, #248]	; (8004780 <xTaskPriorityDisinherit+0x180>)
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <xTaskPriorityDisinherit+0xae>
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	2201      	movs	r2, #1
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	4b37      	ldr	r3, [pc, #220]	; (8004784 <xTaskPriorityDisinherit+0x184>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4013      	ands	r3, r2
 80046aa:	4a36      	ldr	r2, [pc, #216]	; (8004784 <xTaskPriorityDisinherit+0x184>)
 80046ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80046ae:	6938      	ldr	r0, [r7, #16]
 80046b0:	f7fc f814 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 80046b4:	4603      	mov	r3, r0
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b33      	ldr	r3, [pc, #204]	; (8004788 <xTaskPriorityDisinherit+0x188>)
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	4013      	ands	r3, r2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <xTaskPriorityDisinherit+0x106>
 80046c4:	6938      	ldr	r0, [r7, #16]
 80046c6:	f7fb fffc 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80046ca:	4603      	mov	r3, r0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461c      	mov	r4, r3
 80046d0:	6938      	ldr	r0, [r7, #16]
 80046d2:	f7fb fff6 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80046d6:	4603      	mov	r3, r0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	4619      	mov	r1, r3
 80046dc:	2003      	movs	r0, #3
 80046de:	f7fc fecd 	bl	800147c <prvTraceGetPriorityProperty>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4622      	mov	r2, r4
 80046e6:	2103      	movs	r1, #3
 80046e8:	208f      	movs	r0, #143	; 0x8f
 80046ea:	f7fc fcf3 	bl	80010d4 <prvTraceStoreKernelCallWithParam>
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f7fb ffe7 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 80046f4:	4603      	mov	r3, r0
 80046f6:	b2d9      	uxtb	r1, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	2003      	movs	r0, #3
 8004702:	f7fc fe7f 	bl	8001404 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	f1c3 0207 	rsb	r2, r3, #7
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f7fb ffde 	bl	80006dc <prvTraceGetTaskNumberHigh16>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	4b18      	ldr	r3, [pc, #96]	; (8004788 <xTaskPriorityDisinherit+0x188>)
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	4013      	ands	r3, r2
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <xTaskPriorityDisinherit+0x140>
 8004730:	6938      	ldr	r0, [r7, #16]
 8004732:	f7fb ffc6 	bl	80006c2 <prvTraceGetTaskNumberLow16>
 8004736:	4603      	mov	r3, r0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc fb5e 	bl	8000dfc <prvTraceStoreTaskReady>
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	2201      	movs	r2, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <xTaskPriorityDisinherit+0x184>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4313      	orrs	r3, r2
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <xTaskPriorityDisinherit+0x184>)
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <xTaskPriorityDisinherit+0x180>)
 8004760:	441a      	add	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7fd fe71 	bl	8002450 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800476e:	2301      	movs	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004772:	697b      	ldr	r3, [r7, #20]
	}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}
 800477c:	20000ce4 	.word	0x20000ce4
 8004780:	20000ce8 	.word	0x20000ce8
 8004784:	20000dec 	.word	0x20000dec
 8004788:	20000010 	.word	0x20000010

0800478c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004796:	4b29      	ldr	r3, [pc, #164]	; (800483c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <prvAddCurrentTaskToDelayedList+0xb4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd feb1 	bl	800250a <uxListRemove>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10b      	bne.n	80047c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047ae:	4b24      	ldr	r3, [pc, #144]	; (8004840 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	2201      	movs	r2, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43da      	mvns	r2, r3
 80047bc:	4b21      	ldr	r3, [pc, #132]	; (8004844 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4013      	ands	r3, r2
 80047c2:	4a20      	ldr	r2, [pc, #128]	; (8004844 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d10a      	bne.n	80047e4 <prvAddCurrentTaskToDelayedList+0x58>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d4:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	481a      	ldr	r0, [pc, #104]	; (8004848 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047de:	f7fd fe37 	bl	8002450 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047e2:	e026      	b.n	8004832 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d209      	bcs.n	8004810 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fc:	4b13      	ldr	r3, [pc, #76]	; (800484c <prvAddCurrentTaskToDelayedList+0xc0>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7fd fe45 	bl	8002498 <vListInsert>
}
 800480e:	e010      	b.n	8004832 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3304      	adds	r3, #4
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f7fd fe3b 	bl	8002498 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d202      	bcs.n	8004832 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <prvAddCurrentTaskToDelayedList+0xc8>)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6013      	str	r3, [r2, #0]
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000de8 	.word	0x20000de8
 8004840:	20000ce4 	.word	0x20000ce4
 8004844:	20000dec 	.word	0x20000dec
 8004848:	20000dd0 	.word	0x20000dd0
 800484c:	20000da0 	.word	0x20000da0
 8004850:	20000d9c 	.word	0x20000d9c
 8004854:	20000e04 	.word	0x20000e04

08004858 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004862:	f000 fae7 	bl	8004e34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <xTimerCreateTimerTask+0x80>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d021      	beq.n	80048b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004876:	1d3a      	adds	r2, r7, #4
 8004878:	f107 0108 	add.w	r1, r7, #8
 800487c:	f107 030c 	add.w	r3, r7, #12
 8004880:	4618      	mov	r0, r3
 8004882:	f7fb fcbf 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	9202      	str	r2, [sp, #8]
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	2302      	movs	r3, #2
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	460a      	mov	r2, r1
 8004898:	4910      	ldr	r1, [pc, #64]	; (80048dc <xTimerCreateTimerTask+0x84>)
 800489a:	4811      	ldr	r0, [pc, #68]	; (80048e0 <xTimerCreateTimerTask+0x88>)
 800489c:	f7fe fea2 	bl	80035e4 <xTaskCreateStatic>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <xTimerCreateTimerTask+0x8c>)
 80048a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048a6:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <xTimerCreateTimerTask+0x8c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048ae:	2301      	movs	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <xTimerCreateTimerTask+0x74>
 80048b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	e7fe      	b.n	80048ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 80048cc:	697b      	ldr	r3, [r7, #20]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000e40 	.word	0x20000e40
 80048dc:	0800755c 	.word	0x0800755c
 80048e0:	08004a19 	.word	0x08004a19
 80048e4:	20000e44 	.word	0x20000e44

080048e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <xTimerGenericCommand+0x2c>
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	e7fe      	b.n	8004912 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004914:	4b19      	ldr	r3, [pc, #100]	; (800497c <xTimerGenericCommand+0x94>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d02a      	beq.n	8004972 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b05      	cmp	r3, #5
 800492c:	dc18      	bgt.n	8004960 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800492e:	f7ff fe49 	bl	80045c4 <xTaskGetSchedulerState>
 8004932:	4603      	mov	r3, r0
 8004934:	2b02      	cmp	r3, #2
 8004936:	d109      	bne.n	800494c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004938:	4b10      	ldr	r3, [pc, #64]	; (800497c <xTimerGenericCommand+0x94>)
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	f107 0114 	add.w	r1, r7, #20
 8004940:	2300      	movs	r3, #0
 8004942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004944:	f7fd ff98 	bl	8002878 <xQueueGenericSend>
 8004948:	6278      	str	r0, [r7, #36]	; 0x24
 800494a:	e012      	b.n	8004972 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <xTimerGenericCommand+0x94>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	f107 0114 	add.w	r1, r7, #20
 8004954:	2300      	movs	r3, #0
 8004956:	2200      	movs	r2, #0
 8004958:	f7fd ff8e 	bl	8002878 <xQueueGenericSend>
 800495c:	6278      	str	r0, [r7, #36]	; 0x24
 800495e:	e008      	b.n	8004972 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <xTimerGenericCommand+0x94>)
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	f107 0114 	add.w	r1, r7, #20
 8004968:	2300      	movs	r3, #0
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	f7fe f98e 	bl	8002c8c <xQueueGenericSendFromISR>
 8004970:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004974:	4618      	mov	r0, r3
 8004976:	3728      	adds	r7, #40	; 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000e40 	.word	0x20000e40

08004980 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <prvProcessExpiredTimer+0x94>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	3304      	adds	r3, #4
 8004998:	4618      	mov	r0, r3
 800499a:	f7fd fdb6 	bl	800250a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d021      	beq.n	80049f0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	18d1      	adds	r1, r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	6978      	ldr	r0, [r7, #20]
 80049ba:	f000 f8d1 	bl	8004b60 <prvInsertTimerInActiveList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01e      	beq.n	8004a02 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049c4:	2300      	movs	r3, #0
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	2300      	movs	r3, #0
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	2100      	movs	r1, #0
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7ff ff8a 	bl	80048e8 <xTimerGenericCommand>
 80049d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d112      	bne.n	8004a02 <prvProcessExpiredTimer+0x82>
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e7fe      	b.n	80049ee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	4798      	blx	r3
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000e38 	.word	0x20000e38

08004a18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 f857 	bl	8004ad8 <prvGetNextExpireTime>
 8004a2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f803 	bl	8004a3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a36:	f000 f8d5 	bl	8004be4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a3a:	e7f1      	b.n	8004a20 <prvTimerTask+0x8>

08004a3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a46:	f7ff f8c3 	bl	8003bd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f866 	bl	8004b20 <prvSampleTimeNow>
 8004a54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d130      	bne.n	8004abe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <prvProcessTimerOrBlockTask+0x3c>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d806      	bhi.n	8004a78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a6a:	f7ff f8bf 	bl	8003bec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff85 	bl	8004980 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a76:	e024      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <prvProcessTimerOrBlockTask+0x90>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <prvProcessTimerOrBlockTask+0x50>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <prvProcessTimerOrBlockTask+0x52>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <prvProcessTimerOrBlockTask+0x94>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7fe fd6d 	bl	800357c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004aa2:	f7ff f8a3 	bl	8003bec <xTaskResumeAll>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <prvProcessTimerOrBlockTask+0x98>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
}
 8004abc:	e001      	b.n	8004ac2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004abe:	f7ff f895 	bl	8003bec <xTaskResumeAll>
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000e3c 	.word	0x20000e3c
 8004ad0:	20000e40 	.word	0x20000e40
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <prvGetNextExpireTime+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <prvGetNextExpireTime+0x16>
 8004aea:	2201      	movs	r2, #1
 8004aec:	e000      	b.n	8004af0 <prvGetNextExpireTime+0x18>
 8004aee:	2200      	movs	r2, #0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d105      	bne.n	8004b08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <prvGetNextExpireTime+0x44>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e001      	b.n	8004b0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000e38 	.word	0x20000e38

08004b20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b28:	f7ff f910 	bl	8003d4c <xTaskGetTickCount>
 8004b2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <prvSampleTimeNow+0x3c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d205      	bcs.n	8004b44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b38:	f000 f918 	bl	8004d6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e002      	b.n	8004b4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b4a:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <prvSampleTimeNow+0x3c>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000e48 	.word	0x20000e48

08004b60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d812      	bhi.n	8004bac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	1ad2      	subs	r2, r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e01b      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <prvInsertTimerInActiveList+0x7c>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7fd fc77 	bl	8002498 <vListInsert>
 8004baa:	e012      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d206      	bcs.n	8004bc2 <prvInsertTimerInActiveList+0x62>
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e007      	b.n	8004bd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <prvInsertTimerInActiveList+0x80>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	f7fd fc63 	bl	8002498 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000e3c 	.word	0x20000e3c
 8004be0:	20000e38 	.word	0x20000e38

08004be4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08c      	sub	sp, #48	; 0x30
 8004be8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bea:	e0ac      	b.n	8004d46 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f2c0 80a8 	blt.w	8004d44 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fd fc80 	bl	800250a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff87 	bl	8004b20 <prvSampleTimeNow>
 8004c12:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b09      	cmp	r3, #9
 8004c18:	f200 8095 	bhi.w	8004d46 <prvProcessReceivedCommands+0x162>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <prvProcessReceivedCommands+0x40>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004c4d 	.word	0x08004c4d
 8004c30:	08004cbf 	.word	0x08004cbf
 8004c34:	08004cd3 	.word	0x08004cd3
 8004c38:	08004d1b 	.word	0x08004d1b
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c4d 	.word	0x08004c4d
 8004c44:	08004cbf 	.word	0x08004cbf
 8004c48:	08004cd3 	.word	0x08004cd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	18d1      	adds	r1, r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c6c:	f7ff ff78 	bl	8004b60 <prvInsertTimerInActiveList>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d067      	beq.n	8004d46 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05c      	beq.n	8004d46 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	441a      	add	r2, r3
 8004c94:	2300      	movs	r3, #0
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c9e:	f7ff fe23 	bl	80048e8 <xTimerGenericCommand>
 8004ca2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14d      	bne.n	8004d46 <prvProcessReceivedCommands+0x162>
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e7fe      	b.n	8004cbc <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004cd0:	e039      	b.n	8004d46 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d109      	bne.n	8004d06 <prvProcessReceivedCommands+0x122>
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e7fe      	b.n	8004d04 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	18d1      	adds	r1, r2, r3
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d14:	f7ff ff24 	bl	8004b60 <prvInsertTimerInActiveList>
					break;
 8004d18:	e015      	b.n	8004d46 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2a:	f000 fbe3 	bl	80054f4 <vPortFree>
 8004d2e:	e00a      	b.n	8004d46 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d42:	e000      	b.n	8004d46 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d46:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <prvProcessReceivedCommands+0x184>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f107 0108 	add.w	r1, r7, #8
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe f89f 	bl	8002e94 <xQueueReceive>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f47f af47 	bne.w	8004bec <prvProcessReceivedCommands+0x8>
	}
}
 8004d5e:	bf00      	nop
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000e40 	.word	0x20000e40

08004d6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d72:	e047      	b.n	8004e04 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d74:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <prvSwitchTimerLists+0xc0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7e:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <prvSwitchTimerLists+0xc0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fd fbbc 	bl	800250a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d02d      	beq.n	8004e04 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d90e      	bls.n	8004dd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dc6:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <prvSwitchTimerLists+0xc0>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f7fd fb61 	bl	8002498 <vListInsert>
 8004dd6:	e015      	b.n	8004e04 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	2100      	movs	r1, #0
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fd80 	bl	80048e8 <xTimerGenericCommand>
 8004de8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <prvSwitchTimerLists+0x98>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	e7fe      	b.n	8004e02 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <prvSwitchTimerLists+0xc0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1b2      	bne.n	8004d74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <prvSwitchTimerLists+0xc0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <prvSwitchTimerLists+0xc4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <prvSwitchTimerLists+0xc0>)
 8004e1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <prvSwitchTimerLists+0xc4>)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6013      	str	r3, [r2, #0]
}
 8004e22:	bf00      	nop
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000e38 	.word	0x20000e38
 8004e30:	20000e3c 	.word	0x20000e3c

08004e34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e3a:	f000 f96f 	bl	800511c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <prvCheckForValidListAndQueue+0x60>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d120      	bne.n	8004e88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e46:	4814      	ldr	r0, [pc, #80]	; (8004e98 <prvCheckForValidListAndQueue+0x64>)
 8004e48:	f7fd fad5 	bl	80023f6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e4c:	4813      	ldr	r0, [pc, #76]	; (8004e9c <prvCheckForValidListAndQueue+0x68>)
 8004e4e:	f7fd fad2 	bl	80023f6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <prvCheckForValidListAndQueue+0x6c>)
 8004e54:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <prvCheckForValidListAndQueue+0x64>)
 8004e56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e58:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <prvCheckForValidListAndQueue+0x70>)
 8004e5a:	4a10      	ldr	r2, [pc, #64]	; (8004e9c <prvCheckForValidListAndQueue+0x68>)
 8004e5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <prvCheckForValidListAndQueue+0x74>)
 8004e64:	4a11      	ldr	r2, [pc, #68]	; (8004eac <prvCheckForValidListAndQueue+0x78>)
 8004e66:	210c      	movs	r1, #12
 8004e68:	200a      	movs	r0, #10
 8004e6a:	f7fd fbe1 	bl	8002630 <xQueueGenericCreateStatic>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <prvCheckForValidListAndQueue+0x60>)
 8004e72:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e74:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <prvCheckForValidListAndQueue+0x60>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <prvCheckForValidListAndQueue+0x60>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	490b      	ldr	r1, [pc, #44]	; (8004eb0 <prvCheckForValidListAndQueue+0x7c>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fb40 	bl	8003508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e88:	f000 f976 	bl	8005178 <vPortExitCritical>
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000e40 	.word	0x20000e40
 8004e98:	20000e10 	.word	0x20000e10
 8004e9c:	20000e24 	.word	0x20000e24
 8004ea0:	20000e38 	.word	0x20000e38
 8004ea4:	20000e3c 	.word	0x20000e3c
 8004ea8:	20000ec4 	.word	0x20000ec4
 8004eac:	20000e4c 	.word	0x20000e4c
 8004eb0:	08007564 	.word	0x08007564

08004eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3b04      	subs	r3, #4
 8004ec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3b04      	subs	r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f023 0201 	bic.w	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b04      	subs	r3, #4
 8004ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ee4:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <pxPortInitialiseStack+0x64>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b14      	subs	r3, #20
 8004eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b04      	subs	r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f06f 0202 	mvn.w	r2, #2
 8004f02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b20      	subs	r3, #32
 8004f08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	08004f1d 	.word	0x08004f1d

08004f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <prvTaskExitError+0x50>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d009      	beq.n	8004f44 <prvTaskExitError+0x28>
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e7fe      	b.n	8004f42 <prvTaskExitError+0x26>
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f56:	bf00      	nop
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0fc      	beq.n	8004f58 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000018 	.word	0x20000018

08004f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <pxCurrentTCBConst2>)
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	6808      	ldr	r0, [r1, #0]
 8004f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	f380 8809 	msr	PSP, r0
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8811 	msr	BASEPRI, r0
 8004f8a:	4770      	bx	lr
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst2>:
 8004f90:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f98:	4808      	ldr	r0, [pc, #32]	; (8004fbc <prvPortStartFirstTask+0x24>)
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f380 8808 	msr	MSP, r0
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8814 	msr	CONTROL, r0
 8004faa:	b662      	cpsie	i
 8004fac:	b661      	cpsie	f
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	df00      	svc	0
 8004fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fba:	bf00      	nop
 8004fbc:	e000ed08 	.word	0xe000ed08

08004fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fc6:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <xPortStartScheduler+0x138>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a4c      	ldr	r2, [pc, #304]	; (80050fc <xPortStartScheduler+0x13c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <xPortStartScheduler+0x24>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	61bb      	str	r3, [r7, #24]
 8004fe2:	e7fe      	b.n	8004fe2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fe4:	4b44      	ldr	r3, [pc, #272]	; (80050f8 <xPortStartScheduler+0x138>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a45      	ldr	r2, [pc, #276]	; (8005100 <xPortStartScheduler+0x140>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d109      	bne.n	8005002 <xPortStartScheduler+0x42>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e7fe      	b.n	8005000 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005002:	4b40      	ldr	r3, [pc, #256]	; (8005104 <xPortStartScheduler+0x144>)
 8005004:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005024:	b2da      	uxtb	r2, r3
 8005026:	4b38      	ldr	r3, [pc, #224]	; (8005108 <xPortStartScheduler+0x148>)
 8005028:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800502a:	4b38      	ldr	r3, [pc, #224]	; (800510c <xPortStartScheduler+0x14c>)
 800502c:	2207      	movs	r2, #7
 800502e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005030:	e009      	b.n	8005046 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <xPortStartScheduler+0x14c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3b01      	subs	r3, #1
 8005038:	4a34      	ldr	r2, [pc, #208]	; (800510c <xPortStartScheduler+0x14c>)
 800503a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d0ef      	beq.n	8005032 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8005052:	4b2e      	ldr	r3, [pc, #184]	; (800510c <xPortStartScheduler+0x14c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1c3 0307 	rsb	r3, r3, #7
 800505a:	2b04      	cmp	r3, #4
 800505c:	d009      	beq.n	8005072 <xPortStartScheduler+0xb2>
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e7fe      	b.n	8005070 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005072:	4b26      	ldr	r3, [pc, #152]	; (800510c <xPortStartScheduler+0x14c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1c3 0307 	rsb	r3, r3, #7
 800507a:	2b04      	cmp	r3, #4
 800507c:	d009      	beq.n	8005092 <xPortStartScheduler+0xd2>
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e7fe      	b.n	8005090 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005092:	4b1e      	ldr	r3, [pc, #120]	; (800510c <xPortStartScheduler+0x14c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <xPortStartScheduler+0x14c>)
 800509a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <xPortStartScheduler+0x14c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050a4:	4a19      	ldr	r2, [pc, #100]	; (800510c <xPortStartScheduler+0x14c>)
 80050a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <xPortStartScheduler+0x150>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a16      	ldr	r2, [pc, #88]	; (8005110 <xPortStartScheduler+0x150>)
 80050b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <xPortStartScheduler+0x150>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a13      	ldr	r2, [pc, #76]	; (8005110 <xPortStartScheduler+0x150>)
 80050c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050c8:	f000 f8d6 	bl	8005278 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <xPortStartScheduler+0x154>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050d2:	f000 f8f5 	bl	80052c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <xPortStartScheduler+0x158>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a0f      	ldr	r2, [pc, #60]	; (8005118 <xPortStartScheduler+0x158>)
 80050dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050e2:	f7ff ff59 	bl	8004f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050e6:	f7fe ff2b 	bl	8003f40 <vTaskSwitchContext>
	prvTaskExitError();
 80050ea:	f7ff ff17 	bl	8004f1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	e000ed00 	.word	0xe000ed00
 80050fc:	410fc271 	.word	0x410fc271
 8005100:	410fc270 	.word	0x410fc270
 8005104:	e000e400 	.word	0xe000e400
 8005108:	20000f14 	.word	0x20000f14
 800510c:	20000f18 	.word	0x20000f18
 8005110:	e000ed20 	.word	0xe000ed20
 8005114:	20000018 	.word	0x20000018
 8005118:	e000ef34 	.word	0xe000ef34

0800511c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005134:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <vPortEnterCritical+0x54>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	4a0d      	ldr	r2, [pc, #52]	; (8005170 <vPortEnterCritical+0x54>)
 800513c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <vPortEnterCritical+0x54>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10e      	bne.n	8005164 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <vPortEnterCritical+0x58>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <vPortEnterCritical+0x48>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	603b      	str	r3, [r7, #0]
 8005162:	e7fe      	b.n	8005162 <vPortEnterCritical+0x46>
	}
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	20000018 	.word	0x20000018
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <vPortExitCritical+0x4c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <vPortExitCritical+0x22>
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	e7fe      	b.n	8005198 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vPortExitCritical+0x4c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3b01      	subs	r3, #1
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <vPortExitCritical+0x4c>)
 80051a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <vPortExitCritical+0x4c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <vPortExitCritical+0x3e>
 80051ac:	2300      	movs	r3, #0
 80051ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000018 	.word	0x20000018
	...

080051d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051d0:	f3ef 8009 	mrs	r0, PSP
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <pxCurrentTCBConst>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f01e 0f10 	tst.w	lr, #16
 80051e0:	bf08      	it	eq
 80051e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	6010      	str	r0, [r2, #0]
 80051ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051f4:	f380 8811 	msr	BASEPRI, r0
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f7fe fe9e 	bl	8003f40 <vTaskSwitchContext>
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f380 8811 	msr	BASEPRI, r0
 800520c:	bc09      	pop	{r0, r3}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005216:	f01e 0f10 	tst.w	lr, #16
 800521a:	bf08      	it	eq
 800521c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005220:	f380 8809 	msr	PSP, r0
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst>:
 8005230:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005250:	f7fe fd8c 	bl	8003d6c <xTaskIncrementTick>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <xPortSysTickHandler+0x3c>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	2300      	movs	r3, #0
 8005264:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	e000ed04 	.word	0xe000ed04

08005278 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <vPortSetupTimerInterrupt+0x34>)
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortSetupTimerInterrupt+0x38>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <vPortSetupTimerInterrupt+0x3c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <vPortSetupTimerInterrupt+0x40>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	099b      	lsrs	r3, r3, #6
 8005294:	4a09      	ldr	r2, [pc, #36]	; (80052bc <vPortSetupTimerInterrupt+0x44>)
 8005296:	3b01      	subs	r3, #1
 8005298:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800529a:	4b04      	ldr	r3, [pc, #16]	; (80052ac <vPortSetupTimerInterrupt+0x34>)
 800529c:	2207      	movs	r2, #7
 800529e:	601a      	str	r2, [r3, #0]
}
 80052a0:	bf00      	nop
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000e010 	.word	0xe000e010
 80052b0:	e000e018 	.word	0xe000e018
 80052b4:	20000000 	.word	0x20000000
 80052b8:	10624dd3 	.word	0x10624dd3
 80052bc:	e000e014 	.word	0xe000e014

080052c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052d0 <vPortEnableVFP+0x10>
 80052c4:	6801      	ldr	r1, [r0, #0]
 80052c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ca:	6001      	str	r1, [r0, #0]
 80052cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052ce:	bf00      	nop
 80052d0:	e000ed88 	.word	0xe000ed88

080052d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052da:	f3ef 8305 	mrs	r3, IPSR
 80052de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d913      	bls.n	800530e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052e6:	4a16      	ldr	r2, [pc, #88]	; (8005340 <vPortValidateInterruptPriority+0x6c>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052f0:	4b14      	ldr	r3, [pc, #80]	; (8005344 <vPortValidateInterruptPriority+0x70>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	7afa      	ldrb	r2, [r7, #11]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d209      	bcs.n	800530e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	e7fe      	b.n	800530c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <vPortValidateInterruptPriority+0x74>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <vPortValidateInterruptPriority+0x78>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d909      	bls.n	8005332 <vPortValidateInterruptPriority+0x5e>
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	e7fe      	b.n	8005330 <vPortValidateInterruptPriority+0x5c>
	}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e3f0 	.word	0xe000e3f0
 8005344:	20000f14 	.word	0x20000f14
 8005348:	e000ed0c 	.word	0xe000ed0c
 800534c:	20000f18 	.word	0x20000f18

08005350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800535c:	f7fe fc38 	bl	8003bd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005360:	4b5f      	ldr	r3, [pc, #380]	; (80054e0 <pvPortMalloc+0x190>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005368:	f000 f924 	bl	80055b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800536c:	4b5d      	ldr	r3, [pc, #372]	; (80054e4 <pvPortMalloc+0x194>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 808c 	bne.w	8005492 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01c      	beq.n	80053ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005380:	2208      	movs	r2, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4413      	add	r3, r2
 8005386:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	2b00      	cmp	r3, #0
 8005390:	d013      	beq.n	80053ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f023 0307 	bic.w	r3, r3, #7
 8005398:	3308      	adds	r3, #8
 800539a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <pvPortMalloc+0x6a>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	e7fe      	b.n	80053b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d068      	beq.n	8005492 <pvPortMalloc+0x142>
 80053c0:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <pvPortMalloc+0x198>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d863      	bhi.n	8005492 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ca:	4b48      	ldr	r3, [pc, #288]	; (80054ec <pvPortMalloc+0x19c>)
 80053cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053ce:	4b47      	ldr	r3, [pc, #284]	; (80054ec <pvPortMalloc+0x19c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053d4:	e004      	b.n	80053e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d903      	bls.n	80053f2 <pvPortMalloc+0xa2>
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f1      	bne.n	80053d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053f2:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <pvPortMalloc+0x190>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d04a      	beq.n	8005492 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2208      	movs	r2, #8
 8005402:	4413      	add	r3, r2
 8005404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	2308      	movs	r3, #8
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	429a      	cmp	r2, r3
 800541c:	d91e      	bls.n	800545c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <pvPortMalloc+0xf4>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e7fe      	b.n	8005442 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	1ad2      	subs	r2, r2, r3
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005456:	69b8      	ldr	r0, [r7, #24]
 8005458:	f000 f90e 	bl	8005678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800545c:	4b22      	ldr	r3, [pc, #136]	; (80054e8 <pvPortMalloc+0x198>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <pvPortMalloc+0x198>)
 8005468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800546a:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <pvPortMalloc+0x198>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <pvPortMalloc+0x1a0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d203      	bcs.n	800547e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005476:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <pvPortMalloc+0x198>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1d      	ldr	r2, [pc, #116]	; (80054f0 <pvPortMalloc+0x1a0>)
 800547c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <pvPortMalloc+0x194>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	431a      	orrs	r2, r3
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d006      	beq.n	80054a6 <pvPortMalloc+0x156>
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	4619      	mov	r1, r3
 800549e:	2094      	movs	r0, #148	; 0x94
 80054a0:	f7fb fd10 	bl	8000ec4 <vTraceStoreMemMangEvent>
 80054a4:	e005      	b.n	80054b2 <pvPortMalloc+0x162>
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4619      	mov	r1, r3
 80054ac:	20e8      	movs	r0, #232	; 0xe8
 80054ae:	f7fb fd09 	bl	8000ec4 <vTraceStoreMemMangEvent>
	}
	( void ) xTaskResumeAll();
 80054b2:	f7fe fb9b 	bl	8003bec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <pvPortMalloc+0x184>
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e7fe      	b.n	80054d2 <pvPortMalloc+0x182>
	return pvReturn;
 80054d4:	69fb      	ldr	r3, [r7, #28]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3728      	adds	r7, #40	; 0x28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20004b24 	.word	0x20004b24
 80054e4:	20004b30 	.word	0x20004b30
 80054e8:	20004b28 	.word	0x20004b28
 80054ec:	20004b1c 	.word	0x20004b1c
 80054f0:	20004b2c 	.word	0x20004b2c

080054f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d04e      	beq.n	80055a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005506:	2308      	movs	r3, #8
 8005508:	425b      	negs	r3, r3
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b24      	ldr	r3, [pc, #144]	; (80055ac <vPortFree+0xb8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <vPortFree+0x42>
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e7fe      	b.n	8005534 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <vPortFree+0x5e>
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	e7fe      	b.n	8005550 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <vPortFree+0xb8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d021      	beq.n	80055a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d11d      	bne.n	80055a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <vPortFree+0xb8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005578:	f7fe fb2a 	bl	8003bd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <vPortFree+0xbc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4413      	add	r3, r2
 8005586:	4a0a      	ldr	r2, [pc, #40]	; (80055b0 <vPortFree+0xbc>)
 8005588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	425b      	negs	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	2096      	movs	r0, #150	; 0x96
 8005596:	f7fb fc95 	bl	8000ec4 <vTraceStoreMemMangEvent>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800559a:	6938      	ldr	r0, [r7, #16]
 800559c:	f000 f86c 	bl	8005678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055a0:	f7fe fb24 	bl	8003bec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20004b30 	.word	0x20004b30
 80055b0:	20004b28 	.word	0x20004b28

080055b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055c0:	4b27      	ldr	r3, [pc, #156]	; (8005660 <prvHeapInit+0xac>)
 80055c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3307      	adds	r3, #7
 80055d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0307 	bic.w	r3, r3, #7
 80055da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <prvHeapInit+0xac>)
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <prvHeapInit+0xb0>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <prvHeapInit+0xb0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	4413      	add	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005600:	2208      	movs	r2, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <prvHeapInit+0xb4>)
 8005614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <prvHeapInit+0xb4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <prvHeapInit+0xb4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <prvHeapInit+0xb4>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <prvHeapInit+0xb8>)
 8005642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a09      	ldr	r2, [pc, #36]	; (8005670 <prvHeapInit+0xbc>)
 800564a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <prvHeapInit+0xc0>)
 800564e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005652:	601a      	str	r2, [r3, #0]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000f1c 	.word	0x20000f1c
 8005664:	20004b1c 	.word	0x20004b1c
 8005668:	20004b24 	.word	0x20004b24
 800566c:	20004b2c 	.word	0x20004b2c
 8005670:	20004b28 	.word	0x20004b28
 8005674:	20004b30 	.word	0x20004b30

08005678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <prvInsertBlockIntoFreeList+0xac>)
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e002      	b.n	800568c <prvInsertBlockIntoFreeList+0x14>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d8f7      	bhi.n	8005686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	4413      	add	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d108      	bne.n	80056ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d118      	bne.n	8005700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <prvInsertBlockIntoFreeList+0xb0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d00d      	beq.n	80056f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	441a      	add	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e008      	b.n	8005708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <prvInsertBlockIntoFreeList+0xb0>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e003      	b.n	8005708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d002      	beq.n	8005716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20004b1c 	.word	0x20004b1c
 8005728:	20004b24 	.word	0x20004b24

0800572c <__errno>:
 800572c:	4b01      	ldr	r3, [pc, #4]	; (8005734 <__errno+0x8>)
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	2000001c 	.word	0x2000001c

08005738 <__libc_init_array>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4e0d      	ldr	r6, [pc, #52]	; (8005770 <__libc_init_array+0x38>)
 800573c:	4c0d      	ldr	r4, [pc, #52]	; (8005774 <__libc_init_array+0x3c>)
 800573e:	1ba4      	subs	r4, r4, r6
 8005740:	10a4      	asrs	r4, r4, #2
 8005742:	2500      	movs	r5, #0
 8005744:	42a5      	cmp	r5, r4
 8005746:	d109      	bne.n	800575c <__libc_init_array+0x24>
 8005748:	4e0b      	ldr	r6, [pc, #44]	; (8005778 <__libc_init_array+0x40>)
 800574a:	4c0c      	ldr	r4, [pc, #48]	; (800577c <__libc_init_array+0x44>)
 800574c:	f000 fc94 	bl	8006078 <_init>
 8005750:	1ba4      	subs	r4, r4, r6
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	2500      	movs	r5, #0
 8005756:	42a5      	cmp	r5, r4
 8005758:	d105      	bne.n	8005766 <__libc_init_array+0x2e>
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005760:	4798      	blx	r3
 8005762:	3501      	adds	r5, #1
 8005764:	e7ee      	b.n	8005744 <__libc_init_array+0xc>
 8005766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800576a:	4798      	blx	r3
 800576c:	3501      	adds	r5, #1
 800576e:	e7f2      	b.n	8005756 <__libc_init_array+0x1e>
 8005770:	080075d0 	.word	0x080075d0
 8005774:	080075d0 	.word	0x080075d0
 8005778:	080075d0 	.word	0x080075d0
 800577c:	080075d4 	.word	0x080075d4

08005780 <memcpy>:
 8005780:	b510      	push	{r4, lr}
 8005782:	1e43      	subs	r3, r0, #1
 8005784:	440a      	add	r2, r1
 8005786:	4291      	cmp	r1, r2
 8005788:	d100      	bne.n	800578c <memcpy+0xc>
 800578a:	bd10      	pop	{r4, pc}
 800578c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005794:	e7f7      	b.n	8005786 <memcpy+0x6>

08005796 <memset>:
 8005796:	4402      	add	r2, r0
 8005798:	4603      	mov	r3, r0
 800579a:	4293      	cmp	r3, r2
 800579c:	d100      	bne.n	80057a0 <memset+0xa>
 800579e:	4770      	bx	lr
 80057a0:	f803 1b01 	strb.w	r1, [r3], #1
 80057a4:	e7f9      	b.n	800579a <memset+0x4>
	...

080057a8 <_puts_r>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	460e      	mov	r6, r1
 80057ac:	4605      	mov	r5, r0
 80057ae:	b118      	cbz	r0, 80057b8 <_puts_r+0x10>
 80057b0:	6983      	ldr	r3, [r0, #24]
 80057b2:	b90b      	cbnz	r3, 80057b8 <_puts_r+0x10>
 80057b4:	f000 fa0c 	bl	8005bd0 <__sinit>
 80057b8:	69ab      	ldr	r3, [r5, #24]
 80057ba:	68ac      	ldr	r4, [r5, #8]
 80057bc:	b913      	cbnz	r3, 80057c4 <_puts_r+0x1c>
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 fa06 	bl	8005bd0 <__sinit>
 80057c4:	4b23      	ldr	r3, [pc, #140]	; (8005854 <_puts_r+0xac>)
 80057c6:	429c      	cmp	r4, r3
 80057c8:	d117      	bne.n	80057fa <_puts_r+0x52>
 80057ca:	686c      	ldr	r4, [r5, #4]
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	071b      	lsls	r3, r3, #28
 80057d0:	d51d      	bpl.n	800580e <_puts_r+0x66>
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	b1db      	cbz	r3, 800580e <_puts_r+0x66>
 80057d6:	3e01      	subs	r6, #1
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057de:	3b01      	subs	r3, #1
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	b9e9      	cbnz	r1, 8005820 <_puts_r+0x78>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da2e      	bge.n	8005846 <_puts_r+0x9e>
 80057e8:	4622      	mov	r2, r4
 80057ea:	210a      	movs	r1, #10
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 f83f 	bl	8005870 <__swbuf_r>
 80057f2:	3001      	adds	r0, #1
 80057f4:	d011      	beq.n	800581a <_puts_r+0x72>
 80057f6:	200a      	movs	r0, #10
 80057f8:	e011      	b.n	800581e <_puts_r+0x76>
 80057fa:	4b17      	ldr	r3, [pc, #92]	; (8005858 <_puts_r+0xb0>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d101      	bne.n	8005804 <_puts_r+0x5c>
 8005800:	68ac      	ldr	r4, [r5, #8]
 8005802:	e7e3      	b.n	80057cc <_puts_r+0x24>
 8005804:	4b15      	ldr	r3, [pc, #84]	; (800585c <_puts_r+0xb4>)
 8005806:	429c      	cmp	r4, r3
 8005808:	bf08      	it	eq
 800580a:	68ec      	ldreq	r4, [r5, #12]
 800580c:	e7de      	b.n	80057cc <_puts_r+0x24>
 800580e:	4621      	mov	r1, r4
 8005810:	4628      	mov	r0, r5
 8005812:	f000 f87f 	bl	8005914 <__swsetup_r>
 8005816:	2800      	cmp	r0, #0
 8005818:	d0dd      	beq.n	80057d6 <_puts_r+0x2e>
 800581a:	f04f 30ff 	mov.w	r0, #4294967295
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	2b00      	cmp	r3, #0
 8005822:	da04      	bge.n	800582e <_puts_r+0x86>
 8005824:	69a2      	ldr	r2, [r4, #24]
 8005826:	429a      	cmp	r2, r3
 8005828:	dc06      	bgt.n	8005838 <_puts_r+0x90>
 800582a:	290a      	cmp	r1, #10
 800582c:	d004      	beq.n	8005838 <_puts_r+0x90>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	6022      	str	r2, [r4, #0]
 8005834:	7019      	strb	r1, [r3, #0]
 8005836:	e7cf      	b.n	80057d8 <_puts_r+0x30>
 8005838:	4622      	mov	r2, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f818 	bl	8005870 <__swbuf_r>
 8005840:	3001      	adds	r0, #1
 8005842:	d1c9      	bne.n	80057d8 <_puts_r+0x30>
 8005844:	e7e9      	b.n	800581a <_puts_r+0x72>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	200a      	movs	r0, #10
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	6022      	str	r2, [r4, #0]
 800584e:	7018      	strb	r0, [r3, #0]
 8005850:	e7e5      	b.n	800581e <_puts_r+0x76>
 8005852:	bf00      	nop
 8005854:	08007590 	.word	0x08007590
 8005858:	080075b0 	.word	0x080075b0
 800585c:	08007570 	.word	0x08007570

08005860 <puts>:
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <puts+0xc>)
 8005862:	4601      	mov	r1, r0
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f7ff bf9f 	b.w	80057a8 <_puts_r>
 800586a:	bf00      	nop
 800586c:	2000001c 	.word	0x2000001c

08005870 <__swbuf_r>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	460e      	mov	r6, r1
 8005874:	4614      	mov	r4, r2
 8005876:	4605      	mov	r5, r0
 8005878:	b118      	cbz	r0, 8005882 <__swbuf_r+0x12>
 800587a:	6983      	ldr	r3, [r0, #24]
 800587c:	b90b      	cbnz	r3, 8005882 <__swbuf_r+0x12>
 800587e:	f000 f9a7 	bl	8005bd0 <__sinit>
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <__swbuf_r+0x98>)
 8005884:	429c      	cmp	r4, r3
 8005886:	d12a      	bne.n	80058de <__swbuf_r+0x6e>
 8005888:	686c      	ldr	r4, [r5, #4]
 800588a:	69a3      	ldr	r3, [r4, #24]
 800588c:	60a3      	str	r3, [r4, #8]
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	071a      	lsls	r2, r3, #28
 8005892:	d52e      	bpl.n	80058f2 <__swbuf_r+0x82>
 8005894:	6923      	ldr	r3, [r4, #16]
 8005896:	b363      	cbz	r3, 80058f2 <__swbuf_r+0x82>
 8005898:	6923      	ldr	r3, [r4, #16]
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	1ac0      	subs	r0, r0, r3
 800589e:	6963      	ldr	r3, [r4, #20]
 80058a0:	b2f6      	uxtb	r6, r6
 80058a2:	4283      	cmp	r3, r0
 80058a4:	4637      	mov	r7, r6
 80058a6:	dc04      	bgt.n	80058b2 <__swbuf_r+0x42>
 80058a8:	4621      	mov	r1, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 f926 	bl	8005afc <_fflush_r>
 80058b0:	bb28      	cbnz	r0, 80058fe <__swbuf_r+0x8e>
 80058b2:	68a3      	ldr	r3, [r4, #8]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	6022      	str	r2, [r4, #0]
 80058be:	701e      	strb	r6, [r3, #0]
 80058c0:	6963      	ldr	r3, [r4, #20]
 80058c2:	3001      	adds	r0, #1
 80058c4:	4283      	cmp	r3, r0
 80058c6:	d004      	beq.n	80058d2 <__swbuf_r+0x62>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	07db      	lsls	r3, r3, #31
 80058cc:	d519      	bpl.n	8005902 <__swbuf_r+0x92>
 80058ce:	2e0a      	cmp	r6, #10
 80058d0:	d117      	bne.n	8005902 <__swbuf_r+0x92>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 f911 	bl	8005afc <_fflush_r>
 80058da:	b190      	cbz	r0, 8005902 <__swbuf_r+0x92>
 80058dc:	e00f      	b.n	80058fe <__swbuf_r+0x8e>
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <__swbuf_r+0x9c>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d101      	bne.n	80058e8 <__swbuf_r+0x78>
 80058e4:	68ac      	ldr	r4, [r5, #8]
 80058e6:	e7d0      	b.n	800588a <__swbuf_r+0x1a>
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <__swbuf_r+0xa0>)
 80058ea:	429c      	cmp	r4, r3
 80058ec:	bf08      	it	eq
 80058ee:	68ec      	ldreq	r4, [r5, #12]
 80058f0:	e7cb      	b.n	800588a <__swbuf_r+0x1a>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4628      	mov	r0, r5
 80058f6:	f000 f80d 	bl	8005914 <__swsetup_r>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d0cc      	beq.n	8005898 <__swbuf_r+0x28>
 80058fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005902:	4638      	mov	r0, r7
 8005904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005906:	bf00      	nop
 8005908:	08007590 	.word	0x08007590
 800590c:	080075b0 	.word	0x080075b0
 8005910:	08007570 	.word	0x08007570

08005914 <__swsetup_r>:
 8005914:	4b32      	ldr	r3, [pc, #200]	; (80059e0 <__swsetup_r+0xcc>)
 8005916:	b570      	push	{r4, r5, r6, lr}
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	4606      	mov	r6, r0
 800591c:	460c      	mov	r4, r1
 800591e:	b125      	cbz	r5, 800592a <__swsetup_r+0x16>
 8005920:	69ab      	ldr	r3, [r5, #24]
 8005922:	b913      	cbnz	r3, 800592a <__swsetup_r+0x16>
 8005924:	4628      	mov	r0, r5
 8005926:	f000 f953 	bl	8005bd0 <__sinit>
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <__swsetup_r+0xd0>)
 800592c:	429c      	cmp	r4, r3
 800592e:	d10f      	bne.n	8005950 <__swsetup_r+0x3c>
 8005930:	686c      	ldr	r4, [r5, #4]
 8005932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005936:	b29a      	uxth	r2, r3
 8005938:	0715      	lsls	r5, r2, #28
 800593a:	d42c      	bmi.n	8005996 <__swsetup_r+0x82>
 800593c:	06d0      	lsls	r0, r2, #27
 800593e:	d411      	bmi.n	8005964 <__swsetup_r+0x50>
 8005940:	2209      	movs	r2, #9
 8005942:	6032      	str	r2, [r6, #0]
 8005944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	f04f 30ff 	mov.w	r0, #4294967295
 800594e:	e03e      	b.n	80059ce <__swsetup_r+0xba>
 8005950:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <__swsetup_r+0xd4>)
 8005952:	429c      	cmp	r4, r3
 8005954:	d101      	bne.n	800595a <__swsetup_r+0x46>
 8005956:	68ac      	ldr	r4, [r5, #8]
 8005958:	e7eb      	b.n	8005932 <__swsetup_r+0x1e>
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <__swsetup_r+0xd8>)
 800595c:	429c      	cmp	r4, r3
 800595e:	bf08      	it	eq
 8005960:	68ec      	ldreq	r4, [r5, #12]
 8005962:	e7e6      	b.n	8005932 <__swsetup_r+0x1e>
 8005964:	0751      	lsls	r1, r2, #29
 8005966:	d512      	bpl.n	800598e <__swsetup_r+0x7a>
 8005968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800596a:	b141      	cbz	r1, 800597e <__swsetup_r+0x6a>
 800596c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005970:	4299      	cmp	r1, r3
 8005972:	d002      	beq.n	800597a <__swsetup_r+0x66>
 8005974:	4630      	mov	r0, r6
 8005976:	f000 fa19 	bl	8005dac <_free_r>
 800597a:	2300      	movs	r3, #0
 800597c:	6363      	str	r3, [r4, #52]	; 0x34
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	2300      	movs	r3, #0
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f043 0308 	orr.w	r3, r3, #8
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	b94b      	cbnz	r3, 80059ae <__swsetup_r+0x9a>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a4:	d003      	beq.n	80059ae <__swsetup_r+0x9a>
 80059a6:	4621      	mov	r1, r4
 80059a8:	4630      	mov	r0, r6
 80059aa:	f000 f9bf 	bl	8005d2c <__smakebuf_r>
 80059ae:	89a2      	ldrh	r2, [r4, #12]
 80059b0:	f012 0301 	ands.w	r3, r2, #1
 80059b4:	d00c      	beq.n	80059d0 <__swsetup_r+0xbc>
 80059b6:	2300      	movs	r3, #0
 80059b8:	60a3      	str	r3, [r4, #8]
 80059ba:	6963      	ldr	r3, [r4, #20]
 80059bc:	425b      	negs	r3, r3
 80059be:	61a3      	str	r3, [r4, #24]
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	b953      	cbnz	r3, 80059da <__swsetup_r+0xc6>
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80059cc:	d1ba      	bne.n	8005944 <__swsetup_r+0x30>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	0792      	lsls	r2, r2, #30
 80059d2:	bf58      	it	pl
 80059d4:	6963      	ldrpl	r3, [r4, #20]
 80059d6:	60a3      	str	r3, [r4, #8]
 80059d8:	e7f2      	b.n	80059c0 <__swsetup_r+0xac>
 80059da:	2000      	movs	r0, #0
 80059dc:	e7f7      	b.n	80059ce <__swsetup_r+0xba>
 80059de:	bf00      	nop
 80059e0:	2000001c 	.word	0x2000001c
 80059e4:	08007590 	.word	0x08007590
 80059e8:	080075b0 	.word	0x080075b0
 80059ec:	08007570 	.word	0x08007570

080059f0 <__sflush_r>:
 80059f0:	898a      	ldrh	r2, [r1, #12]
 80059f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	4605      	mov	r5, r0
 80059f8:	0710      	lsls	r0, r2, #28
 80059fa:	460c      	mov	r4, r1
 80059fc:	d458      	bmi.n	8005ab0 <__sflush_r+0xc0>
 80059fe:	684b      	ldr	r3, [r1, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dc05      	bgt.n	8005a10 <__sflush_r+0x20>
 8005a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	dc02      	bgt.n	8005a10 <__sflush_r+0x20>
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a12:	2e00      	cmp	r6, #0
 8005a14:	d0f9      	beq.n	8005a0a <__sflush_r+0x1a>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a1c:	682f      	ldr	r7, [r5, #0]
 8005a1e:	6a21      	ldr	r1, [r4, #32]
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	d032      	beq.n	8005a8a <__sflush_r+0x9a>
 8005a24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	075a      	lsls	r2, r3, #29
 8005a2a:	d505      	bpl.n	8005a38 <__sflush_r+0x48>
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	1ac0      	subs	r0, r0, r3
 8005a30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a32:	b10b      	cbz	r3, 8005a38 <__sflush_r+0x48>
 8005a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a36:	1ac0      	subs	r0, r0, r3
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a3e:	6a21      	ldr	r1, [r4, #32]
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b0      	blx	r6
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	d106      	bne.n	8005a58 <__sflush_r+0x68>
 8005a4a:	6829      	ldr	r1, [r5, #0]
 8005a4c:	291d      	cmp	r1, #29
 8005a4e:	d848      	bhi.n	8005ae2 <__sflush_r+0xf2>
 8005a50:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <__sflush_r+0x108>)
 8005a52:	40ca      	lsrs	r2, r1
 8005a54:	07d6      	lsls	r6, r2, #31
 8005a56:	d544      	bpl.n	8005ae2 <__sflush_r+0xf2>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	6062      	str	r2, [r4, #4]
 8005a5c:	04d9      	lsls	r1, r3, #19
 8005a5e:	6922      	ldr	r2, [r4, #16]
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	d504      	bpl.n	8005a6e <__sflush_r+0x7e>
 8005a64:	1c42      	adds	r2, r0, #1
 8005a66:	d101      	bne.n	8005a6c <__sflush_r+0x7c>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b903      	cbnz	r3, 8005a6e <__sflush_r+0x7e>
 8005a6c:	6560      	str	r0, [r4, #84]	; 0x54
 8005a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a70:	602f      	str	r7, [r5, #0]
 8005a72:	2900      	cmp	r1, #0
 8005a74:	d0c9      	beq.n	8005a0a <__sflush_r+0x1a>
 8005a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	d002      	beq.n	8005a84 <__sflush_r+0x94>
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f000 f994 	bl	8005dac <_free_r>
 8005a84:	2000      	movs	r0, #0
 8005a86:	6360      	str	r0, [r4, #52]	; 0x34
 8005a88:	e7c0      	b.n	8005a0c <__sflush_r+0x1c>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b0      	blx	r6
 8005a90:	1c41      	adds	r1, r0, #1
 8005a92:	d1c8      	bne.n	8005a26 <__sflush_r+0x36>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0c5      	beq.n	8005a26 <__sflush_r+0x36>
 8005a9a:	2b1d      	cmp	r3, #29
 8005a9c:	d001      	beq.n	8005aa2 <__sflush_r+0xb2>
 8005a9e:	2b16      	cmp	r3, #22
 8005aa0:	d101      	bne.n	8005aa6 <__sflush_r+0xb6>
 8005aa2:	602f      	str	r7, [r5, #0]
 8005aa4:	e7b1      	b.n	8005a0a <__sflush_r+0x1a>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	e7ad      	b.n	8005a0c <__sflush_r+0x1c>
 8005ab0:	690f      	ldr	r7, [r1, #16]
 8005ab2:	2f00      	cmp	r7, #0
 8005ab4:	d0a9      	beq.n	8005a0a <__sflush_r+0x1a>
 8005ab6:	0793      	lsls	r3, r2, #30
 8005ab8:	680e      	ldr	r6, [r1, #0]
 8005aba:	bf08      	it	eq
 8005abc:	694b      	ldreq	r3, [r1, #20]
 8005abe:	600f      	str	r7, [r1, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	2300      	movne	r3, #0
 8005ac4:	eba6 0807 	sub.w	r8, r6, r7
 8005ac8:	608b      	str	r3, [r1, #8]
 8005aca:	f1b8 0f00 	cmp.w	r8, #0
 8005ace:	dd9c      	ble.n	8005a0a <__sflush_r+0x1a>
 8005ad0:	4643      	mov	r3, r8
 8005ad2:	463a      	mov	r2, r7
 8005ad4:	6a21      	ldr	r1, [r4, #32]
 8005ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b0      	blx	r6
 8005adc:	2800      	cmp	r0, #0
 8005ade:	dc06      	bgt.n	8005aee <__sflush_r+0xfe>
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	e78e      	b.n	8005a0c <__sflush_r+0x1c>
 8005aee:	4407      	add	r7, r0
 8005af0:	eba8 0800 	sub.w	r8, r8, r0
 8005af4:	e7e9      	b.n	8005aca <__sflush_r+0xda>
 8005af6:	bf00      	nop
 8005af8:	20400001 	.word	0x20400001

08005afc <_fflush_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	4605      	mov	r5, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b1db      	cbz	r3, 8005b3e <_fflush_r+0x42>
 8005b06:	b118      	cbz	r0, 8005b10 <_fflush_r+0x14>
 8005b08:	6983      	ldr	r3, [r0, #24]
 8005b0a:	b90b      	cbnz	r3, 8005b10 <_fflush_r+0x14>
 8005b0c:	f000 f860 	bl	8005bd0 <__sinit>
 8005b10:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <_fflush_r+0x48>)
 8005b12:	429c      	cmp	r4, r3
 8005b14:	d109      	bne.n	8005b2a <_fflush_r+0x2e>
 8005b16:	686c      	ldr	r4, [r5, #4]
 8005b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b1c:	b17b      	cbz	r3, 8005b3e <_fflush_r+0x42>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b26:	f7ff bf63 	b.w	80059f0 <__sflush_r>
 8005b2a:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <_fflush_r+0x4c>)
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	d101      	bne.n	8005b34 <_fflush_r+0x38>
 8005b30:	68ac      	ldr	r4, [r5, #8]
 8005b32:	e7f1      	b.n	8005b18 <_fflush_r+0x1c>
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <_fflush_r+0x50>)
 8005b36:	429c      	cmp	r4, r3
 8005b38:	bf08      	it	eq
 8005b3a:	68ec      	ldreq	r4, [r5, #12]
 8005b3c:	e7ec      	b.n	8005b18 <_fflush_r+0x1c>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
 8005b42:	bf00      	nop
 8005b44:	08007590 	.word	0x08007590
 8005b48:	080075b0 	.word	0x080075b0
 8005b4c:	08007570 	.word	0x08007570

08005b50 <std>:
 8005b50:	2300      	movs	r3, #0
 8005b52:	b510      	push	{r4, lr}
 8005b54:	4604      	mov	r4, r0
 8005b56:	e9c0 3300 	strd	r3, r3, [r0]
 8005b5a:	6083      	str	r3, [r0, #8]
 8005b5c:	8181      	strh	r1, [r0, #12]
 8005b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b60:	81c2      	strh	r2, [r0, #14]
 8005b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b66:	6183      	str	r3, [r0, #24]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	305c      	adds	r0, #92	; 0x5c
 8005b6e:	f7ff fe12 	bl	8005796 <memset>
 8005b72:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <std+0x38>)
 8005b74:	6263      	str	r3, [r4, #36]	; 0x24
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <std+0x3c>)
 8005b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <std+0x40>)
 8005b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <std+0x44>)
 8005b80:	6224      	str	r4, [r4, #32]
 8005b82:	6323      	str	r3, [r4, #48]	; 0x30
 8005b84:	bd10      	pop	{r4, pc}
 8005b86:	bf00      	nop
 8005b88:	08005f1d 	.word	0x08005f1d
 8005b8c:	08005f3f 	.word	0x08005f3f
 8005b90:	08005f77 	.word	0x08005f77
 8005b94:	08005f9b 	.word	0x08005f9b

08005b98 <_cleanup_r>:
 8005b98:	4901      	ldr	r1, [pc, #4]	; (8005ba0 <_cleanup_r+0x8>)
 8005b9a:	f000 b885 	b.w	8005ca8 <_fwalk_reent>
 8005b9e:	bf00      	nop
 8005ba0:	08005afd 	.word	0x08005afd

08005ba4 <__sfmoreglue>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	1e4a      	subs	r2, r1, #1
 8005ba8:	2568      	movs	r5, #104	; 0x68
 8005baa:	4355      	muls	r5, r2
 8005bac:	460e      	mov	r6, r1
 8005bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bb2:	f000 f949 	bl	8005e48 <_malloc_r>
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	b140      	cbz	r0, 8005bcc <__sfmoreglue+0x28>
 8005bba:	2100      	movs	r1, #0
 8005bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8005bc0:	300c      	adds	r0, #12
 8005bc2:	60a0      	str	r0, [r4, #8]
 8005bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bc8:	f7ff fde5 	bl	8005796 <memset>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	bd70      	pop	{r4, r5, r6, pc}

08005bd0 <__sinit>:
 8005bd0:	6983      	ldr	r3, [r0, #24]
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	bb33      	cbnz	r3, 8005c26 <__sinit+0x56>
 8005bd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005bdc:	6503      	str	r3, [r0, #80]	; 0x50
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <__sinit+0x58>)
 8005be0:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <__sinit+0x5c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6282      	str	r2, [r0, #40]	; 0x28
 8005be6:	4298      	cmp	r0, r3
 8005be8:	bf04      	itt	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	6183      	streq	r3, [r0, #24]
 8005bee:	f000 f81f 	bl	8005c30 <__sfp>
 8005bf2:	6060      	str	r0, [r4, #4]
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f000 f81b 	bl	8005c30 <__sfp>
 8005bfa:	60a0      	str	r0, [r4, #8]
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 f817 	bl	8005c30 <__sfp>
 8005c02:	2200      	movs	r2, #0
 8005c04:	60e0      	str	r0, [r4, #12]
 8005c06:	2104      	movs	r1, #4
 8005c08:	6860      	ldr	r0, [r4, #4]
 8005c0a:	f7ff ffa1 	bl	8005b50 <std>
 8005c0e:	2201      	movs	r2, #1
 8005c10:	2109      	movs	r1, #9
 8005c12:	68a0      	ldr	r0, [r4, #8]
 8005c14:	f7ff ff9c 	bl	8005b50 <std>
 8005c18:	2202      	movs	r2, #2
 8005c1a:	2112      	movs	r1, #18
 8005c1c:	68e0      	ldr	r0, [r4, #12]
 8005c1e:	f7ff ff97 	bl	8005b50 <std>
 8005c22:	2301      	movs	r3, #1
 8005c24:	61a3      	str	r3, [r4, #24]
 8005c26:	bd10      	pop	{r4, pc}
 8005c28:	0800756c 	.word	0x0800756c
 8005c2c:	08005b99 	.word	0x08005b99

08005c30 <__sfp>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <__sfp+0x70>)
 8005c34:	681e      	ldr	r6, [r3, #0]
 8005c36:	69b3      	ldr	r3, [r6, #24]
 8005c38:	4607      	mov	r7, r0
 8005c3a:	b913      	cbnz	r3, 8005c42 <__sfp+0x12>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7ff ffc7 	bl	8005bd0 <__sinit>
 8005c42:	3648      	adds	r6, #72	; 0x48
 8005c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	d503      	bpl.n	8005c54 <__sfp+0x24>
 8005c4c:	6833      	ldr	r3, [r6, #0]
 8005c4e:	b133      	cbz	r3, 8005c5e <__sfp+0x2e>
 8005c50:	6836      	ldr	r6, [r6, #0]
 8005c52:	e7f7      	b.n	8005c44 <__sfp+0x14>
 8005c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c58:	b16d      	cbz	r5, 8005c76 <__sfp+0x46>
 8005c5a:	3468      	adds	r4, #104	; 0x68
 8005c5c:	e7f4      	b.n	8005c48 <__sfp+0x18>
 8005c5e:	2104      	movs	r1, #4
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ff9f 	bl	8005ba4 <__sfmoreglue>
 8005c66:	6030      	str	r0, [r6, #0]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d1f1      	bne.n	8005c50 <__sfp+0x20>
 8005c6c:	230c      	movs	r3, #12
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	4604      	mov	r4, r0
 8005c72:	4620      	mov	r0, r4
 8005c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c76:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <__sfp+0x74>)
 8005c78:	6665      	str	r5, [r4, #100]	; 0x64
 8005c7a:	e9c4 5500 	strd	r5, r5, [r4]
 8005c7e:	60a5      	str	r5, [r4, #8]
 8005c80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005c84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005c88:	2208      	movs	r2, #8
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c90:	f7ff fd81 	bl	8005796 <memset>
 8005c94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c9c:	e7e9      	b.n	8005c72 <__sfp+0x42>
 8005c9e:	bf00      	nop
 8005ca0:	0800756c 	.word	0x0800756c
 8005ca4:	ffff0001 	.word	0xffff0001

08005ca8 <_fwalk_reent>:
 8005ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cac:	4680      	mov	r8, r0
 8005cae:	4689      	mov	r9, r1
 8005cb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	b914      	cbnz	r4, 8005cbe <_fwalk_reent+0x16>
 8005cb8:	4630      	mov	r0, r6
 8005cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005cc2:	3f01      	subs	r7, #1
 8005cc4:	d501      	bpl.n	8005cca <_fwalk_reent+0x22>
 8005cc6:	6824      	ldr	r4, [r4, #0]
 8005cc8:	e7f5      	b.n	8005cb6 <_fwalk_reent+0xe>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d907      	bls.n	8005ce0 <_fwalk_reent+0x38>
 8005cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	d003      	beq.n	8005ce0 <_fwalk_reent+0x38>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4640      	mov	r0, r8
 8005cdc:	47c8      	blx	r9
 8005cde:	4306      	orrs	r6, r0
 8005ce0:	3568      	adds	r5, #104	; 0x68
 8005ce2:	e7ee      	b.n	8005cc2 <_fwalk_reent+0x1a>

08005ce4 <__swhatbuf_r>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	460e      	mov	r6, r1
 8005ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cec:	2900      	cmp	r1, #0
 8005cee:	b096      	sub	sp, #88	; 0x58
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	da07      	bge.n	8005d06 <__swhatbuf_r+0x22>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	89b3      	ldrh	r3, [r6, #12]
 8005cfc:	061a      	lsls	r2, r3, #24
 8005cfe:	d410      	bmi.n	8005d22 <__swhatbuf_r+0x3e>
 8005d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d04:	e00e      	b.n	8005d24 <__swhatbuf_r+0x40>
 8005d06:	466a      	mov	r2, sp
 8005d08:	f000 f96e 	bl	8005fe8 <_fstat_r>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	dbf2      	blt.n	8005cf6 <__swhatbuf_r+0x12>
 8005d10:	9a01      	ldr	r2, [sp, #4]
 8005d12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d1a:	425a      	negs	r2, r3
 8005d1c:	415a      	adcs	r2, r3
 8005d1e:	602a      	str	r2, [r5, #0]
 8005d20:	e7ee      	b.n	8005d00 <__swhatbuf_r+0x1c>
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	2000      	movs	r0, #0
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	b016      	add	sp, #88	; 0x58
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}

08005d2c <__smakebuf_r>:
 8005d2c:	898b      	ldrh	r3, [r1, #12]
 8005d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d30:	079d      	lsls	r5, r3, #30
 8005d32:	4606      	mov	r6, r0
 8005d34:	460c      	mov	r4, r1
 8005d36:	d507      	bpl.n	8005d48 <__smakebuf_r+0x1c>
 8005d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	6123      	str	r3, [r4, #16]
 8005d40:	2301      	movs	r3, #1
 8005d42:	6163      	str	r3, [r4, #20]
 8005d44:	b002      	add	sp, #8
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	ab01      	add	r3, sp, #4
 8005d4a:	466a      	mov	r2, sp
 8005d4c:	f7ff ffca 	bl	8005ce4 <__swhatbuf_r>
 8005d50:	9900      	ldr	r1, [sp, #0]
 8005d52:	4605      	mov	r5, r0
 8005d54:	4630      	mov	r0, r6
 8005d56:	f000 f877 	bl	8005e48 <_malloc_r>
 8005d5a:	b948      	cbnz	r0, 8005d70 <__smakebuf_r+0x44>
 8005d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d60:	059a      	lsls	r2, r3, #22
 8005d62:	d4ef      	bmi.n	8005d44 <__smakebuf_r+0x18>
 8005d64:	f023 0303 	bic.w	r3, r3, #3
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	e7e3      	b.n	8005d38 <__smakebuf_r+0xc>
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <__smakebuf_r+0x7c>)
 8005d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	6020      	str	r0, [r4, #0]
 8005d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	9b00      	ldr	r3, [sp, #0]
 8005d80:	6163      	str	r3, [r4, #20]
 8005d82:	9b01      	ldr	r3, [sp, #4]
 8005d84:	6120      	str	r0, [r4, #16]
 8005d86:	b15b      	cbz	r3, 8005da0 <__smakebuf_r+0x74>
 8005d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f000 f93d 	bl	800600c <_isatty_r>
 8005d92:	b128      	cbz	r0, 8005da0 <__smakebuf_r+0x74>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f023 0303 	bic.w	r3, r3, #3
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	89a3      	ldrh	r3, [r4, #12]
 8005da2:	431d      	orrs	r5, r3
 8005da4:	81a5      	strh	r5, [r4, #12]
 8005da6:	e7cd      	b.n	8005d44 <__smakebuf_r+0x18>
 8005da8:	08005b99 	.word	0x08005b99

08005dac <_free_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4605      	mov	r5, r0
 8005db0:	2900      	cmp	r1, #0
 8005db2:	d045      	beq.n	8005e40 <_free_r+0x94>
 8005db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db8:	1f0c      	subs	r4, r1, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bfb8      	it	lt
 8005dbe:	18e4      	addlt	r4, r4, r3
 8005dc0:	f000 f946 	bl	8006050 <__malloc_lock>
 8005dc4:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <_free_r+0x98>)
 8005dc6:	6813      	ldr	r3, [r2, #0]
 8005dc8:	4610      	mov	r0, r2
 8005dca:	b933      	cbnz	r3, 8005dda <_free_r+0x2e>
 8005dcc:	6063      	str	r3, [r4, #4]
 8005dce:	6014      	str	r4, [r2, #0]
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd6:	f000 b93c 	b.w	8006052 <__malloc_unlock>
 8005dda:	42a3      	cmp	r3, r4
 8005ddc:	d90c      	bls.n	8005df8 <_free_r+0x4c>
 8005dde:	6821      	ldr	r1, [r4, #0]
 8005de0:	1862      	adds	r2, r4, r1
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bf04      	itt	eq
 8005de6:	681a      	ldreq	r2, [r3, #0]
 8005de8:	685b      	ldreq	r3, [r3, #4]
 8005dea:	6063      	str	r3, [r4, #4]
 8005dec:	bf04      	itt	eq
 8005dee:	1852      	addeq	r2, r2, r1
 8005df0:	6022      	streq	r2, [r4, #0]
 8005df2:	6004      	str	r4, [r0, #0]
 8005df4:	e7ec      	b.n	8005dd0 <_free_r+0x24>
 8005df6:	4613      	mov	r3, r2
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	b10a      	cbz	r2, 8005e00 <_free_r+0x54>
 8005dfc:	42a2      	cmp	r2, r4
 8005dfe:	d9fa      	bls.n	8005df6 <_free_r+0x4a>
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	1858      	adds	r0, r3, r1
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d10b      	bne.n	8005e20 <_free_r+0x74>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	4401      	add	r1, r0
 8005e0c:	1858      	adds	r0, r3, r1
 8005e0e:	4282      	cmp	r2, r0
 8005e10:	6019      	str	r1, [r3, #0]
 8005e12:	d1dd      	bne.n	8005dd0 <_free_r+0x24>
 8005e14:	6810      	ldr	r0, [r2, #0]
 8005e16:	6852      	ldr	r2, [r2, #4]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	4401      	add	r1, r0
 8005e1c:	6019      	str	r1, [r3, #0]
 8005e1e:	e7d7      	b.n	8005dd0 <_free_r+0x24>
 8005e20:	d902      	bls.n	8005e28 <_free_r+0x7c>
 8005e22:	230c      	movs	r3, #12
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	e7d3      	b.n	8005dd0 <_free_r+0x24>
 8005e28:	6820      	ldr	r0, [r4, #0]
 8005e2a:	1821      	adds	r1, r4, r0
 8005e2c:	428a      	cmp	r2, r1
 8005e2e:	bf04      	itt	eq
 8005e30:	6811      	ldreq	r1, [r2, #0]
 8005e32:	6852      	ldreq	r2, [r2, #4]
 8005e34:	6062      	str	r2, [r4, #4]
 8005e36:	bf04      	itt	eq
 8005e38:	1809      	addeq	r1, r1, r0
 8005e3a:	6021      	streq	r1, [r4, #0]
 8005e3c:	605c      	str	r4, [r3, #4]
 8005e3e:	e7c7      	b.n	8005dd0 <_free_r+0x24>
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	bf00      	nop
 8005e44:	20004b34 	.word	0x20004b34

08005e48 <_malloc_r>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	1ccd      	adds	r5, r1, #3
 8005e4c:	f025 0503 	bic.w	r5, r5, #3
 8005e50:	3508      	adds	r5, #8
 8005e52:	2d0c      	cmp	r5, #12
 8005e54:	bf38      	it	cc
 8005e56:	250c      	movcc	r5, #12
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	db01      	blt.n	8005e62 <_malloc_r+0x1a>
 8005e5e:	42a9      	cmp	r1, r5
 8005e60:	d903      	bls.n	8005e6a <_malloc_r+0x22>
 8005e62:	230c      	movs	r3, #12
 8005e64:	6033      	str	r3, [r6, #0]
 8005e66:	2000      	movs	r0, #0
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
 8005e6a:	f000 f8f1 	bl	8006050 <__malloc_lock>
 8005e6e:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <_malloc_r+0xac>)
 8005e70:	6814      	ldr	r4, [r2, #0]
 8005e72:	4621      	mov	r1, r4
 8005e74:	b991      	cbnz	r1, 8005e9c <_malloc_r+0x54>
 8005e76:	4c20      	ldr	r4, [pc, #128]	; (8005ef8 <_malloc_r+0xb0>)
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	b91b      	cbnz	r3, 8005e84 <_malloc_r+0x3c>
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f000 f83d 	bl	8005efc <_sbrk_r>
 8005e82:	6020      	str	r0, [r4, #0]
 8005e84:	4629      	mov	r1, r5
 8005e86:	4630      	mov	r0, r6
 8005e88:	f000 f838 	bl	8005efc <_sbrk_r>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d124      	bne.n	8005eda <_malloc_r+0x92>
 8005e90:	230c      	movs	r3, #12
 8005e92:	6033      	str	r3, [r6, #0]
 8005e94:	4630      	mov	r0, r6
 8005e96:	f000 f8dc 	bl	8006052 <__malloc_unlock>
 8005e9a:	e7e4      	b.n	8005e66 <_malloc_r+0x1e>
 8005e9c:	680b      	ldr	r3, [r1, #0]
 8005e9e:	1b5b      	subs	r3, r3, r5
 8005ea0:	d418      	bmi.n	8005ed4 <_malloc_r+0x8c>
 8005ea2:	2b0b      	cmp	r3, #11
 8005ea4:	d90f      	bls.n	8005ec6 <_malloc_r+0x7e>
 8005ea6:	600b      	str	r3, [r1, #0]
 8005ea8:	50cd      	str	r5, [r1, r3]
 8005eaa:	18cc      	adds	r4, r1, r3
 8005eac:	4630      	mov	r0, r6
 8005eae:	f000 f8d0 	bl	8006052 <__malloc_unlock>
 8005eb2:	f104 000b 	add.w	r0, r4, #11
 8005eb6:	1d23      	adds	r3, r4, #4
 8005eb8:	f020 0007 	bic.w	r0, r0, #7
 8005ebc:	1ac3      	subs	r3, r0, r3
 8005ebe:	d0d3      	beq.n	8005e68 <_malloc_r+0x20>
 8005ec0:	425a      	negs	r2, r3
 8005ec2:	50e2      	str	r2, [r4, r3]
 8005ec4:	e7d0      	b.n	8005e68 <_malloc_r+0x20>
 8005ec6:	428c      	cmp	r4, r1
 8005ec8:	684b      	ldr	r3, [r1, #4]
 8005eca:	bf16      	itet	ne
 8005ecc:	6063      	strne	r3, [r4, #4]
 8005ece:	6013      	streq	r3, [r2, #0]
 8005ed0:	460c      	movne	r4, r1
 8005ed2:	e7eb      	b.n	8005eac <_malloc_r+0x64>
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	6849      	ldr	r1, [r1, #4]
 8005ed8:	e7cc      	b.n	8005e74 <_malloc_r+0x2c>
 8005eda:	1cc4      	adds	r4, r0, #3
 8005edc:	f024 0403 	bic.w	r4, r4, #3
 8005ee0:	42a0      	cmp	r0, r4
 8005ee2:	d005      	beq.n	8005ef0 <_malloc_r+0xa8>
 8005ee4:	1a21      	subs	r1, r4, r0
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f000 f808 	bl	8005efc <_sbrk_r>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d0cf      	beq.n	8005e90 <_malloc_r+0x48>
 8005ef0:	6025      	str	r5, [r4, #0]
 8005ef2:	e7db      	b.n	8005eac <_malloc_r+0x64>
 8005ef4:	20004b34 	.word	0x20004b34
 8005ef8:	20004b38 	.word	0x20004b38

08005efc <_sbrk_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4c06      	ldr	r4, [pc, #24]	; (8005f18 <_sbrk_r+0x1c>)
 8005f00:	2300      	movs	r3, #0
 8005f02:	4605      	mov	r5, r0
 8005f04:	4608      	mov	r0, r1
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	f7fa fb4e 	bl	80005a8 <_sbrk>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d102      	bne.n	8005f16 <_sbrk_r+0x1a>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	b103      	cbz	r3, 8005f16 <_sbrk_r+0x1a>
 8005f14:	602b      	str	r3, [r5, #0]
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	2000649c 	.word	0x2000649c

08005f1c <__sread>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	460c      	mov	r4, r1
 8005f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f24:	f000 f896 	bl	8006054 <_read_r>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	bfab      	itete	ge
 8005f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f30:	181b      	addge	r3, r3, r0
 8005f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f36:	bfac      	ite	ge
 8005f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f3a:	81a3      	strhlt	r3, [r4, #12]
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <__swrite>:
 8005f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f42:	461f      	mov	r7, r3
 8005f44:	898b      	ldrh	r3, [r1, #12]
 8005f46:	05db      	lsls	r3, r3, #23
 8005f48:	4605      	mov	r5, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	d505      	bpl.n	8005f5c <__swrite+0x1e>
 8005f50:	2302      	movs	r3, #2
 8005f52:	2200      	movs	r2, #0
 8005f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f58:	f000 f868 	bl	800602c <_lseek_r>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	4632      	mov	r2, r6
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	f000 b817 	b.w	8005fa4 <_write_r>

08005f76 <__sseek>:
 8005f76:	b510      	push	{r4, lr}
 8005f78:	460c      	mov	r4, r1
 8005f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7e:	f000 f855 	bl	800602c <_lseek_r>
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	bf15      	itete	ne
 8005f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f92:	81a3      	strheq	r3, [r4, #12]
 8005f94:	bf18      	it	ne
 8005f96:	81a3      	strhne	r3, [r4, #12]
 8005f98:	bd10      	pop	{r4, pc}

08005f9a <__sclose>:
 8005f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9e:	f000 b813 	b.w	8005fc8 <_close_r>
	...

08005fa4 <_write_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4c07      	ldr	r4, [pc, #28]	; (8005fc4 <_write_r+0x20>)
 8005fa8:	4605      	mov	r5, r0
 8005faa:	4608      	mov	r0, r1
 8005fac:	4611      	mov	r1, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	6022      	str	r2, [r4, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fa f967 	bl	8000286 <_write>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_write_r+0x1e>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_write_r+0x1e>
 8005fc0:	602b      	str	r3, [r5, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	2000649c 	.word	0x2000649c

08005fc8 <_close_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4c06      	ldr	r4, [pc, #24]	; (8005fe4 <_close_r+0x1c>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4605      	mov	r5, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	f7fa fab4 	bl	8000540 <_close>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_close_r+0x1a>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_close_r+0x1a>
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	2000649c 	.word	0x2000649c

08005fe8 <_fstat_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4c07      	ldr	r4, [pc, #28]	; (8006008 <_fstat_r+0x20>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4605      	mov	r5, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	f7fa faaf 	bl	8000558 <_fstat>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	d102      	bne.n	8006004 <_fstat_r+0x1c>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	b103      	cbz	r3, 8006004 <_fstat_r+0x1c>
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	bd38      	pop	{r3, r4, r5, pc}
 8006006:	bf00      	nop
 8006008:	2000649c 	.word	0x2000649c

0800600c <_isatty_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4c06      	ldr	r4, [pc, #24]	; (8006028 <_isatty_r+0x1c>)
 8006010:	2300      	movs	r3, #0
 8006012:	4605      	mov	r5, r0
 8006014:	4608      	mov	r0, r1
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	f7fa faae 	bl	8000578 <_isatty>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_isatty_r+0x1a>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	b103      	cbz	r3, 8006026 <_isatty_r+0x1a>
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	2000649c 	.word	0x2000649c

0800602c <_lseek_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4c07      	ldr	r4, [pc, #28]	; (800604c <_lseek_r+0x20>)
 8006030:	4605      	mov	r5, r0
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	2200      	movs	r2, #0
 8006038:	6022      	str	r2, [r4, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	f7fa faa7 	bl	800058e <_lseek>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_lseek_r+0x1e>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	b103      	cbz	r3, 800604a <_lseek_r+0x1e>
 8006048:	602b      	str	r3, [r5, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	2000649c 	.word	0x2000649c

08006050 <__malloc_lock>:
 8006050:	4770      	bx	lr

08006052 <__malloc_unlock>:
 8006052:	4770      	bx	lr

08006054 <_read_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4c07      	ldr	r4, [pc, #28]	; (8006074 <_read_r+0x20>)
 8006058:	4605      	mov	r5, r0
 800605a:	4608      	mov	r0, r1
 800605c:	4611      	mov	r1, r2
 800605e:	2200      	movs	r2, #0
 8006060:	6022      	str	r2, [r4, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	f7fa fa4f 	bl	8000506 <_read>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_read_r+0x1e>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	b103      	cbz	r3, 8006072 <_read_r+0x1e>
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	2000649c 	.word	0x2000649c

08006078 <_init>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr

08006084 <_fini>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr
