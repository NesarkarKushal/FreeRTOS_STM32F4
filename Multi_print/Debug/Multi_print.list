
Multi_print.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b10  08003b10  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b10  08003b10  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b10  08003b10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004560  20000070  08003b88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045d0  08003b88  000245d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd7c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d02  00000000  00000000  0002be1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  0002db20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d0  00000000  00000000  0002e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021cd9  00000000  00000000  0002e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007cf2  00000000  00000000  00050681  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7a24  00000000  00000000  00058373  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fd97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c8  00000000  00000000  0011fe14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003a48 	.word	0x08003a48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003a48 	.word	0x08003a48

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	200000e0 	.word	0x200000e0

08000204 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <vApplicationGetTimerTaskMemory+0x2c>)
 8000214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <vApplicationGetTimerTaskMemory+0x30>)
 800021a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000222:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000224:	bf00      	nop
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	200002e0 	.word	0x200002e0
 8000234:	20000334 	.word	0x20000334

08000238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d013      	beq.n	8000278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00b      	beq.n	8000278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000260:	e000      	b.n	8000264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800026e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	b2d2      	uxtb	r2, r2
 8000276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000278:	687b      	ldr	r3, [r7, #4]
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <_write>:
void  vRedLedControllerTask(void *pvParameters);
//void  vOrangeLedControllerTask(void *pvParameters);
//void  vGreenLedControllerTask(void *pvParameters);

int _write(int file,char *ptr, int len)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0
 800028c:	60f8      	str	r0, [r7, #12]
 800028e:	60b9      	str	r1, [r7, #8]
 8000290:	607a      	str	r2, [r7, #4]
	int i=0;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e009      	b.n	80002b0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	60ba      	str	r2, [r7, #8]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ffc7 	bl	8000238 <ITM_SendChar>
	for(i=0;i<len;i++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf1      	blt.n	800029c <_write+0x16>
	return len;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <main>:

int main()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af02      	add	r7, sp, #8
	 GPIO_Init();
 80002ca:	f000 f85f 	bl	800038c <GPIO_Init>

	 xTaskCreate(vBlueLedControllerTask,
 80002ce:	2300      	movs	r3, #0
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2300      	movs	r3, #0
 80002d8:	2280      	movs	r2, #128	; 0x80
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <main+0x38>)
 80002dc:	4808      	ldr	r0, [pc, #32]	; (8000300 <main+0x3c>)
 80002de:	f001 f921 	bl	8001524 <xTaskCreate>
								NULL,
								1,
								NULL
								);

	xTaskCreate(vRedLedControllerTask,
 80002e2:	2300      	movs	r3, #0
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2302      	movs	r3, #2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2300      	movs	r3, #0
 80002ec:	2280      	movs	r2, #128	; 0x80
 80002ee:	4905      	ldr	r1, [pc, #20]	; (8000304 <main+0x40>)
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <main+0x44>)
 80002f2:	f001 f917 	bl	8001524 <xTaskCreate>
								);


*/

   vTaskStartScheduler();
 80002f6:	f001 fa7f 	bl	80017f8 <vTaskStartScheduler>

	 while(1){};
 80002fa:	e7fe      	b.n	80002fa <main+0x36>
 80002fc:	08003a60 	.word	0x08003a60
 8000300:	0800030d 	.word	0x0800030d
 8000304:	08003a74 	.word	0x08003a74
 8000308:	0800034d 	.word	0x0800034d

0800030c <vBlueLedControllerTask>:
}



void  vBlueLedControllerTask(void *pvParameters)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{
				printf("Blue\n");
 8000314:	480b      	ldr	r0, [pc, #44]	; (8000344 <vBlueLedControllerTask+0x38>)
 8000316:	f002 ff8b 	bl	8003230 <puts>
				HAL_GPIO_WritePin(GPIOD,BLUE,1);
 800031a:	2201      	movs	r2, #1
 800031c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000320:	4809      	ldr	r0, [pc, #36]	; (8000348 <vBlueLedControllerTask+0x3c>)
 8000322:	f000 fb07 	bl	8000934 <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 8000326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032a:	f001 fa31 	bl	8001790 <vTaskDelay>
				//for(i=0;i<100000;i++){}
				HAL_GPIO_WritePin(GPIOD,BLUE,0);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <vBlueLedControllerTask+0x3c>)
 8000336:	f000 fafd 	bl	8000934 <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 800033a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033e:	f001 fa27 	bl	8001790 <vTaskDelay>
				printf("Blue\n");
 8000342:	e7e7      	b.n	8000314 <vBlueLedControllerTask+0x8>
 8000344:	08003a88 	.word	0x08003a88
 8000348:	40020c00 	.word	0x40020c00

0800034c <vRedLedControllerTask>:
	}
}


void  vRedLedControllerTask(void *pvParameters)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	int i;
	while(1)
	{

		printf("Red\n");
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <vRedLedControllerTask+0x38>)
 8000356:	f002 ff6b 	bl	8003230 <puts>


				HAL_GPIO_WritePin(GPIOD,RED,1);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000360:	4809      	ldr	r0, [pc, #36]	; (8000388 <vRedLedControllerTask+0x3c>)
 8000362:	f000 fae7 	bl	8000934 <HAL_GPIO_WritePin>
				vTaskDelay( 500);
 8000366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800036a:	f001 fa11 	bl	8001790 <vTaskDelay>
				//		for(i=0;i<500000;i++){}

				HAL_GPIO_WritePin(GPIOD,RED,0);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <vRedLedControllerTask+0x3c>)
 8000376:	f000 fadd 	bl	8000934 <HAL_GPIO_WritePin>
				vTaskDelay( 500 );
 800037a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037e:	f001 fa07 	bl	8001790 <vTaskDelay>
		printf("Red\n");
 8000382:	e7e7      	b.n	8000354 <vRedLedControllerTask+0x8>
 8000384:	08003a90 	.word	0x08003a90
 8000388:	40020c00 	.word	0x40020c00

0800038c <GPIO_Init>:

	}
}
*/
void GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <GPIO_Init+0x70>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a18      	ldr	r2, [pc, #96]	; (80003fc <GPIO_Init+0x70>)
 800039c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
 80003a2:	4b16      	ldr	r3, [pc, #88]	; (80003fc <GPIO_Init+0x70>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <GPIO_Init+0x70>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a11      	ldr	r2, [pc, #68]	; (80003fc <GPIO_Init+0x70>)
 80003b8:	f043 0308 	orr.w	r3, r3, #8
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <GPIO_Init+0x70>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	f003 0308 	and.w	r3, r3, #8
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <GPIO_Init+0x74>)
 80003d2:	f000 faaf 	bl	8000934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80003d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003e8:	f107 030c 	add.w	r3, r7, #12
 80003ec:	4619      	mov	r1, r3
 80003ee:	4804      	ldr	r0, [pc, #16]	; (8000400 <GPIO_Init+0x74>)
 80003f0:	f000 f906 	bl	8000600 <HAL_GPIO_Init>
}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40023800 	.word	0x40023800
 8000400:	40020c00 	.word	0x40020c00

08000404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <NMI_Handler+0x4>

0800040a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040e:	e7fe      	b.n	800040e <HardFault_Handler+0x4>

08000410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <MemManage_Handler+0x4>

08000416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <BusFault_Handler+0x4>

0800041c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <UsageFault_Handler+0x4>

08000422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 f8d0 	bl	80005d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000438:	f001 fe12 	bl	8002060 <xTaskGetSchedulerState>
 800043c:	4603      	mov	r3, r0
 800043e:	2b01      	cmp	r3, #1
 8000440:	d001      	beq.n	8000446 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000442:	f002 fbf9 	bl	8002c38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}

0800044a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b086      	sub	sp, #24
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e00a      	b.n	8000472 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800045c:	f3af 8000 	nop.w
 8000460:	4601      	mov	r1, r0
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	60ba      	str	r2, [r7, #8]
 8000468:	b2ca      	uxtb	r2, r1
 800046a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	3301      	adds	r3, #1
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	429a      	cmp	r2, r3
 8000478:	dbf0      	blt.n	800045c <_read+0x12>
	}

return len;
 800047a:	687b      	ldr	r3, [r7, #4]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	return -1;
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ac:	605a      	str	r2, [r3, #4]
	return 0;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <_isatty>:

int _isatty(int file)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	return 1;
 80004c4:	2301      	movs	r3, #1
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004d2:	b480      	push	{r7}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	return 0;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <_sbrk+0x5c>)
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <_sbrk+0x60>)
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <_sbrk+0x64>)
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <_sbrk+0x68>)
 800050c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	429a      	cmp	r2, r3
 800051a:	d207      	bcs.n	800052c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800051c:	f002 fdee 	bl	80030fc <__errno>
 8000520:	4602      	mov	r2, r0
 8000522:	230c      	movs	r3, #12
 8000524:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	e009      	b.n	8000540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <_sbrk+0x64>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <_sbrk+0x64>)
 800053c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20020000 	.word	0x20020000
 800054c:	00000400 	.word	0x00000400
 8000550:	20000734 	.word	0x20000734
 8000554:	200045d0 	.word	0x200045d0

08000558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <SystemInit+0x28>)
 800055e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000562:	4a07      	ldr	r2, [pc, #28]	; (8000580 <SystemInit+0x28>)
 8000564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <SystemInit+0x28>)
 800056e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000572:	609a      	str	r2, [r3, #8]
#endif
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000588:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800058a:	e003      	b.n	8000594 <LoopCopyDataInit>

0800058c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800058e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000590:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000592:	3104      	adds	r1, #4

08000594 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000598:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800059a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800059c:	d3f6      	bcc.n	800058c <CopyDataInit>
  ldr  r2, =_sbss
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005a0:	e002      	b.n	80005a8 <LoopFillZerobss>

080005a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005a4:	f842 3b04 	str.w	r3, [r2], #4

080005a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005ac:	d3f9      	bcc.n	80005a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ae:	f7ff ffd3 	bl	8000558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b2:	f002 fda9 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b6:	f7ff fe85 	bl	80002c4 <main>
  bx  lr    
 80005ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005c0:	08003b18 	.word	0x08003b18
  ldr  r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005c8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80005cc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80005d0:	200045d0 	.word	0x200045d0

080005d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>
	...

080005d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x20>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x24>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_IncTick+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20004588 	.word	0x20004588

08000600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000600:	b480      	push	{r7}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	e16b      	b.n	80008f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800061c:	2201      	movs	r2, #1
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	429a      	cmp	r2, r3
 8000636:	f040 815a 	bne.w	80008ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00b      	beq.n	800065a <HAL_GPIO_Init+0x5a>
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d007      	beq.n	800065a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800064e:	2b11      	cmp	r3, #17
 8000650:	d003      	beq.n	800065a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	2b12      	cmp	r3, #18
 8000658:	d130      	bne.n	80006bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2203      	movs	r2, #3
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	4013      	ands	r3, r2
 8000670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	68da      	ldr	r2, [r3, #12]
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	69ba      	ldr	r2, [r7, #24]
 8000680:	4313      	orrs	r3, r2
 8000682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	69ba      	ldr	r2, [r7, #24]
 8000688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000690:	2201      	movs	r2, #1
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	43db      	mvns	r3, r3
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	4013      	ands	r3, r2
 800069e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	091b      	lsrs	r3, r3, #4
 80006a6:	f003 0201 	and.w	r2, r3, #1
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	69ba      	ldr	r2, [r7, #24]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	2203      	movs	r2, #3
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	69ba      	ldr	r2, [r7, #24]
 80006d0:	4013      	ands	r3, r2
 80006d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	69ba      	ldr	r2, [r7, #24]
 80006ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d003      	beq.n	80006fc <HAL_GPIO_Init+0xfc>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b12      	cmp	r3, #18
 80006fa:	d123      	bne.n	8000744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	08da      	lsrs	r2, r3, #3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3208      	adds	r2, #8
 8000704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	f003 0307 	and.w	r3, r3, #7
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	220f      	movs	r2, #15
 8000714:	fa02 f303 	lsl.w	r3, r2, r3
 8000718:	43db      	mvns	r3, r3
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	4013      	ands	r3, r2
 800071e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	691a      	ldr	r2, [r3, #16]
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	4313      	orrs	r3, r2
 8000734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	08da      	lsrs	r2, r3, #3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3208      	adds	r2, #8
 800073e:	69b9      	ldr	r1, [r7, #24]
 8000740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	2203      	movs	r2, #3
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	43db      	mvns	r3, r3
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	4013      	ands	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f003 0203 	and.w	r2, r3, #3
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	4313      	orrs	r3, r2
 8000770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	2b00      	cmp	r3, #0
 8000782:	f000 80b4 	beq.w	80008ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b5f      	ldr	r3, [pc, #380]	; (8000908 <HAL_GPIO_Init+0x308>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a5e      	ldr	r2, [pc, #376]	; (8000908 <HAL_GPIO_Init+0x308>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b5c      	ldr	r3, [pc, #368]	; (8000908 <HAL_GPIO_Init+0x308>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80007a2:	4a5a      	ldr	r2, [pc, #360]	; (800090c <HAL_GPIO_Init+0x30c>)
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	3302      	adds	r3, #2
 80007aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	220f      	movs	r2, #15
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	4013      	ands	r3, r2
 80007c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a51      	ldr	r2, [pc, #324]	; (8000910 <HAL_GPIO_Init+0x310>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d02b      	beq.n	8000826 <HAL_GPIO_Init+0x226>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a50      	ldr	r2, [pc, #320]	; (8000914 <HAL_GPIO_Init+0x314>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d025      	beq.n	8000822 <HAL_GPIO_Init+0x222>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a4f      	ldr	r2, [pc, #316]	; (8000918 <HAL_GPIO_Init+0x318>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d01f      	beq.n	800081e <HAL_GPIO_Init+0x21e>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a4e      	ldr	r2, [pc, #312]	; (800091c <HAL_GPIO_Init+0x31c>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d019      	beq.n	800081a <HAL_GPIO_Init+0x21a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a4d      	ldr	r2, [pc, #308]	; (8000920 <HAL_GPIO_Init+0x320>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d013      	beq.n	8000816 <HAL_GPIO_Init+0x216>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a4c      	ldr	r2, [pc, #304]	; (8000924 <HAL_GPIO_Init+0x324>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d00d      	beq.n	8000812 <HAL_GPIO_Init+0x212>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a4b      	ldr	r2, [pc, #300]	; (8000928 <HAL_GPIO_Init+0x328>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d007      	beq.n	800080e <HAL_GPIO_Init+0x20e>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a4a      	ldr	r2, [pc, #296]	; (800092c <HAL_GPIO_Init+0x32c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_GPIO_Init+0x20a>
 8000806:	2307      	movs	r3, #7
 8000808:	e00e      	b.n	8000828 <HAL_GPIO_Init+0x228>
 800080a:	2308      	movs	r3, #8
 800080c:	e00c      	b.n	8000828 <HAL_GPIO_Init+0x228>
 800080e:	2306      	movs	r3, #6
 8000810:	e00a      	b.n	8000828 <HAL_GPIO_Init+0x228>
 8000812:	2305      	movs	r3, #5
 8000814:	e008      	b.n	8000828 <HAL_GPIO_Init+0x228>
 8000816:	2304      	movs	r3, #4
 8000818:	e006      	b.n	8000828 <HAL_GPIO_Init+0x228>
 800081a:	2303      	movs	r3, #3
 800081c:	e004      	b.n	8000828 <HAL_GPIO_Init+0x228>
 800081e:	2302      	movs	r3, #2
 8000820:	e002      	b.n	8000828 <HAL_GPIO_Init+0x228>
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <HAL_GPIO_Init+0x228>
 8000826:	2300      	movs	r3, #0
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	f002 0203 	and.w	r2, r2, #3
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	4093      	lsls	r3, r2
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000838:	4934      	ldr	r1, [pc, #208]	; (800090c <HAL_GPIO_Init+0x30c>)
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	089b      	lsrs	r3, r3, #2
 800083e:	3302      	adds	r3, #2
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000846:	4b3a      	ldr	r3, [pc, #232]	; (8000930 <HAL_GPIO_Init+0x330>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	43db      	mvns	r3, r3
 8000850:	69ba      	ldr	r2, [r7, #24]
 8000852:	4013      	ands	r3, r2
 8000854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800086a:	4a31      	ldr	r2, [pc, #196]	; (8000930 <HAL_GPIO_Init+0x330>)
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <HAL_GPIO_Init+0x330>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	43db      	mvns	r3, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000888:	2b00      	cmp	r3, #0
 800088a:	d003      	beq.n	8000894 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <HAL_GPIO_Init+0x330>)
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <HAL_GPIO_Init+0x330>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	43db      	mvns	r3, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4013      	ands	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <HAL_GPIO_Init+0x330>)
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <HAL_GPIO_Init+0x330>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d003      	beq.n	80008e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80008e8:	4a11      	ldr	r2, [pc, #68]	; (8000930 <HAL_GPIO_Init+0x330>)
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	f67f ae90 	bls.w	800061c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80008fc:	bf00      	nop
 80008fe:	3724      	adds	r7, #36	; 0x24
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	40023800 	.word	0x40023800
 800090c:	40013800 	.word	0x40013800
 8000910:	40020000 	.word	0x40020000
 8000914:	40020400 	.word	0x40020400
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40021000 	.word	0x40021000
 8000924:	40021400 	.word	0x40021400
 8000928:	40021800 	.word	0x40021800
 800092c:	40021c00 	.word	0x40021c00
 8000930:	40013c00 	.word	0x40013c00

08000934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	807b      	strh	r3, [r7, #2]
 8000940:	4613      	mov	r3, r2
 8000942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000944:	787b      	ldrb	r3, [r7, #1]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800094a:	887a      	ldrh	r2, [r7, #2]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000950:	e003      	b.n	800095a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	041a      	lsls	r2, r3, #16
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	619a      	str	r2, [r3, #24]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f103 0208 	add.w	r2, r3, #8
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f04f 32ff 	mov.w	r2, #4294967295
 800097e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0208 	add.w	r2, r3, #8
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f103 0208 	add.w	r2, r3, #8
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1e:	d103      	bne.n	8000a28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	e00c      	b.n	8000a42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e002      	b.n	8000a36 <vListInsert+0x2e>
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68ba      	ldr	r2, [r7, #8]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d2f6      	bcs.n	8000a30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	683a      	ldr	r2, [r7, #0]
 8000a50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	6892      	ldr	r2, [r2, #8]
 8000a90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	6852      	ldr	r2, [r2, #4]
 8000a9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d103      	bne.n	8000aae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d109      	bne.n	8000af8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae8:	f383 8811 	msr	BASEPRI, r3
 8000aec:	f3bf 8f6f 	isb	sy
 8000af0:	f3bf 8f4f 	dsb	sy
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	e7fe      	b.n	8000af6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000af8:	f002 f810 	bl	8002b1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b04:	68f9      	ldr	r1, [r7, #12]
 8000b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b08:	fb01 f303 	mul.w	r3, r1, r3
 8000b0c:	441a      	add	r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2200      	movs	r2, #0
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	68f9      	ldr	r1, [r7, #12]
 8000b2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b2e:	fb01 f303 	mul.w	r3, r1, r3
 8000b32:	441a      	add	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d114      	bne.n	8000b78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d01a      	beq.n	8000b8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3310      	adds	r3, #16
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f8ca 	bl	8001cf4 <xTaskRemoveFromEventList>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d012      	beq.n	8000b8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <xQueueGenericReset+0xcc>)
 8000b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	f3bf 8f6f 	isb	sy
 8000b76:	e009      	b.n	8000b8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3310      	adds	r3, #16
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fef2 	bl	8000966 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3324      	adds	r3, #36	; 0x24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff feed 	bl	8000966 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000b8c:	f001 fff4 	bl	8002b78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	e000ed04 	.word	0xe000ed04

08000ba0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d109      	bne.n	8000bc8 <xQueueGenericCreateStatic+0x28>
 8000bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb8:	f383 8811 	msr	BASEPRI, r3
 8000bbc:	f3bf 8f6f 	isb	sy
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bc6:	e7fe      	b.n	8000bc6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d109      	bne.n	8000be2 <xQueueGenericCreateStatic+0x42>
 8000bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd2:	f383 8811 	msr	BASEPRI, r3
 8000bd6:	f3bf 8f6f 	isb	sy
 8000bda:	f3bf 8f4f 	dsb	sy
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
 8000be0:	e7fe      	b.n	8000be0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <xQueueGenericCreateStatic+0x4e>
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <xQueueGenericCreateStatic+0x52>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <xQueueGenericCreateStatic+0x54>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d109      	bne.n	8000c0c <xQueueGenericCreateStatic+0x6c>
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	623b      	str	r3, [r7, #32]
 8000c0a:	e7fe      	b.n	8000c0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <xQueueGenericCreateStatic+0x78>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <xQueueGenericCreateStatic+0x7c>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <xQueueGenericCreateStatic+0x7e>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d109      	bne.n	8000c36 <xQueueGenericCreateStatic+0x96>
 8000c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c26:	f383 8811 	msr	BASEPRI, r3
 8000c2a:	f3bf 8f6f 	isb	sy
 8000c2e:	f3bf 8f4f 	dsb	sy
 8000c32:	61fb      	str	r3, [r7, #28]
 8000c34:	e7fe      	b.n	8000c34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000c36:	2348      	movs	r3, #72	; 0x48
 8000c38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b48      	cmp	r3, #72	; 0x48
 8000c3e:	d009      	beq.n	8000c54 <xQueueGenericCreateStatic+0xb4>
 8000c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c44:	f383 8811 	msr	BASEPRI, r3
 8000c48:	f3bf 8f6f 	isb	sy
 8000c4c:	f3bf 8f4f 	dsb	sy
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	e7fe      	b.n	8000c52 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000c54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00d      	beq.n	8000c7c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	4613      	mov	r3, r2
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f000 f805 	bl	8000c86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3730      	adds	r7, #48	; 0x30
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	e002      	b.n	8000ca8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	69b8      	ldr	r0, [r7, #24]
 8000cb8:	f7ff ff0a 	bl	8000ad0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08e      	sub	sp, #56	; 0x38
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <xQueueGenericSend+0x30>
 8000ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce4:	f383 8811 	msr	BASEPRI, r3
 8000ce8:	f3bf 8f6f 	isb	sy
 8000cec:	f3bf 8f4f 	dsb	sy
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf2:	e7fe      	b.n	8000cf2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <xQueueGenericSend+0x3e>
 8000cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <xQueueGenericSend+0x42>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <xQueueGenericSend+0x44>
 8000d06:	2300      	movs	r3, #0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d109      	bne.n	8000d20 <xQueueGenericSend+0x5c>
 8000d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d10:	f383 8811 	msr	BASEPRI, r3
 8000d14:	f3bf 8f6f 	isb	sy
 8000d18:	f3bf 8f4f 	dsb	sy
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	e7fe      	b.n	8000d1e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d103      	bne.n	8000d2e <xQueueGenericSend+0x6a>
 8000d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d101      	bne.n	8000d32 <xQueueGenericSend+0x6e>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <xQueueGenericSend+0x70>
 8000d32:	2300      	movs	r3, #0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d109      	bne.n	8000d4c <xQueueGenericSend+0x88>
 8000d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d3c:	f383 8811 	msr	BASEPRI, r3
 8000d40:	f3bf 8f6f 	isb	sy
 8000d44:	f3bf 8f4f 	dsb	sy
 8000d48:	623b      	str	r3, [r7, #32]
 8000d4a:	e7fe      	b.n	8000d4a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d4c:	f001 f988 	bl	8002060 <xTaskGetSchedulerState>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <xQueueGenericSend+0x98>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <xQueueGenericSend+0x9c>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <xQueueGenericSend+0x9e>
 8000d60:	2300      	movs	r3, #0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d109      	bne.n	8000d7a <xQueueGenericSend+0xb6>
 8000d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6a:	f383 8811 	msr	BASEPRI, r3
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	e7fe      	b.n	8000d78 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d7a:	f001 fecf 	bl	8002b1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d302      	bcc.n	8000d90 <xQueueGenericSend+0xcc>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d129      	bne.n	8000de4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d96:	f000 f9ff 	bl	8001198 <prvCopyDataToQueue>
 8000d9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d010      	beq.n	8000dc6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da6:	3324      	adds	r3, #36	; 0x24
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 ffa3 	bl	8001cf4 <xTaskRemoveFromEventList>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d013      	beq.n	8000ddc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000db4:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <xQueueGenericSend+0x1f0>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
 8000dc4:	e00a      	b.n	8000ddc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <xQueueGenericSend+0x1f0>)
 8000dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	f3bf 8f4f 	dsb	sy
 8000dd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ddc:	f001 fecc 	bl	8002b78 <vPortExitCritical>
				return pdPASS;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e063      	b.n	8000eac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d103      	bne.n	8000df2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dea:	f001 fec5 	bl	8002b78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e05c      	b.n	8000eac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d106      	bne.n	8000e06 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 ffdb 	bl	8001db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e06:	f001 feb7 	bl	8002b78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e0a:	f000 fd59 	bl	80018c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e0e:	f001 fe85 	bl	8002b1c <vPortEnterCritical>
 8000e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1e:	d103      	bne.n	8000e28 <xQueueGenericSend+0x164>
 8000e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d103      	bne.n	8000e3e <xQueueGenericSend+0x17a>
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e3e:	f001 fe9b 	bl	8002b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e42:	1d3a      	adds	r2, r7, #4
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 ffca 	bl	8001de4 <xTaskCheckForTimeOut>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d124      	bne.n	8000ea0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e58:	f000 fa96 	bl	8001388 <prvIsQueueFull>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d018      	beq.n	8000e94 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e64:	3310      	adds	r3, #16
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fef4 	bl	8001c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e72:	f000 fa21 	bl	80012b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e76:	f000 fd31 	bl	80018dc <xTaskResumeAll>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f47f af7c 	bne.w	8000d7a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <xQueueGenericSend+0x1f0>)
 8000e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	f3bf 8f4f 	dsb	sy
 8000e8e:	f3bf 8f6f 	isb	sy
 8000e92:	e772      	b.n	8000d7a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e96:	f000 fa0f 	bl	80012b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e9a:	f000 fd1f 	bl	80018dc <xTaskResumeAll>
 8000e9e:	e76c      	b.n	8000d7a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ea2:	f000 fa09 	bl	80012b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ea6:	f000 fd19 	bl	80018dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000eaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3738      	adds	r7, #56	; 0x38
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	e000ed04 	.word	0xe000ed04

08000eb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	; 0x38
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d109      	bne.n	8000ee4 <xQueueGenericSendFromISR+0x2c>
 8000ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed4:	f383 8811 	msr	BASEPRI, r3
 8000ed8:	f3bf 8f6f 	isb	sy
 8000edc:	f3bf 8f4f 	dsb	sy
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	e7fe      	b.n	8000ee2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d103      	bne.n	8000ef2 <xQueueGenericSendFromISR+0x3a>
 8000eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <xQueueGenericSendFromISR+0x3e>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <xQueueGenericSendFromISR+0x40>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d109      	bne.n	8000f10 <xQueueGenericSendFromISR+0x58>
 8000efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f00:	f383 8811 	msr	BASEPRI, r3
 8000f04:	f3bf 8f6f 	isb	sy
 8000f08:	f3bf 8f4f 	dsb	sy
 8000f0c:	623b      	str	r3, [r7, #32]
 8000f0e:	e7fe      	b.n	8000f0e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d103      	bne.n	8000f1e <xQueueGenericSendFromISR+0x66>
 8000f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <xQueueGenericSendFromISR+0x6a>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <xQueueGenericSendFromISR+0x6c>
 8000f22:	2300      	movs	r3, #0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d109      	bne.n	8000f3c <xQueueGenericSendFromISR+0x84>
 8000f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2c:	f383 8811 	msr	BASEPRI, r3
 8000f30:	f3bf 8f6f 	isb	sy
 8000f34:	f3bf 8f4f 	dsb	sy
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e7fe      	b.n	8000f3a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f3c:	f001 feca 	bl	8002cd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000f40:	f3ef 8211 	mrs	r2, BASEPRI
 8000f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f48:	f383 8811 	msr	BASEPRI, r3
 8000f4c:	f3bf 8f6f 	isb	sy
 8000f50:	f3bf 8f4f 	dsb	sy
 8000f54:	61ba      	str	r2, [r7, #24]
 8000f56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000f58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d302      	bcc.n	8000f6e <xQueueGenericSendFromISR+0xb6>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d12c      	bne.n	8000fc8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f7e:	f000 f90b 	bl	8001198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8a:	d112      	bne.n	8000fb2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d016      	beq.n	8000fc2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f96:	3324      	adds	r3, #36	; 0x24
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 feab 	bl	8001cf4 <xTaskRemoveFromEventList>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00e      	beq.n	8000fc2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e007      	b.n	8000fc2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fc6:	e001      	b.n	8000fcc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
 8000fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3738      	adds	r7, #56	; 0x38
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d109      	bne.n	800100e <xQueueReceive+0x2e>
	__asm volatile
 8000ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffe:	f383 8811 	msr	BASEPRI, r3
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	e7fe      	b.n	800100c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <xQueueReceive+0x3c>
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <xQueueReceive+0x40>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <xQueueReceive+0x42>
 8001020:	2300      	movs	r3, #0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <xQueueReceive+0x5a>
 8001026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	e7fe      	b.n	8001038 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800103a:	f001 f811 	bl	8002060 <xTaskGetSchedulerState>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <xQueueReceive+0x6a>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <xQueueReceive+0x6e>
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <xQueueReceive+0x70>
 800104e:	2300      	movs	r3, #0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d109      	bne.n	8001068 <xQueueReceive+0x88>
 8001054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001058:	f383 8811 	msr	BASEPRI, r3
 800105c:	f3bf 8f6f 	isb	sy
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	e7fe      	b.n	8001066 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001068:	f001 fd58 	bl	8002b1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	2b00      	cmp	r3, #0
 8001076:	d01f      	beq.n	80010b8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800107c:	f000 f8f6 	bl	800126c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001086:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00f      	beq.n	80010b0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001092:	3310      	adds	r3, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fe2d 	bl	8001cf4 <xTaskRemoveFromEventList>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80010a0:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <xQueueReceive+0x1b4>)
 80010a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	f3bf 8f4f 	dsb	sy
 80010ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80010b0:	f001 fd62 	bl	8002b78 <vPortExitCritical>
				return pdPASS;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e069      	b.n	800118c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d103      	bne.n	80010c6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010be:	f001 fd5b 	bl	8002b78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e062      	b.n	800118c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fe71 	bl	8001db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010da:	f001 fd4d 	bl	8002b78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010de:	f000 fbef 	bl	80018c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010e2:	f001 fd1b 	bl	8002b1c <vPortEnterCritical>
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f2:	d103      	bne.n	80010fc <xQueueReceive+0x11c>
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001102:	b25b      	sxtb	r3, r3
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d103      	bne.n	8001112 <xQueueReceive+0x132>
 800110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001112:	f001 fd31 	bl	8002b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001116:	1d3a      	adds	r2, r7, #4
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fe60 	bl	8001de4 <xTaskCheckForTimeOut>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d123      	bne.n	8001172 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800112a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800112c:	f000 f916 	bl	800135c <prvIsQueueEmpty>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d017      	beq.n	8001166 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001138:	3324      	adds	r3, #36	; 0x24
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fd8a 	bl	8001c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001146:	f000 f8b7 	bl	80012b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800114a:	f000 fbc7 	bl	80018dc <xTaskResumeAll>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d189      	bne.n	8001068 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <xQueueReceive+0x1b4>)
 8001156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	f3bf 8f6f 	isb	sy
 8001164:	e780      	b.n	8001068 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001168:	f000 f8a6 	bl	80012b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800116c:	f000 fbb6 	bl	80018dc <xTaskResumeAll>
 8001170:	e77a      	b.n	8001068 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001174:	f000 f8a0 	bl	80012b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001178:	f000 fbb0 	bl	80018dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800117c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800117e:	f000 f8ed 	bl	800135c <prvIsQueueEmpty>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	f43f af6f 	beq.w	8001068 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800118a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800118c:	4618      	mov	r0, r3
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	e000ed04 	.word	0xe000ed04

08001198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d14d      	bne.n	800125a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ff6a 	bl	800209c <xTaskPriorityDisinherit>
 80011c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	e043      	b.n	800125a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d119      	bne.n	800120c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6858      	ldr	r0, [r3, #4]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	461a      	mov	r2, r3
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	f001 ffb4 	bl	8003150 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	441a      	add	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d32b      	bcc.n	800125a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	e026      	b.n	800125a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68d8      	ldr	r0, [r3, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	461a      	mov	r2, r3
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	f001 ff9a 	bl	8003150 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	425b      	negs	r3, r3
 8001226:	441a      	add	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	425b      	negs	r3, r3
 8001242:	441a      	add	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d105      	bne.n	800125a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	3b01      	subs	r3, #1
 8001258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001262:	697b      	ldr	r3, [r7, #20]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d018      	beq.n	80012b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	441a      	add	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d303      	bcc.n	80012a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68d9      	ldr	r1, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	461a      	mov	r2, r3
 80012aa:	6838      	ldr	r0, [r7, #0]
 80012ac:	f001 ff50 	bl	8003150 <memcpy>
	}
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80012c0:	f001 fc2c 	bl	8002b1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012cc:	e011      	b.n	80012f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d012      	beq.n	80012fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3324      	adds	r3, #36	; 0x24
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fd0a 	bl	8001cf4 <xTaskRemoveFromEventList>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80012e6:	f000 fddd 	bl	8001ea4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dce9      	bgt.n	80012ce <prvUnlockQueue+0x16>
 80012fa:	e000      	b.n	80012fe <prvUnlockQueue+0x46>
					break;
 80012fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	22ff      	movs	r2, #255	; 0xff
 8001302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001306:	f001 fc37 	bl	8002b78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800130a:	f001 fc07 	bl	8002b1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001316:	e011      	b.n	800133c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d012      	beq.n	8001346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3310      	adds	r3, #16
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fce5 	bl	8001cf4 <xTaskRemoveFromEventList>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001330:	f000 fdb8 	bl	8001ea4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	3b01      	subs	r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800133c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001340:	2b00      	cmp	r3, #0
 8001342:	dce9      	bgt.n	8001318 <prvUnlockQueue+0x60>
 8001344:	e000      	b.n	8001348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001350:	f001 fc12 	bl	8002b78 <vPortExitCritical>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001364:	f001 fbda 	bl	8002b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001370:	2301      	movs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e001      	b.n	800137a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800137a:	f001 fbfd 	bl	8002b78 <vPortExitCritical>

	return xReturn;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001390:	f001 fbc4 	bl	8002b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139c:	429a      	cmp	r2, r3
 800139e:	d102      	bne.n	80013a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013a0:	2301      	movs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e001      	b.n	80013aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013aa:	f001 fbe5 	bl	8002b78 <vPortExitCritical>

	return xReturn;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e014      	b.n	80013f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <vQueueAddToRegistry+0x4c>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10b      	bne.n	80013ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80013d4:	490b      	ldr	r1, [pc, #44]	; (8001404 <vQueueAddToRegistry+0x4c>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <vQueueAddToRegistry+0x4c>)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80013ea:	e005      	b.n	80013f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3301      	adds	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b07      	cmp	r3, #7
 80013f6:	d9e7      	bls.n	80013c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	2000458c 	.word	0x2000458c

08001408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001418:	f001 fb80 	bl	8002b1c <vPortEnterCritical>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001422:	b25b      	sxtb	r3, r3
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d103      	bne.n	8001432 <vQueueWaitForMessageRestricted+0x2a>
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001438:	b25b      	sxtb	r3, r3
 800143a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143e:	d103      	bne.n	8001448 <vQueueWaitForMessageRestricted+0x40>
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001448:	f001 fb96 	bl	8002b78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3324      	adds	r3, #36	; 0x24
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fc1f 	bl	8001ca0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff28 	bl	80012b8 <prvUnlockQueue>
	}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af04      	add	r7, sp, #16
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001480:	2b00      	cmp	r3, #0
 8001482:	d109      	bne.n	8001498 <xTaskCreateStatic+0x28>
 8001484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001488:	f383 8811 	msr	BASEPRI, r3
 800148c:	f3bf 8f6f 	isb	sy
 8001490:	f3bf 8f4f 	dsb	sy
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	e7fe      	b.n	8001496 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <xTaskCreateStatic+0x42>
 800149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a2:	f383 8811 	msr	BASEPRI, r3
 80014a6:	f3bf 8f6f 	isb	sy
 80014aa:	f3bf 8f4f 	dsb	sy
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	e7fe      	b.n	80014b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80014b2:	2354      	movs	r3, #84	; 0x54
 80014b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b54      	cmp	r3, #84	; 0x54
 80014ba:	d009      	beq.n	80014d0 <xTaskCreateStatic+0x60>
 80014bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c0:	f383 8811 	msr	BASEPRI, r3
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	e7fe      	b.n	80014ce <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80014d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80014d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01e      	beq.n	8001516 <xTaskCreateStatic+0xa6>
 80014d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01b      	beq.n	8001516 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80014de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80014f0:	2300      	movs	r3, #0
 80014f2:	9303      	str	r3, [sp, #12]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f850 	bl	80015ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800150e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001510:	f000 f8d4 	bl	80016bc <prvAddNewTaskToReadyList>
 8001514:	e001      	b.n	800151a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800151a:	697b      	ldr	r3, [r7, #20]
	}
 800151c:	4618      	mov	r0, r3
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af04      	add	r7, sp, #16
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f001 fc09 	bl	8002d50 <pvPortMalloc>
 800153e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00e      	beq.n	8001564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001546:	2054      	movs	r0, #84	; 0x54
 8001548:	f001 fc02 	bl	8002d50 <pvPortMalloc>
 800154c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
 800155a:	e005      	b.n	8001568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800155c:	6978      	ldr	r0, [r7, #20]
 800155e:	f001 fcb9 	bl	8002ed4 <vPortFree>
 8001562:	e001      	b.n	8001568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d017      	beq.n	800159e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	2300      	movs	r3, #0
 800157a:	9303      	str	r3, [sp, #12]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f80e 	bl	80015ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001592:	69f8      	ldr	r0, [r7, #28]
 8001594:	f000 f892 	bl	80016bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	e002      	b.n	80015a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80015a4:	69bb      	ldr	r3, [r7, #24]
	}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b088      	sub	sp, #32
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80015bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015c6:	3b01      	subs	r3, #1
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f023 0307 	bic.w	r3, r3, #7
 80015d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <prvInitialiseNewTask+0x46>
 80015e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e7fe      	b.n	80015f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d01f      	beq.n	800163a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e012      	b.n	8001626 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	7819      	ldrb	r1, [r3, #0]
 8001608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
 800160e:	3334      	adds	r3, #52	; 0x34
 8001610:	460a      	mov	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3301      	adds	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d9e9      	bls.n	8001600 <prvInitialiseNewTask+0x52>
 800162c:	e000      	b.n	8001630 <prvInitialiseNewTask+0x82>
			{
				break;
 800162e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001638:	e003      	b.n	8001642 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	2b06      	cmp	r3, #6
 8001646:	d901      	bls.n	800164c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001648:	2306      	movs	r3, #6
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001656:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165a:	2200      	movs	r2, #0
 800165c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001660:	3304      	adds	r3, #4
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f99f 	bl	80009a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166a:	3318      	adds	r3, #24
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f99a 	bl	80009a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001676:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	f1c3 0207 	rsb	r2, r3, #7
 800167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001680:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168a:	2200      	movs	r2, #0
 800168c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	69b8      	ldr	r0, [r7, #24]
 800169c:	f001 f916 	bl	80028cc <pxPortInitialiseStack>
 80016a0:	4602      	mov	r2, r0
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016b2:	bf00      	nop
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80016c4:	f001 fa2a 	bl	8002b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <prvAddNewTaskToReadyList+0xb8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <prvAddNewTaskToReadyList+0xb8>)
 80016d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <prvAddNewTaskToReadyList+0xbc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <prvAddNewTaskToReadyList+0xbc>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <prvAddNewTaskToReadyList+0xb8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d110      	bne.n	800170a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016e8:	f000 fc00 	bl	8001eec <prvInitialiseTaskLists>
 80016ec:	e00d      	b.n	800170a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <prvAddNewTaskToReadyList+0xc0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <prvAddNewTaskToReadyList+0xbc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	429a      	cmp	r2, r3
 8001702:	d802      	bhi.n	800170a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001704:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <prvAddNewTaskToReadyList+0xbc>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <prvAddNewTaskToReadyList+0xc4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <prvAddNewTaskToReadyList+0xc4>)
 8001712:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	2201      	movs	r2, #1
 800171a:	409a      	lsls	r2, r3
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <prvAddNewTaskToReadyList+0xc8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4313      	orrs	r3, r2
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <prvAddNewTaskToReadyList+0xc8>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <prvAddNewTaskToReadyList+0xcc>)
 8001734:	441a      	add	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4610      	mov	r0, r2
 800173e:	f7ff f93f 	bl	80009c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001742:	f001 fa19 	bl	8002b78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <prvAddNewTaskToReadyList+0xc0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00e      	beq.n	800176c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <prvAddNewTaskToReadyList+0xbc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <prvAddNewTaskToReadyList+0xd0>)
 800175e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	f3bf 8f4f 	dsb	sy
 8001768:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000838 	.word	0x20000838
 8001778:	20000738 	.word	0x20000738
 800177c:	20000844 	.word	0x20000844
 8001780:	20000854 	.word	0x20000854
 8001784:	20000840 	.word	0x20000840
 8001788:	2000073c 	.word	0x2000073c
 800178c:	e000ed04 	.word	0xe000ed04

08001790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <vTaskDelay+0x60>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <vTaskDelay+0x2e>
 80017aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ae:	f383 8811 	msr	BASEPRI, r3
 80017b2:	f3bf 8f6f 	isb	sy
 80017b6:	f3bf 8f4f 	dsb	sy
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	e7fe      	b.n	80017bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80017be:	f000 f87f 	bl	80018c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80017c2:	2100      	movs	r1, #0
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fced 	bl	80021a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80017ca:	f000 f887 	bl	80018dc <xTaskResumeAll>
 80017ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d107      	bne.n	80017e6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <vTaskDelay+0x64>)
 80017d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000860 	.word	0x20000860
 80017f4:	e000ed04 	.word	0xe000ed04

080017f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001806:	463a      	mov	r2, r7
 8001808:	1d39      	adds	r1, r7, #4
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fcde 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	9202      	str	r2, [sp, #8]
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	2300      	movs	r3, #0
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	460a      	mov	r2, r1
 8001826:	4920      	ldr	r1, [pc, #128]	; (80018a8 <vTaskStartScheduler+0xb0>)
 8001828:	4820      	ldr	r0, [pc, #128]	; (80018ac <vTaskStartScheduler+0xb4>)
 800182a:	f7ff fe21 	bl	8001470 <xTaskCreateStatic>
 800182e:	4602      	mov	r2, r0
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <vTaskStartScheduler+0xb8>)
 8001832:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <vTaskStartScheduler+0xb8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800183c:	2301      	movs	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e001      	b.n	8001846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d102      	bne.n	8001852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800184c:	f000 fd10 	bl	8002270 <xTimerCreateTimerTask>
 8001850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d115      	bne.n	8001884 <vTaskStartScheduler+0x8c>
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <vTaskStartScheduler+0xbc>)
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <vTaskStartScheduler+0xc0>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <vTaskStartScheduler+0xc4>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800187e:	f001 f8af 	bl	80029e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001882:	e00d      	b.n	80018a0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188a:	d109      	bne.n	80018a0 <vTaskStartScheduler+0xa8>
 800188c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001890:	f383 8811 	msr	BASEPRI, r3
 8001894:	f3bf 8f6f 	isb	sy
 8001898:	f3bf 8f4f 	dsb	sy
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e7fe      	b.n	800189e <vTaskStartScheduler+0xa6>
}
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	08003a94 	.word	0x08003a94
 80018ac:	08001ebd 	.word	0x08001ebd
 80018b0:	2000085c 	.word	0x2000085c
 80018b4:	20000858 	.word	0x20000858
 80018b8:	20000844 	.word	0x20000844
 80018bc:	2000083c 	.word	0x2000083c

080018c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <vTaskSuspendAll+0x18>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <vTaskSuspendAll+0x18>)
 80018cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	20000860 	.word	0x20000860

080018dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <xTaskResumeAll+0x114>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <xTaskResumeAll+0x2a>
 80018f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f6:	f383 8811 	msr	BASEPRI, r3
 80018fa:	f3bf 8f6f 	isb	sy
 80018fe:	f3bf 8f4f 	dsb	sy
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	e7fe      	b.n	8001904 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001906:	f001 f909 	bl	8002b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <xTaskResumeAll+0x114>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	4a37      	ldr	r2, [pc, #220]	; (80019f0 <xTaskResumeAll+0x114>)
 8001912:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <xTaskResumeAll+0x114>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d161      	bne.n	80019e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <xTaskResumeAll+0x118>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05d      	beq.n	80019e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001924:	e02e      	b.n	8001984 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <xTaskResumeAll+0x11c>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3318      	adds	r3, #24
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f8a1 	bl	8000a7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3304      	adds	r3, #4
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f89c 	bl	8000a7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	2201      	movs	r2, #1
 8001948:	409a      	lsls	r2, r3
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <xTaskResumeAll+0x120>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <xTaskResumeAll+0x120>)
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <xTaskResumeAll+0x124>)
 8001962:	441a      	add	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3304      	adds	r3, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f7ff f828 	bl	80009c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <xTaskResumeAll+0x128>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	429a      	cmp	r2, r3
 800197c:	d302      	bcc.n	8001984 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <xTaskResumeAll+0x12c>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <xTaskResumeAll+0x11c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1cc      	bne.n	8001926 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001992:	f000 fb45 	bl	8002020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001996:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <xTaskResumeAll+0x130>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80019a2:	f000 f847 	bl	8001a34 <xTaskIncrementTick>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <xTaskResumeAll+0x12c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f1      	bne.n	80019a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <xTaskResumeAll+0x130>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <xTaskResumeAll+0x12c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d009      	beq.n	80019e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <xTaskResumeAll+0x134>)
 80019d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f3bf 8f4f 	dsb	sy
 80019dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80019e0:	f001 f8ca 	bl	8002b78 <vPortExitCritical>

	return xAlreadyYielded;
 80019e4:	68bb      	ldr	r3, [r7, #8]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000860 	.word	0x20000860
 80019f4:	20000838 	.word	0x20000838
 80019f8:	200007f8 	.word	0x200007f8
 80019fc:	20000840 	.word	0x20000840
 8001a00:	2000073c 	.word	0x2000073c
 8001a04:	20000738 	.word	0x20000738
 8001a08:	2000084c 	.word	0x2000084c
 8001a0c:	20000848 	.word	0x20000848
 8001a10:	e000ed04 	.word	0xe000ed04

08001a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <xTaskGetTickCount+0x1c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000083c 	.word	0x2000083c

08001a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <xTaskIncrementTick+0x144>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 8087 	bne.w	8001b56 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a48:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <xTaskIncrementTick+0x148>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001a50:	4a4a      	ldr	r2, [pc, #296]	; (8001b7c <xTaskIncrementTick+0x148>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11f      	bne.n	8001a9c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001a5c:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <xTaskIncrementTick+0x14c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <xTaskIncrementTick+0x46>
 8001a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6a:	f383 8811 	msr	BASEPRI, r3
 8001a6e:	f3bf 8f6f 	isb	sy
 8001a72:	f3bf 8f4f 	dsb	sy
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	e7fe      	b.n	8001a78 <xTaskIncrementTick+0x44>
 8001a7a:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <xTaskIncrementTick+0x14c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <xTaskIncrementTick+0x150>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a3e      	ldr	r2, [pc, #248]	; (8001b80 <xTaskIncrementTick+0x14c>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <xTaskIncrementTick+0x150>)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <xTaskIncrementTick+0x154>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <xTaskIncrementTick+0x154>)
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	f000 fac2 	bl	8002020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <xTaskIncrementTick+0x158>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d348      	bcc.n	8001b38 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <xTaskIncrementTick+0x14c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d104      	bne.n	8001aba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <xTaskIncrementTick+0x158>)
 8001ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab6:	601a      	str	r2, [r3, #0]
					break;
 8001ab8:	e03e      	b.n	8001b38 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <xTaskIncrementTick+0x14c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d203      	bcs.n	8001ada <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ad2:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <xTaskIncrementTick+0x158>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ad8:	e02e      	b.n	8001b38 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3304      	adds	r3, #4
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe ffcb 	bl	8000a7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3318      	adds	r3, #24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe ffc2 	bl	8000a7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	2201      	movs	r2, #1
 8001afc:	409a      	lsls	r2, r3
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <xTaskIncrementTick+0x15c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <xTaskIncrementTick+0x15c>)
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <xTaskIncrementTick+0x160>)
 8001b16:	441a      	add	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f7fe ff4e 	bl	80009c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <xTaskIncrementTick+0x164>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3b9      	bcc.n	8001aa6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b36:	e7b6      	b.n	8001aa6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <xTaskIncrementTick+0x164>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3e:	4915      	ldr	r1, [pc, #84]	; (8001b94 <xTaskIncrementTick+0x160>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d907      	bls.n	8001b60 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e004      	b.n	8001b60 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <xTaskIncrementTick+0x168>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <xTaskIncrementTick+0x168>)
 8001b5e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <xTaskIncrementTick+0x16c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001b6c:	697b      	ldr	r3, [r7, #20]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000860 	.word	0x20000860
 8001b7c:	2000083c 	.word	0x2000083c
 8001b80:	200007f0 	.word	0x200007f0
 8001b84:	200007f4 	.word	0x200007f4
 8001b88:	20000850 	.word	0x20000850
 8001b8c:	20000858 	.word	0x20000858
 8001b90:	20000840 	.word	0x20000840
 8001b94:	2000073c 	.word	0x2000073c
 8001b98:	20000738 	.word	0x20000738
 8001b9c:	20000848 	.word	0x20000848
 8001ba0:	2000084c 	.word	0x2000084c

08001ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <vTaskSwitchContext+0xa0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <vTaskSwitchContext+0xa4>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001bb8:	e03e      	b.n	8001c38 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <vTaskSwitchContext+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <vTaskSwitchContext+0xa8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f1c3 031f 	rsb	r3, r3, #31
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	491e      	ldr	r1, [pc, #120]	; (8001c50 <vTaskSwitchContext+0xac>)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <vTaskSwitchContext+0x5a>
	__asm volatile
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	e7fe      	b.n	8001bfc <vTaskSwitchContext+0x58>
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <vTaskSwitchContext+0xac>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	3308      	adds	r3, #8
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d104      	bne.n	8001c2e <vTaskSwitchContext+0x8a>
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <vTaskSwitchContext+0xb0>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	20000860 	.word	0x20000860
 8001c48:	2000084c 	.word	0x2000084c
 8001c4c:	20000840 	.word	0x20000840
 8001c50:	2000073c 	.word	0x2000073c
 8001c54:	20000738 	.word	0x20000738

08001c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <vTaskPlaceOnEventList+0x24>
 8001c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e7fe      	b.n	8001c7a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <vTaskPlaceOnEventList+0x44>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3318      	adds	r3, #24
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe febf 	bl	8000a08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	f000 fa89 	bl	80021a4 <prvAddCurrentTaskToDelayedList>
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000738 	.word	0x20000738

08001ca0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <vTaskPlaceOnEventListRestricted+0x26>
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	f3bf 8f6f 	isb	sy
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e7fe      	b.n	8001cc4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <vTaskPlaceOnEventListRestricted+0x50>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3318      	adds	r3, #24
 8001ccc:	4619      	mov	r1, r3
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7fe fe76 	bl	80009c0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	68b8      	ldr	r0, [r7, #8]
 8001ce4:	f000 fa5e 	bl	80021a4 <prvAddCurrentTaskToDelayedList>
	}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000738 	.word	0x20000738

08001cf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <xTaskRemoveFromEventList+0x2a>
 8001d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0e:	f383 8811 	msr	BASEPRI, r3
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f3bf 8f4f 	dsb	sy
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e7fe      	b.n	8001d1c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	3318      	adds	r3, #24
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fea9 	bl	8000a7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <xTaskRemoveFromEventList+0xac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d11c      	bne.n	8001d6a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fea0 	bl	8000a7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	2201      	movs	r2, #1
 8001d40:	409a      	lsls	r2, r3
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <xTaskRemoveFromEventList+0xb0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <xTaskRemoveFromEventList+0xb0>)
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <xTaskRemoveFromEventList+0xb4>)
 8001d5a:	441a      	add	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4610      	mov	r0, r2
 8001d64:	f7fe fe2c 	bl	80009c0 <vListInsertEnd>
 8001d68:	e005      	b.n	8001d76 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480e      	ldr	r0, [pc, #56]	; (8001dac <xTaskRemoveFromEventList+0xb8>)
 8001d72:	f7fe fe25 	bl	80009c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <xTaskRemoveFromEventList+0xbc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d905      	bls.n	8001d90 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <xTaskRemoveFromEventList+0xc0>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e001      	b.n	8001d94 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001d94:	697b      	ldr	r3, [r7, #20]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000860 	.word	0x20000860
 8001da4:	20000840 	.word	0x20000840
 8001da8:	2000073c 	.word	0x2000073c
 8001dac:	200007f8 	.word	0x200007f8
 8001db0:	20000738 	.word	0x20000738
 8001db4:	2000084c 	.word	0x2000084c

08001db8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <vTaskInternalSetTimeOutState+0x24>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <vTaskInternalSetTimeOutState+0x28>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	20000850 	.word	0x20000850
 8001de0:	2000083c 	.word	0x2000083c

08001de4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <xTaskCheckForTimeOut+0x24>
 8001df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e7fe      	b.n	8001e06 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <xTaskCheckForTimeOut+0x3e>
 8001e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e12:	f383 8811 	msr	BASEPRI, r3
 8001e16:	f3bf 8f6f 	isb	sy
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e7fe      	b.n	8001e20 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001e22:	f000 fe7b 	bl	8002b1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <xTaskCheckForTimeOut+0xb8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d102      	bne.n	8001e46 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	e023      	b.n	8001e8e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <xTaskCheckForTimeOut+0xbc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d007      	beq.n	8001e62 <xTaskCheckForTimeOut+0x7e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d302      	bcc.n	8001e62 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	e015      	b.n	8001e8e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d20b      	bcs.n	8001e84 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	1ad2      	subs	r2, r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff9d 	bl	8001db8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	e004      	b.n	8001e8e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001e8e:	f000 fe73 	bl	8002b78 <vPortExitCritical>

	return xReturn;
 8001e92:	69fb      	ldr	r3, [r7, #28]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	2000083c 	.word	0x2000083c
 8001ea0:	20000850 	.word	0x20000850

08001ea4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <vTaskMissedYield+0x14>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	2000084c 	.word	0x2000084c

08001ebc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001ec4:	f000 f852 	bl	8001f6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <prvIdleTask+0x28>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d9f9      	bls.n	8001ec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <prvIdleTask+0x2c>)
 8001ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ee0:	e7f0      	b.n	8001ec4 <prvIdleTask+0x8>
 8001ee2:	bf00      	nop
 8001ee4:	2000073c 	.word	0x2000073c
 8001ee8:	e000ed04 	.word	0xe000ed04

08001eec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	e00c      	b.n	8001f12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <prvInitialiseTaskLists+0x60>)
 8001f04:	4413      	add	r3, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fd2d 	bl	8000966 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d9ef      	bls.n	8001ef8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <prvInitialiseTaskLists+0x64>)
 8001f1a:	f7fe fd24 	bl	8000966 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <prvInitialiseTaskLists+0x68>)
 8001f20:	f7fe fd21 	bl	8000966 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <prvInitialiseTaskLists+0x6c>)
 8001f26:	f7fe fd1e 	bl	8000966 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001f2a:	480c      	ldr	r0, [pc, #48]	; (8001f5c <prvInitialiseTaskLists+0x70>)
 8001f2c:	f7fe fd1b 	bl	8000966 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001f30:	480b      	ldr	r0, [pc, #44]	; (8001f60 <prvInitialiseTaskLists+0x74>)
 8001f32:	f7fe fd18 	bl	8000966 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <prvInitialiseTaskLists+0x78>)
 8001f38:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <prvInitialiseTaskLists+0x64>)
 8001f3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <prvInitialiseTaskLists+0x7c>)
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <prvInitialiseTaskLists+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000073c 	.word	0x2000073c
 8001f50:	200007c8 	.word	0x200007c8
 8001f54:	200007dc 	.word	0x200007dc
 8001f58:	200007f8 	.word	0x200007f8
 8001f5c:	2000080c 	.word	0x2000080c
 8001f60:	20000824 	.word	0x20000824
 8001f64:	200007f0 	.word	0x200007f0
 8001f68:	200007f4 	.word	0x200007f4

08001f6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f72:	e019      	b.n	8001fa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001f74:	f000 fdd2 	bl	8002b1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <prvCheckTasksWaitingTermination+0x4c>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fd78 	bl	8000a7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <prvCheckTasksWaitingTermination+0x50>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <prvCheckTasksWaitingTermination+0x50>)
 8001f92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <prvCheckTasksWaitingTermination+0x54>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <prvCheckTasksWaitingTermination+0x54>)
 8001f9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001f9e:	f000 fdeb 	bl	8002b78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f80e 	bl	8001fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <prvCheckTasksWaitingTermination+0x54>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e1      	bne.n	8001f74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000080c 	.word	0x2000080c
 8001fbc:	20000838 	.word	0x20000838
 8001fc0:	20000820 	.word	0x20000820

08001fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d108      	bne.n	8001fe8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 ff7a 	bl	8002ed4 <vPortFree>
				vPortFree( pxTCB );
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 ff77 	bl	8002ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001fe6:	e017      	b.n	8002018 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d103      	bne.n	8001ffa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 ff6e 	bl	8002ed4 <vPortFree>
	}
 8001ff8:	e00e      	b.n	8002018 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002000:	2b02      	cmp	r3, #2
 8002002:	d009      	beq.n	8002018 <prvDeleteTCB+0x54>
 8002004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	e7fe      	b.n	8002016 <prvDeleteTCB+0x52>
	}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <prvResetNextTaskUnblockTime+0x38>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <prvResetNextTaskUnblockTime+0x3c>)
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002038:	e008      	b.n	800204c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <prvResetNextTaskUnblockTime+0x38>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <prvResetNextTaskUnblockTime+0x3c>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	200007f0 	.word	0x200007f0
 800205c:	20000858 	.word	0x20000858

08002060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <xTaskGetSchedulerState+0x34>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800206e:	2301      	movs	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	e008      	b.n	8002086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <xTaskGetSchedulerState+0x38>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800207c:	2302      	movs	r3, #2
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	e001      	b.n	8002086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002086:	687b      	ldr	r3, [r7, #4]
	}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20000844 	.word	0x20000844
 8002098:	20000860 	.word	0x20000860

0800209c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d06c      	beq.n	800218c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80020b2:	4b39      	ldr	r3, [pc, #228]	; (8002198 <xTaskPriorityDisinherit+0xfc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d009      	beq.n	80020d0 <xTaskPriorityDisinherit+0x34>
 80020bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e7fe      	b.n	80020ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <xTaskPriorityDisinherit+0x50>
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	e7fe      	b.n	80020ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	429a      	cmp	r2, r3
 8002100:	d044      	beq.n	800218c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	2b00      	cmp	r3, #0
 8002108:	d140      	bne.n	800218c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3304      	adds	r3, #4
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fcb3 	bl	8000a7a <uxListRemove>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211e:	491f      	ldr	r1, [pc, #124]	; (800219c <xTaskPriorityDisinherit+0x100>)
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <xTaskPriorityDisinherit+0xaa>
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	2201      	movs	r2, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <xTaskPriorityDisinherit+0x104>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4013      	ands	r3, r2
 8002142:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <xTaskPriorityDisinherit+0x104>)
 8002144:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f1c3 0207 	rsb	r2, r3, #7
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	2201      	movs	r2, #1
 8002160:	409a      	lsls	r2, r3
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <xTaskPriorityDisinherit+0x104>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <xTaskPriorityDisinherit+0x104>)
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4a08      	ldr	r2, [pc, #32]	; (800219c <xTaskPriorityDisinherit+0x100>)
 800217a:	441a      	add	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f7fe fc1c 	bl	80009c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002188:	2301      	movs	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800218c:	697b      	ldr	r3, [r7, #20]
	}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000738 	.word	0x20000738
 800219c:	2000073c 	.word	0x2000073c
 80021a0:	20000840 	.word	0x20000840

080021a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <prvAddCurrentTaskToDelayedList+0xb0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3304      	adds	r3, #4
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fc5d 	bl	8000a7a <uxListRemove>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10b      	bne.n	80021de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	2201      	movs	r2, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <prvAddCurrentTaskToDelayedList+0xb8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4013      	ands	r3, r2
 80021da:	4a20      	ldr	r2, [pc, #128]	; (800225c <prvAddCurrentTaskToDelayedList+0xb8>)
 80021dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d10a      	bne.n	80021fc <prvAddCurrentTaskToDelayedList+0x58>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3304      	adds	r3, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	481a      	ldr	r0, [pc, #104]	; (8002260 <prvAddCurrentTaskToDelayedList+0xbc>)
 80021f6:	f7fe fbe3 	bl	80009c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021fa:	e026      	b.n	800224a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d209      	bcs.n	8002228 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3304      	adds	r3, #4
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f7fe fbf1 	bl	8000a08 <vListInsert>
}
 8002226:	e010      	b.n	800224a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <prvAddCurrentTaskToDelayedList+0xc4>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3304      	adds	r3, #4
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7fe fbe7 	bl	8000a08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <prvAddCurrentTaskToDelayedList+0xc8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	d202      	bcs.n	800224a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002244:	4a09      	ldr	r2, [pc, #36]	; (800226c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6013      	str	r3, [r2, #0]
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000083c 	.word	0x2000083c
 8002258:	20000738 	.word	0x20000738
 800225c:	20000840 	.word	0x20000840
 8002260:	20000824 	.word	0x20000824
 8002264:	200007f4 	.word	0x200007f4
 8002268:	200007f0 	.word	0x200007f0
 800226c:	20000858 	.word	0x20000858

08002270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800227a:	f000 fae7 	bl	800284c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <xTimerCreateTimerTask+0x80>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d021      	beq.n	80022ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800228e:	1d3a      	adds	r2, r7, #4
 8002290:	f107 0108 	add.w	r1, r7, #8
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4618      	mov	r0, r3
 800229a:	f7fd ffb3 	bl	8000204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	9202      	str	r2, [sp, #8]
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	2302      	movs	r3, #2
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2300      	movs	r3, #0
 80022ae:	460a      	mov	r2, r1
 80022b0:	4910      	ldr	r1, [pc, #64]	; (80022f4 <xTimerCreateTimerTask+0x84>)
 80022b2:	4811      	ldr	r0, [pc, #68]	; (80022f8 <xTimerCreateTimerTask+0x88>)
 80022b4:	f7ff f8dc 	bl	8001470 <xTaskCreateStatic>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <xTimerCreateTimerTask+0x8c>)
 80022bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <xTimerCreateTimerTask+0x8c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80022c6:	2301      	movs	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <xTimerCreateTimerTask+0x74>
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e7fe      	b.n	80022e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80022e4:	697b      	ldr	r3, [r7, #20]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000894 	.word	0x20000894
 80022f4:	08003a9c 	.word	0x08003a9c
 80022f8:	08002431 	.word	0x08002431
 80022fc:	20000898 	.word	0x20000898

08002300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <xTimerGenericCommand+0x2c>
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	e7fe      	b.n	800232a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <xTimerGenericCommand+0x94>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d02a      	beq.n	800238a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	dc18      	bgt.n	8002378 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002346:	f7ff fe8b 	bl	8002060 <xTaskGetSchedulerState>
 800234a:	4603      	mov	r3, r0
 800234c:	2b02      	cmp	r3, #2
 800234e:	d109      	bne.n	8002364 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <xTimerGenericCommand+0x94>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f107 0114 	add.w	r1, r7, #20
 8002358:	2300      	movs	r3, #0
 800235a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800235c:	f7fe fcb2 	bl	8000cc4 <xQueueGenericSend>
 8002360:	6278      	str	r0, [r7, #36]	; 0x24
 8002362:	e012      	b.n	800238a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <xTimerGenericCommand+0x94>)
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	f107 0114 	add.w	r1, r7, #20
 800236c:	2300      	movs	r3, #0
 800236e:	2200      	movs	r2, #0
 8002370:	f7fe fca8 	bl	8000cc4 <xQueueGenericSend>
 8002374:	6278      	str	r0, [r7, #36]	; 0x24
 8002376:	e008      	b.n	800238a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <xTimerGenericCommand+0x94>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	f107 0114 	add.w	r1, r7, #20
 8002380:	2300      	movs	r3, #0
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	f7fe fd98 	bl	8000eb8 <xQueueGenericSendFromISR>
 8002388:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800238c:	4618      	mov	r0, r3
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000894 	.word	0x20000894

08002398 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <prvProcessExpiredTimer+0x94>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fb62 	bl	8000a7a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d021      	beq.n	8002408 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	18d1      	adds	r1, r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f000 f8d1 	bl	8002578 <prvInsertTimerInActiveList>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01e      	beq.n	800241a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80023dc:	2300      	movs	r3, #0
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2300      	movs	r3, #0
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	2100      	movs	r1, #0
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff8a 	bl	8002300 <xTimerGenericCommand>
 80023ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d112      	bne.n	800241a <prvProcessExpiredTimer+0x82>
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e7fe      	b.n	8002406 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	4798      	blx	r3
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000088c 	.word	0x2000088c

08002430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f857 	bl	80024f0 <prvGetNextExpireTime>
 8002442:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4619      	mov	r1, r3
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f803 	bl	8002454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800244e:	f000 f8d5 	bl	80025fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002452:	e7f1      	b.n	8002438 <prvTimerTask+0x8>

08002454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800245e:	f7ff fa2f 	bl	80018c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f866 	bl	8002538 <prvSampleTimeNow>
 800246c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d130      	bne.n	80024d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <prvProcessTimerOrBlockTask+0x3c>
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	429a      	cmp	r2, r3
 8002480:	d806      	bhi.n	8002490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002482:	f7ff fa2b 	bl	80018dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff85 	bl	8002398 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800248e:	e024      	b.n	80024da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <prvProcessTimerOrBlockTask+0x90>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <prvProcessTimerOrBlockTask+0x50>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <prvProcessTimerOrBlockTask+0x52>
 80024a4:	2300      	movs	r3, #0
 80024a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <prvProcessTimerOrBlockTask+0x94>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe ffa7 	bl	8001408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80024ba:	f7ff fa0f 	bl	80018dc <xTaskResumeAll>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <prvProcessTimerOrBlockTask+0x98>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
}
 80024d4:	e001      	b.n	80024da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80024d6:	f7ff fa01 	bl	80018dc <xTaskResumeAll>
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000890 	.word	0x20000890
 80024e8:	20000894 	.word	0x20000894
 80024ec:	e000ed04 	.word	0xe000ed04

080024f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <prvGetNextExpireTime+0x44>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <prvGetNextExpireTime+0x16>
 8002502:	2201      	movs	r2, #1
 8002504:	e000      	b.n	8002508 <prvGetNextExpireTime+0x18>
 8002506:	2200      	movs	r2, #0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <prvGetNextExpireTime+0x44>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	e001      	b.n	8002524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002524:	68fb      	ldr	r3, [r7, #12]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2000088c 	.word	0x2000088c

08002538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002540:	f7ff fa68 	bl	8001a14 <xTaskGetTickCount>
 8002544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <prvSampleTimeNow+0x3c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	429a      	cmp	r2, r3
 800254e:	d205      	bcs.n	800255c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002550:	f000 f918 	bl	8002784 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e002      	b.n	8002562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <prvSampleTimeNow+0x3c>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000089c 	.word	0x2000089c

08002578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d812      	bhi.n	80025c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	1ad2      	subs	r2, r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d302      	bcc.n	80025b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e01b      	b.n	80025ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <prvInsertTimerInActiveList+0x7c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f7fe fa23 	bl	8000a08 <vListInsert>
 80025c2:	e012      	b.n	80025ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d206      	bcs.n	80025da <prvInsertTimerInActiveList+0x62>
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d302      	bcc.n	80025da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e007      	b.n	80025ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <prvInsertTimerInActiveList+0x80>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3304      	adds	r3, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f7fe fa0f 	bl	8000a08 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80025ea:	697b      	ldr	r3, [r7, #20]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000890 	.word	0x20000890
 80025f8:	2000088c 	.word	0x2000088c

080025fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002602:	e0ac      	b.n	800275e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f2c0 80a8 	blt.w	800275c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	3304      	adds	r3, #4
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fa2c 	bl	8000a7a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff87 	bl	8002538 <prvSampleTimeNow>
 800262a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b09      	cmp	r3, #9
 8002630:	f200 8095 	bhi.w	800275e <prvProcessReceivedCommands+0x162>
 8002634:	a201      	add	r2, pc, #4	; (adr r2, 800263c <prvProcessReceivedCommands+0x40>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002665 	.word	0x08002665
 8002640:	08002665 	.word	0x08002665
 8002644:	08002665 	.word	0x08002665
 8002648:	080026d7 	.word	0x080026d7
 800264c:	080026eb 	.word	0x080026eb
 8002650:	08002733 	.word	0x08002733
 8002654:	08002665 	.word	0x08002665
 8002658:	08002665 	.word	0x08002665
 800265c:	080026d7 	.word	0x080026d7
 8002660:	080026eb 	.word	0x080026eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	18d1      	adds	r1, r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002684:	f7ff ff78 	bl	8002578 <prvInsertTimerInActiveList>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d067      	beq.n	800275e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05c      	beq.n	800275e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	441a      	add	r2, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2300      	movs	r3, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b6:	f7ff fe23 	bl	8002300 <xTimerGenericCommand>
 80026ba:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d14d      	bne.n	800275e <prvProcessReceivedCommands+0x162>
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	e7fe      	b.n	80026d4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80026e8:	e039      	b.n	800275e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <prvProcessReceivedCommands+0x122>
 800270a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270e:	f383 8811 	msr	BASEPRI, r3
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	f3bf 8f4f 	dsb	sy
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e7fe      	b.n	800271c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	18d1      	adds	r1, r2, r3
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800272c:	f7ff ff24 	bl	8002578 <prvInsertTimerInActiveList>
					break;
 8002730:	e015      	b.n	800275e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8002740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002742:	f000 fbc7 	bl	8002ed4 <vPortFree>
 8002746:	e00a      	b.n	800275e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	b2da      	uxtb	r2, r3
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800275a:	e000      	b.n	800275e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800275c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <prvProcessReceivedCommands+0x184>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f107 0108 	add.w	r1, r7, #8
 8002766:	2200      	movs	r2, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fc39 	bl	8000fe0 <xQueueReceive>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	f47f af47 	bne.w	8002604 <prvProcessReceivedCommands+0x8>
	}
}
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000894 	.word	0x20000894

08002784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800278a:	e047      	b.n	800281c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <prvSwitchTimerLists+0xc0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <prvSwitchTimerLists+0xc0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3304      	adds	r3, #4
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe f968 	bl	8000a7a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d02d      	beq.n	800281c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d90e      	bls.n	80027f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <prvSwitchTimerLists+0xc0>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3304      	adds	r3, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f7fe f90d 	bl	8000a08 <vListInsert>
 80027ee:	e015      	b.n	800281c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027f0:	2300      	movs	r3, #0
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2300      	movs	r3, #0
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	2100      	movs	r1, #0
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff fd80 	bl	8002300 <xTimerGenericCommand>
 8002800:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <prvSwitchTimerLists+0x98>
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	e7fe      	b.n	800281a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <prvSwitchTimerLists+0xc0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1b2      	bne.n	800278c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <prvSwitchTimerLists+0xc0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <prvSwitchTimerLists+0xc4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <prvSwitchTimerLists+0xc0>)
 8002832:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <prvSwitchTimerLists+0xc4>)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	6013      	str	r3, [r2, #0]
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000088c 	.word	0x2000088c
 8002848:	20000890 	.word	0x20000890

0800284c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002852:	f000 f963 	bl	8002b1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <prvCheckForValidListAndQueue+0x60>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d120      	bne.n	80028a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800285e:	4814      	ldr	r0, [pc, #80]	; (80028b0 <prvCheckForValidListAndQueue+0x64>)
 8002860:	f7fe f881 	bl	8000966 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002864:	4813      	ldr	r0, [pc, #76]	; (80028b4 <prvCheckForValidListAndQueue+0x68>)
 8002866:	f7fe f87e 	bl	8000966 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <prvCheckForValidListAndQueue+0x6c>)
 800286c:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <prvCheckForValidListAndQueue+0x64>)
 800286e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <prvCheckForValidListAndQueue+0x70>)
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <prvCheckForValidListAndQueue+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002876:	2300      	movs	r3, #0
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <prvCheckForValidListAndQueue+0x74>)
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <prvCheckForValidListAndQueue+0x78>)
 800287e:	210c      	movs	r1, #12
 8002880:	200a      	movs	r0, #10
 8002882:	f7fe f98d 	bl	8000ba0 <xQueueGenericCreateStatic>
 8002886:	4602      	mov	r2, r0
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <prvCheckForValidListAndQueue+0x60>)
 800288a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <prvCheckForValidListAndQueue+0x60>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <prvCheckForValidListAndQueue+0x60>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	490b      	ldr	r1, [pc, #44]	; (80028c8 <prvCheckForValidListAndQueue+0x7c>)
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fd8c 	bl	80013b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028a0:	f000 f96a 	bl	8002b78 <vPortExitCritical>
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000894 	.word	0x20000894
 80028b0:	20000864 	.word	0x20000864
 80028b4:	20000878 	.word	0x20000878
 80028b8:	2000088c 	.word	0x2000088c
 80028bc:	20000890 	.word	0x20000890
 80028c0:	20000918 	.word	0x20000918
 80028c4:	200008a0 	.word	0x200008a0
 80028c8:	08003aa4 	.word	0x08003aa4

080028cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3b04      	subs	r3, #4
 80028dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3b04      	subs	r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f023 0201 	bic.w	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3b04      	subs	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <pxPortInitialiseStack+0x64>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3b14      	subs	r3, #20
 8002906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3b04      	subs	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f06f 0202 	mvn.w	r2, #2
 800291a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3b20      	subs	r3, #32
 8002920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	08002935 	.word	0x08002935

08002934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <prvTaskExitError+0x50>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d009      	beq.n	800295c <prvTaskExitError+0x28>
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e7fe      	b.n	800295a <prvTaskExitError+0x26>
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800296e:	bf00      	nop
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0fc      	beq.n	8002970 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000008 	.word	0x20000008
	...

08002990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <pxCurrentTCBConst2>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	6808      	ldr	r0, [r1, #0]
 8002996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299a:	f380 8809 	msr	PSP, r0
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f380 8811 	msr	BASEPRI, r0
 80029aa:	4770      	bx	lr
 80029ac:	f3af 8000 	nop.w

080029b0 <pxCurrentTCBConst2>:
 80029b0:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop

080029b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80029b8:	4808      	ldr	r0, [pc, #32]	; (80029dc <prvPortStartFirstTask+0x24>)
 80029ba:	6800      	ldr	r0, [r0, #0]
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	f380 8808 	msr	MSP, r0
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f380 8814 	msr	CONTROL, r0
 80029ca:	b662      	cpsie	i
 80029cc:	b661      	cpsie	f
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	df00      	svc	0
 80029d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029da:	bf00      	nop
 80029dc:	e000ed08 	.word	0xe000ed08

080029e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <xPortStartScheduler+0x118>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a44      	ldr	r2, [pc, #272]	; (8002afc <xPortStartScheduler+0x11c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d109      	bne.n	8002a04 <xPortStartScheduler+0x24>
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e7fe      	b.n	8002a02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a04:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <xPortStartScheduler+0x118>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a3d      	ldr	r2, [pc, #244]	; (8002b00 <xPortStartScheduler+0x120>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d109      	bne.n	8002a22 <xPortStartScheduler+0x42>
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e7fe      	b.n	8002a20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <xPortStartScheduler+0x124>)
 8002a24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	22ff      	movs	r2, #255	; 0xff
 8002a32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <xPortStartScheduler+0x128>)
 8002a48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a50:	e009      	b.n	8002a66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b80      	cmp	r3, #128	; 0x80
 8002a70:	d0ef      	beq.n	8002a52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d009      	beq.n	8002a92 <xPortStartScheduler+0xb2>
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	e7fe      	b.n	8002a90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <xPortStartScheduler+0x12c>)
 8002aa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <xPortStartScheduler+0x130>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <xPortStartScheduler+0x130>)
 8002ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <xPortStartScheduler+0x130>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <xPortStartScheduler+0x130>)
 8002ac2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ac6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002ac8:	f000 f8d6 	bl	8002c78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <xPortStartScheduler+0x134>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002ad2:	f000 f8f5 	bl	8002cc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <xPortStartScheduler+0x138>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a0f      	ldr	r2, [pc, #60]	; (8002b18 <xPortStartScheduler+0x138>)
 8002adc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ae0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002ae2:	f7ff ff69 	bl	80029b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ae6:	f7ff f85d 	bl	8001ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8002aea:	f7ff ff23 	bl	8002934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	e000ed00 	.word	0xe000ed00
 8002afc:	410fc271 	.word	0x410fc271
 8002b00:	410fc270 	.word	0x410fc270
 8002b04:	e000e400 	.word	0xe000e400
 8002b08:	20000960 	.word	0x20000960
 8002b0c:	20000964 	.word	0x20000964
 8002b10:	e000ed20 	.word	0xe000ed20
 8002b14:	20000008 	.word	0x20000008
 8002b18:	e000ef34 	.word	0xe000ef34

08002b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <vPortEnterCritical+0x54>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a0d      	ldr	r2, [pc, #52]	; (8002b70 <vPortEnterCritical+0x54>)
 8002b3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <vPortEnterCritical+0x54>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10e      	bne.n	8002b64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <vPortEnterCritical+0x58>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <vPortEnterCritical+0x48>
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	e7fe      	b.n	8002b62 <vPortEnterCritical+0x46>
	}
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000008 	.word	0x20000008
 8002b74:	e000ed04 	.word	0xe000ed04

08002b78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <vPortExitCritical+0x4c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <vPortExitCritical+0x22>
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	e7fe      	b.n	8002b98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <vPortExitCritical+0x4c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <vPortExitCritical+0x4c>)
 8002ba2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <vPortExitCritical+0x4c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d104      	bne.n	8002bb6 <vPortExitCritical+0x3e>
 8002bac:	2300      	movs	r3, #0
 8002bae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000008 	.word	0x20000008
	...

08002bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002bd0:	f3ef 8009 	mrs	r0, PSP
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <pxCurrentTCBConst>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	f01e 0f10 	tst.w	lr, #16
 8002be0:	bf08      	it	eq
 8002be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bea:	6010      	str	r0, [r2, #0]
 8002bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bf4:	f380 8811 	msr	BASEPRI, r0
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f7fe ffd0 	bl	8001ba4 <vTaskSwitchContext>
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	f380 8811 	msr	BASEPRI, r0
 8002c0c:	bc09      	pop	{r0, r3}
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	6808      	ldr	r0, [r1, #0]
 8002c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c16:	f01e 0f10 	tst.w	lr, #16
 8002c1a:	bf08      	it	eq
 8002c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c20:	f380 8809 	msr	PSP, r0
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	f3af 8000 	nop.w

08002c30 <pxCurrentTCBConst>:
 8002c30:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop

08002c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002c50:	f7fe fef0 	bl	8001a34 <xTaskIncrementTick>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <xPortSysTickHandler+0x3c>)
 8002c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	2300      	movs	r3, #0
 8002c64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	e000ed04 	.word	0xe000ed04

08002c78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <vPortSetupTimerInterrupt+0x34>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <vPortSetupTimerInterrupt+0x38>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <vPortSetupTimerInterrupt+0x3c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <vPortSetupTimerInterrupt+0x40>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <vPortSetupTimerInterrupt+0x44>)
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <vPortSetupTimerInterrupt+0x34>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010
 8002cb0:	e000e018 	.word	0xe000e018
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	10624dd3 	.word	0x10624dd3
 8002cbc:	e000e014 	.word	0xe000e014

08002cc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002cc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002cd0 <vPortEnableVFP+0x10>
 8002cc4:	6801      	ldr	r1, [r0, #0]
 8002cc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002cca:	6001      	str	r1, [r0, #0]
 8002ccc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002cce:	bf00      	nop
 8002cd0:	e000ed88 	.word	0xe000ed88

08002cd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002cda:	f3ef 8305 	mrs	r3, IPSR
 8002cde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	d913      	bls.n	8002d0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <vPortValidateInterruptPriority+0x6c>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <vPortValidateInterruptPriority+0x70>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	7afa      	ldrb	r2, [r7, #11]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d209      	bcs.n	8002d0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	e7fe      	b.n	8002d0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <vPortValidateInterruptPriority+0x74>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <vPortValidateInterruptPriority+0x78>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d909      	bls.n	8002d32 <vPortValidateInterruptPriority+0x5e>
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	e7fe      	b.n	8002d30 <vPortValidateInterruptPriority+0x5c>
	}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000e3f0 	.word	0xe000e3f0
 8002d44:	20000960 	.word	0x20000960
 8002d48:	e000ed0c 	.word	0xe000ed0c
 8002d4c:	20000964 	.word	0x20000964

08002d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	; 0x28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d5c:	f7fe fdb0 	bl	80018c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d60:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <pvPortMalloc+0x170>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d68:	f000 f90c 	bl	8002f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d6c:	4b55      	ldr	r3, [pc, #340]	; (8002ec4 <pvPortMalloc+0x174>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 808c 	bne.w	8002e92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01c      	beq.n	8002dba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002d80:	2208      	movs	r2, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d013      	beq.n	8002dba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f023 0307 	bic.w	r3, r3, #7
 8002d98:	3308      	adds	r3, #8
 8002d9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <pvPortMalloc+0x6a>
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	e7fe      	b.n	8002db8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d068      	beq.n	8002e92 <pvPortMalloc+0x142>
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <pvPortMalloc+0x178>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d863      	bhi.n	8002e92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002dca:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <pvPortMalloc+0x17c>)
 8002dcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <pvPortMalloc+0x17c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dd4:	e004      	b.n	8002de0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d903      	bls.n	8002df2 <pvPortMalloc+0xa2>
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f1      	bne.n	8002dd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002df2:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <pvPortMalloc+0x170>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d04a      	beq.n	8002e92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2208      	movs	r2, #8
 8002e02:	4413      	add	r3, r2
 8002e04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	1ad2      	subs	r2, r2, r3
 8002e16:	2308      	movs	r3, #8
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d91e      	bls.n	8002e5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <pvPortMalloc+0xf4>
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e7fe      	b.n	8002e42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1ad2      	subs	r2, r2, r3
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e56:	69b8      	ldr	r0, [r7, #24]
 8002e58:	f000 f8f6 	bl	8003048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <pvPortMalloc+0x178>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	4a18      	ldr	r2, [pc, #96]	; (8002ec8 <pvPortMalloc+0x178>)
 8002e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <pvPortMalloc+0x178>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <pvPortMalloc+0x180>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d203      	bcs.n	8002e7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <pvPortMalloc+0x178>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <pvPortMalloc+0x180>)
 8002e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <pvPortMalloc+0x174>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e92:	f7fe fd23 	bl	80018dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <pvPortMalloc+0x164>
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e7fe      	b.n	8002eb2 <pvPortMalloc+0x162>
	return pvReturn;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20004570 	.word	0x20004570
 8002ec4:	2000457c 	.word	0x2000457c
 8002ec8:	20004574 	.word	0x20004574
 8002ecc:	20004568 	.word	0x20004568
 8002ed0:	20004578 	.word	0x20004578

08002ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d046      	beq.n	8002f74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	425b      	negs	r3, r3
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4413      	add	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <vPortFree+0xa8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <vPortFree+0x42>
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	e7fe      	b.n	8002f14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <vPortFree+0x5e>
 8002f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	e7fe      	b.n	8002f30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <vPortFree+0xa8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d019      	beq.n	8002f74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d115      	bne.n	8002f74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <vPortFree+0xa8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f58:	f7fe fcb2 	bl	80018c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <vPortFree+0xac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <vPortFree+0xac>)
 8002f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f6a:	6938      	ldr	r0, [r7, #16]
 8002f6c:	f000 f86c 	bl	8003048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002f70:	f7fe fcb4 	bl	80018dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002f74:	bf00      	nop
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	2000457c 	.word	0x2000457c
 8002f80:	20004574 	.word	0x20004574

08002f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <prvHeapInit+0xac>)
 8002f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <prvHeapInit+0xac>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fbc:	4a1d      	ldr	r2, [pc, #116]	; (8003034 <prvHeapInit+0xb0>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <prvHeapInit+0xb0>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <prvHeapInit+0xb4>)
 8002fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <prvHeapInit+0xb4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <prvHeapInit+0xb4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	1ad2      	subs	r2, r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <prvHeapInit+0xb4>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a0a      	ldr	r2, [pc, #40]	; (800303c <prvHeapInit+0xb8>)
 8003012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a09      	ldr	r2, [pc, #36]	; (8003040 <prvHeapInit+0xbc>)
 800301a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <prvHeapInit+0xc0>)
 800301e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	20000968 	.word	0x20000968
 8003034:	20004568 	.word	0x20004568
 8003038:	20004570 	.word	0x20004570
 800303c:	20004578 	.word	0x20004578
 8003040:	20004574 	.word	0x20004574
 8003044:	2000457c 	.word	0x2000457c

08003048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <prvInsertBlockIntoFreeList+0xac>)
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e002      	b.n	800305c <prvInsertBlockIntoFreeList+0x14>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d8f7      	bhi.n	8003056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d108      	bne.n	800308a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	441a      	add	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d118      	bne.n	80030d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <prvInsertBlockIntoFreeList+0xb0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d00d      	beq.n	80030c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	e008      	b.n	80030d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <prvInsertBlockIntoFreeList+0xb0>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e003      	b.n	80030d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d002      	beq.n	80030e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20004568 	.word	0x20004568
 80030f8:	20004570 	.word	0x20004570

080030fc <__errno>:
 80030fc:	4b01      	ldr	r3, [pc, #4]	; (8003104 <__errno+0x8>)
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4e0d      	ldr	r6, [pc, #52]	; (8003140 <__libc_init_array+0x38>)
 800310c:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 800310e:	1ba4      	subs	r4, r4, r6
 8003110:	10a4      	asrs	r4, r4, #2
 8003112:	2500      	movs	r5, #0
 8003114:	42a5      	cmp	r5, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	4e0b      	ldr	r6, [pc, #44]	; (8003148 <__libc_init_array+0x40>)
 800311a:	4c0c      	ldr	r4, [pc, #48]	; (800314c <__libc_init_array+0x44>)
 800311c:	f000 fc94 	bl	8003a48 <_init>
 8003120:	1ba4      	subs	r4, r4, r6
 8003122:	10a4      	asrs	r4, r4, #2
 8003124:	2500      	movs	r5, #0
 8003126:	42a5      	cmp	r5, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003130:	4798      	blx	r3
 8003132:	3501      	adds	r5, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800313a:	4798      	blx	r3
 800313c:	3501      	adds	r5, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	08003b10 	.word	0x08003b10
 8003144:	08003b10 	.word	0x08003b10
 8003148:	08003b10 	.word	0x08003b10
 800314c:	08003b14 	.word	0x08003b14

08003150 <memcpy>:
 8003150:	b510      	push	{r4, lr}
 8003152:	1e43      	subs	r3, r0, #1
 8003154:	440a      	add	r2, r1
 8003156:	4291      	cmp	r1, r2
 8003158:	d100      	bne.n	800315c <memcpy+0xc>
 800315a:	bd10      	pop	{r4, pc}
 800315c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003164:	e7f7      	b.n	8003156 <memcpy+0x6>

08003166 <memset>:
 8003166:	4402      	add	r2, r0
 8003168:	4603      	mov	r3, r0
 800316a:	4293      	cmp	r3, r2
 800316c:	d100      	bne.n	8003170 <memset+0xa>
 800316e:	4770      	bx	lr
 8003170:	f803 1b01 	strb.w	r1, [r3], #1
 8003174:	e7f9      	b.n	800316a <memset+0x4>
	...

08003178 <_puts_r>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	460e      	mov	r6, r1
 800317c:	4605      	mov	r5, r0
 800317e:	b118      	cbz	r0, 8003188 <_puts_r+0x10>
 8003180:	6983      	ldr	r3, [r0, #24]
 8003182:	b90b      	cbnz	r3, 8003188 <_puts_r+0x10>
 8003184:	f000 fa0c 	bl	80035a0 <__sinit>
 8003188:	69ab      	ldr	r3, [r5, #24]
 800318a:	68ac      	ldr	r4, [r5, #8]
 800318c:	b913      	cbnz	r3, 8003194 <_puts_r+0x1c>
 800318e:	4628      	mov	r0, r5
 8003190:	f000 fa06 	bl	80035a0 <__sinit>
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <_puts_r+0xac>)
 8003196:	429c      	cmp	r4, r3
 8003198:	d117      	bne.n	80031ca <_puts_r+0x52>
 800319a:	686c      	ldr	r4, [r5, #4]
 800319c:	89a3      	ldrh	r3, [r4, #12]
 800319e:	071b      	lsls	r3, r3, #28
 80031a0:	d51d      	bpl.n	80031de <_puts_r+0x66>
 80031a2:	6923      	ldr	r3, [r4, #16]
 80031a4:	b1db      	cbz	r3, 80031de <_puts_r+0x66>
 80031a6:	3e01      	subs	r6, #1
 80031a8:	68a3      	ldr	r3, [r4, #8]
 80031aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031ae:	3b01      	subs	r3, #1
 80031b0:	60a3      	str	r3, [r4, #8]
 80031b2:	b9e9      	cbnz	r1, 80031f0 <_puts_r+0x78>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da2e      	bge.n	8003216 <_puts_r+0x9e>
 80031b8:	4622      	mov	r2, r4
 80031ba:	210a      	movs	r1, #10
 80031bc:	4628      	mov	r0, r5
 80031be:	f000 f83f 	bl	8003240 <__swbuf_r>
 80031c2:	3001      	adds	r0, #1
 80031c4:	d011      	beq.n	80031ea <_puts_r+0x72>
 80031c6:	200a      	movs	r0, #10
 80031c8:	e011      	b.n	80031ee <_puts_r+0x76>
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <_puts_r+0xb0>)
 80031cc:	429c      	cmp	r4, r3
 80031ce:	d101      	bne.n	80031d4 <_puts_r+0x5c>
 80031d0:	68ac      	ldr	r4, [r5, #8]
 80031d2:	e7e3      	b.n	800319c <_puts_r+0x24>
 80031d4:	4b15      	ldr	r3, [pc, #84]	; (800322c <_puts_r+0xb4>)
 80031d6:	429c      	cmp	r4, r3
 80031d8:	bf08      	it	eq
 80031da:	68ec      	ldreq	r4, [r5, #12]
 80031dc:	e7de      	b.n	800319c <_puts_r+0x24>
 80031de:	4621      	mov	r1, r4
 80031e0:	4628      	mov	r0, r5
 80031e2:	f000 f87f 	bl	80032e4 <__swsetup_r>
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d0dd      	beq.n	80031a6 <_puts_r+0x2e>
 80031ea:	f04f 30ff 	mov.w	r0, #4294967295
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da04      	bge.n	80031fe <_puts_r+0x86>
 80031f4:	69a2      	ldr	r2, [r4, #24]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	dc06      	bgt.n	8003208 <_puts_r+0x90>
 80031fa:	290a      	cmp	r1, #10
 80031fc:	d004      	beq.n	8003208 <_puts_r+0x90>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	6022      	str	r2, [r4, #0]
 8003204:	7019      	strb	r1, [r3, #0]
 8003206:	e7cf      	b.n	80031a8 <_puts_r+0x30>
 8003208:	4622      	mov	r2, r4
 800320a:	4628      	mov	r0, r5
 800320c:	f000 f818 	bl	8003240 <__swbuf_r>
 8003210:	3001      	adds	r0, #1
 8003212:	d1c9      	bne.n	80031a8 <_puts_r+0x30>
 8003214:	e7e9      	b.n	80031ea <_puts_r+0x72>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	200a      	movs	r0, #10
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	6022      	str	r2, [r4, #0]
 800321e:	7018      	strb	r0, [r3, #0]
 8003220:	e7e5      	b.n	80031ee <_puts_r+0x76>
 8003222:	bf00      	nop
 8003224:	08003ad0 	.word	0x08003ad0
 8003228:	08003af0 	.word	0x08003af0
 800322c:	08003ab0 	.word	0x08003ab0

08003230 <puts>:
 8003230:	4b02      	ldr	r3, [pc, #8]	; (800323c <puts+0xc>)
 8003232:	4601      	mov	r1, r0
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	f7ff bf9f 	b.w	8003178 <_puts_r>
 800323a:	bf00      	nop
 800323c:	2000000c 	.word	0x2000000c

08003240 <__swbuf_r>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	460e      	mov	r6, r1
 8003244:	4614      	mov	r4, r2
 8003246:	4605      	mov	r5, r0
 8003248:	b118      	cbz	r0, 8003252 <__swbuf_r+0x12>
 800324a:	6983      	ldr	r3, [r0, #24]
 800324c:	b90b      	cbnz	r3, 8003252 <__swbuf_r+0x12>
 800324e:	f000 f9a7 	bl	80035a0 <__sinit>
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <__swbuf_r+0x98>)
 8003254:	429c      	cmp	r4, r3
 8003256:	d12a      	bne.n	80032ae <__swbuf_r+0x6e>
 8003258:	686c      	ldr	r4, [r5, #4]
 800325a:	69a3      	ldr	r3, [r4, #24]
 800325c:	60a3      	str	r3, [r4, #8]
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	071a      	lsls	r2, r3, #28
 8003262:	d52e      	bpl.n	80032c2 <__swbuf_r+0x82>
 8003264:	6923      	ldr	r3, [r4, #16]
 8003266:	b363      	cbz	r3, 80032c2 <__swbuf_r+0x82>
 8003268:	6923      	ldr	r3, [r4, #16]
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	1ac0      	subs	r0, r0, r3
 800326e:	6963      	ldr	r3, [r4, #20]
 8003270:	b2f6      	uxtb	r6, r6
 8003272:	4283      	cmp	r3, r0
 8003274:	4637      	mov	r7, r6
 8003276:	dc04      	bgt.n	8003282 <__swbuf_r+0x42>
 8003278:	4621      	mov	r1, r4
 800327a:	4628      	mov	r0, r5
 800327c:	f000 f926 	bl	80034cc <_fflush_r>
 8003280:	bb28      	cbnz	r0, 80032ce <__swbuf_r+0x8e>
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	3b01      	subs	r3, #1
 8003286:	60a3      	str	r3, [r4, #8]
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	6022      	str	r2, [r4, #0]
 800328e:	701e      	strb	r6, [r3, #0]
 8003290:	6963      	ldr	r3, [r4, #20]
 8003292:	3001      	adds	r0, #1
 8003294:	4283      	cmp	r3, r0
 8003296:	d004      	beq.n	80032a2 <__swbuf_r+0x62>
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	07db      	lsls	r3, r3, #31
 800329c:	d519      	bpl.n	80032d2 <__swbuf_r+0x92>
 800329e:	2e0a      	cmp	r6, #10
 80032a0:	d117      	bne.n	80032d2 <__swbuf_r+0x92>
 80032a2:	4621      	mov	r1, r4
 80032a4:	4628      	mov	r0, r5
 80032a6:	f000 f911 	bl	80034cc <_fflush_r>
 80032aa:	b190      	cbz	r0, 80032d2 <__swbuf_r+0x92>
 80032ac:	e00f      	b.n	80032ce <__swbuf_r+0x8e>
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <__swbuf_r+0x9c>)
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d101      	bne.n	80032b8 <__swbuf_r+0x78>
 80032b4:	68ac      	ldr	r4, [r5, #8]
 80032b6:	e7d0      	b.n	800325a <__swbuf_r+0x1a>
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <__swbuf_r+0xa0>)
 80032ba:	429c      	cmp	r4, r3
 80032bc:	bf08      	it	eq
 80032be:	68ec      	ldreq	r4, [r5, #12]
 80032c0:	e7cb      	b.n	800325a <__swbuf_r+0x1a>
 80032c2:	4621      	mov	r1, r4
 80032c4:	4628      	mov	r0, r5
 80032c6:	f000 f80d 	bl	80032e4 <__swsetup_r>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d0cc      	beq.n	8003268 <__swbuf_r+0x28>
 80032ce:	f04f 37ff 	mov.w	r7, #4294967295
 80032d2:	4638      	mov	r0, r7
 80032d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	08003ad0 	.word	0x08003ad0
 80032dc:	08003af0 	.word	0x08003af0
 80032e0:	08003ab0 	.word	0x08003ab0

080032e4 <__swsetup_r>:
 80032e4:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <__swsetup_r+0xcc>)
 80032e6:	b570      	push	{r4, r5, r6, lr}
 80032e8:	681d      	ldr	r5, [r3, #0]
 80032ea:	4606      	mov	r6, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	b125      	cbz	r5, 80032fa <__swsetup_r+0x16>
 80032f0:	69ab      	ldr	r3, [r5, #24]
 80032f2:	b913      	cbnz	r3, 80032fa <__swsetup_r+0x16>
 80032f4:	4628      	mov	r0, r5
 80032f6:	f000 f953 	bl	80035a0 <__sinit>
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <__swsetup_r+0xd0>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	d10f      	bne.n	8003320 <__swsetup_r+0x3c>
 8003300:	686c      	ldr	r4, [r5, #4]
 8003302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003306:	b29a      	uxth	r2, r3
 8003308:	0715      	lsls	r5, r2, #28
 800330a:	d42c      	bmi.n	8003366 <__swsetup_r+0x82>
 800330c:	06d0      	lsls	r0, r2, #27
 800330e:	d411      	bmi.n	8003334 <__swsetup_r+0x50>
 8003310:	2209      	movs	r2, #9
 8003312:	6032      	str	r2, [r6, #0]
 8003314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003318:	81a3      	strh	r3, [r4, #12]
 800331a:	f04f 30ff 	mov.w	r0, #4294967295
 800331e:	e03e      	b.n	800339e <__swsetup_r+0xba>
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <__swsetup_r+0xd4>)
 8003322:	429c      	cmp	r4, r3
 8003324:	d101      	bne.n	800332a <__swsetup_r+0x46>
 8003326:	68ac      	ldr	r4, [r5, #8]
 8003328:	e7eb      	b.n	8003302 <__swsetup_r+0x1e>
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <__swsetup_r+0xd8>)
 800332c:	429c      	cmp	r4, r3
 800332e:	bf08      	it	eq
 8003330:	68ec      	ldreq	r4, [r5, #12]
 8003332:	e7e6      	b.n	8003302 <__swsetup_r+0x1e>
 8003334:	0751      	lsls	r1, r2, #29
 8003336:	d512      	bpl.n	800335e <__swsetup_r+0x7a>
 8003338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800333a:	b141      	cbz	r1, 800334e <__swsetup_r+0x6a>
 800333c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003340:	4299      	cmp	r1, r3
 8003342:	d002      	beq.n	800334a <__swsetup_r+0x66>
 8003344:	4630      	mov	r0, r6
 8003346:	f000 fa19 	bl	800377c <_free_r>
 800334a:	2300      	movs	r3, #0
 800334c:	6363      	str	r3, [r4, #52]	; 0x34
 800334e:	89a3      	ldrh	r3, [r4, #12]
 8003350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003354:	81a3      	strh	r3, [r4, #12]
 8003356:	2300      	movs	r3, #0
 8003358:	6063      	str	r3, [r4, #4]
 800335a:	6923      	ldr	r3, [r4, #16]
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f043 0308 	orr.w	r3, r3, #8
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	b94b      	cbnz	r3, 800337e <__swsetup_r+0x9a>
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d003      	beq.n	800337e <__swsetup_r+0x9a>
 8003376:	4621      	mov	r1, r4
 8003378:	4630      	mov	r0, r6
 800337a:	f000 f9bf 	bl	80036fc <__smakebuf_r>
 800337e:	89a2      	ldrh	r2, [r4, #12]
 8003380:	f012 0301 	ands.w	r3, r2, #1
 8003384:	d00c      	beq.n	80033a0 <__swsetup_r+0xbc>
 8003386:	2300      	movs	r3, #0
 8003388:	60a3      	str	r3, [r4, #8]
 800338a:	6963      	ldr	r3, [r4, #20]
 800338c:	425b      	negs	r3, r3
 800338e:	61a3      	str	r3, [r4, #24]
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	b953      	cbnz	r3, 80033aa <__swsetup_r+0xc6>
 8003394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003398:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800339c:	d1ba      	bne.n	8003314 <__swsetup_r+0x30>
 800339e:	bd70      	pop	{r4, r5, r6, pc}
 80033a0:	0792      	lsls	r2, r2, #30
 80033a2:	bf58      	it	pl
 80033a4:	6963      	ldrpl	r3, [r4, #20]
 80033a6:	60a3      	str	r3, [r4, #8]
 80033a8:	e7f2      	b.n	8003390 <__swsetup_r+0xac>
 80033aa:	2000      	movs	r0, #0
 80033ac:	e7f7      	b.n	800339e <__swsetup_r+0xba>
 80033ae:	bf00      	nop
 80033b0:	2000000c 	.word	0x2000000c
 80033b4:	08003ad0 	.word	0x08003ad0
 80033b8:	08003af0 	.word	0x08003af0
 80033bc:	08003ab0 	.word	0x08003ab0

080033c0 <__sflush_r>:
 80033c0:	898a      	ldrh	r2, [r1, #12]
 80033c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c6:	4605      	mov	r5, r0
 80033c8:	0710      	lsls	r0, r2, #28
 80033ca:	460c      	mov	r4, r1
 80033cc:	d458      	bmi.n	8003480 <__sflush_r+0xc0>
 80033ce:	684b      	ldr	r3, [r1, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	dc05      	bgt.n	80033e0 <__sflush_r+0x20>
 80033d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	dc02      	bgt.n	80033e0 <__sflush_r+0x20>
 80033da:	2000      	movs	r0, #0
 80033dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033e2:	2e00      	cmp	r6, #0
 80033e4:	d0f9      	beq.n	80033da <__sflush_r+0x1a>
 80033e6:	2300      	movs	r3, #0
 80033e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033ec:	682f      	ldr	r7, [r5, #0]
 80033ee:	6a21      	ldr	r1, [r4, #32]
 80033f0:	602b      	str	r3, [r5, #0]
 80033f2:	d032      	beq.n	800345a <__sflush_r+0x9a>
 80033f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	075a      	lsls	r2, r3, #29
 80033fa:	d505      	bpl.n	8003408 <__sflush_r+0x48>
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	1ac0      	subs	r0, r0, r3
 8003400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003402:	b10b      	cbz	r3, 8003408 <__sflush_r+0x48>
 8003404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003406:	1ac0      	subs	r0, r0, r3
 8003408:	2300      	movs	r3, #0
 800340a:	4602      	mov	r2, r0
 800340c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800340e:	6a21      	ldr	r1, [r4, #32]
 8003410:	4628      	mov	r0, r5
 8003412:	47b0      	blx	r6
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	d106      	bne.n	8003428 <__sflush_r+0x68>
 800341a:	6829      	ldr	r1, [r5, #0]
 800341c:	291d      	cmp	r1, #29
 800341e:	d848      	bhi.n	80034b2 <__sflush_r+0xf2>
 8003420:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <__sflush_r+0x108>)
 8003422:	40ca      	lsrs	r2, r1
 8003424:	07d6      	lsls	r6, r2, #31
 8003426:	d544      	bpl.n	80034b2 <__sflush_r+0xf2>
 8003428:	2200      	movs	r2, #0
 800342a:	6062      	str	r2, [r4, #4]
 800342c:	04d9      	lsls	r1, r3, #19
 800342e:	6922      	ldr	r2, [r4, #16]
 8003430:	6022      	str	r2, [r4, #0]
 8003432:	d504      	bpl.n	800343e <__sflush_r+0x7e>
 8003434:	1c42      	adds	r2, r0, #1
 8003436:	d101      	bne.n	800343c <__sflush_r+0x7c>
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	b903      	cbnz	r3, 800343e <__sflush_r+0x7e>
 800343c:	6560      	str	r0, [r4, #84]	; 0x54
 800343e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003440:	602f      	str	r7, [r5, #0]
 8003442:	2900      	cmp	r1, #0
 8003444:	d0c9      	beq.n	80033da <__sflush_r+0x1a>
 8003446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800344a:	4299      	cmp	r1, r3
 800344c:	d002      	beq.n	8003454 <__sflush_r+0x94>
 800344e:	4628      	mov	r0, r5
 8003450:	f000 f994 	bl	800377c <_free_r>
 8003454:	2000      	movs	r0, #0
 8003456:	6360      	str	r0, [r4, #52]	; 0x34
 8003458:	e7c0      	b.n	80033dc <__sflush_r+0x1c>
 800345a:	2301      	movs	r3, #1
 800345c:	4628      	mov	r0, r5
 800345e:	47b0      	blx	r6
 8003460:	1c41      	adds	r1, r0, #1
 8003462:	d1c8      	bne.n	80033f6 <__sflush_r+0x36>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0c5      	beq.n	80033f6 <__sflush_r+0x36>
 800346a:	2b1d      	cmp	r3, #29
 800346c:	d001      	beq.n	8003472 <__sflush_r+0xb2>
 800346e:	2b16      	cmp	r3, #22
 8003470:	d101      	bne.n	8003476 <__sflush_r+0xb6>
 8003472:	602f      	str	r7, [r5, #0]
 8003474:	e7b1      	b.n	80033da <__sflush_r+0x1a>
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	e7ad      	b.n	80033dc <__sflush_r+0x1c>
 8003480:	690f      	ldr	r7, [r1, #16]
 8003482:	2f00      	cmp	r7, #0
 8003484:	d0a9      	beq.n	80033da <__sflush_r+0x1a>
 8003486:	0793      	lsls	r3, r2, #30
 8003488:	680e      	ldr	r6, [r1, #0]
 800348a:	bf08      	it	eq
 800348c:	694b      	ldreq	r3, [r1, #20]
 800348e:	600f      	str	r7, [r1, #0]
 8003490:	bf18      	it	ne
 8003492:	2300      	movne	r3, #0
 8003494:	eba6 0807 	sub.w	r8, r6, r7
 8003498:	608b      	str	r3, [r1, #8]
 800349a:	f1b8 0f00 	cmp.w	r8, #0
 800349e:	dd9c      	ble.n	80033da <__sflush_r+0x1a>
 80034a0:	4643      	mov	r3, r8
 80034a2:	463a      	mov	r2, r7
 80034a4:	6a21      	ldr	r1, [r4, #32]
 80034a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b0      	blx	r6
 80034ac:	2800      	cmp	r0, #0
 80034ae:	dc06      	bgt.n	80034be <__sflush_r+0xfe>
 80034b0:	89a3      	ldrh	r3, [r4, #12]
 80034b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	e78e      	b.n	80033dc <__sflush_r+0x1c>
 80034be:	4407      	add	r7, r0
 80034c0:	eba8 0800 	sub.w	r8, r8, r0
 80034c4:	e7e9      	b.n	800349a <__sflush_r+0xda>
 80034c6:	bf00      	nop
 80034c8:	20400001 	.word	0x20400001

080034cc <_fflush_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	690b      	ldr	r3, [r1, #16]
 80034d0:	4605      	mov	r5, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	b1db      	cbz	r3, 800350e <_fflush_r+0x42>
 80034d6:	b118      	cbz	r0, 80034e0 <_fflush_r+0x14>
 80034d8:	6983      	ldr	r3, [r0, #24]
 80034da:	b90b      	cbnz	r3, 80034e0 <_fflush_r+0x14>
 80034dc:	f000 f860 	bl	80035a0 <__sinit>
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <_fflush_r+0x48>)
 80034e2:	429c      	cmp	r4, r3
 80034e4:	d109      	bne.n	80034fa <_fflush_r+0x2e>
 80034e6:	686c      	ldr	r4, [r5, #4]
 80034e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ec:	b17b      	cbz	r3, 800350e <_fflush_r+0x42>
 80034ee:	4621      	mov	r1, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034f6:	f7ff bf63 	b.w	80033c0 <__sflush_r>
 80034fa:	4b07      	ldr	r3, [pc, #28]	; (8003518 <_fflush_r+0x4c>)
 80034fc:	429c      	cmp	r4, r3
 80034fe:	d101      	bne.n	8003504 <_fflush_r+0x38>
 8003500:	68ac      	ldr	r4, [r5, #8]
 8003502:	e7f1      	b.n	80034e8 <_fflush_r+0x1c>
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <_fflush_r+0x50>)
 8003506:	429c      	cmp	r4, r3
 8003508:	bf08      	it	eq
 800350a:	68ec      	ldreq	r4, [r5, #12]
 800350c:	e7ec      	b.n	80034e8 <_fflush_r+0x1c>
 800350e:	2000      	movs	r0, #0
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	08003ad0 	.word	0x08003ad0
 8003518:	08003af0 	.word	0x08003af0
 800351c:	08003ab0 	.word	0x08003ab0

08003520 <std>:
 8003520:	2300      	movs	r3, #0
 8003522:	b510      	push	{r4, lr}
 8003524:	4604      	mov	r4, r0
 8003526:	e9c0 3300 	strd	r3, r3, [r0]
 800352a:	6083      	str	r3, [r0, #8]
 800352c:	8181      	strh	r1, [r0, #12]
 800352e:	6643      	str	r3, [r0, #100]	; 0x64
 8003530:	81c2      	strh	r2, [r0, #14]
 8003532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003536:	6183      	str	r3, [r0, #24]
 8003538:	4619      	mov	r1, r3
 800353a:	2208      	movs	r2, #8
 800353c:	305c      	adds	r0, #92	; 0x5c
 800353e:	f7ff fe12 	bl	8003166 <memset>
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <std+0x38>)
 8003544:	6263      	str	r3, [r4, #36]	; 0x24
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <std+0x3c>)
 8003548:	62a3      	str	r3, [r4, #40]	; 0x28
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <std+0x40>)
 800354c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <std+0x44>)
 8003550:	6224      	str	r4, [r4, #32]
 8003552:	6323      	str	r3, [r4, #48]	; 0x30
 8003554:	bd10      	pop	{r4, pc}
 8003556:	bf00      	nop
 8003558:	080038ed 	.word	0x080038ed
 800355c:	0800390f 	.word	0x0800390f
 8003560:	08003947 	.word	0x08003947
 8003564:	0800396b 	.word	0x0800396b

08003568 <_cleanup_r>:
 8003568:	4901      	ldr	r1, [pc, #4]	; (8003570 <_cleanup_r+0x8>)
 800356a:	f000 b885 	b.w	8003678 <_fwalk_reent>
 800356e:	bf00      	nop
 8003570:	080034cd 	.word	0x080034cd

08003574 <__sfmoreglue>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	1e4a      	subs	r2, r1, #1
 8003578:	2568      	movs	r5, #104	; 0x68
 800357a:	4355      	muls	r5, r2
 800357c:	460e      	mov	r6, r1
 800357e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003582:	f000 f949 	bl	8003818 <_malloc_r>
 8003586:	4604      	mov	r4, r0
 8003588:	b140      	cbz	r0, 800359c <__sfmoreglue+0x28>
 800358a:	2100      	movs	r1, #0
 800358c:	e9c0 1600 	strd	r1, r6, [r0]
 8003590:	300c      	adds	r0, #12
 8003592:	60a0      	str	r0, [r4, #8]
 8003594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003598:	f7ff fde5 	bl	8003166 <memset>
 800359c:	4620      	mov	r0, r4
 800359e:	bd70      	pop	{r4, r5, r6, pc}

080035a0 <__sinit>:
 80035a0:	6983      	ldr	r3, [r0, #24]
 80035a2:	b510      	push	{r4, lr}
 80035a4:	4604      	mov	r4, r0
 80035a6:	bb33      	cbnz	r3, 80035f6 <__sinit+0x56>
 80035a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80035ac:	6503      	str	r3, [r0, #80]	; 0x50
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <__sinit+0x58>)
 80035b0:	4a12      	ldr	r2, [pc, #72]	; (80035fc <__sinit+0x5c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6282      	str	r2, [r0, #40]	; 0x28
 80035b6:	4298      	cmp	r0, r3
 80035b8:	bf04      	itt	eq
 80035ba:	2301      	moveq	r3, #1
 80035bc:	6183      	streq	r3, [r0, #24]
 80035be:	f000 f81f 	bl	8003600 <__sfp>
 80035c2:	6060      	str	r0, [r4, #4]
 80035c4:	4620      	mov	r0, r4
 80035c6:	f000 f81b 	bl	8003600 <__sfp>
 80035ca:	60a0      	str	r0, [r4, #8]
 80035cc:	4620      	mov	r0, r4
 80035ce:	f000 f817 	bl	8003600 <__sfp>
 80035d2:	2200      	movs	r2, #0
 80035d4:	60e0      	str	r0, [r4, #12]
 80035d6:	2104      	movs	r1, #4
 80035d8:	6860      	ldr	r0, [r4, #4]
 80035da:	f7ff ffa1 	bl	8003520 <std>
 80035de:	2201      	movs	r2, #1
 80035e0:	2109      	movs	r1, #9
 80035e2:	68a0      	ldr	r0, [r4, #8]
 80035e4:	f7ff ff9c 	bl	8003520 <std>
 80035e8:	2202      	movs	r2, #2
 80035ea:	2112      	movs	r1, #18
 80035ec:	68e0      	ldr	r0, [r4, #12]
 80035ee:	f7ff ff97 	bl	8003520 <std>
 80035f2:	2301      	movs	r3, #1
 80035f4:	61a3      	str	r3, [r4, #24]
 80035f6:	bd10      	pop	{r4, pc}
 80035f8:	08003aac 	.word	0x08003aac
 80035fc:	08003569 	.word	0x08003569

08003600 <__sfp>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <__sfp+0x70>)
 8003604:	681e      	ldr	r6, [r3, #0]
 8003606:	69b3      	ldr	r3, [r6, #24]
 8003608:	4607      	mov	r7, r0
 800360a:	b913      	cbnz	r3, 8003612 <__sfp+0x12>
 800360c:	4630      	mov	r0, r6
 800360e:	f7ff ffc7 	bl	80035a0 <__sinit>
 8003612:	3648      	adds	r6, #72	; 0x48
 8003614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003618:	3b01      	subs	r3, #1
 800361a:	d503      	bpl.n	8003624 <__sfp+0x24>
 800361c:	6833      	ldr	r3, [r6, #0]
 800361e:	b133      	cbz	r3, 800362e <__sfp+0x2e>
 8003620:	6836      	ldr	r6, [r6, #0]
 8003622:	e7f7      	b.n	8003614 <__sfp+0x14>
 8003624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003628:	b16d      	cbz	r5, 8003646 <__sfp+0x46>
 800362a:	3468      	adds	r4, #104	; 0x68
 800362c:	e7f4      	b.n	8003618 <__sfp+0x18>
 800362e:	2104      	movs	r1, #4
 8003630:	4638      	mov	r0, r7
 8003632:	f7ff ff9f 	bl	8003574 <__sfmoreglue>
 8003636:	6030      	str	r0, [r6, #0]
 8003638:	2800      	cmp	r0, #0
 800363a:	d1f1      	bne.n	8003620 <__sfp+0x20>
 800363c:	230c      	movs	r3, #12
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4604      	mov	r4, r0
 8003642:	4620      	mov	r0, r4
 8003644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <__sfp+0x74>)
 8003648:	6665      	str	r5, [r4, #100]	; 0x64
 800364a:	e9c4 5500 	strd	r5, r5, [r4]
 800364e:	60a5      	str	r5, [r4, #8]
 8003650:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003654:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003658:	2208      	movs	r2, #8
 800365a:	4629      	mov	r1, r5
 800365c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003660:	f7ff fd81 	bl	8003166 <memset>
 8003664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800366c:	e7e9      	b.n	8003642 <__sfp+0x42>
 800366e:	bf00      	nop
 8003670:	08003aac 	.word	0x08003aac
 8003674:	ffff0001 	.word	0xffff0001

08003678 <_fwalk_reent>:
 8003678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800367c:	4680      	mov	r8, r0
 800367e:	4689      	mov	r9, r1
 8003680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003684:	2600      	movs	r6, #0
 8003686:	b914      	cbnz	r4, 800368e <_fwalk_reent+0x16>
 8003688:	4630      	mov	r0, r6
 800368a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003692:	3f01      	subs	r7, #1
 8003694:	d501      	bpl.n	800369a <_fwalk_reent+0x22>
 8003696:	6824      	ldr	r4, [r4, #0]
 8003698:	e7f5      	b.n	8003686 <_fwalk_reent+0xe>
 800369a:	89ab      	ldrh	r3, [r5, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d907      	bls.n	80036b0 <_fwalk_reent+0x38>
 80036a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036a4:	3301      	adds	r3, #1
 80036a6:	d003      	beq.n	80036b0 <_fwalk_reent+0x38>
 80036a8:	4629      	mov	r1, r5
 80036aa:	4640      	mov	r0, r8
 80036ac:	47c8      	blx	r9
 80036ae:	4306      	orrs	r6, r0
 80036b0:	3568      	adds	r5, #104	; 0x68
 80036b2:	e7ee      	b.n	8003692 <_fwalk_reent+0x1a>

080036b4 <__swhatbuf_r>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	460e      	mov	r6, r1
 80036b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036bc:	2900      	cmp	r1, #0
 80036be:	b096      	sub	sp, #88	; 0x58
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	da07      	bge.n	80036d6 <__swhatbuf_r+0x22>
 80036c6:	2300      	movs	r3, #0
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	89b3      	ldrh	r3, [r6, #12]
 80036cc:	061a      	lsls	r2, r3, #24
 80036ce:	d410      	bmi.n	80036f2 <__swhatbuf_r+0x3e>
 80036d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d4:	e00e      	b.n	80036f4 <__swhatbuf_r+0x40>
 80036d6:	466a      	mov	r2, sp
 80036d8:	f000 f96e 	bl	80039b8 <_fstat_r>
 80036dc:	2800      	cmp	r0, #0
 80036de:	dbf2      	blt.n	80036c6 <__swhatbuf_r+0x12>
 80036e0:	9a01      	ldr	r2, [sp, #4]
 80036e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036ea:	425a      	negs	r2, r3
 80036ec:	415a      	adcs	r2, r3
 80036ee:	602a      	str	r2, [r5, #0]
 80036f0:	e7ee      	b.n	80036d0 <__swhatbuf_r+0x1c>
 80036f2:	2340      	movs	r3, #64	; 0x40
 80036f4:	2000      	movs	r0, #0
 80036f6:	6023      	str	r3, [r4, #0]
 80036f8:	b016      	add	sp, #88	; 0x58
 80036fa:	bd70      	pop	{r4, r5, r6, pc}

080036fc <__smakebuf_r>:
 80036fc:	898b      	ldrh	r3, [r1, #12]
 80036fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003700:	079d      	lsls	r5, r3, #30
 8003702:	4606      	mov	r6, r0
 8003704:	460c      	mov	r4, r1
 8003706:	d507      	bpl.n	8003718 <__smakebuf_r+0x1c>
 8003708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800370c:	6023      	str	r3, [r4, #0]
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	2301      	movs	r3, #1
 8003712:	6163      	str	r3, [r4, #20]
 8003714:	b002      	add	sp, #8
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	ab01      	add	r3, sp, #4
 800371a:	466a      	mov	r2, sp
 800371c:	f7ff ffca 	bl	80036b4 <__swhatbuf_r>
 8003720:	9900      	ldr	r1, [sp, #0]
 8003722:	4605      	mov	r5, r0
 8003724:	4630      	mov	r0, r6
 8003726:	f000 f877 	bl	8003818 <_malloc_r>
 800372a:	b948      	cbnz	r0, 8003740 <__smakebuf_r+0x44>
 800372c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003730:	059a      	lsls	r2, r3, #22
 8003732:	d4ef      	bmi.n	8003714 <__smakebuf_r+0x18>
 8003734:	f023 0303 	bic.w	r3, r3, #3
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	e7e3      	b.n	8003708 <__smakebuf_r+0xc>
 8003740:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <__smakebuf_r+0x7c>)
 8003742:	62b3      	str	r3, [r6, #40]	; 0x28
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	6020      	str	r0, [r4, #0]
 8003748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374c:	81a3      	strh	r3, [r4, #12]
 800374e:	9b00      	ldr	r3, [sp, #0]
 8003750:	6163      	str	r3, [r4, #20]
 8003752:	9b01      	ldr	r3, [sp, #4]
 8003754:	6120      	str	r0, [r4, #16]
 8003756:	b15b      	cbz	r3, 8003770 <__smakebuf_r+0x74>
 8003758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800375c:	4630      	mov	r0, r6
 800375e:	f000 f93d 	bl	80039dc <_isatty_r>
 8003762:	b128      	cbz	r0, 8003770 <__smakebuf_r+0x74>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	431d      	orrs	r5, r3
 8003774:	81a5      	strh	r5, [r4, #12]
 8003776:	e7cd      	b.n	8003714 <__smakebuf_r+0x18>
 8003778:	08003569 	.word	0x08003569

0800377c <_free_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	4605      	mov	r5, r0
 8003780:	2900      	cmp	r1, #0
 8003782:	d045      	beq.n	8003810 <_free_r+0x94>
 8003784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003788:	1f0c      	subs	r4, r1, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfb8      	it	lt
 800378e:	18e4      	addlt	r4, r4, r3
 8003790:	f000 f946 	bl	8003a20 <__malloc_lock>
 8003794:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <_free_r+0x98>)
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	4610      	mov	r0, r2
 800379a:	b933      	cbnz	r3, 80037aa <_free_r+0x2e>
 800379c:	6063      	str	r3, [r4, #4]
 800379e:	6014      	str	r4, [r2, #0]
 80037a0:	4628      	mov	r0, r5
 80037a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037a6:	f000 b93c 	b.w	8003a22 <__malloc_unlock>
 80037aa:	42a3      	cmp	r3, r4
 80037ac:	d90c      	bls.n	80037c8 <_free_r+0x4c>
 80037ae:	6821      	ldr	r1, [r4, #0]
 80037b0:	1862      	adds	r2, r4, r1
 80037b2:	4293      	cmp	r3, r2
 80037b4:	bf04      	itt	eq
 80037b6:	681a      	ldreq	r2, [r3, #0]
 80037b8:	685b      	ldreq	r3, [r3, #4]
 80037ba:	6063      	str	r3, [r4, #4]
 80037bc:	bf04      	itt	eq
 80037be:	1852      	addeq	r2, r2, r1
 80037c0:	6022      	streq	r2, [r4, #0]
 80037c2:	6004      	str	r4, [r0, #0]
 80037c4:	e7ec      	b.n	80037a0 <_free_r+0x24>
 80037c6:	4613      	mov	r3, r2
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	b10a      	cbz	r2, 80037d0 <_free_r+0x54>
 80037cc:	42a2      	cmp	r2, r4
 80037ce:	d9fa      	bls.n	80037c6 <_free_r+0x4a>
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	1858      	adds	r0, r3, r1
 80037d4:	42a0      	cmp	r0, r4
 80037d6:	d10b      	bne.n	80037f0 <_free_r+0x74>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	4401      	add	r1, r0
 80037dc:	1858      	adds	r0, r3, r1
 80037de:	4282      	cmp	r2, r0
 80037e0:	6019      	str	r1, [r3, #0]
 80037e2:	d1dd      	bne.n	80037a0 <_free_r+0x24>
 80037e4:	6810      	ldr	r0, [r2, #0]
 80037e6:	6852      	ldr	r2, [r2, #4]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	4401      	add	r1, r0
 80037ec:	6019      	str	r1, [r3, #0]
 80037ee:	e7d7      	b.n	80037a0 <_free_r+0x24>
 80037f0:	d902      	bls.n	80037f8 <_free_r+0x7c>
 80037f2:	230c      	movs	r3, #12
 80037f4:	602b      	str	r3, [r5, #0]
 80037f6:	e7d3      	b.n	80037a0 <_free_r+0x24>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	1821      	adds	r1, r4, r0
 80037fc:	428a      	cmp	r2, r1
 80037fe:	bf04      	itt	eq
 8003800:	6811      	ldreq	r1, [r2, #0]
 8003802:	6852      	ldreq	r2, [r2, #4]
 8003804:	6062      	str	r2, [r4, #4]
 8003806:	bf04      	itt	eq
 8003808:	1809      	addeq	r1, r1, r0
 800380a:	6021      	streq	r1, [r4, #0]
 800380c:	605c      	str	r4, [r3, #4]
 800380e:	e7c7      	b.n	80037a0 <_free_r+0x24>
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	bf00      	nop
 8003814:	20004580 	.word	0x20004580

08003818 <_malloc_r>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	1ccd      	adds	r5, r1, #3
 800381c:	f025 0503 	bic.w	r5, r5, #3
 8003820:	3508      	adds	r5, #8
 8003822:	2d0c      	cmp	r5, #12
 8003824:	bf38      	it	cc
 8003826:	250c      	movcc	r5, #12
 8003828:	2d00      	cmp	r5, #0
 800382a:	4606      	mov	r6, r0
 800382c:	db01      	blt.n	8003832 <_malloc_r+0x1a>
 800382e:	42a9      	cmp	r1, r5
 8003830:	d903      	bls.n	800383a <_malloc_r+0x22>
 8003832:	230c      	movs	r3, #12
 8003834:	6033      	str	r3, [r6, #0]
 8003836:	2000      	movs	r0, #0
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	f000 f8f1 	bl	8003a20 <__malloc_lock>
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <_malloc_r+0xac>)
 8003840:	6814      	ldr	r4, [r2, #0]
 8003842:	4621      	mov	r1, r4
 8003844:	b991      	cbnz	r1, 800386c <_malloc_r+0x54>
 8003846:	4c20      	ldr	r4, [pc, #128]	; (80038c8 <_malloc_r+0xb0>)
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	b91b      	cbnz	r3, 8003854 <_malloc_r+0x3c>
 800384c:	4630      	mov	r0, r6
 800384e:	f000 f83d 	bl	80038cc <_sbrk_r>
 8003852:	6020      	str	r0, [r4, #0]
 8003854:	4629      	mov	r1, r5
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f838 	bl	80038cc <_sbrk_r>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d124      	bne.n	80038aa <_malloc_r+0x92>
 8003860:	230c      	movs	r3, #12
 8003862:	6033      	str	r3, [r6, #0]
 8003864:	4630      	mov	r0, r6
 8003866:	f000 f8dc 	bl	8003a22 <__malloc_unlock>
 800386a:	e7e4      	b.n	8003836 <_malloc_r+0x1e>
 800386c:	680b      	ldr	r3, [r1, #0]
 800386e:	1b5b      	subs	r3, r3, r5
 8003870:	d418      	bmi.n	80038a4 <_malloc_r+0x8c>
 8003872:	2b0b      	cmp	r3, #11
 8003874:	d90f      	bls.n	8003896 <_malloc_r+0x7e>
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	50cd      	str	r5, [r1, r3]
 800387a:	18cc      	adds	r4, r1, r3
 800387c:	4630      	mov	r0, r6
 800387e:	f000 f8d0 	bl	8003a22 <__malloc_unlock>
 8003882:	f104 000b 	add.w	r0, r4, #11
 8003886:	1d23      	adds	r3, r4, #4
 8003888:	f020 0007 	bic.w	r0, r0, #7
 800388c:	1ac3      	subs	r3, r0, r3
 800388e:	d0d3      	beq.n	8003838 <_malloc_r+0x20>
 8003890:	425a      	negs	r2, r3
 8003892:	50e2      	str	r2, [r4, r3]
 8003894:	e7d0      	b.n	8003838 <_malloc_r+0x20>
 8003896:	428c      	cmp	r4, r1
 8003898:	684b      	ldr	r3, [r1, #4]
 800389a:	bf16      	itet	ne
 800389c:	6063      	strne	r3, [r4, #4]
 800389e:	6013      	streq	r3, [r2, #0]
 80038a0:	460c      	movne	r4, r1
 80038a2:	e7eb      	b.n	800387c <_malloc_r+0x64>
 80038a4:	460c      	mov	r4, r1
 80038a6:	6849      	ldr	r1, [r1, #4]
 80038a8:	e7cc      	b.n	8003844 <_malloc_r+0x2c>
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d005      	beq.n	80038c0 <_malloc_r+0xa8>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4630      	mov	r0, r6
 80038b8:	f000 f808 	bl	80038cc <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d0cf      	beq.n	8003860 <_malloc_r+0x48>
 80038c0:	6025      	str	r5, [r4, #0]
 80038c2:	e7db      	b.n	800387c <_malloc_r+0x64>
 80038c4:	20004580 	.word	0x20004580
 80038c8:	20004584 	.word	0x20004584

080038cc <_sbrk_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4c06      	ldr	r4, [pc, #24]	; (80038e8 <_sbrk_r+0x1c>)
 80038d0:	2300      	movs	r3, #0
 80038d2:	4605      	mov	r5, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	f7fc fe08 	bl	80004ec <_sbrk>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_sbrk_r+0x1a>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_sbrk_r+0x1a>
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	200045cc 	.word	0x200045cc

080038ec <__sread>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	460c      	mov	r4, r1
 80038f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f4:	f000 f896 	bl	8003a24 <_read_r>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	bfab      	itete	ge
 80038fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003900:	181b      	addge	r3, r3, r0
 8003902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003906:	bfac      	ite	ge
 8003908:	6563      	strge	r3, [r4, #84]	; 0x54
 800390a:	81a3      	strhlt	r3, [r4, #12]
 800390c:	bd10      	pop	{r4, pc}

0800390e <__swrite>:
 800390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003912:	461f      	mov	r7, r3
 8003914:	898b      	ldrh	r3, [r1, #12]
 8003916:	05db      	lsls	r3, r3, #23
 8003918:	4605      	mov	r5, r0
 800391a:	460c      	mov	r4, r1
 800391c:	4616      	mov	r6, r2
 800391e:	d505      	bpl.n	800392c <__swrite+0x1e>
 8003920:	2302      	movs	r3, #2
 8003922:	2200      	movs	r2, #0
 8003924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003928:	f000 f868 	bl	80039fc <_lseek_r>
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	4632      	mov	r2, r6
 800393a:	463b      	mov	r3, r7
 800393c:	4628      	mov	r0, r5
 800393e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	f000 b817 	b.w	8003974 <_write_r>

08003946 <__sseek>:
 8003946:	b510      	push	{r4, lr}
 8003948:	460c      	mov	r4, r1
 800394a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394e:	f000 f855 	bl	80039fc <_lseek_r>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	bf15      	itete	ne
 8003958:	6560      	strne	r0, [r4, #84]	; 0x54
 800395a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800395e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003962:	81a3      	strheq	r3, [r4, #12]
 8003964:	bf18      	it	ne
 8003966:	81a3      	strhne	r3, [r4, #12]
 8003968:	bd10      	pop	{r4, pc}

0800396a <__sclose>:
 800396a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396e:	f000 b813 	b.w	8003998 <_close_r>
	...

08003974 <_write_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4c07      	ldr	r4, [pc, #28]	; (8003994 <_write_r+0x20>)
 8003978:	4605      	mov	r5, r0
 800397a:	4608      	mov	r0, r1
 800397c:	4611      	mov	r1, r2
 800397e:	2200      	movs	r2, #0
 8003980:	6022      	str	r2, [r4, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f7fc fc7f 	bl	8000286 <_write>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_write_r+0x1e>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	b103      	cbz	r3, 8003992 <_write_r+0x1e>
 8003990:	602b      	str	r3, [r5, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	200045cc 	.word	0x200045cc

08003998 <_close_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4c06      	ldr	r4, [pc, #24]	; (80039b4 <_close_r+0x1c>)
 800399c:	2300      	movs	r3, #0
 800399e:	4605      	mov	r5, r0
 80039a0:	4608      	mov	r0, r1
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	f7fc fd6e 	bl	8000484 <_close>
 80039a8:	1c43      	adds	r3, r0, #1
 80039aa:	d102      	bne.n	80039b2 <_close_r+0x1a>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	b103      	cbz	r3, 80039b2 <_close_r+0x1a>
 80039b0:	602b      	str	r3, [r5, #0]
 80039b2:	bd38      	pop	{r3, r4, r5, pc}
 80039b4:	200045cc 	.word	0x200045cc

080039b8 <_fstat_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4c07      	ldr	r4, [pc, #28]	; (80039d8 <_fstat_r+0x20>)
 80039bc:	2300      	movs	r3, #0
 80039be:	4605      	mov	r5, r0
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	f7fc fd69 	bl	800049c <_fstat>
 80039ca:	1c43      	adds	r3, r0, #1
 80039cc:	d102      	bne.n	80039d4 <_fstat_r+0x1c>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	b103      	cbz	r3, 80039d4 <_fstat_r+0x1c>
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	bd38      	pop	{r3, r4, r5, pc}
 80039d6:	bf00      	nop
 80039d8:	200045cc 	.word	0x200045cc

080039dc <_isatty_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	4c06      	ldr	r4, [pc, #24]	; (80039f8 <_isatty_r+0x1c>)
 80039e0:	2300      	movs	r3, #0
 80039e2:	4605      	mov	r5, r0
 80039e4:	4608      	mov	r0, r1
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	f7fc fd68 	bl	80004bc <_isatty>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_isatty_r+0x1a>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_isatty_r+0x1a>
 80039f4:	602b      	str	r3, [r5, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	200045cc 	.word	0x200045cc

080039fc <_lseek_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4c07      	ldr	r4, [pc, #28]	; (8003a1c <_lseek_r+0x20>)
 8003a00:	4605      	mov	r5, r0
 8003a02:	4608      	mov	r0, r1
 8003a04:	4611      	mov	r1, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	6022      	str	r2, [r4, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f7fc fd61 	bl	80004d2 <_lseek>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d102      	bne.n	8003a1a <_lseek_r+0x1e>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	b103      	cbz	r3, 8003a1a <_lseek_r+0x1e>
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
 8003a1c:	200045cc 	.word	0x200045cc

08003a20 <__malloc_lock>:
 8003a20:	4770      	bx	lr

08003a22 <__malloc_unlock>:
 8003a22:	4770      	bx	lr

08003a24 <_read_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4c07      	ldr	r4, [pc, #28]	; (8003a44 <_read_r+0x20>)
 8003a28:	4605      	mov	r5, r0
 8003a2a:	4608      	mov	r0, r1
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	6022      	str	r2, [r4, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f7fc fd09 	bl	800044a <_read>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_read_r+0x1e>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_read_r+0x1e>
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	200045cc 	.word	0x200045cc

08003a48 <_init>:
 8003a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4a:	bf00      	nop
 8003a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4e:	bc08      	pop	{r3}
 8003a50:	469e      	mov	lr, r3
 8003a52:	4770      	bx	lr

08003a54 <_fini>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr
